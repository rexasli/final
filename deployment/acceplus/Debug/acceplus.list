
acceplus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d0b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000254c  0801d240  0801d240  0002d240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f78c  0801f78c  00032a98  2**0
                  CONTENTS
  4 .ARM          00000008  0801f78c  0801f78c  0002f78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f794  0801f794  00032a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801f794  0801f794  0002f794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f79c  0801f79c  0002f79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a98  20000000  0801f7a0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00032a98  2**0
                  CONTENTS
 10 .bss          00002204  20002a98  20002a98  00032a98  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c9c  20004c9c  00032a98  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00032a98  2**0
                  CONTENTS, READONLY
 13 .debug_info   00109c3d  00000000  00000000  00032ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00010d06  00000000  00000000  0013c705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004e38  00000000  00000000  0014d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004c00  00000000  00000000  00152248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033362  00000000  00000000  00156e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00052de2  00000000  00000000  0018a1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018d858  00000000  00000000  001dcf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0036a7e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00017810  00000000  00000000  0036a834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002a98 	.word	0x20002a98
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d228 	.word	0x0801d228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002a9c 	.word	0x20002a9c
 80001cc:	0801d228 	.word	0x0801d228

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:
static float __Z_Scale = 1.0f;
//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f004 fd23 	bl	8005b10 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f006 fcc5 	bl	8007a62 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f006 fcbe 	bl	8007a62 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f004 fd10 	bl	8005b10 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	20002ab4 	.word	0x20002ab4

08001100 <_Z14LIS3DSH_ReadIOhPhh>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001120:	f004 fcf6 	bl	8005b10 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800112e:	f006 fc98 	bl	8007a62 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800113e:	f006 fdcc 	bl	8007cda <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001148:	f004 fce2 	bl	8005b10 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	da0c      	bge.n	8001176 <_Z14LIS3DSH_ReadIOhPhh+0x76>
	{
		dataR[i] = spiBuf[i];
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	3210      	adds	r2, #16
 8001166:	443a      	add	r2, r7
 8001168:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800116c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7ec      	b.n	8001150 <_Z14LIS3DSH_ReadIOhPhh+0x50>
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	20002ab4 	.word	0x20002ab4

08001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:
//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4855      	ldr	r0, [pc, #340]	; (80012f0 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 800119c:	f019 f99c 	bl	801a4d8 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2020      	movs	r0, #32
 80011ce:	f7ff ff6d 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2024      	movs	r0, #36	; 0x24
 8001204:	f7ff ff52 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001210:	2388      	movs	r3, #136	; 0x88
 8001212:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	2023      	movs	r0, #35	; 0x23
 800121e:	f7ff ff45 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d858      	bhi.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012dd 	.word	0x080012dd
 8001238:	080012dd 	.word	0x080012dd
 800123c:	080012dd 	.word	0x080012dd
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012dd 	.word	0x080012dd
 800125c:	080012dd 	.word	0x080012dd
 8001260:	080012dd 	.word	0x080012dd
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012dd 	.word	0x080012dd
 800127c:	080012dd 	.word	0x080012dd
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012dd 	.word	0x080012dd
 80012b0:	080012d5 	.word	0x080012d5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e00f      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e00b      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 80012c8:	601a      	str	r2, [r3, #0]
			break;
 80012ca:	e007      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	e003      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 80012d8:	601a      	str	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 80012e2:	f004 fc15 	bl	8005b10 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20002ab4 	.word	0x20002ab4
 80012f4:	20000000 	.word	0x20000000
 80012f8:	3d75c28f 	.word	0x3d75c28f
 80012fc:	3df5c28f 	.word	0x3df5c28f
 8001300:	3e3851ec 	.word	0x3e3851ec
 8001304:	3e75c28f 	.word	0x3e75c28f
 8001308:	3f3ae148 	.word	0x3f3ae148
 800130c:	40021000 	.word	0x40021000

08001310 <_Z18LIS3DSH_GetDataRawv>:

//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2202      	movs	r2, #2
 800131e:	4619      	mov	r1, r3
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff feed 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	801a      	strh	r2, [r3, #0]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2202      	movs	r2, #2
 8001342:	4619      	mov	r1, r3
 8001344:	202a      	movs	r0, #42	; 0x2a
 8001346:	f7ff fedb 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2202      	movs	r2, #2
 8001366:	4619      	mov	r1, r3
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fec9 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29a      	uxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]

	return tempDataRaw;
 8001384:	bf00      	nop

}
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z21LIS3DSH_GetDataScaledv>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb8 	bl	8001310 <_Z18LIS3DSH_GetDataRawv>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_Z21LIS3DSH_GetDataScaledv+0xe8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <_Z21LIS3DSH_GetDataScaledv+0xf0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80013d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z21LIS3DSH_GetDataScaledv+0xf4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_Z21LIS3DSH_GetDataScaledv+0xf8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800140c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_Z21LIS3DSH_GetDataScaledv+0xfc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 8001430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <_Z21LIS3DSH_GetDataScaledv+0x100>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	ee06 1a90 	vmov	s13, r1
 800145a:	ee07 2a10 	vmov	s14, r2
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a66 	vmov.f32	s0, s13
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 1a67 	vmov.f32	s2, s15
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	00000000 	.word	0x00000000
 8001480:	20002b0c 	.word	0x20002b0c
 8001484:	20000008 	.word	0x20000008
 8001488:	20002b10 	.word	0x20002b10
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20002b14 	.word	0x20002b14

08001494 <_Z19LIS3DSH_X_calibrateff>:

}
//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
 800149e:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80014a2:	ed97 7a00 	vldr	s14, [r7]
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <_Z19LIS3DSH_X_calibrateff+0x50>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80014bc:	ed97 7a00 	vldr	s14, [r7]
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014e8 <_Z19LIS3DSH_X_calibrateff+0x54>
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <_Z19LIS3DSH_X_calibrateff+0x58>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20002b0c 	.word	0x20002b0c
 80014e8:	44fa0000 	.word	0x44fa0000
 80014ec:	20000004 	.word	0x20000004

080014f0 <_Z19LIS3DSH_Y_calibrateff>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014fa:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80014fe:	ed97 7a00 	vldr	s14, [r7]
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <_Z19LIS3DSH_Y_calibrateff+0x50>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001518:	ed97 7a00 	vldr	s14, [r7]
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001544 <_Z19LIS3DSH_Y_calibrateff+0x54>
 8001528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <_Z19LIS3DSH_Y_calibrateff+0x58>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20002b10 	.word	0x20002b10
 8001544:	44fa0000 	.word	0x44fa0000
 8001548:	20000008 	.word	0x20000008

0800154c <_Z19LIS3DSH_Z_calibrateff>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
 8001556:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800155a:	ed97 7a00 	vldr	s14, [r7]
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <_Z19LIS3DSH_Z_calibrateff+0x50>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001574:	ed97 7a00 	vldr	s14, [r7]
 8001578:	edd7 7a01 	vldr	s15, [r7, #4]
 800157c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001580:	eddf 6a07 	vldr	s13, [pc, #28]	; 80015a0 <_Z19LIS3DSH_Z_calibrateff+0x54>
 8001584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <_Z19LIS3DSH_Z_calibrateff+0x58>)
 800158a:	edc3 7a00 	vstr	s15, [r3]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20002b14 	.word	0x20002b14
 80015a0:	44fa0000 	.word	0x44fa0000
 80015a4:	2000000c 	.word	0x2000000c

080015a8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80015de:	2137      	movs	r1, #55	; 0x37
 80015e0:	4817      	ldr	r0, [pc, #92]	; (8001640 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80015e2:	f018 ff03 	bl	801a3ec <__assert_func>

	if(align && size)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01f      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4413      	add	r3, r2
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f011 fd09 	bl	8013018 <_Z9ei_callocjj>
 8001606:	60f8      	str	r0, [r7, #12]

		if(p)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00e      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	425b      	negs	r3, r3
 800161a:	4013      	ands	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3b02      	subs	r3, #2
 8001628:	b292      	uxth	r2, r2
 800162a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800162c:	697b      	ldr	r3, [r7, #20]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	0801d260 	.word	0x0801d260
 800163c:	0801d27c 	.word	0x0801d27c
 8001640:	0801d2b4 	.word	0x0801d2b4

08001644 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001656:	215a      	movs	r1, #90	; 0x5a
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800165a:	f018 fec7 	bl	801a3ec <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001664:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	425b      	negs	r3, r3
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f011 fcdf 	bl	8013034 <_Z7ei_freePv>
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0801d330 	.word	0x0801d330
 8001684:	0801d334 	.word	0x0801d334
 8001688:	0801d2b4 	.word	0x0801d2b4

0800168c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4798      	blx	r3
    }
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf0c      	ite	eq
 800170a:	2301      	moveq	r3, #1
 800170c:	2300      	movne	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	731a      	strb	r2, [r3, #12]
 800173c:	e00e      	b.n	800175c <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f011 fc64 	bl	8013018 <_Z9ei_callocjj>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f011 fc50 	bl	8013034 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	731a      	strb	r2, [r3, #12]
 80017be:	e00d      	b.n	80017dc <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	2101      	movs	r1, #1
 80017ca:	4618      	mov	r0, r3
 80017cc:	f011 fc24 	bl	8013018 <_Z9ei_callocjj>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7b1b      	ldrb	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f011 fc10 	bl	8013034 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
 8001822:	e7fe      	b.n	8001822 <_ZSt25__throw_bad_function_callv+0x4>

08001824 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	ed87 0a01 	vstr	s0, [r7, #4]
 800182e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001832:	f017 fc57 	bl	80190e4 <expf>
 8001836:	eef0 7a40 	vmov.f32	s15, s0
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	ed87 0a01 	vstr	s0, [r7, #4]
 800184e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001852:	f017 fbb3 	bl	8018fbc <roundf>
 8001856:	eef0 7a40 	vmov.f32	s15, s0
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4619      	mov	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	461a      	mov	r2, r3
 800187c:	f000 f818 	bl	80018b0 <_ZN2ei5numpy9transposeEPfii>
 8001880:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	e00c      	b.n	80018a6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001898:	893a      	ldrh	r2, [r7, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 800189e:	897a      	ldrh	r2, [r7, #10]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80018a4:	2300      	movs	r3, #0
    }
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08f      	sub	sp, #60	; 0x3c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80018c4:	2300      	movs	r3, #0
 80018c6:	f7ff ff29 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x24>
 80018d0:	4c23      	ldr	r4, [pc, #140]	; (8001960 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80018d2:	e03b      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80018da:	4c21      	ldr	r4, [pc, #132]	; (8001960 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80018dc:	e036      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	da03      	bge.n	80018ee <_ZN2ei5numpy9transposeEPfii+0x3e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	db01      	blt.n	80018f2 <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 80018ee:	4c1d      	ldr	r4, [pc, #116]	; (8001964 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 80018f0:	e02c      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	83bb      	strh	r3, [r7, #28]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	83fb      	strh	r3, [r7, #30]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	b29b      	uxth	r3, r3
 8001906:	82bb      	strh	r3, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001910:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001912:	f107 0214 	add.w	r2, r7, #20
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f00a fa0b 	bl	800bd38 <arm_mat_trans_f32>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001928:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001930:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001934:	e00a      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	461a      	mov	r2, r3
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f018 fdc7 	bl	801a4d8 <memcpy>

        return EIDSP_OK;
 800194a:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff0e 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
    }
 8001956:	4623      	mov	r3, r4
 8001958:	4618      	mov	r0, r3
 800195a:	373c      	adds	r7, #60	; 0x3c
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	fffffc16 	.word	0xfffffc16
 8001964:	fffffc0c 	.word	0xfffffc0c

08001968 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001974:	edd7 7a00 	vldr	s15, [r7]
 8001978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197c:	eef4 7a47 	vcmp.f32	s15, s14
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	d101      	bne.n	800198a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001986:	2300      	movs	r3, #0
 8001988:	e033      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001992:	d204      	bcs.n	800199e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199c:	d301      	bcc.n	80019a2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 80019a0:	e027      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	82bb      	strh	r3, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	82fb      	strh	r3, [r7, #22]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	81bb      	strh	r3, [r7, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	81fb      	strh	r3, [r7, #14]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4611      	mov	r1, r2
 80019d8:	ed97 0a00 	vldr	s0, [r7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f00a f975 	bl	800bccc <arm_mat_scale_f32>
 80019e2:	4603      	mov	r3, r0
 80019e4:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	e000      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 80019f0:	2300      	movs	r3, #0
    }
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	fffffc0c 	.word	0xfffffc0c

08001a00 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001a18:	e028      	b.n	8001a6c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d001      	beq.n	8001a26 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001a24:	e022      	b.n	8001a6c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d21a      	bcs.n	8001a6a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	18d0      	adds	r0, r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f107 0208 	add.w	r2, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f00a fa52 	bl	800bef8 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e7df      	b.n	8001a2a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001a6a:	2300      	movs	r3, #0
    }
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	fffffc14 	.word	0xfffffc14

08001a78 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001a90:	e028      	b.n	8001ae4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001a9c:	e022      	b.n	8001ae4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d21a      	bcs.n	8001ae2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	18d0      	adds	r0, r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f107 0208 	add.w	r2, r7, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f00a f9af 	bl	800be2a <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e7df      	b.n	8001aa2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001ae2:	2300      	movs	r3, #0
    }
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	fffffc14 	.word	0xfffffc14

08001af0 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001b08:	e029      	b.n	8001b5e <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001b14:	e023      	b.n	8001b5e <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d21b      	bcs.n	8001b5c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	6979      	ldr	r1, [r7, #20]
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	18d0      	adds	r0, r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	f107 0210 	add.w	r2, r7, #16
 8001b42:	f00a f9a1 	bl	800be88 <arm_min_f32>
            output_matrix->buffer[row] = min;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e7de      	b.n	8001b1a <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001b5c:	2300      	movs	r3, #0
    }
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	fffffc14 	.word	0xfffffc14

08001b6c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001b84:	e029      	b.n	8001bda <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001b90:	e023      	b.n	8001bda <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d21b      	bcs.n	8001bd8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	18d0      	adds	r0, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6899      	ldr	r1, [r3, #8]
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	f107 0210 	add.w	r2, r7, #16
 8001bbe:	f00a f8fc 	bl	800bdba <arm_max_f32>
            output_matrix->buffer[row] = max;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e7de      	b.n	8001b96 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 8001bd8:	2300      	movs	r3, #0
    }
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	fffffc14 	.word	0xfffffc14

08001be8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001c00:	e043      	b.n	8001c8a <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001c0c:	e03d      	b.n	8001c8a <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d235      	bcs.n	8001c88 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa0>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	69f9      	ldr	r1, [r7, #28]
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	18d0      	adds	r0, r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	f000 f94e 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001c46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	db09      	blt.n	8001c68 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x80>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001c54:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c58:	f017 faa8 	bl	80191ac <sqrtf>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001c66:	e004      	b.n	8001c72 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x8a>
    }
    else
    {
      *pOut = 0.0f;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001c70:	bf00      	nop
            output_matrix->buffer[row] = std;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e7c4      	b.n	8001c12 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 8001c88:	2300      	movs	r3, #0
    }
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	fffffc14 	.word	0xfffffc14

08001c98 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001cb0:	e087      	b.n	8001dc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001cbc:	e081      	b.n	8001dc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d279      	bcs.n	8001dc0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x128>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	69f9      	ldr	r1, [r7, #28]
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	18d0      	adds	r0, r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f107 0210 	add.w	r2, r7, #16
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f00a f89f 	bl	800be2a <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	18d0      	adds	r0, r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f107 020c 	add.w	r2, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	f000 f8e6 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	69f9      	ldr	r1, [r7, #28]
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	18d0      	adds	r0, r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d26:	f107 0208 	add.w	r2, r7, #8
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f000 f9d0 	bl	80020d4 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 8001d34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d48:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	db09      	blt.n	8001d74 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xdc>
      *pOut = sqrtf(in);
 8001d60:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d64:	f017 fa22 	bl	80191ac <sqrtf>
 8001d68:	eef0 7a40 	vmov.f32	s15, s0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001d72:	e004      	b.n	8001d7e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xe6>
      *pOut = 0.0f;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d7c:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8001d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	d108      	bne.n	8001d9e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x106>
                output_matrix->buffer[row] = 0.0f;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e00c      	b.n	8001db8 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x120>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 8001d9e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001da2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db4:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e780      	b.n	8001cc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2a>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 8001dc0:	2300      	movs	r3, #0
    }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	fffffc14 	.word	0xfffffc14

08001dd0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001de8:	e06d      	b.n	8001ec6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001df4:	e067      	b.n	8001ec6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d25f      	bcs.n	8001ec4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf4>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	18d0      	adds	r0, r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f00a f803 	bl	800be2a <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	6979      	ldr	r1, [r7, #20]
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f107 020c 	add.w	r2, r7, #12
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f000 f84a 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	18d0      	adds	r0, r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5e:	f107 0208 	add.w	r2, r7, #8
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	4619      	mov	r1, r3
 8001e68:	f000 f9ef 	bl	800224a <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8001e6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8001e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d107      	bne.n	8001e9a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xca>
                output_matrix->buffer[row] = -3.0f;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e010      	b.n	8001ebc <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xec>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 8001e9a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e79a      	b.n	8001dfa <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2a>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 8001ec4:	2300      	movs	r3, #0
    }
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	fffffc14 	.word	0xfffffc14
 8001ed4:	c0400000 	.word	0xc0400000

08001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8001ed8:	b480      	push	{r7}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d804      	bhi.n	8001f04 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
            return;
 8001f02:	e0e2      	b.n	80020ca <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02f      	beq.n	8001f70 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1d1a      	adds	r2, r3, #4
 8001f14:	61ba      	str	r2, [r7, #24]
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f22:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	61ba      	str	r2, [r7, #24]
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1d1a      	adds	r2, r3, #4
 8001f40:	61ba      	str	r2, [r7, #24]
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	1d1a      	adds	r2, r3, #4
 8001f56:	61ba      	str	r2, [r7, #24]
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f64:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001f6e:	e7cc      	b.n	8001f0a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00e      	beq.n	8001f9c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1d1a      	adds	r2, r3, #4
 8001f82:	61ba      	str	r2, [r7, #24]
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f90:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3b01      	subs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001f9a:	e7ed      	b.n	8001f78 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fae:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d057      	beq.n	8002072 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	1d1a      	adds	r2, r3, #4
 8001fc6:	61ba      	str	r2, [r7, #24]
 8001fc8:	ed93 7a00 	vldr	s14, [r3]
 8001fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd4:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8001fd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fe0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe8:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	61ba      	str	r2, [r7, #24]
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002002:	edd7 7a04 	vldr	s15, [r7, #16]
 8002006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800200a:	ed97 7a07 	vldr	s14, [r7, #28]
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1d1a      	adds	r2, r3, #4
 800201a:	61ba      	str	r2, [r7, #24]
 800201c:	ed93 7a00 	vldr	s14, [r3]
 8002020:	edd7 7a05 	vldr	s15, [r7, #20]
 8002024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002028:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800202c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002030:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002034:	ed97 7a07 	vldr	s14, [r7, #28]
 8002038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203c:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	1d1a      	adds	r2, r3, #4
 8002044:	61ba      	str	r2, [r7, #24]
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	edd7 7a05 	vldr	s15, [r7, #20]
 800204e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002052:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002056:	edd7 7a04 	vldr	s15, [r7, #16]
 800205a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800205e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	3b01      	subs	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002070:	e7a4      	b.n	8001fbc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	61ba      	str	r2, [r7, #24]
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	edd7 7a05 	vldr	s15, [r7, #20]
 800208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002092:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002096:	edd7 7a04 	vldr	s15, [r7, #16]
 800209a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800209e:	ed97 7a07 	vldr	s14, [r7, #28]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	3b01      	subs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80020b0:	e7e3      	b.n	800207a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	edc3 7a00 	vstr	s15, [r3]
    }
 80020ca:	372c      	adds	r7, #44	; 0x2c
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e2:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d06f      	beq.n	80021d6 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x102>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1d1a      	adds	r2, r3, #4
 80020fa:	60fa      	str	r2, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002100:	ed97 7a05 	vldr	s14, [r7, #20]
 8002104:	edd7 7a01 	vldr	s15, [r7, #4]
 8002108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210c:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002110:	edd7 7a05 	vldr	s15, [r7, #20]
 8002114:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002118:	edd7 7a05 	vldr	s15, [r7, #20]
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	ed97 7a06 	vldr	s14, [r7, #24]
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	60fa      	str	r2, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002136:	ed97 7a05 	vldr	s14, [r7, #20]
 800213a:	edd7 7a01 	vldr	s15, [r7, #4]
 800213e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002142:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002146:	edd7 7a05 	vldr	s15, [r7, #20]
 800214a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800214e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	ed97 7a06 	vldr	s14, [r7, #24]
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1d1a      	adds	r2, r3, #4
 8002166:	60fa      	str	r2, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
            in = in - mean;
 800216c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002170:	edd7 7a01 	vldr	s15, [r7, #4]
 8002174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002178:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 800217c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002180:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002184:	edd7 7a05 	vldr	s15, [r7, #20]
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1d1a      	adds	r2, r3, #4
 800219c:	60fa      	str	r2, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80021a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80021a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ae:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80021b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 80021d4:	e78c      	b.n	80020f0 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1c>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01e      	beq.n	8002222 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x14e>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1d1a      	adds	r2, r3, #4
 80021e8:	60fa      	str	r2, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80021ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80021f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fa:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80021fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002202:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002206:	edd7 7a05 	vldr	s15, [r7, #20]
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002216:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b01      	subs	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002220:	e7dd      	b.n	80021de <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10a>
        }

        sum = sum / blockSize;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800222c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002234:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	601a      	str	r2, [r3, #0]
    }
 800223e:	bf00      	nop
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 800224a:	b480      	push	{r7}
 800224c:	b08b      	sub	sp, #44	; 0x2c
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	ed87 0a01 	vstr	s0, [r7, #4]
 8002258:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	2b00      	cmp	r3, #0
 800226a:	d077      	beq.n	800235c <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x112>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	60fa      	str	r2, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002276:	ed97 7a07 	vldr	s14, [r7, #28]
 800227a:	edd7 7a01 	vldr	s15, [r7, #4]
 800227e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002282:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8002286:	edd7 7a07 	vldr	s15, [r7, #28]
 800228a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800228e:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002292:	edd7 7a06 	vldr	s15, [r7, #24]
 8002296:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800229a:	ed97 7a08 	vldr	s14, [r7, #32]
 800229e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a2:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1d1a      	adds	r2, r3, #4
 80022aa:	60fa      	str	r2, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80022b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80022b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022bc:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80022c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022c8:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 80022cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80022d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022dc:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1d1a      	adds	r2, r3, #4
 80022e4:	60fa      	str	r2, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80022ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80022ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80022fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80022fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002302:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002306:	edd7 7a06 	vldr	s15, [r7, #24]
 800230a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800230e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002316:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1d1a      	adds	r2, r3, #4
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002324:	ed97 7a07 	vldr	s14, [r7, #28]
 8002328:	edd7 7a01 	vldr	s15, [r7, #4]
 800232c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002330:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002334:	edd7 7a07 	vldr	s15, [r7, #28]
 8002338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800233c:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002340:	edd7 7a06 	vldr	s15, [r7, #24]
 8002344:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002348:	ed97 7a08 	vldr	s14, [r7, #32]
 800234c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002350:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3b01      	subs	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800235a:	e784      	b.n	8002266 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1c>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d020      	beq.n	80023ac <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x162>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1d1a      	adds	r2, r3, #4
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002374:	ed97 7a07 	vldr	s14, [r7, #28]
 8002378:	edd7 7a01 	vldr	s15, [r7, #4]
 800237c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002380:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8002384:	edd7 7a07 	vldr	s15, [r7, #28]
 8002388:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800238c:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002390:	edd7 7a05 	vldr	s15, [r7, #20]
 8002394:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002398:	ed97 7a08 	vldr	s14, [r7, #32]
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	3b01      	subs	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80023aa:	e7db      	b.n	8002364 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11a>
        }

        sum = sum / blockSize;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	601a      	str	r2, [r3, #0]
    }
 80023c8:	bf00      	nop
 80023ca:	372c      	adds	r7, #44	; 0x2c
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f978 	bl	80016d4 <_ZNSt14_Function_baseD1Ev>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 f878 	bl	80044ee <_ZNSt8functionIFijjPfEEC1Ev>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN2ei11ei_signal_tD1Ev>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffde 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
}


__attribute__((unused)) int extract_flatten_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8002424:	b5b0      	push	{r4, r5, r7, lr}
 8002426:	b0b8      	sub	sp, #224	; 0xe0
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_flatten_t config = *((ei_dsp_config_flatten_t*)config_ptr);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 800243a:	461d      	mov	r5, r3
 800243c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800243e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	6023      	str	r3, [r4, #0]

    uint32_t expected_matrix_size = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.average) expected_matrix_size += config.axes;
 800244a:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
 8002452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002456:	461a      	mov	r2, r3
 8002458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800245c:	4413      	add	r3, r2
 800245e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.minimum) expected_matrix_size += config.axes;
 8002462:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x56>
 800246a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800246e:	461a      	mov	r2, r3
 8002470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002474:	4413      	add	r3, r2
 8002476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.maximum) expected_matrix_size += config.axes;
 800247a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6e>
 8002482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002486:	461a      	mov	r2, r3
 8002488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800248c:	4413      	add	r3, r2
 800248e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.rms) expected_matrix_size += config.axes;
 8002492:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x86>
 800249a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800249e:	461a      	mov	r2, r3
 80024a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024a4:	4413      	add	r3, r2
 80024a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.stdev) expected_matrix_size += config.axes;
 80024aa:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9e>
 80024b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024b6:	461a      	mov	r2, r3
 80024b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024bc:	4413      	add	r3, r2
 80024be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.skewness) expected_matrix_size += config.axes;
 80024c2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb6>
 80024ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ce:	461a      	mov	r2, r3
 80024d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d4:	4413      	add	r3, r2
 80024d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.kurtosis) expected_matrix_size += config.axes;
 80024da:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xce>
 80024e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e6:	461a      	mov	r2, r3
 80024e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ec:	4413      	add	r3, r2
 80024ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    if (output_matrix->rows * output_matrix->cols != expected_matrix_size) {
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	6892      	ldr	r2, [r2, #8]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xe6>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002506:	4cc6      	ldr	r4, [pc, #792]	; (8002820 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3fc>)
 8002508:	e184      	b.n	8002814 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3f0>
    }

    int ret;

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002512:	fbb3 f1f2 	udiv	r1, r3, r2
 8002516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800251a:	461a      	mov	r2, r3
 800251c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002520:	2300      	movs	r3, #0
 8002522:	f7ff f8fb 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x10e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800252e:	4cbd      	ldr	r4, [pc, #756]	; (8002824 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x400>)
 8002530:	e16b      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }
    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800253c:	2100      	movs	r1, #0
 800253e:	f001 ffa8 	bl	8004492 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
 8002542:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002546:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fa0a 	bl	8001968 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8002554:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if (ret != EIDSP_OK) {
 8002558:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14c>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 8002560:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002564:	48b0      	ldr	r0, [pc, #704]	; (8002828 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x404>)
 8002566:	f001 fc61 	bl	8003e2c <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800256a:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800256e:	e14c      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
 8002570:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f975 	bl	8001864 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 800257a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if (ret != EIDSP_OK) {
 800257e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x172>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8002586:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800258a:	48a8      	ldr	r0, [pc, #672]	; (800282c <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x408>)
 800258c:	f001 fc4e 	bl	8003e2c <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8002590:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8002594:	e139      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }

    size_t out_matrix_ix = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    for (size_t row = 0; row < input_matrix.rows; row++) {
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025aa:	429a      	cmp	r2, r3
 80025ac:	f080 8121 	bcs.w	80027f2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3ce>
        matrix_t row_matrix(1, input_matrix.cols, input_matrix.buffer + (row * input_matrix.cols));
 80025b0:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80025b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025bc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80025cc:	4622      	mov	r2, r4
 80025ce:	2101      	movs	r1, #1
 80025d0:	f7ff f8a4 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>

        if (config.average) {
 80025d4:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d021      	beq.n	8002620 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80025dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025e0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80025e4:	2201      	movs	r2, #1
 80025e6:	2101      	movs	r1, #1
 80025e8:	f7ff f898 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::mean(&row_matrix, &out_matrix);
 80025ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa3e 	bl	8001a78 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80025fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002608:	1c58      	adds	r0, r3, #1
 800260a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002616:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f8a9 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.minimum) {
 8002620:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x246>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002628:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800262c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002630:	2201      	movs	r2, #1
 8002632:	2101      	movs	r1, #1
 8002634:	f7ff f872 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::min(&row_matrix, &out_matrix);
 8002638:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800263c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fa54 	bl	8001af0 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002648:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002652:	1c58      	adds	r0, r3, #1
 8002654:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002660:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f884 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.maximum) {
 800266a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002672:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002676:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800267a:	2201      	movs	r2, #1
 800267c:	2101      	movs	r1, #1
 800267e:	f7ff f84d 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::max(&row_matrix, &out_matrix);
 8002682:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fa6d 	bl	8001b6c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002692:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800269c:	1c58      	adds	r0, r3, #1
 800269e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80026aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f85f 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.rms) {
 80026b4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2da>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80026bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026c0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80026c4:	2201      	movs	r2, #1
 80026c6:	2101      	movs	r1, #1
 80026c8:	f7ff f828 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::rms(&row_matrix, &out_matrix);
 80026cc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80026d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f992 	bl	8001a00 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80026dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e6:	1c58      	adds	r0, r3, #1
 80026e8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80026f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f83a 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.stdev) {
 80026fe:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8002702:	2b00      	cmp	r3, #0
 8002704:	d020      	beq.n	8002748 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x324>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800270e:	2201      	movs	r2, #1
 8002710:	2101      	movs	r1, #1
 8002712:	f7ff f803 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::stdev(&row_matrix, &out_matrix);
 8002716:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800271a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fa61 	bl	8001be8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002730:	1c58      	adds	r0, r3, #1
 8002732:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 800273e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f815 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.skewness) {
 8002748:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36e>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002754:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002758:	2201      	movs	r2, #1
 800275a:	2101      	movs	r1, #1
 800275c:	f7fe ffde 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::skew(&row_matrix, &out_matrix);
 8002760:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002764:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa94 	bl	8001c98 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277a:	1c58      	adds	r0, r3, #1
 800277c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fff0 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.kurtosis) {
 8002792:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002796:	2b00      	cmp	r3, #0
 8002798:	d020      	beq.n	80027dc <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3b8>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	f107 0010 	add.w	r0, r7, #16
 80027a2:	2201      	movs	r2, #1
 80027a4:	2101      	movs	r1, #1
 80027a6:	f7fe ffb9 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::kurtosis(&row_matrix, &out_matrix);
 80027aa:	f107 0210 	add.w	r2, r7, #16
 80027ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fb0b 	bl	8001dd0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027c4:	1c58      	adds	r0, r3, #1
 80027c6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ffcb 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        matrix_t row_matrix(1, input_matrix.cols, input_matrix.buffer + (row * input_matrix.cols));
 80027dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe ffc6 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
    for (size_t row = 0; row < input_matrix.rows; row++) {
 80027e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ea:	3301      	adds	r3, #1
 80027ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027f0:	e6d7      	b.n	80025a2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17e>
        }
    }

    // flatten again
    output_matrix->cols = output_matrix->rows * output_matrix->cols;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	6892      	ldr	r2, [r2, #8]
 80027fa:	fb03 f202 	mul.w	r2, r3, r2
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2201      	movs	r2, #1
 8002806:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 8002808:	2400      	movs	r4, #0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800280a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe ffaf 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
}
 8002814:	4623      	mov	r3, r4
 8002816:	4618      	mov	r0, r3
 8002818:	37e0      	adds	r7, #224	; 0xe0
 800281a:	46bd      	mov	sp, r7
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	bf00      	nop
 8002820:	fffffc14 	.word	0xfffffc14
 8002824:	fffffc16 	.word	0xfffffc16
 8002828:	0801d360 	.word	0x0801d360
 800282c:	0801d384 	.word	0x0801d384

08002830 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b098      	sub	sp, #96	; 0x60
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002846:	ca07      	ldmia	r2, {r0, r1, r2}
 8002848:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	4967      	ldr	r1, [pc, #412]	; (80029ec <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fd0d 	bl	8000270 <strcmp>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8002860:	2303      	movs	r3, #3
 8002862:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800286a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002876:	2300      	movs	r3, #0
 8002878:	65bb      	str	r3, [r7, #88]	; 0x58
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002880:	429a      	cmp	r2, r3
 8002882:	f080 80ac 	bcs.w	80029de <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	d803      	bhi.n	8002896 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 800288e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e001      	b.n	800289a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8002896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289a:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	461a      	mov	r2, r3
 80028a0:	f107 0014 	add.w	r0, r7, #20
 80028a4:	2300      	movs	r3, #0
 80028a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80028a8:	f7fe ff38 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80028b2:	4d4f      	ldr	r5, [pc, #316]	; (80029f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 80028b4:	2400      	movs	r4, #0
 80028b6:	e086      	b.n	80029c6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028c0:	f001 fde7 	bl	8004492 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80028c4:	2300      	movs	r3, #0
 80028c6:	657b      	str	r3, [r7, #84]	; 0x54
 80028c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d275      	bcs.n	80029bc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80028e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80028f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b2db      	uxtb	r3, r3
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800290e:	eddf 6a39 	vldr	s13, [pc, #228]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8002912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002916:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800291a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291c:	b2db      	uxtb	r3, r3
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002926:	eddf 6a33 	vldr	s13, [pc, #204]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 800292a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800292e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8002932:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002936:	2b03      	cmp	r3, #3
 8002938:	d11b      	bne.n	8002972 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002940:	1c59      	adds	r1, r3, #1
 8002942:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800294a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002952:	1c59      	adds	r1, r3, #1
 8002954:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800295c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e020      	b.n	80029b4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8002972:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002976:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80029f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 800297a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800297e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002982:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80029fc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8002986:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800298a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002992:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a00 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8002996:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800299a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a8:	1c59      	adds	r1, r3, #1
 80029aa:	65f9      	str	r1, [r7, #92]	; 0x5c
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b2:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80029b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b6:	3301      	adds	r3, #1
 80029b8:	657b      	str	r3, [r7, #84]	; 0x54
 80029ba:	e785      	b.n	80028c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	2401      	movs	r4, #1
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fed1 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 80029d0:	2c01      	cmp	r4, #1
 80029d2:	d105      	bne.n	80029e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80029d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029da:	65bb      	str	r3, [r7, #88]	; 0x58
 80029dc:	e74d      	b.n	800287a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 80029de:	2500      	movs	r5, #0
}
 80029e0:	462b      	mov	r3, r5
 80029e2:	4618      	mov	r0, r3
 80029e4:	3760      	adds	r7, #96	; 0x60
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	0801d60c 	.word	0x0801d60c
 80029f0:	fffffc16 	.word	0xfffffc16
 80029f4:	437f0000 	.word	0x437f0000
 80029f8:	3e991687 	.word	0x3e991687
 80029fc:	3f1645a2 	.word	0x3f1645a2
 8002a00:	3de978d5 	.word	0x3de978d5

08002a04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b0a6      	sub	sp, #152	; 0x98
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6178      	str	r0, [r7, #20]
 8002a0c:	6139      	str	r1, [r7, #16]
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	49ab      	ldr	r1, [pc, #684]	; (8002cd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fc22 	bl	8000270 <strcmp>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8002a36:	2303      	movs	r3, #3
 8002a38:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8002a42:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8002a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8002a4a:	f249 6345 	movw	r3, #38469	; 0x9645
 8002a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8002a50:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8002a54:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8002a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f080 821d 	bcs.w	8002eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7c:	d803      	bhi.n	8002a86 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 8002a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	e001      	b.n	8002a8a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8002a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f107 0018 	add.w	r0, r7, #24
 8002a94:	2300      	movs	r3, #0
 8002a96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002a98:	f7fe fe40 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002aa2:	4d8d      	ldr	r5, [pc, #564]	; (8002cd8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8002aa4:	2400      	movs	r4, #0
 8002aa6:	e1f5      	b.n	8002e94 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8002aa8:	6938      	ldr	r0, [r7, #16]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ab2:	f001 fcee 	bl	8004492 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002abc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	f080 81e1 	bcs.w	8002e8a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ada:	ee17 3a90 	vmov	r3, s15
 8002ade:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8002ae0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	f040 8105 	bne.w	8002cf4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002af0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002cdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8002af4:	eef4 7a47 	vcmp.f32	s15, s14
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d160      	bne.n	8002bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b04:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002ce0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8002b08:	eef4 7a47 	vcmp.f32	s15, s14
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	d156      	bne.n	8002bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b44:	1c59      	adds	r1, r3, #1
 8002b46:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002b4a:	4413      	add	r3, r2
 8002b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b50:	edc7 7a00 	vstr	s15, [r7]
 8002b54:	783a      	ldrb	r2, [r7, #0]
 8002b56:	b252      	sxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b76:	1c59      	adds	r1, r3, #1
 8002b78:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002b7c:	4413      	add	r3, r2
 8002b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b82:	edc7 7a00 	vstr	s15, [r7]
 8002b86:	783a      	ldrb	r2, [r7, #0]
 8002b88:	b252      	sxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8002b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ba8:	1c59      	adds	r1, r3, #1
 8002baa:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002bae:	4413      	add	r3, r2
 8002bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb4:	edc7 7a00 	vstr	s15, [r7]
 8002bb8:	783a      	ldrb	r2, [r7, #0]
 8002bba:	b252      	sxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e15e      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8002bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bce:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8002bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c00:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c08:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002c16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c1a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c1e:	f7fe fe11 	bl	8001844 <_ZSt5roundf>
 8002c22:	eeb0 7a40 	vmov.f32	s14, s0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c38:	1c59      	adds	r1, r3, #1
 8002c3a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002c3e:	4413      	add	r3, r2
 8002c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c44:	edc7 7a00 	vstr	s15, [r7]
 8002c48:	783a      	ldrb	r2, [r7, #0]
 8002c4a:	b252      	sxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c54:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c5c:	eeb0 0a66 	vmov.f32	s0, s13
 8002c60:	f7fe fdf0 	bl	8001844 <_ZSt5roundf>
 8002c64:	eeb0 7a40 	vmov.f32	s14, s0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002c80:	4413      	add	r3, r2
 8002c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c86:	edc7 7a00 	vstr	s15, [r7]
 8002c8a:	783a      	ldrb	r2, [r7, #0]
 8002c8c:	b252      	sxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c96:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002ca2:	f7fe fdcf 	bl	8001844 <_ZSt5roundf>
 8002ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002cc2:	4413      	add	r3, r2
 8002cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc8:	edc7 7a00 	vstr	s15, [r7]
 8002ccc:	783a      	ldrb	r2, [r7, #0]
 8002cce:	b252      	sxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e0d4      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8002cd4:	0801d60c 	.word	0x0801d60c
 8002cd8:	fffffc16 	.word	0xfffffc16
 8002cdc:	3b808081 	.word	0x3b808081
 8002ce0:	c3000000 	.word	0xc3000000
 8002ce4:	437f0000 	.word	0x437f0000
 8002ce8:	3e991687 	.word	0x3e991687
 8002cec:	3f1645a2 	.word	0x3f1645a2
 8002cf0:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002cfa:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8002cdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8002cfe:	eef4 7a47 	vcmp.f32	s15, s14
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	d15b      	bne.n	8002dc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002d0e:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8002ce0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8002d12:	eef4 7a47 	vcmp.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	d151      	bne.n	8002dc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8002d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8002d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8002d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8002d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d34:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8002d38:	fb03 f202 	mul.w	r2, r3, r2
 8002d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d3e:	f249 6145 	movw	r1, #38469	; 0x9645
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	441a      	add	r2, r3
 8002d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4a:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8002d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d5c:	141b      	asrs	r3, r3, #16
 8002d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8002d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d7c:	ee17 3a90 	vmov	r3, s15
 8002d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8002d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d88:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002d8c:	da04      	bge.n	8002d98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8002d8e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d96:	e006      	b.n	8002da6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8002d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	dd02      	ble.n	8002da6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8002da0:	237f      	movs	r3, #127	; 0x7f
 8002da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dae:	1c59      	adds	r1, r3, #1
 8002db0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002db4:	4413      	add	r3, r2
 8002db6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002dba:	b252      	sxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e05e      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8002dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dce:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002de8:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e00:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8002e0c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e10:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8002ce8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8002e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e1c:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8002cec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8002e20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e2c:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8002cf0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8002e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e38:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002e42:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002e4e:	f7fe fcf9 	bl	8001844 <_ZSt5roundf>
 8002e52:	eeb0 7a40 	vmov.f32	s14, s0
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e68:	1c59      	adds	r1, r3, #1
 8002e6a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002e6e:	4413      	add	r3, r2
 8002e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e74:	edc7 7a00 	vstr	s15, [r7]
 8002e78:	783a      	ldrb	r2, [r7, #0]
 8002e7a:	b252      	sxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e82:	3301      	adds	r3, #1
 8002e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e88:	e618      	b.n	8002abc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8002e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	2401      	movs	r4, #1
 8002e94:	f107 0318 	add.w	r3, r7, #24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fc6a 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8002e9e:	2c01      	cmp	r4, #1
 8002ea0:	d107      	bne.n	8002eb2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eae:	e5db      	b.n	8002a68 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8002eb0:	2500      	movs	r5, #0
}
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3798      	adds	r7, #152	; 0x98
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}

08002ebc <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fa81 	bl	80023ee <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	f000 f832 	bl	8002f76 <_ZN14SignalWithAxes8get_dataEjjPf>
 8002f12:	4603      	mov	r3, r0
        };
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d102      	bne.n	8002f38 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	e01a      	b.n	8002f6e <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6892      	ldr	r2, [r2, #8]
 8002f4c:	fb03 f202 	mul.w	r2, r3, r2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	621a      	str	r2, [r3, #32]
        };
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f103 0210 	add.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f001 faef 	bl	8004548 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3310      	adds	r3, #16
    }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b08a      	sub	sp, #40	; 0x28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	6992      	ldr	r2, [r2, #24]
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	6992      	ldr	r2, [r2, #24]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	6a3a      	ldr	r2, [r7, #32]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d22b      	bcs.n	800301c <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d21d      	bcs.n	800300e <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	18d1      	adds	r1, r2, r3
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	627a      	str	r2, [r7, #36]	; 0x24
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f001 fa4c 	bl	8004492 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002ffa:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	e00b      	b.n	800301e <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3301      	adds	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e7dc      	b.n	8002fc8 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	6a3a      	ldr	r2, [r7, #32]
 8003016:	4413      	add	r3, r2
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	e7cd      	b.n	8002fb8 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 800301c:	2300      	movs	r3, #0
    }
 800301e:	4618      	mov	r0, r3
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003034:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6178      	str	r0, [r7, #20]
 800304c:	6139      	str	r1, [r7, #16]
 800304e:	60fa      	str	r2, [r7, #12]
 8003050:	ed87 0a02 	vstr	s0, [r7, #8]
 8003054:	edc7 0a01 	vstr	s1, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800305a:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800305e:	4618      	mov	r0, r3
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6178      	str	r0, [r7, #20]
 8003074:	6139      	str	r1, [r7, #16]
 8003076:	60fa      	str	r2, [r7, #12]
 8003078:	ed87 0a02 	vstr	s0, [r7, #8]
 800307c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003080:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800308a:	461a      	mov	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4293      	cmp	r3, r2
 8003090:	d23f      	bcs.n	8003112 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f993 3000 	ldrsb.w	r3, [r3]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80030b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b4:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d011      	beq.n	80030e2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4813      	ldr	r0, [pc, #76]	; (800311c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 80030d0:	f000 feac 	bl	8003e2c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80030d4:	ed97 0a06 	vldr	s0, [r7, #24]
 80030d8:	f00f fe8e 	bl	8012df8 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80030dc:	4810      	ldr	r0, [pc, #64]	; (8003120 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80030de:	f000 fea5 	bl	8003e2c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	6819      	ldr	r1, [r3, #0]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	3201      	adds	r2, #1
 80030f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3301      	adds	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	e7b9      	b.n	8003086 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	0801d618 	.word	0x0801d618
 8003120:	0801d620 	.word	0x0801d620

08003124 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800313a:	461a      	mov	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	4293      	cmp	r3, r2
 8003140:	d232      	bcs.n	80031a8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	613b      	str	r3, [r7, #16]

        if (debug) {
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	4813      	ldr	r0, [pc, #76]	; (80031b4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8003166:	f000 fe61 	bl	8003e2c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800316a:	ed97 0a04 	vldr	s0, [r7, #16]
 800316e:	f00f fe43 	bl	8012df8 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8003172:	4811      	ldr	r0, [pc, #68]	; (80031b8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8003174:	f000 fe5a 	bl	8003e2c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	3201      	adds	r2, #1
 800318c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	3301      	adds	r3, #1
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e7c6      	b.n	8003136 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	0801d618 	.word	0x0801d618
 80031b8:	0801d620 	.word	0x0801d620

080031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 80031ca:	f00f fe03 	bl	8012dd4 <_Z16ei_read_timer_usv>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 80031d8:	486e      	ldr	r0, [pc, #440]	; (8003394 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 80031da:	f014 fdb3 	bl	8017d44 <_Z18trained_model_initPFPvjjE>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	4619      	mov	r1, r3
 80031ec:	486a      	ldr	r0, [pc, #424]	; (8003398 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 80031ee:	f000 fe1d 	bl	8003e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80031f2:	f06f 0305 	mvn.w	r3, #5
 80031f6:	e0c8      	b.n	800338a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fe:	2000      	movs	r0, #0
 8003200:	4798      	blx	r3
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	2000      	movs	r0, #0
 8003210:	4798      	blx	r3
 8003212:	4602      	mov	r2, r0
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800321e:	2b01      	cmp	r3, #1
 8003220:	d115      	bne.n	800324e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800322e:	4610      	mov	r0, r2
 8003230:	4798      	blx	r3
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
 8003248:	4602      	mov	r2, r0
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 800324e:	4b53      	ldr	r3, [pc, #332]	; (800339c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8098 	beq.w	8003388 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003264:	429a      	cmp	r2, r3
 8003266:	d005      	beq.n	8003274 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 800326a:	4a4e      	ldr	r2, [pc, #312]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800326c:	2159      	movs	r1, #89	; 0x59
 800326e:	484e      	ldr	r0, [pc, #312]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003270:	f017 f8bc 	bl	801a3ec <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003280:	429a      	cmp	r2, r3
 8003282:	d005      	beq.n	8003290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8003286:	4a47      	ldr	r2, [pc, #284]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003288:	215a      	movs	r1, #90	; 0x5a
 800328a:	4847      	ldr	r0, [pc, #284]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800328c:	f017 f8ae 	bl	801a3ec <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8003296:	2b01      	cmp	r3, #1
 8003298:	d11b      	bne.n	80032d2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d005      	beq.n	80032b6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 80032ac:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032ae:	215c      	movs	r1, #92	; 0x5c
 80032b0:	483d      	ldr	r0, [pc, #244]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032b2:	f017 f89b 	bl	801a3ec <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d005      	beq.n	80032d2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 80032c8:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032ca:	215d      	movs	r1, #93	; 0x5d
 80032cc:	4836      	ldr	r0, [pc, #216]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032ce:	f017 f88d 	bl	801a3ec <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d026      	beq.n	800332a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80032ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	d005      	beq.n	8003300 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032f8:	2160      	movs	r1, #96	; 0x60
 80032fa:	482b      	ldr	r0, [pc, #172]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032fc:	f017 f876 	bl	801a3ec <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003314:	eeb4 7a67 	vcmp.f32	s14, s15
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	d005      	beq.n	800332a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8003320:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003322:	2161      	movs	r1, #97	; 0x61
 8003324:	4820      	ldr	r0, [pc, #128]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003326:	f017 f861 	bl	801a3ec <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003330:	2b00      	cmp	r3, #0
 8003332:	d026      	beq.n	8003382 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	ed93 7a03 	vldr	s14, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003342:	eeb4 7a67 	vcmp.f32	s14, s15
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d005      	beq.n	8003358 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003350:	2164      	movs	r1, #100	; 0x64
 8003352:	4815      	ldr	r0, [pc, #84]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003354:	f017 f84a 	bl	801a3ec <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800336c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	d005      	beq.n	8003382 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800337a:	2165      	movs	r1, #101	; 0x65
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800337e:	f017 f835 	bl	801a3ec <__assert_func>
        }
        tflite_first_run = false;
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	080015c1 	.word	0x080015c1
 8003398:	0801d624 	.word	0x0801d624
 800339c:	20000044 	.word	0x20000044
 80033a0:	0801d658 	.word	0x0801d658
 80033a4:	0801d68c 	.word	0x0801d68c
 80033a8:	0801d728 	.word	0x0801d728
 80033ac:	0801d7b4 	.word	0x0801d7b4
 80033b0:	0801d7e8 	.word	0x0801d7e8
 80033b4:	0801d824 	.word	0x0801d824
 80033b8:	0801d860 	.word	0x0801d860
 80033bc:	0801d898 	.word	0x0801d898
 80033c0:	0801d8d8 	.word	0x0801d8d8
 80033c4:	0801d910 	.word	0x0801d910

080033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80033d4:	f014 ff1a 	bl	801820c <_Z20trained_model_invokev>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80033e8:	f06f 0302 	mvn.w	r3, #2
 80033ec:	e0ea      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80033ee:	f00f fcf1 	bl	8012dd4 <_Z16ei_read_timer_usv>
 80033f2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80033f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fe:	1a84      	subs	r4, r0, r2
 8003400:	eb61 0503 	sbc.w	r5, r1, r3
 8003404:	4622      	mov	r2, r4
 8003406:	462b      	mov	r3, r5
 8003408:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800340a:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003410:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f7fd fc3e 	bl	8000c9c <__aeabi_ldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003426:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 800342a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8003432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003438:	4619      	mov	r1, r3
 800343a:	4864      	ldr	r0, [pc, #400]	; (80035cc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 800343c:	f000 fcf6 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d072      	beq.n	8003536 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8003456:	3b01      	subs	r3, #1
 8003458:	2b04      	cmp	r3, #4
 800345a:	d862      	bhi.n	8003522 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	080034ef 	.word	0x080034ef
 8003468:	08003479 	.word	0x08003479
 800346c:	080034fb 	.word	0x080034fb
 8003470:	0800350f 	.word	0x0800350f
 8003474:	080034fb 	.word	0x080034fb
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b09      	cmp	r3, #9
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8003486:	7dbb      	ldrb	r3, [r7, #22]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01e      	beq.n	80034ca <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	460b      	mov	r3, r1
 80034b2:	eef0 0a47 	vmov.f32	s1, s14
 80034b6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff fdc1 	bl	8003044 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 80034c8:	e063      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	460b      	mov	r3, r1
 80034de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fda0 	bl	8003026 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80034ec:	e051      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80034ee:	4838      	ldr	r0, [pc, #224]	; (80035d0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80034f0:	f000 fc9c 	bl	8003e2c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80034f4:	f06f 0309 	mvn.w	r3, #9
 80034f8:	e064      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 8003500:	4619      	mov	r1, r3
 8003502:	4834      	ldr	r0, [pc, #208]	; (80035d4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 8003504:	f000 fc92 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003508:	f06f 0309 	mvn.w	r3, #9
 800350c:	e05a      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 8003514:	4619      	mov	r1, r3
 8003516:	4830      	ldr	r0, [pc, #192]	; (80035d8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8003518:	f000 fc88 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800351c:	f06f 0309 	mvn.w	r3, #9
 8003520:	e050      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8003528:	4619      	mov	r1, r3
 800352a:	482c      	ldr	r0, [pc, #176]	; (80035dc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 800352c:	f000 fc7e 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003530:	f06f 0309 	mvn.w	r3, #9
 8003534:	e046      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b09      	cmp	r3, #9
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003560:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003564:	eef0 0a47 	vmov.f32	s1, s14
 8003568:	eeb0 0a67 	vmov.f32	s0, s15
 800356c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff fd7c 	bl	800306c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800357a:	e00a      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003584:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff fdcc 	bl	8003124 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 8003592:	4813      	ldr	r0, [pc, #76]	; (80035e0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 8003594:	f014 fe70 	bl	8018278 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8003598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 80035a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035a4:	e00e      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80035a6:	f00f fc0d 	bl	8012dc4 <_Z29ei_run_impulse_check_canceledv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f113 0f02 	cmn.w	r3, #2
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 80035bc:	f06f 0301 	mvn.w	r3, #1
 80035c0:	e000      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3728      	adds	r7, #40	; 0x28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}
 80035cc:	0801d954 	.word	0x0801d954
 80035d0:	0801d974 	.word	0x0801d974
 80035d4:	0801d9cc 	.word	0x0801d9cc
 80035d8:	0801da1c 	.word	0x0801da1c
 80035dc:	0801da6c 	.word	0x0801da6c
 80035e0:	08001645 	.word	0x08001645

080035e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80035e4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80035e8:	b09e      	sub	sp, #120	; 0x78
 80035ea:	af06      	add	r7, sp, #24
 80035ec:	6178      	str	r0, [r7, #20]
 80035ee:	6139      	str	r1, [r7, #16]
 80035f0:	60fa      	str	r2, [r7, #12]
 80035f2:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80035f4:	f00f fbee 	bl	8012dd4 <_Z16ei_read_timer_usv>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003608:	f107 0318 	add.w	r3, r7, #24
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fef0 	bl	80043f4 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8003614:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003618:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800361c:	f107 0120 	add.w	r1, r7, #32
 8003620:	f107 0318 	add.w	r3, r7, #24
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4603      	mov	r3, r0
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7ff fdc1 	bl	80031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8003640:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8003648:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800364c:	e0c5      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 800364e:	f107 0318 	add.w	r3, r7, #24
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ff97 	bl	8004586 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8003658:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b09      	cmp	r3, #9
 8003660:	d022      	beq.n	80036a8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 8003662:	2b09      	cmp	r3, #9
 8003664:	f300 8083 	bgt.w	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8003668:	2b01      	cmp	r3, #1
 800366a:	d002      	beq.n	8003672 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 800366c:	2b03      	cmp	r3, #3
 800366e:	d051      	beq.n	8003714 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8003670:	e07d      	b.n	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003672:	2300      	movs	r3, #0
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003684:	429a      	cmp	r2, r3
 8003686:	d27b      	bcs.n	8003780 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80036a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a2:	3301      	adds	r3, #1
 80036a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a6:	e7e6      	b.n	8003676 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80036a8:	2300      	movs	r3, #0
 80036aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d262      	bcs.n	8003784 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80036d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80036d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036da:	eeb0 0a66 	vmov.f32	s0, s13
 80036de:	f7fe f8b1 	bl	8001844 <_ZSt5roundf>
 80036e2:	eeb0 7a40 	vmov.f32	s14, s0
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fc:	4413      	add	r3, r2
 80036fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003702:	edc7 7a01 	vstr	s15, [r7, #4]
 8003706:	793a      	ldrb	r2, [r7, #4]
 8003708:	b252      	sxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800370c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800370e:	3301      	adds	r3, #1
 8003710:	65bb      	str	r3, [r7, #88]	; 0x58
 8003712:	e7cb      	b.n	80036ac <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003714:	2300      	movs	r3, #0
 8003716:	657b      	str	r3, [r7, #84]	; 0x54
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	6892      	ldr	r2, [r2, #8]
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003726:	429a      	cmp	r2, r3
 8003728:	d221      	bcs.n	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800373e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800374c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	4413      	add	r3, r2
 8003758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003760:	793a      	ldrb	r2, [r7, #4]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003768:	3301      	adds	r3, #1
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
 800376c:	e7d4      	b.n	8003718 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	481f      	ldr	r0, [pc, #124]	; (80037f4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 8003776:	f000 fb59 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 800377a:	f06f 040c 	mvn.w	r4, #12
 800377e:	e02c      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 8003784:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 8003786:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 800378a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800378c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800378e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	9305      	str	r3, [sp, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	9303      	str	r3, [sp, #12]
 800379c:	9602      	str	r6, [sp, #8]
 800379e:	9001      	str	r0, [sp, #4]
 80037a0:	9100      	str	r1, [sp, #0]
 80037a2:	465a      	mov	r2, fp
 80037a4:	4663      	mov	r3, ip
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7ff fe0e 	bl	80033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80037b2:	f00f fb0f 	bl	8012dd4 <_Z16ei_read_timer_usv>
 80037b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ba:	1a84      	subs	r4, r0, r2
 80037bc:	eb61 0503 	sbc.w	r5, r1, r3
 80037c0:	4622      	mov	r2, r4
 80037c2:	462b      	mov	r3, r5
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80037ca:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80037d2:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80037d6:	e000      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80037d8:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80037da:	f107 0318 	add.w	r3, r7, #24
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe1d 	bl	800441e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80037e4:	4623      	mov	r3, r4
 80037e6:	4618      	mov	r0, r3
 80037e8:	3760      	adds	r7, #96	; 0x60
 80037ea:	46bd      	mov	sp, r7
 80037ec:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80037f0:	08001645 	.word	0x08001645
 80037f4:	0801daa0 	.word	0x0801daa0

080037f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80037f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037fc:	b0a1      	sub	sp, #132	; 0x84
 80037fe:	af06      	add	r7, sp, #24
 8003800:	6178      	str	r0, [r7, #20]
 8003802:	6139      	str	r1, [r7, #16]
 8003804:	60fa      	str	r2, [r7, #12]
 8003806:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380c:	2100      	movs	r1, #0
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f016 fe8a 	bl	801a528 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8003814:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003818:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800381c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fde6 	bl	80043f4 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8003828:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800382c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003830:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003838:	9302      	str	r3, [sp, #8]
 800383a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4603      	mov	r3, r0
 8003848:	6978      	ldr	r0, [r7, #20]
 800384a:	f7ff fcb7 	bl	80031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8003854:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 800385c:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8003860:	e0c4      	b.n	80039ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8003862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b09      	cmp	r3, #9
 8003868:	d002      	beq.n	8003870 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800386a:	f06f 0408 	mvn.w	r4, #8
 800386e:	e0bd      	b.n	80039ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8003870:	f00f fab0 	bl	8012dd4 <_Z16ei_read_timer_usv>
 8003874:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f107 0018 	add.w	r0, r7, #24
 8003884:	2101      	movs	r1, #1
 8003886:	f7fd ff8a 	bl	800179e <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 800388a:	4b5f      	ldr	r3, [pc, #380]	; (8003a08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 800388c:	6899      	ldr	r1, [r3, #8]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003894:	f107 0218 	add.w	r2, r7, #24
 8003898:	eeb0 0a67 	vmov.f32	s0, s15
 800389c:	460b      	mov	r3, r1
 800389e:	6939      	ldr	r1, [r7, #16]
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f7ff f8af 	bl	8002a04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 80038a6:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 80038a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 80038ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038b0:	4856      	ldr	r0, [pc, #344]	; (8003a0c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 80038b2:	f000 fabb 	bl	8003e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 80038b6:	f06f 0404 	mvn.w	r4, #4
 80038ba:	e092      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80038bc:	f00f fa82 	bl	8012dc4 <_Z29ei_run_impulse_check_canceledv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f113 0f02 	cmn.w	r3, #2
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 80038d2:	f06f 0401 	mvn.w	r4, #1
 80038d6:	e084      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80038d8:	f00f fa7c 	bl	8012dd4 <_Z16ei_read_timer_usv>
 80038dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038e0:	ebb0 0802 	subs.w	r8, r0, r2
 80038e4:	eb61 0903 	sbc.w	r9, r1, r3
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	68f9      	ldr	r1, [r7, #12]
 80038ee:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80038f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	f7fd f9cc 	bl	8000c9c <__aeabi_ldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 800390e:	7afb      	ldrb	r3, [r7, #11]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02d      	beq.n	8003970 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800391a:	4619      	mov	r1, r3
 800391c:	483c      	ldr	r0, [pc, #240]	; (8003a10 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 800391e:	f000 fa85 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003922:	2300      	movs	r3, #0
 8003924:	667b      	str	r3, [r7, #100]	; 0x64
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800392a:	429a      	cmp	r2, r3
 800392c:	d21d      	bcs.n	800396a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003932:	4413      	add	r3, r2
 8003934:	f993 3000 	ldrsb.w	r3, [r3]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003954:	eeb0 0a67 	vmov.f32	s0, s15
 8003958:	f00f fa4e 	bl	8012df8 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800395c:	482d      	ldr	r0, [pc, #180]	; (8003a14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 800395e:	f000 fa65 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003964:	3301      	adds	r3, #1
 8003966:	667b      	str	r3, [r7, #100]	; 0x64
 8003968:	e7dd      	b.n	8003926 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 800396a:	482b      	ldr	r0, [pc, #172]	; (8003a18 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 800396c:	f000 fa5e 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8003970:	f00f fa30 	bl	8012dd4 <_Z16ei_read_timer_usv>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 800397c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003980:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003988:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 800398a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fdf9 	bl	8004586 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8003994:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8003996:	7afb      	ldrb	r3, [r7, #11]
 8003998:	9305      	str	r3, [sp, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	9304      	str	r3, [sp, #16]
 800399e:	9203      	str	r2, [sp, #12]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	9202      	str	r2, [sp, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	9600      	str	r6, [sp, #0]
 80039aa:	4642      	mov	r2, r8
 80039ac:	464b      	mov	r3, r9
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff fd0a 	bl	80033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 80039ba:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 80039c2:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 80039c6:	e00c      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80039c8:	f00f fa04 	bl	8012dd4 <_Z16ei_read_timer_usv>
 80039cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039d0:	1a84      	subs	r4, r0, r2
 80039d2:	eb61 0503 	sbc.w	r5, r1, r3
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 80039e0:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 80039e2:	f107 0318 	add.w	r3, r7, #24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd ff03 	bl	80017f2 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80039ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd14 	bl	800441e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80039f6:	4623      	mov	r3, r4
 80039f8:	4618      	mov	r0, r3
 80039fa:	376c      	adds	r7, #108	; 0x6c
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a02:	bf00      	nop
 8003a04:	08001645 	.word	0x08001645
 8003a08:	20000030 	.word	0x20000030
 8003a0c:	0801dac4 	.word	0x0801dac4
 8003a10:	0801daec 	.word	0x0801daec
 8003a14:	0801db00 	.word	0x0801db00
 8003a18:	0801d620 	.word	0x0801d620

08003a1c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff fdd7 	bl	80035e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 8003a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <run_inference+0x2c>
        return nn_res;
 8003a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a46:	e00e      	b.n	8003a66 <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003a48:	f00f f9bc 	bl	8012dc4 <_Z29ei_run_impulse_check_canceledv>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f113 0f02 	cmn.w	r3, #2
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8003a5e:	f06f 0301 	mvn.w	r3, #1
 8003a62:	e000      	b.n	8003a66 <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3310      	adds	r3, #16
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fcc4 	bl	8002408 <_ZN2ei11ei_signal_tD1Ev>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8003a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a90:	b0a5      	sub	sp, #148	; 0x94
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	70fb      	strb	r3, [r7, #3]
 8003a9c:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f928 	bl	8003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f954 	bl	8003d68 <run_classifier_image_quantized>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461e      	mov	r6, r3
 8003ac4:	e0ef      	b.n	8003ca6 <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aca:	2100      	movs	r1, #0
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f016 fd2b 	bl	801a528 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8003ada:	2300      	movs	r3, #0
 8003adc:	2101      	movs	r1, #1
 8003ade:	f7fd fe1d 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8003ae2:	f00f f977 	bl	8012dd4 <_Z16ei_read_timer_usv>
 8003ae6:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d27c      	bcs.n	8003bfc <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003b18:	461d      	mov	r5, r3
 8003b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8003b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b28:	441a      	add	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d905      	bls.n	8003b3e <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8003b32:	4860      	ldr	r0, [pc, #384]	; (8003cb4 <process_impulse+0x228>)
 8003b34:	f000 f97a 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8003b38:	f06f 0604 	mvn.w	r6, #4
 8003b3c:	e0ad      	b.n	8003c9a <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8003b3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b4e:	460a      	mov	r2, r1
 8003b50:	2101      	movs	r1, #1
 8003b52:	f7fd fde3 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8003b56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b5a:	f107 0014 	add.w	r0, r7, #20
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	460b      	mov	r3, r1
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	f7ff f9a9 	bl	8002ebc <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 8003b6a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff f9d3 	bl	8002f1c <_ZN14SignalWithAxes10get_signalEv>
 8003b76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b82:	eeb0 0a67 	vmov.f32	s0, s15
 8003b86:	4619      	mov	r1, r3
 8003b88:	47a0      	blx	r4
 8003b8a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8003b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8003b92:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003b94:	4848      	ldr	r0, [pc, #288]	; (8003cb8 <process_impulse+0x22c>)
 8003b96:	f000 f949 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8003b9a:	f06f 0604 	mvn.w	r6, #4
 8003b9e:	2400      	movs	r4, #0
 8003ba0:	e015      	b.n	8003bce <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003ba2:	f00f f90f 	bl	8012dc4 <_Z29ei_run_impulse_check_canceledv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f113 0f02 	cmn.w	r3, #2
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8003bb8:	f06f 0601 	mvn.w	r6, #1
 8003bbc:	2400      	movs	r4, #0
 8003bbe:	e006      	b.n	8003bce <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8003bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bcc:	2401      	movs	r4, #1
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff4b 	bl	8003a6e <_ZN14SignalWithAxesD1Ev>
 8003bd8:	2c01      	cmp	r4, #1
 8003bda:	d001      	beq.n	8003be0 <process_impulse+0x154>
 8003bdc:	2400      	movs	r4, #0
 8003bde:	e000      	b.n	8003be2 <process_impulse+0x156>
 8003be0:	2401      	movs	r4, #1
 8003be2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd fdc3 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8003bec:	2c01      	cmp	r4, #1
 8003bee:	d154      	bne.n	8003c9a <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8003bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bfa:	e77c      	b.n	8003af6 <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8003bfc:	f00f f8ea 	bl	8012dd4 <_Z16ei_read_timer_usv>
 8003c00:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c04:	ebb0 0802 	subs.w	r8, r0, r2
 8003c08:	eb61 0903 	sbc.w	r9, r1, r3
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8003c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	f7fd f83a 	bl	8000c9c <__aeabi_ldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c3e:	4619      	mov	r1, r3
 8003c40:	481e      	ldr	r0, [pc, #120]	; (8003cbc <process_impulse+0x230>)
 8003c42:	f000 f8f3 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d210      	bcs.n	8003c74 <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8003c52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	f00f f8c9 	bl	8012df8 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8003c66:	4816      	ldr	r0, [pc, #88]	; (8003cc0 <process_impulse+0x234>)
 8003c68:	f000 f8e0 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c6e:	3301      	adds	r3, #1
 8003c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c72:	e7ea      	b.n	8003c4a <process_impulse+0x1be>
        }
        ei_printf("\n");
 8003c74:	4813      	ldr	r0, [pc, #76]	; (8003cc4 <process_impulse+0x238>)
 8003c76:	f000 f8d9 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    if (debug) {
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8003c80:	4811      	ldr	r0, [pc, #68]	; (8003cc8 <process_impulse+0x23c>)
 8003c82:	f000 f8d3 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fec4 	bl	8003a1c <run_inference>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461e      	mov	r6, r3
 8003c98:	e000      	b.n	8003c9c <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8003c9a:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8003c9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fd fd66 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>

}
 8003ca6:	4633      	mov	r3, r6
 8003ca8:	4618      	mov	r0, r3
 8003caa:	378c      	adds	r7, #140	; 0x8c
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cb2:	bf00      	nop
 8003cb4:	0801db04 	.word	0x0801db04
 8003cb8:	0801dac4 	.word	0x0801dac4
 8003cbc:	0801daec 	.word	0x0801daec
 8003cc0:	0801db00 	.word	0x0801db00
 8003cc4:	0801d620 	.word	0x0801d620
 8003cc8:	0801db30 	.word	0x0801db30

08003ccc <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <ei_construct_impulse+0x24>)
 8003cd8:	4618      	mov	r0, r3
 8003cda:	4611      	mov	r1, r2
 8003cdc:	23a4      	movs	r3, #164	; 0xa4
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f016 fbfa 	bl	801a4d8 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8003ce4:	bf00      	nop
}
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	0801dba8 	.word	0x0801dba8

08003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d00a      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d006      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	2b07      	cmp	r3, #7
 8003d12:	d002      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003d14:	f06f 0309 	mvn.w	r3, #9
 8003d18:	e01d      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d102      	bne.n	8003d2a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d24:	f06f 0308 	mvn.w	r3, #8
 8003d28:	e015      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d002      	beq.n	8003d3a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d34:	f06f 0308 	mvn.w	r3, #8
 8003d38:	e00d      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d002      	beq.n	8003d54 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d4e:	f06f 0308 	mvn.w	r3, #8
 8003d52:	e000      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	08002831 	.word	0x08002831

08003d68 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff ffbc 	bl	8003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8003d80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <run_classifier_image_quantized+0x26>
        return verify_res;
 8003d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d8c:	e00d      	b.n	8003daa <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d92:	2100      	movs	r1, #0
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f016 fbc7 	bl	801a528 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fd29 	bl	80037f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8003da6:	4603      	mov	r3, r0
 8003da8:	bf00      	nop

}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b0ae      	sub	sp, #184	; 0xb8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff81 	bl	8003ccc <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f107 0014 	add.w	r0, r7, #20
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	f7ff fe5a 	bl	8003a8c <process_impulse>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	37b8      	adds	r7, #184	; 0xb8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_Z6vprintPKcSt9__va_list>:
char x_arr[32];
char y_arr[32];
char z_arr[32];
char all_arr[100];
void vprint(const char *fmt, va_list argp)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b0b4      	sub	sp, #208	; 0xd0
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f017 fac3 	bl	801b380 <vsiprintf>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bfcc      	ite	gt
 8003e00:	2301      	movgt	r3, #1
 8003e02:	2300      	movle	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc fa38 	bl	8000284 <strlen>
 8003e14:	4603      	mov	r3, r0
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	f107 0308 	add.w	r3, r7, #8
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f014 fb50 	bl	80184c4 <CDC_Transmit_FS>
    }
}
 8003e24:	bf00      	nop
 8003e26:	37d0      	adds	r7, #208	; 0xd0
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8003e2c:	b40f      	push	{r0, r1, r2, r3}
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	6938      	ldr	r0, [r7, #16]
 8003e3e:	f7ff ffd0 	bl	8003de2 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e4c:	b004      	add	sp, #16
 8003e4e:	4770      	bx	lr

08003e50 <_Z16get_feature_datajjPf>:

static float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = {64.3030, 166.3883, 949.9591, 56.3030, 150.1942, 934.2856, 52.5455, 153.9223, 943.4694, 53.2727, 181.3010, 947.6326, 46.8485, 171.6311, 913.1020, 33.6364, 140.5243, 945.3061, 20.4242, 145.7670, 1011.4286, 27.3333, 165.2233, 1015.5918, 48.6667, 166.1553, 964.5306, 52.3030, 153.1068, 969.5510, 40.1818, 162.0777, 1006.1632, 40.4242, 169.7670, 984.4897, 53.8788, 149.0291, 960.3673, 61.6364, 127.0097, 901.4694, 46.7273, 135.5146, 925.3469, 37.2727, 169.0680, 958.8979, 51.3333, 195.9806, 944.5714, 67.4545, 177.3398, 927.7959, 56.5455, 159.9806, 967.3469, 25.3939, 168.0194, 997.9591, 5.2727, 170.1165, 1003.1021, 4.1818, 152.1747, 1007.6327, 12.7879, 132.0194, 984.6122, 33.8788, 128.4078, 963.6734, 60.3030, 153.4563, 940.4081, 70.7273, 178.5048, 972.8571, 69.1515, 177.8058, 978.7346, 75.5758, 137.8447, 903.9183, 73.8788, 113.3786, 901.4694, 51.5758, 128.8738, 941.8775, 32.5455, 164.8738, 941.7551, 36.1818, 190.7379, 937.4694, 36.5455, 198.7767, 982.6531, 16.4242, 179.4369, 1062.9796, 8.6667, 127.0097, 1020.9796, 23.3333, 98.0000, 994.0408, 32.1818, 128.6408, 944.2040, 24.9091, 182.9320, 929.5102, 22.2424, 210.5437, 944.2040, 47.5758, 192.2524, 942.2448, 82.3636, 149.8447, 943.9592, 98.8485, 127.0097, 952.8979, 77.5151, 136.3301, 971.5103, 47.3333, 155.9029, 1002.1224, 32.3030, 151.0097, 930.4898, 32.4242, 133.5340, 936.6122, 35.9394, 158.0000, 949.5918, 41.1515, 207.7476, 990.3673, 36.5455, 211.4757, 1006.7754, 29.6364, 170.2330, 1011.9183, 26.0000, 124.5631, 986.8163, 30.1212, 115.4757, 927.0612, 32.4242, 160.6796, 966.7346, 24.0606, 200.9903, 986.6938, 41.1515, 171.6311, 933.0612, 81.0303, 135.7476, 869.3878, 85.5152, 159.9806, 930.1224, 54.2424, 200.4078, 986.4490, 30.1212, 183.3981, 969.0612, 26.3636, 128.8738, 947.2653, 26.8485, 108.9515, 965.1428, 20.6667, 151.9417, 1005.9183, 17.8788, 201.4563, 1005.0613, 31.2121, 187.1262, 978.3673, 54.2424, 140.2913, 940.1632, 64.6667, 129.5728, 900.6122, 56.6667, 166.2718, 908.8163, 40.3030, 198.5437, 923.0204, 24.6667, 194.4660, 970.7755, 39.4545, 163.3592, 973.9591, 70.7273, 145.3010, 957.3061, 69.8788, 160.2136, 945.0612, 20.9091, 190.7379, 990.9795, -23.0909, 188.0582, 1024.1632, -9.1515, 153.4563, 1009.3469, 50.0000, 130.2718, 974.6938, 90.1212, 146.1165, 927.1837, 78.4848, 173.6116, 922.2856, 39.6970, 178.2718, 967.3469, 27.0909, 146.8155, 941.2653, 62.3636, 129.1068, 932.6938, 94.6060, 164.1747, 887.7551, 81.1515, 197.2621, 913.7143, 27.5758, 196.9126, 1034.3264, -20.6667, 157.4175, 1052.9387, -5.8788, 99.8641, 1004.0815, 43.3333, 111.8641, 947.1428, 57.7576, 173.0291, 933.1837, 39.8182, 217.3010, 979.1021, 24.3030, 204.7184, 971.6327, 40.4242, 146.8155, 947.7551, 75.4545, 121.8835, 962.5714, 83.9394, 148.4466, 925.1020, 50.6061, 174.6602, 983.3877, 12.7879, 157.4175, 1014.0000, 25.2727, 111.2815, 978.3673, 71.5758, 117.8058, 930.6122, 88.0606, 173.3786, 902.5714, 53.0303, 199.4757, 954.6122, 5.5152, 177.6893, 1004.6938, -7.2121, 124.4466, 970.7755, 32.9091, 120.9514, 952.8979, 63.0909, 172.6796, 929.8775, 50.1212, 200.5243, 946.7755, 21.3939, 183.8641, 1001.1428, 11.4545, 147.9806, 996.0000, 42.0000, 129.9223, 985.2244, 68.0606, 146.8155, 969.9183, 57.0303, 148.6796, 911.0204, 22.7273, 140.6408, 960.9796, 3.6970, 143.0874, 993.7959, 40.3030, 154.0388, 955.4694, 90.4848, 171.3981, 927.9183, 101.2727, 190.5048, 894.3673, 58.1212, 180.4854, 1011.1837, -6.9697, 134.5825, 1057.2245, -20.1818, 90.6602, 1015.3469, 29.1515, 108.0194, 953.9999, 64.4242, 169.4175, 890.4490, 68.9091, 206.9320, 940.6530, 58.6061, 208.0971, 973.8367, 54.2424, 165.1068, 984.0000, 61.7576, 122.0000, 972.4897, 62.0000, 119.6699, 933.0612, 34.3636, 148.0971, 952.0408, -2.6061, 158.9320, 1027.7142, -0.0606, 134.8155, 992.3265, 61.1515, 135.1651, 922.1632, 96.1818, 180.2524, 883.3469, 74.6061, 214.0388, 950.5714, 31.8182, 196.0971, 1013.8776, 0.6667, 134.3495, 1003.9591, 16.0606, 89.3786, 937.4694, 28.7879, 125.7281, 931.3469, 20.5455, 199.4757, 969.1836, 33.0303, 236.9903, 999.5510, 65.2727, 199.3592, 983.3877, 78.2424, 131.7864, 954.8571, 52.4242, 98.5825, 942.3674, 18.7273, 130.6214, 941.9999, 8.5455, 181.0680, 968.5714, 32.1818, 201.9223, 984.3673, 62.7273, 182.9320, 976.4082, 80.3030, 163.3592, 983.7551, 66.1212, 150.4272, 985.9591, 31.3333, 136.5631, 987.9183, 9.7576, 136.9126, 968.6938, 31.2121, 162.1942, 916.4081, 63.9394, 194.0000, 907.3469, 71.2121, 209.9612, 968.5714, 55.6970, 180.3689, 989.3878, 49.3939, 139.2427, 972.2449, 43.9394, 132.7184, 979.1021, 29.3939, 164.0582, 1002.6122, 23.6970, 173.8447, 981.7959, 39.4545, 145.8835, 933.6735, 65.2727, 137.0291, 944.9387, 76.9091, 167.9029, 925.7143, 61.8788, 200.1747, 917.0204, 31.9394, 198.4272, 929.9999, 4.0606, 167.3204, 965.5103, 3.5758, 140.0582, 1020.6122, 33.6364, 139.0097, 982.7755, 60.4242, 158.8155, 979.7142, 45.3939, 175.7087, 981.7959, 10.3636, 167.3204, 998.4490, 13.6364, 132.1359, 932.3265, 53.5151, 126.3107, 903.1837, 74.8485, 165.9223, 905.1428, 75.0909, 200.6408, 911.5101, 57.6364, 193.1845, 965.8776, 40.1818, 153.2233, 948.3673, 26.6061, 129.6893, 980.3265, 21.2727, 162.0777, 1006.6530, 24.3030, 189.3398, 992.3265, 27.6970, 173.0291, 1000.6530, 20.9091, 141.6893, 1023.4286, 38.1212, 130.7379, 982.7755, 75.9394, 154.2718, 913.7143, 80.1818, 177.2233, 908.3265, 41.8788, 167.7864, 965.5103, 20.3030, 128.4078, 962.4490, 55.9394, 118.3883, 951.5510, 96.0606, 164.7573, 929.0204, 91.8182, 202.2718, 954.9796, 49.1515, 192.4854, 979.5918, 12.6667, 142.5049, 955.8367, -6.1212, 114.5437, 1000.1632, 1.2727, 150.3107, 1029.4286, 38.2424, 187.7087, 950.5714, 60.7879, 178.9709, 909.1837, 39.6970, 156.2524, 992.8163, 19.3333, 142.3883, 996.2449, 58.8485, 154.8544, 972.0000, 94.8485, 173.9612, 892.4081, 82.1212, 168.4854, 937.1020, 26.7273, 136.7961, 1013.1428, -3.5758, 111.2815, 967.8367, 26.1212, 136.9126, 959.7551, 62.0000, 183.6311, 942.1224, 75.4545, 203.2039, 960.4897, 68.3030, 185.0291, 965.2653, 40.7879, 153.1068, 967.1021, -3.6970, 121.0680, 993.4286, -25.3939, 131.4369, 1002.4897, 5.2727, 168.3689, 944.5714, 58.1212, 189.6893, 948.7347, 85.8788, 179.0874, 969.3060, 91.0909, 147.0485, 980.5714, 90.4848, 138.4272, 916.1632, 62.4848, 154.1553, 897.4285, 8.0606, 162.6602, 984.0000, -31.4545, 138.7767, 982.7755, 1.2727, 130.9709, 974.6938, 59.5758, 161.7281, 958.0408, 92.0606, 191.3204, 972.3673, 90.7273, 190.9709, 951.7959, 57.3939, 167.7864, 935.2653, 7.9394, 143.7864, 991.3469, -23.3333, 123.8641, 998.6938, -1.3939, 125.4951, 930.7347, 45.3939, 165.2233, 953.3878, 74.3636, 205.7670, 951.9183, 71.4545, 194.8155, 985.3469, 73.8788, 157.3010, 958.4081, 79.6970, 146.8155, 895.1021, 48.1818, 158.6990, 939.6735, -11.3333, 147.6311, 1006.4081, -41.7576, 127.9417, 1028.4489, 4.1818, 133.7670, 984.1224, 69.1515, 160.6796, 920.6938, 96.9091, 189.4563, 919.8367, 78.4848, 206.2330, 950.9387, 43.2121, 182.5825, 981.7959, 26.6061, 136.6796, 986.8163, 22.7273, 104.9903, 942.3674, 14.6061, 131.3204, 979.7142, 6.6061, 179.2039, 1000.1632, 35.8182, 189.5728, 991.1019, 87.5758, 164.6408, 951.0612, 106.6061, 157.6505, 907.7142, 76.9091, 162.1942, 881.8775, 25.2727, 174.6602, 921.4285, -23.9394, 170.0000, 991.7142, -24.3030, 156.4854, 1029.1837, 27.6970, 142.8544, 983.7551, 82.2424, 152.2913, 987.1836, 106.2424, 180.7184, 973.8367, 81.0303, 177.9223, 933.0612, 38.7273, 152.2913, 895.3469, 6.6061, 145.4175, 937.4694, 3.6970, 166.3883, 945.5510, 33.3939, 176.7573, 954.2449, 67.9394, 172.0971, 994.5305, 77.0303, 166.7379, 1034.2040, 48.1818, 151.7087, 991.5918, 20.7879, 134.0000, 959.7551, 11.3333, 131.6699, 949.3469, 24.3030, 161.9612, 970.2856, 61.7576, 185.6116, 927.4285, 83.9394, 181.6505, 910.5306, 69.1515, 171.8641, 948.6122, 31.9394, 164.9903, 954.9796, 21.0303, 158.3495, 962.9387, 34.3636, 169.5340, 979.7142, 35.0909, 177.5728, 1010.2040, 23.8182, 156.4854, 1002.6122, 21.2727, 120.6019, 1003.2245, 43.8182, 126.4272, 972.1224, 63.8182, 161.3786, 901.9592, 54.2424, 189.1068, 923.6326, 37.1515, 173.3786, 912.0000, 42.3636, 140.2913, 937.8367, 59.6970, 139.1262, 939.7959, 70.7273, 171.8641, 954.4897, 46.1212, 185.2621, 976.4082, 10.0000, 166.8544, 1006.5305, 2.2424, 146.1165, 1017.4286, 23.3333, 152.2913, 987.5510, 34.6061, 165.5728, 986.3265, 35.3333, 161.6116, 958.2857, 42.8485, 146.6990, 939.0612, 55.8182, 160.9126, 948.6122, 56.3030, 169.3010, 950.2041, 55.8182, 149.6116, 979.1021, 61.6364, 129.1068, 924.4897, 63.0909, 143.2039, 914.3265, 51.5758, 189.3398, 965.5103, 38.0000, 219.0485, 1011.1837, 35.2121, 182.2330, 979.3469, 24.1818, 124.5631, 977.3877, -0.7879, 104.5243, 1030.6531, 4.3030, 148.7961, 1005.6735, 47.4545, 192.0194, 935.2653, 74.9697, 202.1553, 929.3877, 59.8182, 173.3786, 961.9591, 29.6364, 129.3398, 981.1836, 29.8788, 105.3398, 945.1836, 58.4848, 135.5146, 945.9183, 79.5758, 180.4854, 943.2244, 76.5454, 185.4951, 920.4489, 58.6061, 153.8058, 931.5918, 32.4242, 135.8641, 950.6938, 9.0303, 156.7184, 982.2858, 16.0606, 188.0582, 982.7755, 23.9394, 188.4078, 1003.7142, 21.5152, 155.9029, 1022.9388, 15.4545, 128.6408, 996.2449, 34.0000, 128.0582, 951.7959, 60.9091, 158.9320, 941.2653, 70.3636, 183.1650, 913.7143, 57.3939, 170.2330, 897.3061, 39.5758, 149.2621, 949.8367, 46.2424, 152.4078, 960.1224, 68.1818, 172.4466, 953.9999, 66.8485, 179.3204, 954.8571, 29.7576, 156.7184, 1008.7346, -4.6667, 133.1845, 1038.1224, 3.2121, 138.0777, 1005.0613, 44.5455, 163.3592, 982.0408, 78.7273, 174.4272, 917.1428, 76.5454, 168.7184, 896.0816, 42.4848, 165.4563, 902.5714, 14.8485, 162.8932, 934.2856, 29.7576, 170.9320, 959.6326, 69.1515, 182.9320, 954.6122, 71.4545, 172.0971, 945.1836, 24.9091, 148.6796, 994.1632, -20.7879, 146.9320, 1056.7347, -2.6061, 161.6116, 1030.7755, 56.1818, 163.1262, 941.8775, 86.2424, 150.1942, 889.2245, 58.0000, 152.7573, 940.2856, 16.3030, 156.7184, 963.4285, 22.6061, 158.0000, 953.5102, 70.1212, 166.1553, 920.3265, 100.9091, 181.4175, 919.8367, 80.9091, 179.3204, 951.5510, 39.8182, 156.4854, 997.1021, 11.3333, 139.7087, 985.2244, 5.3939, 158.1165, 1000.4081, 5.5152, 185.9612, 1010.9388, 18.7273, 170.9320, 1002.2449, 47.6970, 134.3495, 961.2245, 67.9394, 145.1845, 910.2857, 53.0303, 195.0485, 947.3878, 23.9394, 210.3107, 976.1632, 21.7576, 159.1650, 984.6122, 47.3333, 104.4078, 973.9591, 73.7576, 111.3981, 979.3469, 81.2727, 158.1165, 961.5918, 67.8182, 188.1747, 918.2449, 46.1212, 172.4466, 905.8776, 28.1818, 156.2524, 935.0204, 20.5455, 163.9417, 976.6531, 24.1818, 173.9612, 1002.6122, 29.0303, 167.9029, 1005.0613, 29.7576, 150.8932, 993.0612, 30.1212, 146.5825, 979.3469, 42.4848, 155.3204, 967.7142, 60.5454, 170.1165, 967.7142, 70.2424, 169.6505, 928.6531, 63.3333, 149.2621, 872.8163, 43.0909, 154.1553, 916.6531, 17.3939, 184.0971, 981.0612, 15.6970, 187.7087, 1000.5305, 40.3030, 139.2427, 972.1224, 52.5455, 101.1456, 965.7551, 39.4545, 140.6408, 1006.1632, 22.7273, 197.1456, 1002.3673, 22.9697, 194.5825, 985.5918, 46.8485, 131.9029, 931.9592, 71.8182, 106.8544, 915.6735, 72.4242, 155.4369, 906.0000, 50.4848, 204.2524, 913.9592, 28.7879, 204.0194, 970.6531, 30.0000, 164.6408, 990.1224, 51.8182, 125.6116, 947.3878, 48.1818, 129.4563, 944.2040, 13.0303, 182.2330, 1019.7551, -6.7273, 215.3204, 1053.4286, 17.6364, 168.7184, 983.2653, 43.6970, 101.2621, 935.8775, 52.0606, 107.9029, 931.7143, 47.8182, 173.0291, 931.7143, 49.5151, 220.5631, 984.1224, 63.9394, 188.0582, 966.0000, 80.5454, 115.9417, 895.1021, 80.1818, 101.9612, 884.0816, 49.5151, 161.0291, 957.4285, 20.0606, 218.3495, 1037.1428, 15.4545, 207.3981, 1029.5510, 31.6970, 135.3981, 950.6938, 38.0000, 95.5534, 908.8163, 17.2727, 151.4757, 998.0815, 5.0303, 228.8349, 1046.2040, 25.8788, 217.1845, 995.7551, 58.4848, 136.0971, 929.1428, 74.1212, 83.7864, 890.8163, 72.4242, 123.7476, 909.4285, 56.9091, 196.7961, 947.9999, 39.3333, 222.7767, 1009.9591, 45.6364, 164.6408, 962.4490, 66.6061, 97.8835, 892.0408, 54.0000, 113.7281, 960.8571, 27.0909, 182.6990, 1018.4081, 20.6667, 218.5825, 1039.8367, 41.8788, 170.0000, 960.8571, 45.3939, 96.1359, 873.5510, 17.6364, 100.3301, 927.0612, 0.1818, 187.7087, 973.5918, 22.9697, 254.3495, 1023.6735, 66.0000, 226.7379, 1000.1632, 79.5758, 134.4660, 930.6122, 66.0000, 65.1456, 896.2040, 40.9091, 103.0097, 926.2040, 19.9394, 189.5728, 1016.8164, 30.6061, 229.6505, 1034.2040, 58.4848, 165.6893, 906.2449, 71.5758, 98.3495, 878.2041, 55.9394, 124.0971, 953.2653, 36.7879, 197.1456, 1016.0815, 39.4545, 221.6116, 1032.8572, 43.4545, 148.2136, 928.8979, 33.5152, 76.9126, 894.3673, 16.0606, 115.9417, 951.5510, 17.7576, 213.4563, 1004.4490, 42.7273, 254.8155, 1028.4489, 66.9697, 200.0582, 954.2449, 63.5758, 112.6796, 913.1020, 48.1818, 87.9806, 911.8776, 31.8182, 152.2913, 949.4694, 22.2424, 217.6505, 1019.7551, 23.6970, 200.4078, 992.8163, 47.2121, 120.4854, 898.0408, 72.3030, 106.9709, 907.5918, 60.6667, 182.2330, 953.9999, 33.2727, 240.1359, 1018.2856, 20.3030, 205.3010, 1010.4489, 32.5455, 109.8835, 923.6326, 45.1515, 72.6019, 886.4081, 28.0606, 141.9223, 954.7347, 4.5455, 226.3883, 1021.9591, 28.1818, 229.6505, 1010.5714, 73.6364, 170.6990, 934.0408, 99.5758, 119.3204, 881.8775, 72.9091, 130.6214, 922.8979, 21.0303, 175.5922, 976.5306, -11.6970, 193.1845, 989.3878, 6.9697, 158.4660, 974.5714, 59.3333, 137.4951, 964.0408, 91.9394, 164.6408, 964.6531, 75.0909, 187.5922, 979.3469, 33.8788, 156.3689, 986.9387, 28.7879, 107.6699, 908.4489, 52.0606, 122.2330, 879.7959, 43.2121, 190.3883, 963.5510, 12.6667, 220.5631, 985.1019, 12.5455, 181.7670, 1016.5713, 54.4848, 139.1262, 986.3265, 87.2121, 128.8738, 981.0612, 74.6061, 151.1262, 976.1632, 33.1515, 166.8544, 929.9999, 15.6970, 158.3495, 926.9387, 32.1818, 158.0000, 934.5306, 62.7273, 173.2621, 934.4081, 74.8485, 182.0000, 947.1428, 51.2121, 171.3981, 985.4694, 11.0909, 148.7961, 1014.6122, 2.0000, 126.0777, 1001.8776, 29.6364, 130.3883, 970.4081, 54.2424, 158.8155, 962.3265, 59.2121, 183.7476, 968.2040, 52.3030, 177.6893, 945.3061, 41.3939, 146.2330, 931.8367, 35.2121, 132.1359, 930.9796, 48.5455, 155.3204, 964.5306, 70.1212, 182.2330, 969.7959, 66.3636, 167.3204, 931.4694, 26.4848, 134.5825, 983.7551, -4.5455, 135.7476, 995.5103, 13.5152, 176.2912, 1007.7551, 46.6061, 186.1942, 972.6122, 52.5455, 147.6311, 949.1020, 24.0606, 118.6214, 956.5714, 15.4545, 152.5243, 975.4286, 52.3030, 193.3010, 990.3673, 97.2727, 183.9806, 935.6326, 86.8485, 131.4369, 885.9183, 34.7273, 107.4369, 991.3469, 7.8182, 136.6796, 991.1019, 46.2424, 184.6796, 942.4898, 85.5152, 209.7281, 900.0000, 80.3030, 188.2912, 928.8979, 23.3333, 135.7476, 969.9183, -16.1818, 114.3107, 1004.3264, 16.4242, 167.3204, 1011.3062, 67.2121, 209.2621, 998.0815, 78.3636, 188.5243, 944.0816, 39.2121, 132.8349, 932.5714, -5.7576, 102.8932, 974.5714, 3.4545, 145.4175, 1005.5510, 59.3333, 196.6796, 949.1020, 104.9091, 203.2039, 850.5306, 94.4848, 177.9223, 937.7142, 37.0303, 131.2039, 995.1428, 7.6970, 109.8835, 979.3469, 39.6970, 159.8641, 965.8776, 54.9697, 201.6893, 927.5510, 19.8182, 174.6602, 949.9591, -13.2727, 127.1262, 969.4285, 20.3030, 143.7864, 974.9387, 79.0909, 193.5340, 958.8979, 96.5454, 215.9029, 922.7755, 52.4242, 178.5048, 927.6735, -4.3030, 114.5437, 970.7755, -23.6970, 103.5922, 1027.4694, 27.8182, 161.6116, 987.1836, 84.1818, 205.7670, 921.4285, 100.7879, 207.3981, 908.0816, 62.4848, 160.4466, 971.6327, 5.8788, 101.2621, 991.8367, 11.3333, 114.6602, 969.4285, 50.4848, 173.4951, 925.8367, 57.8788, 190.9709, 896.5714, 25.8788, 157.5340, 948.1224, 10.6061, 137.2621, 995.3878, 59.0909, 170.8155, 1000.2856, 106.0000, 204.1359, 957.6735, 87.9394, 186.3107, 913.5918, 21.5152, 128.8738, 957.0612, -27.0909, 86.4660, 990.9795, -9.6364, 126.8932, 991.1019, 49.8788, 194.0000, 958.0408, 86.3636, 223.5922, 930.3673, 76.9091, 189.2233, 952.6530, 41.5151, 127.0097, 978.8571, 20.3030, 95.5534, 1006.4081, 40.3030, 145.3010, 959.7551, 54.9697, 180.0194, 890.9387, 28.3030, 163.2427, 898.1633, -4.6667, 135.9806, 986.3265, 22.3636, 161.6116, 1019.2653, 81.7576, 196.6796, 946.5306, 98.8485, 209.2621, 915.9183, 53.1515, 171.7476, 939.1836, -9.7576, 108.8349, 1013.3877, -33.0303, 84.9515, 961.4694, -2.1212, 139.2427, 963.4285, 45.2727, 207.1650, 935.9999, 79.8182, 235.0097, 929.6326, 88.0606, 211.2427, 966.2449, 58.4848, 155.5534, 975.6735, 4.9091, 97.8835, 991.1019, -17.1515, 93.5728, 986.8163, 14.7273, 145.4175, 964.7755, 73.0303, 186.6602, 919.2244, 101.0303, 199.4757, 910.4081, 79.5758, 190.9709, 937.4694, 38.6061, 170.6990, 970.7755, 9.6364, 147.8641, 1000.2856, 7.8182, 139.4757, 1005.5510, 27.8182, 142.8544, 1028.3264, 58.8485, 147.5146, 981.3062, 80.4242, 152.2913, 932.3265, 71.5758, 176.0582, 939.4286, 40.4242, 195.3981, 941.3878, 24.4242, 176.9903, 915.6735, 35.9394, 140.2913, 904.4081, 43.2121, 145.8835, 969.4285, 37.7576, 173.0291, 988.8978, 34.3636, 176.1747, 988.1632, 37.0303, 157.4175, 1006.0408, 43.0909, 145.8835, 994.6530, 40.7879, 150.1942, 978.6122, 36.7879, 157.4175, 950.6938, 43.4545, 161.2621, 918.3673, 52.9091, 166.3883, 944.9387, 58.8485, 169.5340, 930.6122, 64.6667, 158.8155, 915.5510, 64.1818, 160.2136, 959.7551, 53.2727, 185.1456, 987.7959, 31.3333, 192.8349, 1003.7142, 6.9697, 154.1553, 987.1836, 2.0000, 122.0000, 1002.8571, 23.5758, 142.6214, 992.6938, 55.0909, 187.8252, 961.3469, 62.9697, 193.5340, 922.1632, 38.1212, 155.7864, 957.4285, 18.3636, 124.5631, 956.4490, 45.1515, 137.6116, 952.8979, 80.7879, 170.6990, 950.5714, 86.6061, 178.2718, 936.9796, 62.9697, 154.9709, 962.3265, 35.2121, 133.5340, 942.2448, 17.6364, 141.9223, 941.0204, 12.0606, 182.5825, 1001.3878, 22.6061, 201.5728, 989.6327, 47.2121, 168.1359, 986.9387, 55.9394, 134.0000, 962.6938, 27.0909, 134.5825, 975.4286, 3.8182, 159.7476, 995.6327, 13.1515, 175.3592, 943.7142, 50.4848, 166.1553, 947.1428, 89.8788, 156.9514, 948.7347, 94.3636, 153.2233, 911.1428, 67.3333, 161.8447, 944.3265, 30.0000, 169.7670, 956.4490, 7.8182, 150.7767, 948.6122, 20.1818, 140.5243, 998.2040, 44.4242, 150.0777, 961.3469, 63.4545, 176.2912, 985.7142, 47.6970, 199.8252, 983.8776, 12.1818, 177.6893, 964.4081, 4.1818, 134.6990, 980.9387, 24.6667, 130.1553, 949.4694, 50.4848, 161.3786, 952.8979, 66.0000, 186.1942, 972.7346, 63.6970, 169.5340, 957.1837, 59.8182, 144.1359, 977.6327, 58.3636, 141.9223, 943.3469, 45.2727, 154.3883, 957.5510, 37.1515, 167.0874, 976.0408, 36.7879, 166.5049, 955.5918, 38.0000, 152.6408, 987.1836, 33.7576, 154.8544, 975.0612, 27.5758, 160.0971, 943.2244, 29.5151, 181.7670, 998.8163, 32.0606, 188.5243, 977.8776, 46.6061, 152.1747, 957.3061, 61.7576, 132.6019, 933.1837, 52.5455, 162.3107, 956.8163, 34.8485, 193.1845, 978.2449, 31.9394, 169.7670, 942.8571, 45.5151, 134.1165, 951.9183, 58.1212, 143.2039, 981.0612, 48.3030, 172.7961, 947.5102, 28.1818, 172.0971, 963.9183, 16.5455, 168.3689, 982.5306, 27.5758, 160.3301, 975.4286, 54.9697, 156.3689, 945.1836, 59.0909, 153.2233, 938.6938, 42.6061, 178.5048, 1010.8163, 36.7879, 195.5146, 985.8367, 48.5455, 157.3010, 942.1224, 50.8485, 111.7476, 915.7959, 39.6970, 132.4854, 928.7755, 33.3939, 190.6214, 925.9592, 39.8182, 226.5048, 1019.2653, 46.7273, 191.0874, 1017.0613, 57.1515, 125.8447, 947.7551, 50.6061, 107.0874, 918.8571, 26.8485, 162.1942, 984.3673, 7.3333, 212.4078, 1016.9388, 21.6364, 194.0000, 965.0204, 50.1212, 137.6116, 968.8163, 61.1515, 108.2524, 945.7959, 49.6364, 137.0291, 953.1428, 36.1818, 187.5922, 970.1632, 45.6364, 189.9223, 916.7755, 65.2727, 149.8447, 904.4081, 61.7576, 140.9903, 934.5306, 34.4848, 177.1068, 970.0408, 5.8788, 194.0000, 1029.1837, 3.6970, 153.1068, 995.1428, 30.2424, 108.1359, 1008.3673, 69.7576, 129.2233, 975.1836, 74.2424, 169.1845, 892.4081, 41.0303, 178.2718, 932.0816, 11.4545, 171.8641, 936.6122, 33.6364, 156.6019, 937.2244, 82.8485, 167.3204, 920.4489, 89.2727, 182.8155, 931.1020, 42.7273, 182.8155, 1015.8367, -5.7576, 158.4660, 1028.4489, -5.8788, 123.0485, 1007.7551, 34.6061, 129.1068, 999.0613, 66.8485, 163.9417, 967.9591, 70.3636, 179.7864, 931.5918, 49.8788, 157.7670, 934.0408, 37.3939, 132.0194, 929.3877, 57.3939, 137.2621, 903.6734, 84.9091, 172.5631, 863.6326, 65.6364, 201.6893, 927.6735, 17.0303, 193.7670, 1036.1632, 1.5152, 155.2039, 1039.4694, 37.3939, 130.0388, 1002.3673, 59.5758, 148.6796, 980.8163, 34.7273, 179.2039, 975.9183, -7.4545, 172.0971, 975.6735, -3.8182, 140.9903, 973.2245, 49.5151, 132.9514, 955.5918, 96.0606, 159.5146, 908.4489, 105.1515, 186.3107, 887.1428, 71.8182, 188.8738, 965.8776, 24.3030, 154.6214, 999.1837, 20.1818, 120.6019, 962.6938, 50.9697, 138.6602, 930.4898, 55.5758, 190.9709, 947.7551, 22.4848, 202.1553, 975.1836, -10.6061, 162.0777, 1015.8367, 4.5455, 120.7184, 997.2245, 49.6364, 137.0291, 973.1021, 78.4848, 180.3689, 891.6734, 64.6667, 197.6116, 926.6938, 26.6061, 170.8155, 991.1019, 15.6970, 120.9514, 982.0408, 57.7576, 120.8349, 951.3061, 87.6970, 163.8252, 915.6735, 74.4848, 188.1747, 940.1632, 31.8182, 171.9806, 974.3264, 11.8182, 134.2330, 1001.3878, 28.7879, 117.1068, 1002.7346, 60.1818, 144.6019, 914.5714, 51.3333, 181.6505, 905.3877, 14.9697, 191.7864, 991.1019, -6.4848, 169.7670, 1010.0815, 33.3939, 142.3883, 971.2653, 75.0909, 152.7573, 924.7347, 70.7273, 173.0291, 951.1836, 30.8485, 174.4272, 970.1632, 7.0909, 155.9029, 990.2449, 35.0909, 139.5922, 997.1021, 81.7576, 137.9612, 941.5102, 86.8485, 145.4175, 875.9999, 50.4848, 158.0000, 928.4081, 7.3333, 174.6602, 1041.9183, 18.9697, 160.7961, 983.3877, 62.6061, 142.7379, 918.6122, 62.9697, 145.6505, 935.2653, 22.0000, 162.7767, 1005.3062, -8.1818, 182.8155, 1025.3877, 15.0909, 170.8155, 977.3877, 60.3030, 148.9126, 1000.4081, 83.8182, 139.2427, 904.4081, 62.2424, 147.2816, 887.7551, 16.4242, 165.1068, 984.6122, -3.2121, 173.7281, 1000.2856, 28.6667, 151.5922, 939.9183, 68.9091, 145.0680, 893.6326, 69.3939, 164.9903, 965.2653, 38.8485, 189.8058, 1036.0408, 14.8485, 163.9417, 980.0815, 33.3939, 118.0388, 963.3061, 63.2121, 127.0097, 969.1836, 56.9091, 173.0291, 918.8571, 30.2424, 192.6019, 958.0408, 5.2727, 175.8252, 999.1837, 30.9697, 134.5825, 952.7755, 70.7273, 130.3883, 894.7346, 68.5455, 171.6311, 958.1633, 40.5455, 201.4563, 1015.5918, 12.7879, 169.7670, 992.0815, 24.9091, 114.0777, 941.8775, 49.5151, 135.1651, 962.3265, 49.0303, 205.3010, 966.9796, 38.0000, 234.5437, 959.6326, 28.9091, 184.9126, 1012.7754, 22.2424, 100.4466, 983.3877, 40.7879, 73.3010, 981.3062, 69.1515, 142.8544, 942.7347, 77.5151, 204.6019, 881.1429, 64.5455, 211.5922, 889.9591, 37.5152, 189.1068, 949.3469, 21.5152, 163.9417, 981.3062, 34.1212, 142.8544, 1000.4081, 50.0000, 137.2621, 1007.6327, 43.8182, 148.9126, 1001.6327, 30.1212, 160.9126, 984.8571, 33.8788, 159.0485, 946.4081, 52.0606, 154.9709, 904.7755, 65.8788, 162.6602, 923.2653, 61.1515, 176.9903, 921.7959, 47.4545, 172.0971, 927.1837, 37.5152, 168.2524, 979.7142, 35.0909, 163.2427, 975.6735, 25.0303, 141.5728, 962.9387, 6.2424, 126.0777, 986.3265, 1.7576, 147.7476, 1014.8572, 40.9091, 188.0582, 1005.3062, 87.4545, 195.3981, 951.5510, 94.7273, 157.6505, 899.1428, 55.8182, 118.2718, 928.2856, 11.6970, 121.4175, 939.7959, 14.9697, 156.1359, 891.4285, 54.4848, 194.4660, 938.6938, 83.8182, 209.3786, 970.8979, 71.5758, 164.8738, 983.7551, 36.1818, 109.4175, 952.4081, 5.3939, 128.4078, 1029.9183, 8.1818, 193.4175, 1014.2449, 30.0000, 198.1942, 945.1836, 32.9091, 138.0777, 942.6122, 20.4242, 104.2913, 968.5714, 31.5758, 148.4466, 993.5510, 81.8788, 196.9126, 937.1020, 115.0909, 198.5437, 919.8367, 101.5151, 158.6990, 927.6735, 54.6061, 114.4272, 887.6326, 5.6364, 116.7573, 962.6938, -14.3636, 170.1165, 1011.5510, 16.4242, 213.2233, 998.6938, 71.0909, 202.5048, 964.7755, 81.5151, 156.9514, 942.3674, 34.1212, 125.1456, 1020.9796, -16.3030, 133.1845, 1005.3062, -6.6061, 165.9223, 993.6735, 50.6061, 175.4757, 944.0816, 86.0000, 144.1359, 883.3469, 68.9091, 126.0777, 922.5306, 44.3030, 160.4466, 969.1836, 65.6364, 200.5243, 967.9591, 96.9091, 186.6602, 900.3673, 75.4545, 142.6214, 883.5918, 5.6364, 110.8155, 1008.7346, -42.1212, 122.6990, 1047.5510, -14.3636, 161.0291, 987.7959, 46.2424, 194.2330, 948.8571, 80.1818, 203.3204, 943.4694, 60.7879, 169.7670, 937.8367

};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4a06      	ldr	r2, [pc, #24]	; (8003e7c <_Z16get_feature_datajjPf+0x2c>)
 8003e62:	1899      	adds	r1, r3, r2
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f016 fb34 	bl	801a4d8 <memcpy>
    return 0;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000048 	.word	0x20000048

08003e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b0ca      	sub	sp, #296	; 0x128
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e86:	f001 facb 	bl	8005420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e8a:	f000 f913 	bl	80040b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e8e:	f000 f9db 	bl	8004248 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8003e92:	f000 f99d 	bl	80041d0 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8003e96:	f014 fa57 	bl	8018348 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8003e9a:	f000 f981 	bl	80041a0 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_800;
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8003eaa:	2307      	movs	r3, #7
 8003eac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	myAccConfigDef.interruptEnable = true;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	//myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8003eb6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003eba:	4619      	mov	r1, r3
 8003ebc:	486c      	ldr	r0, [pc, #432]	; (8004070 <main+0x1f0>)
 8003ebe:	f7fd f963 	bl	8001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>

	LIS3DSH_X_calibrate(-1000.0, 980.0);
 8003ec2:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8004074 <main+0x1f4>
 8003ec6:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8004078 <main+0x1f8>
 8003eca:	f7fd fae3 	bl	8001494 <_Z19LIS3DSH_X_calibrateff>
	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 8003ece:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800407c <main+0x1fc>
 8003ed2:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8004080 <main+0x200>
 8003ed6:	f7fd fb0b 	bl	80014f0 <_Z19LIS3DSH_Y_calibrateff>
	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8003eda:	eddf 0a68 	vldr	s1, [pc, #416]	; 800407c <main+0x1fc>
 8003ede:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8004084 <main+0x204>
 8003ee2:	f7fd fb33 	bl	800154c <_Z19LIS3DSH_Z_calibrateff>
	signal_t signal;
 8003ee6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fa7f 	bl	80023ee <_ZN2ei11ei_signal_tC1Ev>
	  	signal.total_length = sizeof(features) / sizeof(features[0]);
 8003ef0:	f640 139c 	movw	r3, #2460	; 0x99c
 8003ef4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  	signal.get_data = &get_feature_data;
 8003ef8:	4b63      	ldr	r3, [pc, #396]	; (8004088 <main+0x208>)
 8003efa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003efe:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003f02:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fafd 	bl	8004508 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(;featuresarrayisready==false;)
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	; (800408c <main+0x20c>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d149      	bne.n	8003faa <main+0x12a>
		{
		  	if(trex==1){
 8003f16:	4b5e      	ldr	r3, [pc, #376]	; (8004090 <main+0x210>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d1f7      	bne.n	8003f0e <main+0x8e>
		  		trex=0;
 8003f1e:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <main+0x210>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
		  		myData = LIS3DSH_GetDataScaled();
 8003f24:	f7fd fa34 	bl	8001390 <_Z21LIS3DSH_GetDataScaledv>
 8003f28:	eef0 6a40 	vmov.f32	s13, s0
 8003f2c:	eeb0 7a60 	vmov.f32	s14, s1
 8003f30:	eef0 7a41 	vmov.f32	s15, s2
 8003f34:	4b57      	ldr	r3, [pc, #348]	; (8004094 <main+0x214>)
 8003f36:	edc3 6a00 	vstr	s13, [r3]
 8003f3a:	ed83 7a01 	vstr	s14, [r3, #4]
 8003f3e:	edc3 7a02 	vstr	s15, [r3, #8]
		  		  	features[3*countt]=myData.x;
 8003f42:	4b55      	ldr	r3, [pc, #340]	; (8004098 <main+0x218>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4a51      	ldr	r2, [pc, #324]	; (8004094 <main+0x214>)
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	4952      	ldr	r1, [pc, #328]	; (800409c <main+0x21c>)
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+1]=myData.y;
 8003f58:	4b4f      	ldr	r3, [pc, #316]	; (8004098 <main+0x218>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	3301      	adds	r3, #1
 8003f64:	4a4b      	ldr	r2, [pc, #300]	; (8004094 <main+0x214>)
 8003f66:	6852      	ldr	r2, [r2, #4]
 8003f68:	494c      	ldr	r1, [pc, #304]	; (800409c <main+0x21c>)
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+2]=myData.z;
 8003f70:	4b49      	ldr	r3, [pc, #292]	; (8004098 <main+0x218>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	4a45      	ldr	r2, [pc, #276]	; (8004094 <main+0x214>)
 8003f7e:	6892      	ldr	r2, [r2, #8]
 8003f80:	4946      	ldr	r1, [pc, #280]	; (800409c <main+0x21c>)
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	601a      	str	r2, [r3, #0]
		  		  	countt++;
 8003f88:	4b43      	ldr	r3, [pc, #268]	; (8004098 <main+0x218>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a42      	ldr	r2, [pc, #264]	; (8004098 <main+0x218>)
 8003f90:	6013      	str	r3, [r2, #0]
			  if(countt==EI_CLASSIFIER_RAW_SAMPLE_COUNT){
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <main+0x218>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003f9a:	d1b8      	bne.n	8003f0e <main+0x8e>
						countt=0;
 8003f9c:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <main+0x218>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
						featuresarrayisready=true;
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	; (800408c <main+0x20c>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
	  for(;featuresarrayisready==false;)
 8003fa8:	e7b1      	b.n	8003f0e <main+0x8e>


		  	}

		}
	  ei_impulse_result_t result = { 0 };
 8003faa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003fae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2100      	movs	r1, #0
 8003fbc:	f016 fab4 	bl	801a528 <memset>
	  	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fef2 	bl	8003db2 <run_classifier>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	  	      ei_printf("run_classifier returned: %d\n", res);
 8003fd4:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4831      	ldr	r0, [pc, #196]	; (80040a0 <main+0x220>)
 8003fdc:	f7ff ff26 	bl	8003e2c <_Z9ei_printfPKcz>

	  	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8003fe0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003fe4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fe8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003fec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003ff0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ff8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003ffc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004000:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004004:	4827      	ldr	r0, [pc, #156]	; (80040a4 <main+0x224>)
 8004006:	f7ff ff11 	bl	8003e2c <_Z9ei_printfPKcz>
	  	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

	  	      // print the predictions
	  	      ei_printf("[");
 800400a:	4827      	ldr	r0, [pc, #156]	; (80040a8 <main+0x228>)
 800400c:	f7ff ff0e 	bl	8003e2c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004016:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800401a:	2b01      	cmp	r3, #1
 800401c:	d81c      	bhi.n	8004058 <main+0x1d8>
	  	    	  ei_printf_float(result.classification[ix].value);
 800401e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004022:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8004026:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800402a:	3301      	adds	r3, #1
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	edd3 7a00 	vldr	s15, [r3]
 8004036:	eeb0 0a67 	vmov.f32	s0, s15
 800403a:	f00e fedd 	bl	8012df8 <_Z15ei_printf_floatf>
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	          ei_printf(", ");
	  	  #else
	  	          if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 800403e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004042:	2b01      	cmp	r3, #1
 8004044:	d002      	beq.n	800404c <main+0x1cc>
	  	              ei_printf(", ");
 8004046:	4819      	ldr	r0, [pc, #100]	; (80040ac <main+0x22c>)
 8004048:	f7ff fef0 	bl	8003e2c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800404c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004050:	3301      	adds	r3, #1
 8004052:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004056:	e7de      	b.n	8004016 <main+0x196>
	  	  #endif
	  	      }
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	      ei_printf_float(result.anomaly);
	  	  #endif
	  	      ei_printf("]\n\n\n");
 8004058:	4815      	ldr	r0, [pc, #84]	; (80040b0 <main+0x230>)
 800405a:	f7ff fee7 	bl	8003e2c <_Z9ei_printfPKcz>



	  HAL_Delay(1500);
 800405e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004062:	f001 fa4f 	bl	8005504 <HAL_Delay>
	  featuresarrayisready=false;
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <main+0x20c>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]

  }
 800406c:	e74f      	b.n	8003f0e <main+0x8e>
 800406e:	bf00      	nop
 8004070:	20002b20 	.word	0x20002b20
 8004074:	44750000 	.word	0x44750000
 8004078:	c47a0000 	.word	0xc47a0000
 800407c:	44820000 	.word	0x44820000
 8004080:	c47f0000 	.word	0xc47f0000
 8004084:	c4660000 	.word	0xc4660000
 8004088:	08003e51 	.word	0x08003e51
 800408c:	20002b85 	.word	0x20002b85
 8004090:	20002b84 	.word	0x20002b84
 8004094:	20002b78 	.word	0x20002b78
 8004098:	20002b88 	.word	0x20002b88
 800409c:	20000048 	.word	0x20000048
 80040a0:	0801dc78 	.word	0x0801dc78
 80040a4:	0801dc98 	.word	0x0801dc98
 80040a8:	0801dce0 	.word	0x0801dce0
 80040ac:	0801dce4 	.word	0x0801dce4
 80040b0:	0801dce8 	.word	0x0801dce8

080040b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b094      	sub	sp, #80	; 0x50
 80040b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ba:	f107 0320 	add.w	r3, r7, #32
 80040be:	2230      	movs	r2, #48	; 0x30
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f016 fa30 	bl	801a528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <_Z18SystemClock_Configv+0xe4>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	4a2d      	ldr	r2, [pc, #180]	; (8004198 <_Z18SystemClock_Configv+0xe4>)
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6413      	str	r3, [r2, #64]	; 0x40
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <_Z18SystemClock_Configv+0xe4>)
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f4:	2300      	movs	r3, #0
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	4b28      	ldr	r3, [pc, #160]	; (800419c <_Z18SystemClock_Configv+0xe8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <_Z18SystemClock_Configv+0xe8>)
 80040fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <_Z18SystemClock_Configv+0xe8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004110:	2303      	movs	r3, #3
 8004112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800411a:	2301      	movs	r3, #1
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800411e:	2310      	movs	r3, #16
 8004120:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004122:	2302      	movs	r3, #2
 8004124:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800412c:	2304      	movs	r3, #4
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004130:	2348      	movs	r3, #72	; 0x48
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004134:	2302      	movs	r3, #2
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004138:	2303      	movs	r3, #3
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800413c:	f107 0320 	add.w	r3, r7, #32
 8004140:	4618      	mov	r0, r3
 8004142:	f002 ff95 	bl	8007070 <HAL_RCC_OscConfig>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8004156:	f000 f939 	bl	80043cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800415a:	230f      	movs	r3, #15
 800415c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004166:	2300      	movs	r3, #0
 8004168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800416e:	f107 030c 	add.w	r3, r7, #12
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f003 f9f3 	bl	8007560 <HAL_RCC_ClockConfig>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800418a:	f000 f91f 	bl	80043cc <Error_Handler>
  }
}
 800418e:	bf00      	nop
 8004190:	3750      	adds	r7, #80	; 0x50
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40007000 	.word	0x40007000

080041a0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <_ZL11MX_CRC_Initv+0x28>)
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <_ZL11MX_CRC_Initv+0x2c>)
 80041a8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80041aa:	4807      	ldr	r0, [pc, #28]	; (80041c8 <_ZL11MX_CRC_Initv+0x28>)
 80041ac:	f001 fadf 	bl	800576e <HAL_CRC_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80041c0:	f000 f904 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20002b18 	.word	0x20002b18
 80041cc:	40023000 	.word	0x40023000

080041d0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 80041d6:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <_ZL12MX_SPI1_Initv+0x74>)
 80041d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041da:	4b19      	ldr	r3, [pc, #100]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 80041dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ee:	4b14      	ldr	r3, [pc, #80]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 80041fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004200:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 8004204:	2210      	movs	r2, #16
 8004206:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004208:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 800420a:	2200      	movs	r2, #0
 800420c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 8004210:	2200      	movs	r2, #0
 8004212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 8004216:	2200      	movs	r2, #0
 8004218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 800421c:	220a      	movs	r2, #10
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004220:	4807      	ldr	r0, [pc, #28]	; (8004240 <_ZL12MX_SPI1_Initv+0x70>)
 8004222:	f003 fb95 	bl	8007950 <HAL_SPI_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8004236:	f000 f8c9 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20002b20 	.word	0x20002b20
 8004244:	40013000 	.word	0x40013000

08004248 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424e:	f107 0314 	add.w	r3, r7, #20
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	4b48      	ldr	r3, [pc, #288]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	4a47      	ldr	r2, [pc, #284]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 8004268:	f043 0310 	orr.w	r3, r3, #16
 800426c:	6313      	str	r3, [r2, #48]	; 0x30
 800426e:	4b45      	ldr	r3, [pc, #276]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	4b41      	ldr	r3, [pc, #260]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a40      	ldr	r2, [pc, #256]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 8004284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b3e      	ldr	r3, [pc, #248]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	4a39      	ldr	r2, [pc, #228]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6313      	str	r3, [r2, #48]	; 0x30
 80042a6:	4b37      	ldr	r3, [pc, #220]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	4b33      	ldr	r3, [pc, #204]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	4a32      	ldr	r2, [pc, #200]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	6313      	str	r3, [r2, #48]	; 0x30
 80042c2:	4b30      	ldr	r3, [pc, #192]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 80042d8:	f043 0302 	orr.w	r3, r3, #2
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b29      	ldr	r3, [pc, #164]	; (8004384 <_ZL12MX_GPIO_Initv+0x13c>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 80042ea:	2200      	movs	r2, #0
 80042ec:	2108      	movs	r1, #8
 80042ee:	4826      	ldr	r0, [pc, #152]	; (8004388 <_ZL12MX_GPIO_Initv+0x140>)
 80042f0:	f001 fc0e 	bl	8005b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80042fa:	4824      	ldr	r0, [pc, #144]	; (800438c <_ZL12MX_GPIO_Initv+0x144>)
 80042fc:	f001 fc08 	bl	8005b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8004300:	2308      	movs	r3, #8
 8004302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004304:	2301      	movs	r3, #1
 8004306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430c:	2300      	movs	r3, #0
 800430e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	4619      	mov	r1, r3
 8004316:	481c      	ldr	r0, [pc, #112]	; (8004388 <_ZL12MX_GPIO_Initv+0x140>)
 8004318:	f001 fa46 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800431c:	2301      	movs	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	4619      	mov	r1, r3
 800432e:	4818      	ldr	r0, [pc, #96]	; (8004390 <_ZL12MX_GPIO_Initv+0x148>)
 8004330:	f001 fa3a 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004334:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800433a:	2301      	movs	r3, #1
 800433c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	4619      	mov	r1, r3
 800434c:	480f      	ldr	r0, [pc, #60]	; (800438c <_ZL12MX_GPIO_Initv+0x144>)
 800434e:	f001 fa2b 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004352:	2301      	movs	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004356:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800435a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4619      	mov	r1, r3
 8004366:	4808      	ldr	r0, [pc, #32]	; (8004388 <_ZL12MX_GPIO_Initv+0x140>)
 8004368:	f001 fa1e 	bl	80057a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2100      	movs	r1, #0
 8004370:	2006      	movs	r0, #6
 8004372:	f001 f9c6 	bl	8005702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004376:	2006      	movs	r0, #6
 8004378:	f001 f9df 	bl	800573a <HAL_NVIC_EnableIRQ>

}
 800437c:	bf00      	nop
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	40021000 	.word	0x40021000
 800438c:	40020c00 	.word	0x40020c00
 8004390:	40020000 	.word	0x40020000

08004394 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)){
 800439e:	2101      	movs	r1, #1
 80043a0:	4808      	ldr	r0, [pc, #32]	; (80043c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80043a2:	f001 fb9d 	bl	8005ae0 <HAL_GPIO_ReadPin>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_GPIO_EXTI_Callback+0x28>
				trex = 1;
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
		}
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000
 80043c8:	20002b84 	.word	0x20002b84

080043cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80043d0:	e7fe      	b.n	80043d0 <Error_Handler+0x4>

080043d2 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f907 	bl	80045f8 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8004400:	68fc      	ldr	r4, [r7, #12]
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8ed 	bl	80045e2 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4620      	mov	r0, r4
 8004410:	f7ff ffdf 	bl	80043d2 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	bd90      	pop	{r4, r7, pc}

0800441e <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800441e:	b590      	push	{r4, r7, lr}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	f000 f8fb 	bl	8004624 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800442e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f900 	bl	800463e <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 800443e:	4603      	mov	r3, r0
 8004440:	681c      	ldr	r4, [r3, #0]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f908 	bl	8004658 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8004448:	4603      	mov	r3, r0
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	47a0      	blx	r4
	__ptr = pointer();
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
      }
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	bd90      	pop	{r4, r7, pc}

08004460 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	ed93 7a00 	vldr	s14, [r3]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	edd3 7a00 	vldr	s15, [r3]
 8004476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447e:	d501      	bpl.n	8004484 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	e000      	b.n	8004486 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8004484:	687b      	ldr	r3, [r7, #4]
    }
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8004492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd f928 	bl	80016fa <_ZNKSt14_Function_base8_M_emptyEv>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 80044b0:	f7fd f9b5 	bl	800181e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68dc      	ldr	r4, [r3, #12]
 80044b8:	68fd      	ldr	r5, [r7, #12]
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f8d5 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80044c4:	4606      	mov	r6, r0
 80044c6:	1d3b      	adds	r3, r7, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f8d0 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80044ce:	4680      	mov	r8, r0
 80044d0:	463b      	mov	r3, r7
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f8d6 	bl	8004684 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80044d8:	4603      	mov	r3, r0
 80044da:	4642      	mov	r2, r8
 80044dc:	4631      	mov	r1, r6
 80044de:	4628      	mov	r0, r5
 80044e0:	47a0      	blx	r4
 80044e2:	4603      	mov	r3, r0
    }
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080044ee <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd f8dd 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004512:	6838      	ldr	r0, [r7, #0]
 8004514:	f000 f8c1 	bl	800469a <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004518:	4603      	mov	r3, r0
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f107 0308 	add.w	r3, r7, #8
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f8c4 	bl	80046b0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f836 	bl	80045a0 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004534:	f107 0308 	add.w	r3, r7, #8
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd ff4b 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800453e:	687b      	ldr	r3, [r7, #4]
	}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004552:	6838      	ldr	r0, [r7, #0]
 8004554:	f000 f8d6 	bl	8004704 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8004558:	4602      	mov	r2, r0
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	6811      	ldr	r1, [r2, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f8db 	bl	800471c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 f817 	bl	80045a0 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd ff2c 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800457c:	687b      	ldr	r3, [r7, #4]
	}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f8ed 	bl	8004770 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8004596:	4603      	mov	r3, r0
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f8f6 	bl	80047a2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f103 0208 	add.w	r2, r3, #8
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f000 f91f 	bl	8004806 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f103 020c 	add.w	r2, r3, #12
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	330c      	adds	r3, #12
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 f940 	bl	800485a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004604:	68fc      	ldr	r4, [r7, #12]
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f946 	bl	8004898 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800460c:	4602      	mov	r2, r0
 800460e:	f107 0308 	add.w	r3, r7, #8
 8004612:	4619      	mov	r1, r3
 8004614:	4620      	mov	r0, r4
 8004616:	f000 f94a 	bl	80048ae <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	bd90      	pop	{r4, r7, pc}

08004624 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f956 	bl	80048e0 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8004634:	4603      	mov	r3, r0
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 f956 	bl	80048fa <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800464e:	4603      	mov	r3, r0
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fc fffb 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f925 	bl	8004914 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00f      	beq.n	80046f0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80046d0:	687c      	ldr	r4, [r7, #4]
 80046d2:	463b      	mov	r3, r7
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 f92d 	bl	8004934 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80046da:	4603      	mov	r3, r0
 80046dc:	4619      	mov	r1, r3
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 f933 	bl	800494a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a05      	ldr	r2, [pc, #20]	; (80046fc <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 80046e8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 80046ee:	609a      	str	r2, [r3, #8]
      }
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd90      	pop	{r4, r7, pc}
 80046fa:	bf00      	nop
 80046fc:	0800496f 	.word	0x0800496f
 8004700:	080049b1 	.word	0x080049b1

08004704 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc ffc5 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800472e:	463b      	mov	r3, r7
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f95c 	bl	80049ee <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00f      	beq.n	800475c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800473c:	687c      	ldr	r4, [r7, #4]
 800473e:	463b      	mov	r3, r7
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f95f 	bl	8004a04 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004746:	4603      	mov	r3, r0
 8004748:	4619      	mov	r1, r3
 800474a:	4620      	mov	r0, r4
 800474c:	f000 f965 	bl	8004a1a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a05      	ldr	r2, [pc, #20]	; (8004768 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8004754:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 800475a:	609a      	str	r2, [r3, #8]
      }
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	08004a3f 	.word	0x08004a3f
 800476c:	08004a81 	.word	0x08004a81

08004770 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f99f 	bl	8004abe <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8004780:	4603      	mov	r3, r0
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ffed 	bl	800478c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80047b2:	4602      	mov	r2, r0
 80047b4:	f107 0308 	add.w	r3, r7, #8
 80047b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047bc:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80047c0:	6838      	ldr	r0, [r7, #0]
 80047c2:	f7ff ffe3 	bl	800478c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80047c6:	4602      	mov	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047ce:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff ffd8 	bl	800478c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80047dc:	4602      	mov	r2, r0
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ffed 	bl	80047f0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004816:	4603      	mov	r3, r0
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800481c:	6838      	ldr	r0, [r7, #0]
 800481e:	f7ff ffe7 	bl	80047f0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004822:	4603      	mov	r3, r0
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800482a:	f107 030c 	add.w	r3, r7, #12
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff ffde 	bl	80047f0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004834:	4603      	mov	r3, r0
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]
    }
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ffed 	bl	8004844 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800486a:	4603      	mov	r3, r0
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f7ff ffe7 	bl	8004844 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8004876:	4603      	mov	r3, r0
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800487e:	f107 030c 	add.w	r3, r7, #12
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ffde 	bl	8004844 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8004888:	4603      	mov	r3, r0
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	601a      	str	r2, [r3, #0]
    }
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 80048ae:	b5b0      	push	{r4, r5, r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80048ba:	68fc      	ldr	r4, [r7, #12]
 80048bc:	68b8      	ldr	r0, [r7, #8]
 80048be:	f000 f90b 	bl	8004ad8 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 80048c2:	4605      	mov	r5, r0
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ffe7 	bl	8004898 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4629      	mov	r1, r5
 80048d0:	4620      	mov	r0, r4
 80048d2:	f000 f90c 	bl	8004aee <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bdb0      	pop	{r4, r5, r7, pc}

080048e0 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f91d 	bl	8004b2a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80048f0:	4603      	mov	r3, r0
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 f91c 	bl	8004b42 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800490a:	4603      	mov	r3, r0
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	bf14      	ite	ne
 8004922:	2301      	movne	r3, #1
 8004924:	2300      	moveq	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800494a:	b590      	push	{r4, r7, lr}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8004954:	6838      	ldr	r0, [r7, #0]
 8004956:	f7ff ffed 	bl	8004934 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800495a:	4603      	mov	r3, r0
 800495c:	4622      	mov	r2, r4
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f8fb 	bl	8004b5c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	bd90      	pop	{r4, r7, pc}

0800496e <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800496e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f906 	bl	8004b8e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004982:	4604      	mov	r4, r0
 8004984:	68b8      	ldr	r0, [r7, #8]
 8004986:	f7ff fe72 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800498a:	4605      	mov	r5, r0
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff fe6e 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004992:	4606      	mov	r6, r0
 8004994:	6838      	ldr	r0, [r7, #0]
 8004996:	f7ff fe75 	bl	8004684 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800499a:	4603      	mov	r3, r0
 800499c:	4632      	mov	r2, r6
 800499e:	4629      	mov	r1, r5
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 f905 	bl	8004bb0 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 80049a6:	4603      	mov	r3, r0
      }
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049b0 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d109      	bne.n	80049d8 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f918 	bl	8004bfa <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80049ca:	4604      	mov	r4, r0
 80049cc:	68b8      	ldr	r0, [r7, #8]
 80049ce:	f000 f8de 	bl	8004b8e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80049d2:	4603      	mov	r3, r0
 80049d4:	6023      	str	r3, [r4, #0]
	    break;
 80049d6:	e005      	b.n	80049e4 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	461a      	mov	r2, r3
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f917 	bl	8004c12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80049e4:	2300      	movs	r3, #0
      }
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd90      	pop	{r4, r7, pc}

080049ee <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
	  { return true; }
 80049f6:	2301      	movs	r3, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8004a1a:	b590      	push	{r4, r7, lr}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8004a24:	6838      	ldr	r0, [r7, #0]
 8004a26:	f7ff ffed 	bl	8004a04 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f919 	bl	8004c68 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}

08004a3e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f924 	bl	8004c9a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004a52:	4604      	mov	r4, r0
 8004a54:	68b8      	ldr	r0, [r7, #8]
 8004a56:	f7ff fe0a 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fe06 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a62:	4606      	mov	r6, r0
 8004a64:	6838      	ldr	r0, [r7, #0]
 8004a66:	f7ff fe0d 	bl	8004684 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4632      	mov	r2, r6
 8004a6e:	4629      	mov	r1, r5
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 f923 	bl	8004cbc <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8004a76:	4603      	mov	r3, r0
      }
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a80 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d109      	bne.n	8004aa8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f936 	bl	8004d06 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	68b8      	ldr	r0, [r7, #8]
 8004a9e:	f000 f8fc 	bl	8004c9a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6023      	str	r3, [r4, #0]
	    break;
 8004aa6:	e005      	b.n	8004ab4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f935 	bl	8004d1e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8004ab4:	2300      	movs	r3, #0
      }
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd90      	pop	{r4, r7, pc}

08004abe <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f953 	bl	8004d74 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004aee:	b590      	push	{r4, r7, lr}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004afa:	68fc      	ldr	r4, [r7, #12]
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff fecb 	bl	8004898 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4619      	mov	r1, r3
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f940 	bl	8004d8c <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1d1c      	adds	r4, r3, #4
 8004b10:	68b8      	ldr	r0, [r7, #8]
 8004b12:	f7ff ffe1 	bl	8004ad8 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004b16:	4603      	mov	r3, r0
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f000 f949 	bl	8004db2 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd90      	pop	{r4, r7, pc}

08004b2a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f94e 	bl	8004dd4 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 f94f 	bl	8004df0 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004b68:	68b8      	ldr	r0, [r7, #8]
 8004b6a:	f7ff fee3 	bl	8004934 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	681c      	ldr	r4, [r3, #0]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7fc fd8a 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	2004      	movs	r0, #4
 8004b7e:	f7fc fd13 	bl	80015a8 <_ZnwjPv>
 8004b82:	4603      	mov	r3, r0
 8004b84:	601c      	str	r4, [r3, #0]
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd90      	pop	{r4, r7, pc}

08004b8e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f936 	bl	8004e08 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004b9c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f93e 	bl	8004e20 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	bf00      	nop
	}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	b086      	sub	sp, #24
 8004bb6:	af02      	add	r7, sp, #8
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f938 	bl	8004e36 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	68b8      	ldr	r0, [r7, #8]
 8004bca:	f7ff fd50 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004bce:	4605      	mov	r5, r0
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fd4c 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	6838      	ldr	r0, [r7, #0]
 8004bda:	f7ff fd53 	bl	8004684 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004bde:	4603      	mov	r3, r0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	4633      	mov	r3, r6
 8004be4:	462a      	mov	r2, r5
 8004be6:	4621      	mov	r1, r4
 8004be8:	4640      	mov	r0, r8
 8004bea:	f000 f92f 	bl	8004e4c <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8004bee:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bfa <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fc fd42 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004c12:	b5b0      	push	{r4, r5, r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d016      	beq.n	8004c54 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	dc19      	bgt.n	8004c5e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d002      	beq.n	8004c34 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d00a      	beq.n	8004c48 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8004c32:	e014      	b.n	8004c5e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff ffe0 	bl	8004bfa <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	68b8      	ldr	r0, [r7, #8]
 8004c3e:	f7ff ffa6 	bl	8004b8e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004c42:	4603      	mov	r3, r0
 8004c44:	6023      	str	r3, [r4, #0]
	      break;
 8004c46:	e00a      	b.n	8004c5e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8004c48:	462a      	mov	r2, r5
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f921 	bl	8004e94 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8004c52:	e004      	b.n	8004c5e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8004c54:	4621      	mov	r1, r4
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f935 	bl	8004ec6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004c5c:	bf00      	nop
	  return false;
 8004c5e:	2300      	movs	r3, #0
	}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdb0      	pop	{r4, r5, r7, pc}

08004c68 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004c74:	68b8      	ldr	r0, [r7, #8]
 8004c76:	f7ff fec5 	bl	8004a04 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7fc fd05 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004c82:	4603      	mov	r3, r0
 8004c84:	4619      	mov	r1, r3
 8004c86:	2004      	movs	r0, #4
 8004c88:	f7fc fc8e 	bl	80015a8 <_ZnwjPv>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd90      	pop	{r4, r7, pc}

08004c9a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f91b 	bl	8004ede <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004ca8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f923 	bl	8004ef6 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	bf00      	nop
	}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af02      	add	r7, sp, #8
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f91d 	bl	8004f0c <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	68b8      	ldr	r0, [r7, #8]
 8004cd6:	f7ff fcca 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004cda:	4605      	mov	r5, r0
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fcc6 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	6838      	ldr	r0, [r7, #0]
 8004ce6:	f7ff fccd 	bl	8004684 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004cea:	4603      	mov	r3, r0
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4633      	mov	r3, r6
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4640      	mov	r0, r8
 8004cf6:	f000 f914 	bl	8004f22 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8004cfa:	4603      	mov	r3, r0
    }
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d06 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fc fcbc 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004d1e:	b5b0      	push	{r4, r5, r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d016      	beq.n	8004d60 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	dc19      	bgt.n	8004d6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d002      	beq.n	8004d40 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d00a      	beq.n	8004d54 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8004d3e:	e014      	b.n	8004d6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff ffe0 	bl	8004d06 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004d46:	4604      	mov	r4, r0
 8004d48:	68b8      	ldr	r0, [r7, #8]
 8004d4a:	f7ff ffa6 	bl	8004c9a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	6023      	str	r3, [r4, #0]
	      break;
 8004d52:	e00a      	b.n	8004d6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8004d54:	462a      	mov	r2, r5
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f906 	bl	8004f6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8004d5e:	e004      	b.n	8004d6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8004d60:	4621      	mov	r1, r4
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f91a 	bl	8004f9c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004d68:	bf00      	nop
	  return false;
 8004d6a:	2300      	movs	r3, #0
	}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bdb0      	pop	{r4, r5, r7, pc}

08004d74 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f919 	bl	8004fb4 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8004d82:	4603      	mov	r3, r0
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004d8c:	b590      	push	{r4, r7, lr}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004d96:	687c      	ldr	r4, [r7, #4]
 8004d98:	6838      	ldr	r0, [r7, #0]
 8004d9a:	f7ff fd7d 	bl	8004898 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4619      	mov	r1, r3
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f914 	bl	8004fd0 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}

08004db2 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004dbc:	6838      	ldr	r0, [r7, #0]
 8004dbe:	f7ff fe8b 	bl	8004ad8 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 f906 	bl	8004ff2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f905 	bl	8005008 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fc fc46 	bl	80016a2 <_ZNKSt9_Any_data9_M_accessEv>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	7338      	strb	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004e5a:	68b8      	ldr	r0, [r7, #8]
 8004e5c:	f7ff ffeb 	bl	8004e36 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e60:	4603      	mov	r3, r0
 8004e62:	681c      	ldr	r4, [r3, #0]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fc02 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	681d      	ldr	r5, [r3, #0]
 8004e6e:	6838      	ldr	r0, [r7, #0]
 8004e70:	f7ff fbfd 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e74:	4603      	mov	r3, r0
 8004e76:	681e      	ldr	r6, [r3, #0]
 8004e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7a:	f7ff fc03 	bl	8004684 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	4631      	mov	r1, r6
 8004e86:	4628      	mov	r0, r5
 8004e88:	47a0      	blx	r4
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e94 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004ea0:	68b8      	ldr	r0, [r7, #8]
 8004ea2:	f7ff ffb1 	bl	8004e08 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	681c      	ldr	r4, [r3, #0]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7fc fbee 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	2004      	movs	r0, #4
 8004eb6:	f7fc fb77 	bl	80015a8 <_ZnwjPv>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	601c      	str	r4, [r3, #0]
	}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd90      	pop	{r4, r7, pc}

08004ec6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8a6 	bl	8005022 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc fbdb 	bl	80016a2 <_ZNKSt9_Any_data9_M_accessEv>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	7338      	strb	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004f30:	68b8      	ldr	r0, [r7, #8]
 8004f32:	f7ff ffeb 	bl	8004f0c <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004f36:	4606      	mov	r6, r0
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fb98 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	681c      	ldr	r4, [r3, #0]
 8004f42:	6838      	ldr	r0, [r7, #0]
 8004f44:	f7ff fb93 	bl	800466e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	681d      	ldr	r5, [r3, #0]
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4e:	f7ff fb99 	bl	8004684 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004f52:	4603      	mov	r3, r0
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	462a      	mov	r2, r5
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f7fd ffcb 	bl	8002ef6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004f6a:	b590      	push	{r4, r7, lr}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004f76:	68b8      	ldr	r0, [r7, #8]
 8004f78:	f7ff ffb1 	bl	8004ede <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7fc fb84 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4619      	mov	r1, r3
 8004f88:	2004      	movs	r0, #4
 8004f8a:	f7fc fb0d 	bl	80015a8 <_ZnwjPv>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	6013      	str	r3, [r2, #0]
	}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd90      	pop	{r4, r7, pc}

08004f9c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f847 	bl	800503a <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f846 	bl	8005052 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004fda:	6838      	ldr	r0, [r7, #0]
 8004fdc:	f7ff fc5c 	bl	8004898 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f828 	bl	8005068 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8005018:	4603      	mov	r3, r0
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc fb2e 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8005030:	4603      	mov	r3, r0
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc fb22 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8005048:	4603      	mov	r3, r0
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_MspInit+0x4c>)
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	4a0f      	ldr	r2, [pc, #60]	; (80050cc <HAL_MspInit+0x4c>)
 8005090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005094:	6453      	str	r3, [r2, #68]	; 0x44
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <HAL_MspInit+0x4c>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	603b      	str	r3, [r7, #0]
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_MspInit+0x4c>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	4a08      	ldr	r2, [pc, #32]	; (80050cc <HAL_MspInit+0x4c>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	; 0x40
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_MspInit+0x4c>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800

080050d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0b      	ldr	r2, [pc, #44]	; (800510c <HAL_CRC_MspInit+0x3c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10d      	bne.n	80050fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <HAL_CRC_MspInit+0x40>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4a09      	ldr	r2, [pc, #36]	; (8005110 <HAL_CRC_MspInit+0x40>)
 80050ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050f0:	6313      	str	r3, [r2, #48]	; 0x30
 80050f2:	4b07      	ldr	r3, [pc, #28]	; (8005110 <HAL_CRC_MspInit+0x40>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40023000 	.word	0x40023000
 8005110:	40023800 	.word	0x40023800

08005114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800511c:	f107 0314 	add.w	r3, r7, #20
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	60da      	str	r2, [r3, #12]
 800512a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a19      	ldr	r2, [pc, #100]	; (8005198 <HAL_SPI_MspInit+0x84>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d12b      	bne.n	800518e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <HAL_SPI_MspInit+0x88>)
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_SPI_MspInit+0x88>)
 8005140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005144:	6453      	str	r3, [r2, #68]	; 0x44
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_SPI_MspInit+0x88>)
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <HAL_SPI_MspInit+0x88>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <HAL_SPI_MspInit+0x88>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	6313      	str	r3, [r2, #48]	; 0x30
 8005162:	4b0e      	ldr	r3, [pc, #56]	; (800519c <HAL_SPI_MspInit+0x88>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800516e:	23e0      	movs	r3, #224	; 0xe0
 8005170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005172:	2302      	movs	r3, #2
 8005174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800517a:	2303      	movs	r3, #3
 800517c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800517e:	2305      	movs	r3, #5
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005182:	f107 0314 	add.w	r3, r7, #20
 8005186:	4619      	mov	r1, r3
 8005188:	4805      	ldr	r0, [pc, #20]	; (80051a0 <HAL_SPI_MspInit+0x8c>)
 800518a:	f000 fb0d 	bl	80057a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800518e:	bf00      	nop
 8005190:	3728      	adds	r7, #40	; 0x28
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40013000 	.word	0x40013000
 800519c:	40023800 	.word	0x40023800
 80051a0:	40020000 	.word	0x40020000

080051a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051a8:	e7fe      	b.n	80051a8 <NMI_Handler+0x4>

080051aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ae:	e7fe      	b.n	80051ae <HardFault_Handler+0x4>

080051b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051b4:	e7fe      	b.n	80051b4 <MemManage_Handler+0x4>

080051b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051b6:	b480      	push	{r7}
 80051b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051ba:	e7fe      	b.n	80051ba <BusFault_Handler+0x4>

080051bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051c0:	e7fe      	b.n	80051c0 <UsageFault_Handler+0x4>

080051c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051f0:	f000 f968 	bl	80054c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051f4:	bf00      	nop
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80051fc:	2001      	movs	r0, #1
 80051fe:	f000 fca1 	bl	8005b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800520c:	4802      	ldr	r0, [pc, #8]	; (8005218 <OTG_FS_IRQHandler+0x10>)
 800520e:	f000 fe01 	bl	8005e14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	2000455c 	.word	0x2000455c

0800521c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
	return 1;
 8005220:	2301      	movs	r3, #1
}
 8005222:	4618      	mov	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <_kill>:

int _kill(int pid, int sig)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005236:	f015 f8ff 	bl	801a438 <__errno>
 800523a:	4603      	mov	r3, r0
 800523c:	2216      	movs	r2, #22
 800523e:	601a      	str	r2, [r3, #0]
	return -1;
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <_exit>:

void _exit (int status)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005254:	f04f 31ff 	mov.w	r1, #4294967295
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ffe7 	bl	800522c <_kill>
	while (1) {}		/* Make sure we hang here */
 800525e:	e7fe      	b.n	800525e <_exit+0x12>

08005260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e00a      	b.n	8005288 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005272:	f3af 8000 	nop.w
 8005276:	4601      	mov	r1, r0
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	60ba      	str	r2, [r7, #8]
 800527e:	b2ca      	uxtb	r2, r1
 8005280:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3301      	adds	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	dbf0      	blt.n	8005272 <_read+0x12>
	}

return len;
 8005290:	687b      	ldr	r3, [r7, #4]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e009      	b.n	80052c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	60ba      	str	r2, [r7, #8]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	3301      	adds	r3, #1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	dbf1      	blt.n	80052ac <_write+0x12>
	}
	return len;
 80052c8:	687b      	ldr	r3, [r7, #4]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <_close>:

int _close(int file)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
	return -1;
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052fa:	605a      	str	r2, [r3, #4]
	return 0;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <_isatty>:

int _isatty(int file)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
	return 1;
 8005312:	2301      	movs	r3, #1
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
	return 0;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005344:	4a14      	ldr	r2, [pc, #80]	; (8005398 <_sbrk+0x5c>)
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <_sbrk+0x60>)
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005350:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <_sbrk+0x64>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005358:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <_sbrk+0x64>)
 800535a:	4a12      	ldr	r2, [pc, #72]	; (80053a4 <_sbrk+0x68>)
 800535c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <_sbrk+0x64>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	429a      	cmp	r2, r3
 800536a:	d207      	bcs.n	800537c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800536c:	f015 f864 	bl	801a438 <__errno>
 8005370:	4603      	mov	r3, r0
 8005372:	220c      	movs	r2, #12
 8005374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	e009      	b.n	8005390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800537c:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <_sbrk+0x64>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <_sbrk+0x64>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4413      	add	r3, r2
 800538a:	4a05      	ldr	r2, [pc, #20]	; (80053a0 <_sbrk+0x64>)
 800538c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800538e:	68fb      	ldr	r3, [r7, #12]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20020000 	.word	0x20020000
 800539c:	00000400 	.word	0x00000400
 80053a0:	20002b8c 	.word	0x20002b8c
 80053a4:	20004ca0 	.word	0x20004ca0

080053a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <SystemInit+0x20>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <SystemInit+0x20>)
 80053b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e000ed00 	.word	0xe000ed00

080053cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80053cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053d0:	480d      	ldr	r0, [pc, #52]	; (8005408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80053d2:	490e      	ldr	r1, [pc, #56]	; (800540c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053d8:	e002      	b.n	80053e0 <LoopCopyDataInit>

080053da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053de:	3304      	adds	r3, #4

080053e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053e4:	d3f9      	bcc.n	80053da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053e6:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053e8:	4c0b      	ldr	r4, [pc, #44]	; (8005418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80053ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053ec:	e001      	b.n	80053f2 <LoopFillZerobss>

080053ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053f0:	3204      	adds	r2, #4

080053f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053f4:	d3fb      	bcc.n	80053ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053f6:	f7ff ffd7 	bl	80053a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053fa:	f015 f835 	bl	801a468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053fe:	f7fe fd3f 	bl	8003e80 <main>
  bx  lr    
 8005402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800540c:	20002a98 	.word	0x20002a98
  ldr r2, =_sidata
 8005410:	0801f7a0 	.word	0x0801f7a0
  ldr r2, =_sbss
 8005414:	20002a98 	.word	0x20002a98
  ldr r4, =_ebss
 8005418:	20004c9c 	.word	0x20004c9c

0800541c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800541c:	e7fe      	b.n	800541c <ADC_IRQHandler>
	...

08005420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_Init+0x40>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <HAL_Init+0x40>)
 800542a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800542e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_Init+0x40>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <HAL_Init+0x40>)
 8005436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800543a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800543c:	4b08      	ldr	r3, [pc, #32]	; (8005460 <HAL_Init+0x40>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a07      	ldr	r2, [pc, #28]	; (8005460 <HAL_Init+0x40>)
 8005442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005448:	2003      	movs	r0, #3
 800544a:	f000 f94f 	bl	80056ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800544e:	200f      	movs	r0, #15
 8005450:	f000 f808 	bl	8005464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005454:	f7ff fe14 	bl	8005080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40023c00 	.word	0x40023c00

08005464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800546c:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <HAL_InitTick+0x54>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b12      	ldr	r3, [pc, #72]	; (80054bc <HAL_InitTick+0x58>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	4619      	mov	r1, r3
 8005476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800547a:	fbb3 f3f1 	udiv	r3, r3, r1
 800547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f967 	bl	8005756 <HAL_SYSTICK_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e00e      	b.n	80054b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d80a      	bhi.n	80054ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005498:	2200      	movs	r2, #0
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	f000 f92f 	bl	8005702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054a4:	4a06      	ldr	r2, [pc, #24]	; (80054c0 <HAL_InitTick+0x5c>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200026b8 	.word	0x200026b8
 80054bc:	200026c0 	.word	0x200026c0
 80054c0:	200026bc 	.word	0x200026bc

080054c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_IncTick+0x20>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <HAL_IncTick+0x24>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4413      	add	r3, r2
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <HAL_IncTick+0x24>)
 80054d6:	6013      	str	r3, [r2, #0]
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	200026c0 	.word	0x200026c0
 80054e8:	20002b90 	.word	0x20002b90

080054ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return uwTick;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_GetTick+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20002b90 	.word	0x20002b90

08005504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800550c:	f7ff ffee 	bl	80054ec <HAL_GetTick>
 8005510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d005      	beq.n	800552a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <HAL_Delay+0x44>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800552a:	bf00      	nop
 800552c:	f7ff ffde 	bl	80054ec <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	429a      	cmp	r2, r3
 800553a:	d8f7      	bhi.n	800552c <HAL_Delay+0x28>
  {
  }
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	200026c0 	.word	0x200026c0

0800554c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <__NVIC_SetPriorityGrouping+0x44>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005568:	4013      	ands	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800557e:	4a04      	ldr	r2, [pc, #16]	; (8005590 <__NVIC_SetPriorityGrouping+0x44>)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	60d3      	str	r3, [r2, #12]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <__NVIC_GetPriorityGrouping+0x18>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	f003 0307 	and.w	r3, r3, #7
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db0b      	blt.n	80055da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	f003 021f 	and.w	r2, r3, #31
 80055c8:	4907      	ldr	r1, [pc, #28]	; (80055e8 <__NVIC_EnableIRQ+0x38>)
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	2001      	movs	r0, #1
 80055d2:	fa00 f202 	lsl.w	r2, r0, r2
 80055d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e100 	.word	0xe000e100

080055ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	6039      	str	r1, [r7, #0]
 80055f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	db0a      	blt.n	8005616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	490c      	ldr	r1, [pc, #48]	; (8005638 <__NVIC_SetPriority+0x4c>)
 8005606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	440b      	add	r3, r1
 8005610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005614:	e00a      	b.n	800562c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	4908      	ldr	r1, [pc, #32]	; (800563c <__NVIC_SetPriority+0x50>)
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	3b04      	subs	r3, #4
 8005624:	0112      	lsls	r2, r2, #4
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	440b      	add	r3, r1
 800562a:	761a      	strb	r2, [r3, #24]
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	e000e100 	.word	0xe000e100
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f1c3 0307 	rsb	r3, r3, #7
 800565a:	2b04      	cmp	r3, #4
 800565c:	bf28      	it	cs
 800565e:	2304      	movcs	r3, #4
 8005660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3304      	adds	r3, #4
 8005666:	2b06      	cmp	r3, #6
 8005668:	d902      	bls.n	8005670 <NVIC_EncodePriority+0x30>
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3b03      	subs	r3, #3
 800566e:	e000      	b.n	8005672 <NVIC_EncodePriority+0x32>
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005674:	f04f 32ff 	mov.w	r2, #4294967295
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43da      	mvns	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	401a      	ands	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005688:	f04f 31ff 	mov.w	r1, #4294967295
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	fa01 f303 	lsl.w	r3, r1, r3
 8005692:	43d9      	mvns	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005698:	4313      	orrs	r3, r2
         );
}
 800569a:	4618      	mov	r0, r3
 800569c:	3724      	adds	r7, #36	; 0x24
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056b8:	d301      	bcc.n	80056be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ba:	2301      	movs	r3, #1
 80056bc:	e00f      	b.n	80056de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056be:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <SysTick_Config+0x40>)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056c6:	210f      	movs	r1, #15
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	f7ff ff8e 	bl	80055ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <SysTick_Config+0x40>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056d6:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <SysTick_Config+0x40>)
 80056d8:	2207      	movs	r2, #7
 80056da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	e000e010 	.word	0xe000e010

080056ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ff29 	bl	800554c <__NVIC_SetPriorityGrouping>
}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	4603      	mov	r3, r0
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005714:	f7ff ff3e 	bl	8005594 <__NVIC_GetPriorityGrouping>
 8005718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	6978      	ldr	r0, [r7, #20]
 8005720:	f7ff ff8e 	bl	8005640 <NVIC_EncodePriority>
 8005724:	4602      	mov	r2, r0
 8005726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800572a:	4611      	mov	r1, r2
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff ff5d 	bl	80055ec <__NVIC_SetPriority>
}
 8005732:	bf00      	nop
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	4603      	mov	r3, r0
 8005742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff ff31 	bl	80055b0 <__NVIC_EnableIRQ>
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff ffa2 	bl	80056a8 <SysTick_Config>
 8005764:	4603      	mov	r3, r0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e00e      	b.n	800579e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	795b      	ldrb	r3, [r3, #5]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d105      	bne.n	8005796 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fc9d 	bl	80050d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	; 0x24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e16b      	b.n	8005a9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057c4:	2201      	movs	r2, #1
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	429a      	cmp	r2, r3
 80057de:	f040 815a 	bne.w	8005a96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d005      	beq.n	80057fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d130      	bne.n	800585c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4313      	orrs	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005830:	2201      	movs	r2, #1
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 0201 	and.w	r2, r3, #1
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d017      	beq.n	8005898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	2203      	movs	r2, #3
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4013      	ands	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d123      	bne.n	80058ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	08da      	lsrs	r2, r3, #3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3208      	adds	r2, #8
 80058ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	220f      	movs	r2, #15
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4313      	orrs	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	08da      	lsrs	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3208      	adds	r2, #8
 80058e6:	69b9      	ldr	r1, [r7, #24]
 80058e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	2203      	movs	r2, #3
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 0203 	and.w	r2, r3, #3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80b4 	beq.w	8005a96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4b60      	ldr	r3, [pc, #384]	; (8005ab4 <HAL_GPIO_Init+0x30c>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	4a5f      	ldr	r2, [pc, #380]	; (8005ab4 <HAL_GPIO_Init+0x30c>)
 8005938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800593c:	6453      	str	r3, [r2, #68]	; 0x44
 800593e:	4b5d      	ldr	r3, [pc, #372]	; (8005ab4 <HAL_GPIO_Init+0x30c>)
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800594a:	4a5b      	ldr	r2, [pc, #364]	; (8005ab8 <HAL_GPIO_Init+0x310>)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	089b      	lsrs	r3, r3, #2
 8005950:	3302      	adds	r3, #2
 8005952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	220f      	movs	r2, #15
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a52      	ldr	r2, [pc, #328]	; (8005abc <HAL_GPIO_Init+0x314>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d02b      	beq.n	80059ce <HAL_GPIO_Init+0x226>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a51      	ldr	r2, [pc, #324]	; (8005ac0 <HAL_GPIO_Init+0x318>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d025      	beq.n	80059ca <HAL_GPIO_Init+0x222>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a50      	ldr	r2, [pc, #320]	; (8005ac4 <HAL_GPIO_Init+0x31c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01f      	beq.n	80059c6 <HAL_GPIO_Init+0x21e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a4f      	ldr	r2, [pc, #316]	; (8005ac8 <HAL_GPIO_Init+0x320>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d019      	beq.n	80059c2 <HAL_GPIO_Init+0x21a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a4e      	ldr	r2, [pc, #312]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_GPIO_Init+0x216>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a4d      	ldr	r2, [pc, #308]	; (8005ad0 <HAL_GPIO_Init+0x328>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00d      	beq.n	80059ba <HAL_GPIO_Init+0x212>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a4c      	ldr	r2, [pc, #304]	; (8005ad4 <HAL_GPIO_Init+0x32c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d007      	beq.n	80059b6 <HAL_GPIO_Init+0x20e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a4b      	ldr	r2, [pc, #300]	; (8005ad8 <HAL_GPIO_Init+0x330>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_GPIO_Init+0x20a>
 80059ae:	2307      	movs	r3, #7
 80059b0:	e00e      	b.n	80059d0 <HAL_GPIO_Init+0x228>
 80059b2:	2308      	movs	r3, #8
 80059b4:	e00c      	b.n	80059d0 <HAL_GPIO_Init+0x228>
 80059b6:	2306      	movs	r3, #6
 80059b8:	e00a      	b.n	80059d0 <HAL_GPIO_Init+0x228>
 80059ba:	2305      	movs	r3, #5
 80059bc:	e008      	b.n	80059d0 <HAL_GPIO_Init+0x228>
 80059be:	2304      	movs	r3, #4
 80059c0:	e006      	b.n	80059d0 <HAL_GPIO_Init+0x228>
 80059c2:	2303      	movs	r3, #3
 80059c4:	e004      	b.n	80059d0 <HAL_GPIO_Init+0x228>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e002      	b.n	80059d0 <HAL_GPIO_Init+0x228>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <HAL_GPIO_Init+0x228>
 80059ce:	2300      	movs	r3, #0
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	f002 0203 	and.w	r2, r2, #3
 80059d6:	0092      	lsls	r2, r2, #2
 80059d8:	4093      	lsls	r3, r2
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059e0:	4935      	ldr	r1, [pc, #212]	; (8005ab8 <HAL_GPIO_Init+0x310>)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	089b      	lsrs	r3, r3, #2
 80059e6:	3302      	adds	r3, #2
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059ee:	4b3b      	ldr	r3, [pc, #236]	; (8005adc <HAL_GPIO_Init+0x334>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a12:	4a32      	ldr	r2, [pc, #200]	; (8005adc <HAL_GPIO_Init+0x334>)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a18:	4b30      	ldr	r3, [pc, #192]	; (8005adc <HAL_GPIO_Init+0x334>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4013      	ands	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a3c:	4a27      	ldr	r2, [pc, #156]	; (8005adc <HAL_GPIO_Init+0x334>)
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a42:	4b26      	ldr	r3, [pc, #152]	; (8005adc <HAL_GPIO_Init+0x334>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_GPIO_Init+0x334>)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <HAL_GPIO_Init+0x334>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a90:	4a12      	ldr	r2, [pc, #72]	; (8005adc <HAL_GPIO_Init+0x334>)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2b0f      	cmp	r3, #15
 8005aa0:	f67f ae90 	bls.w	80057c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	3724      	adds	r7, #36	; 0x24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	40013800 	.word	0x40013800
 8005abc:	40020000 	.word	0x40020000
 8005ac0:	40020400 	.word	0x40020400
 8005ac4:	40020800 	.word	0x40020800
 8005ac8:	40020c00 	.word	0x40020c00
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40021400 	.word	0x40021400
 8005ad4:	40021800 	.word	0x40021800
 8005ad8:	40021c00 	.word	0x40021c00
 8005adc:	40013c00 	.word	0x40013c00

08005ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	887b      	ldrh	r3, [r7, #2]
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
 8005afc:	e001      	b.n	8005b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	807b      	strh	r3, [r7, #2]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b20:	787b      	ldrb	r3, [r7, #1]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b26:	887a      	ldrh	r2, [r7, #2]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b2c:	e003      	b.n	8005b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b2e:	887b      	ldrh	r3, [r7, #2]
 8005b30:	041a      	lsls	r2, r3, #16
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	619a      	str	r2, [r3, #24]
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b5a:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fc16 	bl	8004394 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40013c00 	.word	0x40013c00

08005b74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b76:	b08f      	sub	sp, #60	; 0x3c
 8005b78:	af0a      	add	r7, sp, #40	; 0x28
 8005b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e10f      	b.n	8005da6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f012 fdd7 	bl	8018754 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f002 fd80 	bl	80086ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	687e      	ldr	r6, [r7, #4]
 8005bd2:	466d      	mov	r5, sp
 8005bd4:	f106 0410 	add.w	r4, r6, #16
 8005bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005be0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005be4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005be8:	1d33      	adds	r3, r6, #4
 8005bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bec:	6838      	ldr	r0, [r7, #0]
 8005bee:	f002 fc57 	bl	80084a0 <USB_CoreInit>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0d0      	b.n	8005da6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f002 fd6e 	bl	80086ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	73fb      	strb	r3, [r7, #15]
 8005c14:	e04a      	b.n	8005cac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c16:	7bfa      	ldrb	r2, [r7, #15]
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	333d      	adds	r3, #61	; 0x3d
 8005c26:	2201      	movs	r2, #1
 8005c28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c2a:	7bfa      	ldrb	r2, [r7, #15]
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	333c      	adds	r3, #60	; 0x3c
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c3e:	7bfa      	ldrb	r2, [r7, #15]
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	b298      	uxth	r0, r3
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	3344      	adds	r3, #68	; 0x44
 8005c52:	4602      	mov	r2, r0
 8005c54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c56:	7bfa      	ldrb	r2, [r7, #15]
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	3340      	adds	r3, #64	; 0x40
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c6a:	7bfa      	ldrb	r2, [r7, #15]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	3348      	adds	r3, #72	; 0x48
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c7e:	7bfa      	ldrb	r2, [r7, #15]
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	334c      	adds	r3, #76	; 0x4c
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3354      	adds	r3, #84	; 0x54
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
 8005cac:	7bfa      	ldrb	r2, [r7, #15]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d3af      	bcc.n	8005c16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
 8005cba:	e044      	b.n	8005d46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005cbc:	7bfa      	ldrb	r2, [r7, #15]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cd2:	7bfa      	ldrb	r2, [r7, #15]
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ce4:	7bfa      	ldrb	r2, [r7, #15]
 8005ce6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ce8:	7bfa      	ldrb	r2, [r7, #15]
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cfe:	7bfa      	ldrb	r2, [r7, #15]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d14:	7bfa      	ldrb	r2, [r7, #15]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d2a:	7bfa      	ldrb	r2, [r7, #15]
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	3301      	adds	r3, #1
 8005d44:	73fb      	strb	r3, [r7, #15]
 8005d46:	7bfa      	ldrb	r2, [r7, #15]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d3b5      	bcc.n	8005cbc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	603b      	str	r3, [r7, #0]
 8005d56:	687e      	ldr	r6, [r7, #4]
 8005d58:	466d      	mov	r5, sp
 8005d5a:	f106 0410 	add.w	r4, r6, #16
 8005d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d6e:	1d33      	adds	r3, r6, #4
 8005d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d72:	6838      	ldr	r0, [r7, #0]
 8005d74:	f002 fd06 	bl	8008784 <USB_DevInit>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e00d      	b.n	8005da6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f003 fe55 	bl	8009a4e <USB_DevDisconnect>

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_PCD_Start+0x1c>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e020      	b.n	8005e0c <HAL_PCD_Start+0x5e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d109      	bne.n	8005dee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d005      	beq.n	8005dee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f002 fc58 	bl	80086a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f003 fe05 	bl	8009a0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e14:	b590      	push	{r4, r7, lr}
 8005e16:	b08d      	sub	sp, #52	; 0x34
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f003 fec3 	bl	8009bb6 <USB_GetMode>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 848a 	bne.w	800674c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f003 fe27 	bl	8009a90 <USB_ReadInterrupts>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8480 	beq.w	800674a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f003 fe14 	bl	8009a90 <USB_ReadInterrupts>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d107      	bne.n	8005e82 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f002 0202 	and.w	r2, r2, #2
 8005e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f003 fe02 	bl	8009a90 <USB_ReadInterrupts>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d161      	bne.n	8005f5a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0210 	bic.w	r2, r2, #16
 8005ea4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	f003 020f 	and.w	r2, r3, #15
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	0c5b      	lsrs	r3, r3, #17
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d124      	bne.n	8005f1c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d035      	beq.n	8005f4a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6a38      	ldr	r0, [r7, #32]
 8005ef2:	f003 fc39 	bl	8009768 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f02:	441a      	add	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	6a1a      	ldr	r2, [r3, #32]
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f14:	441a      	add	r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	621a      	str	r2, [r3, #32]
 8005f1a:	e016      	b.n	8005f4a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	0c5b      	lsrs	r3, r3, #17
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	2b06      	cmp	r3, #6
 8005f26:	d110      	bne.n	8005f4a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f2e:	2208      	movs	r2, #8
 8005f30:	4619      	mov	r1, r3
 8005f32:	6a38      	ldr	r0, [r7, #32]
 8005f34:	f003 fc18 	bl	8009768 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f44:	441a      	add	r2, r3
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699a      	ldr	r2, [r3, #24]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0210 	orr.w	r2, r2, #16
 8005f58:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f003 fd96 	bl	8009a90 <USB_ReadInterrupts>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f6e:	f040 80a7 	bne.w	80060c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f003 fd9b 	bl	8009ab6 <USB_ReadDevAllOutEpInterrupt>
 8005f80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005f82:	e099      	b.n	80060b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 808e 	beq.w	80060ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f003 fdbf 	bl	8009b1e <USB_ReadDevOutEPInterrupt>
 8005fa0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00c      	beq.n	8005fc6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	461a      	mov	r2, r3
 8005fba:	2301      	movs	r3, #1
 8005fbc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fec3 	bl	8006d4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00c      	beq.n	8005fea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2308      	movs	r3, #8
 8005fe0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005fe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 ff99 	bl	8006f1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	461a      	mov	r2, r3
 8006002:	2310      	movs	r3, #16
 8006004:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d030      	beq.n	8006072 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d109      	bne.n	8006030 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800602a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800602e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4413      	add	r3, r2
 8006042:	3304      	adds	r3, #4
 8006044:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	78db      	ldrb	r3, [r3, #3]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d108      	bne.n	8006060 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2200      	movs	r2, #0
 8006052:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	b2db      	uxtb	r3, r3
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f012 fc80 	bl	8018960 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	461a      	mov	r2, r3
 800606e:	2302      	movs	r3, #2
 8006070:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	461a      	mov	r2, r3
 800608a:	2320      	movs	r3, #32
 800608c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	461a      	mov	r2, r3
 80060a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	3301      	adds	r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f47f af62 	bne.w	8005f84 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f003 fce3 	bl	8009a90 <USB_ReadInterrupts>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060d4:	f040 80db 	bne.w	800628e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f003 fd04 	bl	8009aea <USB_ReadDevAllInEpInterrupt>
 80060e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80060e8:	e0cd      	b.n	8006286 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80c2 	beq.w	800627a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f003 fd2a 	bl	8009b5a <USB_ReadDevInEPInterrupt>
 8006106:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d057      	beq.n	80061c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	2201      	movs	r2, #1
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	43db      	mvns	r3, r3
 800612c:	69f9      	ldr	r1, [r7, #28]
 800612e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006132:	4013      	ands	r3, r2
 8006134:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	461a      	mov	r2, r3
 8006144:	2301      	movs	r3, #1
 8006146:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d132      	bne.n	80061b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	334c      	adds	r3, #76	; 0x4c
 8006160:	6819      	ldr	r1, [r3, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4403      	add	r3, r0
 8006170:	3348      	adds	r3, #72	; 0x48
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4419      	add	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	4613      	mov	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4403      	add	r3, r0
 8006184:	334c      	adds	r3, #76	; 0x4c
 8006186:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d113      	bne.n	80061b6 <HAL_PCD_IRQHandler+0x3a2>
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006192:	4613      	mov	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	3354      	adds	r3, #84	; 0x54
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d108      	bne.n	80061b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061ae:	461a      	mov	r2, r3
 80061b0:	2101      	movs	r1, #1
 80061b2:	f003 fd31 	bl	8009c18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f012 fb4a 	bl	8018856 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	461a      	mov	r2, r3
 80061da:	2308      	movs	r3, #8
 80061dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	461a      	mov	r2, r3
 80061f6:	2310      	movs	r3, #16
 80061f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	461a      	mov	r2, r3
 8006212:	2340      	movs	r3, #64	; 0x40
 8006214:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d023      	beq.n	8006268 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006222:	6a38      	ldr	r0, [r7, #32]
 8006224:	f002 fc12 	bl	8008a4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622a:	4613      	mov	r3, r2
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	3338      	adds	r3, #56	; 0x38
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	3304      	adds	r3, #4
 800623a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	78db      	ldrb	r3, [r3, #3]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d108      	bne.n	8006256 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2200      	movs	r2, #0
 8006248:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	b2db      	uxtb	r3, r3
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f012 fb97 	bl	8018984 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	461a      	mov	r2, r3
 8006264:	2302      	movs	r3, #2
 8006266:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006272:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fcdb 	bl	8006c30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	3301      	adds	r3, #1
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	085b      	lsrs	r3, r3, #1
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	2b00      	cmp	r3, #0
 800628a:	f47f af2e 	bne.w	80060ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f003 fbfc 	bl	8009a90 <USB_ReadInterrupts>
 8006298:	4603      	mov	r3, r0
 800629a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800629e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062a2:	d122      	bne.n	80062ea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d108      	bne.n	80062d4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80062ca:	2100      	movs	r1, #0
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fec3 	bl	8007058 <HAL_PCDEx_LPM_Callback>
 80062d2:	e002      	b.n	80062da <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f012 fb35 	bl	8018944 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80062e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f003 fbce 	bl	8009a90 <USB_ReadInterrupts>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fe:	d112      	bne.n	8006326 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b01      	cmp	r3, #1
 800630e:	d102      	bne.n	8006316 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f012 faf1 	bl	80188f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006324:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f003 fbb0 	bl	8009a90 <USB_ReadInterrupts>
 8006330:	4603      	mov	r3, r0
 8006332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	f040 80b7 	bne.w	80064ac <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2110      	movs	r1, #16
 8006358:	4618      	mov	r0, r3
 800635a:	f002 fb77 	bl	8008a4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800635e:	2300      	movs	r3, #0
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006362:	e046      	b.n	80063f2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	461a      	mov	r2, r3
 8006372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006376:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006392:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006396:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	461a      	mov	r2, r3
 80063a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	3301      	adds	r3, #1
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d3b3      	bcc.n	8006364 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800640e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	2b00      	cmp	r3, #0
 8006416:	d016      	beq.n	8006446 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006428:	f043 030b 	orr.w	r3, r3, #11
 800642c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800643e:	f043 030b 	orr.w	r3, r3, #11
 8006442:	6453      	str	r3, [r2, #68]	; 0x44
 8006444:	e015      	b.n	8006472 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006458:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800645c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646c:	f043 030b 	orr.w	r3, r3, #11
 8006470:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006480:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006484:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006496:	461a      	mov	r2, r3
 8006498:	f003 fbbe 	bl	8009c18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80064aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f003 faed 	bl	8009a90 <USB_ReadInterrupts>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c0:	d124      	bne.n	800650c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f003 fb83 	bl	8009bd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f002 fb38 	bl	8008b46 <USB_GetDevSpeed>
 80064d6:	4603      	mov	r3, r0
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681c      	ldr	r4, [r3, #0]
 80064e2:	f001 fa29 	bl	8007938 <HAL_RCC_GetHCLKFreq>
 80064e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	4620      	mov	r0, r4
 80064f2:	f002 f837 	bl	8008564 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f012 f9d5 	bl	80188a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800650a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f003 fabd 	bl	8009a90 <USB_ReadInterrupts>
 8006516:	4603      	mov	r3, r0
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d10a      	bne.n	8006536 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f012 f9b2 	bl	801888a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695a      	ldr	r2, [r3, #20]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f002 0208 	and.w	r2, r2, #8
 8006534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f003 faa8 	bl	8009a90 <USB_ReadInterrupts>
 8006540:	4603      	mov	r3, r0
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d122      	bne.n	8006590 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006556:	2301      	movs	r3, #1
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
 800655a:	e014      	b.n	8006586 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006560:	4613      	mov	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d105      	bne.n	8006580 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	b2db      	uxtb	r3, r3
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb27 	bl	8006bce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	3301      	adds	r3, #1
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658c:	429a      	cmp	r2, r3
 800658e:	d3e5      	bcc.n	800655c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f003 fa7b 	bl	8009a90 <USB_ReadInterrupts>
 800659a:	4603      	mov	r3, r0
 800659c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a4:	d13b      	bne.n	800661e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065a6:	2301      	movs	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
 80065aa:	e02b      	b.n	8006604 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c0:	4613      	mov	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	3340      	adds	r3, #64	; 0x40
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d115      	bne.n	80065fe <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80065d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	da12      	bge.n	80065fe <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	4613      	mov	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	333f      	adds	r3, #63	; 0x3f
 80065e8:	2201      	movs	r2, #1
 80065ea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fae8 	bl	8006bce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	3301      	adds	r3, #1
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	429a      	cmp	r2, r3
 800660c:	d3ce      	bcc.n	80065ac <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695a      	ldr	r2, [r3, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800661c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f003 fa34 	bl	8009a90 <USB_ReadInterrupts>
 8006628:	4603      	mov	r3, r0
 800662a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800662e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006632:	d155      	bne.n	80066e0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006634:	2301      	movs	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
 8006638:	e045      	b.n	80066c6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d12e      	bne.n	80066c0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006662:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006664:	2b00      	cmp	r3, #0
 8006666:	da2b      	bge.n	80066c0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006674:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006678:	429a      	cmp	r2, r3
 800667a:	d121      	bne.n	80066c0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006680:	4613      	mov	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066bc:	6053      	str	r3, [r2, #4]
            break;
 80066be:	e007      	b.n	80066d0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	3301      	adds	r3, #1
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d3b4      	bcc.n	800663a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80066de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f003 f9d3 	bl	8009a90 <USB_ReadInterrupts>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f4:	d10a      	bne.n	800670c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f012 f956 	bl	80189a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800670a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f003 f9bd 	bl	8009a90 <USB_ReadInterrupts>
 8006716:	4603      	mov	r3, r0
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b04      	cmp	r3, #4
 800671e:	d115      	bne.n	800674c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f012 f946 	bl	80189c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6859      	ldr	r1, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	430a      	orrs	r2, r1
 8006746:	605a      	str	r2, [r3, #4]
 8006748:	e000      	b.n	800674c <HAL_PCD_IRQHandler+0x938>
      return;
 800674a:	bf00      	nop
    }
  }
}
 800674c:	3734      	adds	r7, #52	; 0x34
 800674e:	46bd      	mov	sp, r7
 8006750:	bd90      	pop	{r4, r7, pc}

08006752 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <HAL_PCD_SetAddress+0x1a>
 8006768:	2302      	movs	r3, #2
 800676a:	e013      	b.n	8006794 <HAL_PCD_SetAddress+0x42>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f003 f91b 	bl	80099c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	4608      	mov	r0, r1
 80067a6:	4611      	mov	r1, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	70fb      	strb	r3, [r7, #3]
 80067ae:	460b      	mov	r3, r1
 80067b0:	803b      	strh	r3, [r7, #0]
 80067b2:	4613      	mov	r3, r2
 80067b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da0f      	bge.n	80067e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	f003 020f 	and.w	r2, r3, #15
 80067c8:	4613      	mov	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	3338      	adds	r3, #56	; 0x38
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	4413      	add	r3, r2
 80067d6:	3304      	adds	r3, #4
 80067d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	705a      	strb	r2, [r3, #1]
 80067e0:	e00f      	b.n	8006802 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	4613      	mov	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	4413      	add	r3, r2
 80067f8:	3304      	adds	r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800680e:	883a      	ldrh	r2, [r7, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	78ba      	ldrb	r2, [r7, #2]
 8006818:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800682c:	78bb      	ldrb	r3, [r7, #2]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d102      	bne.n	8006838 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_PCD_EP_Open+0xaa>
 8006842:	2302      	movs	r3, #2
 8006844:	e00e      	b.n	8006864 <HAL_PCD_EP_Open+0xc8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68f9      	ldr	r1, [r7, #12]
 8006854:	4618      	mov	r0, r3
 8006856:	f002 f99b 	bl	8008b90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006862:	7afb      	ldrb	r3, [r7, #11]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	da0f      	bge.n	80068a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	f003 020f 	and.w	r2, r3, #15
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	3338      	adds	r3, #56	; 0x38
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	4413      	add	r3, r2
 8006894:	3304      	adds	r3, #4
 8006896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	705a      	strb	r2, [r3, #1]
 800689e:	e00f      	b.n	80068c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	f003 020f 	and.w	r2, r3, #15
 80068a6:	4613      	mov	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	3304      	adds	r3, #4
 80068b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_PCD_EP_Close+0x6e>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e00e      	b.n	80068f8 <HAL_PCD_EP_Close+0x8c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f002 f9d9 	bl	8008ca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	460b      	mov	r3, r1
 800690e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006910:	7afb      	ldrb	r3, [r7, #11]
 8006912:	f003 020f 	and.w	r2, r3, #15
 8006916:	4613      	mov	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	3304      	adds	r3, #4
 8006928:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2200      	movs	r2, #0
 800693a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2200      	movs	r2, #0
 8006940:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	b2da      	uxtb	r2, r3
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d102      	bne.n	800695c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800695c:	7afb      	ldrb	r3, [r7, #11]
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	6979      	ldr	r1, [r7, #20]
 8006974:	f002 fcb8 	bl	80092e8 <USB_EP0StartXfer>
 8006978:	e008      	b.n	800698c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	6979      	ldr	r1, [r7, #20]
 8006988:	f002 fa66 	bl	8008e58 <USB_EPStartXfer>
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	f003 020f 	and.w	r2, r3, #15
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80069b8:	681b      	ldr	r3, [r3, #0]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	460b      	mov	r3, r1
 80069d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	4613      	mov	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	3338      	adds	r3, #56	; 0x38
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	3304      	adds	r3, #4
 80069ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2200      	movs	r2, #0
 80069fe:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2201      	movs	r2, #1
 8006a04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a06:	7afb      	ldrb	r3, [r7, #11]
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d102      	bne.n	8006a20 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	461a      	mov	r2, r3
 8006a36:	6979      	ldr	r1, [r7, #20]
 8006a38:	f002 fc56 	bl	80092e8 <USB_EP0StartXfer>
 8006a3c:	e008      	b.n	8006a50 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	6979      	ldr	r1, [r7, #20]
 8006a4c:	f002 fa04 	bl	8008e58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	f003 020f 	and.w	r2, r3, #15
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d901      	bls.n	8006a78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e050      	b.n	8006b1a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da0f      	bge.n	8006aa0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	f003 020f 	and.w	r2, r3, #15
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	3338      	adds	r3, #56	; 0x38
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	4413      	add	r3, r2
 8006a94:	3304      	adds	r3, #4
 8006a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	705a      	strb	r2, [r3, #1]
 8006a9e:	e00d      	b.n	8006abc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006aa0:	78fa      	ldrb	r2, [r7, #3]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_PCD_EP_SetStall+0x82>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e01e      	b.n	8006b1a <HAL_PCD_EP_SetStall+0xc0>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f002 fe94 	bl	8009818 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	b2d9      	uxtb	r1, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f003 f884 	bl	8009c18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d901      	bls.n	8006b40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e042      	b.n	8006bc6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da0f      	bge.n	8006b68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 020f 	and.w	r2, r3, #15
 8006b4e:	4613      	mov	r3, r2
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	3338      	adds	r3, #56	; 0x38
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	705a      	strb	r2, [r3, #1]
 8006b66:	e00f      	b.n	8006b88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	f003 020f 	and.w	r2, r3, #15
 8006b6e:	4613      	mov	r3, r2
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3304      	adds	r3, #4
 8006b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_PCD_EP_ClrStall+0x86>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e00e      	b.n	8006bc6 <HAL_PCD_EP_ClrStall+0xa4>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68f9      	ldr	r1, [r7, #12]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f002 fe9c 	bl	80098f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da0c      	bge.n	8006bfc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	4613      	mov	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	3338      	adds	r3, #56	; 0x38
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	e00c      	b.n	8006c16 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	f003 020f 	and.w	r2, r3, #15
 8006c02:	4613      	mov	r3, r2
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	3304      	adds	r3, #4
 8006c14:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f002 fcbb 	bl	8009598 <USB_EPStopXfer>
 8006c22:	4603      	mov	r3, r0
 8006c24:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006c26:	7afb      	ldrb	r3, [r7, #11]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08a      	sub	sp, #40	; 0x28
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	4613      	mov	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	3338      	adds	r3, #56	; 0x38
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	3304      	adds	r3, #4
 8006c56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d901      	bls.n	8006c68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e06c      	b.n	8006d42 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d902      	bls.n	8006c84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	3303      	adds	r3, #3
 8006c88:	089b      	lsrs	r3, r3, #2
 8006c8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c8c:	e02b      	b.n	8006ce6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d902      	bls.n	8006caa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	3303      	adds	r3, #3
 8006cae:	089b      	lsrs	r3, r3, #2
 8006cb0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6919      	ldr	r1, [r3, #16]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	6978      	ldr	r0, [r7, #20]
 8006cca:	f002 fd0f 	bl	80096ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691a      	ldr	r2, [r3, #16]
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a1a      	ldr	r2, [r3, #32]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d809      	bhi.n	8006d10 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1a      	ldr	r2, [r3, #32]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d203      	bcs.n	8006d10 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1be      	bne.n	8006c8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	699a      	ldr	r2, [r3, #24]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d811      	bhi.n	8006d40 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	2201      	movs	r2, #1
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	6939      	ldr	r1, [r7, #16]
 8006d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	333c      	adds	r3, #60	; 0x3c
 8006d64:	3304      	adds	r3, #4
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d17b      	bne.n	8006e7a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d015      	beq.n	8006db8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	4a61      	ldr	r2, [pc, #388]	; (8006f14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	f240 80b9 	bls.w	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80b3 	beq.w	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	461a      	mov	r2, r3
 8006db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db4:	6093      	str	r3, [r2, #8]
 8006db6:	e0a7      	b.n	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	6093      	str	r3, [r2, #8]
 8006dd4:	e098      	b.n	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 8093 	bne.w	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4a4b      	ldr	r2, [pc, #300]	; (8006f14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d90f      	bls.n	8006e0a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e00:	461a      	mov	r2, r3
 8006e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e06:	6093      	str	r3, [r2, #8]
 8006e08:	e07e      	b.n	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	0159      	lsls	r1, r3, #5
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	440b      	add	r3, r1
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e36:	1ad2      	subs	r2, r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d114      	bne.n	8006e6c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e54:	461a      	mov	r2, r3
 8006e56:	2101      	movs	r1, #1
 8006e58:	f002 fede 	bl	8009c18 <USB_EP0_OutStart>
 8006e5c:	e006      	b.n	8006e6c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	441a      	add	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f011 fcd4 	bl	8018820 <HAL_PCD_DataOutStageCallback>
 8006e78:	e046      	b.n	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4a26      	ldr	r2, [pc, #152]	; (8006f18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d124      	bne.n	8006ecc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e98:	461a      	mov	r2, r3
 8006e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9e:	6093      	str	r3, [r2, #8]
 8006ea0:	e032      	b.n	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2320      	movs	r3, #32
 8006ebc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f011 fcab 	bl	8018820 <HAL_PCD_DataOutStageCallback>
 8006eca:	e01d      	b.n	8006f08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d114      	bne.n	8006efc <PCD_EP_OutXfrComplete_int+0x1b0>
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d108      	bne.n	8006efc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6818      	ldr	r0, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	f002 fe8e 	bl	8009c18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f011 fc8c 	bl	8018820 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3720      	adds	r7, #32
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	4f54300a 	.word	0x4f54300a
 8006f18:	4f54310a 	.word	0x4f54310a

08006f1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	333c      	adds	r3, #60	; 0x3c
 8006f34:	3304      	adds	r3, #4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d90e      	bls.n	8006f70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f011 fc43 	bl	80187fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4a0a      	ldr	r2, [pc, #40]	; (8006fa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d90c      	bls.n	8006f98 <PCD_EP_OutSetupPacket_int+0x7c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d108      	bne.n	8006f98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f90:	461a      	mov	r2, r3
 8006f92:	2101      	movs	r1, #1
 8006f94:	f002 fe40 	bl	8009c18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	4f54300a 	.word	0x4f54300a

08006fa8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d107      	bne.n	8006fd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006fc6:	883b      	ldrh	r3, [r7, #0]
 8006fc8:	0419      	lsls	r1, r3, #16
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd4:	e028      	b.n	8007028 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
 8006fe8:	e00d      	b.n	8007006 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	3340      	adds	r3, #64	; 0x40
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	0c1b      	lsrs	r3, r3, #16
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	3301      	adds	r3, #1
 8007004:	73fb      	strb	r3, [r7, #15]
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	3b01      	subs	r3, #1
 800700c:	429a      	cmp	r2, r3
 800700e:	d3ec      	bcc.n	8006fea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007010:	883b      	ldrh	r3, [r7, #0]
 8007012:	0418      	lsls	r0, r3, #16
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6819      	ldr	r1, [r3, #0]
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	3b01      	subs	r3, #1
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4302      	orrs	r2, r0
 8007020:	3340      	adds	r3, #64	; 0x40
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	887a      	ldrh	r2, [r7, #2]
 8007048:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e267      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d075      	beq.n	800717a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800708e:	4b88      	ldr	r3, [pc, #544]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 030c 	and.w	r3, r3, #12
 8007096:	2b04      	cmp	r3, #4
 8007098:	d00c      	beq.n	80070b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800709a:	4b85      	ldr	r3, [pc, #532]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d112      	bne.n	80070cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070a6:	4b82      	ldr	r3, [pc, #520]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b2:	d10b      	bne.n	80070cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b4:	4b7e      	ldr	r3, [pc, #504]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d05b      	beq.n	8007178 <HAL_RCC_OscConfig+0x108>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d157      	bne.n	8007178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e242      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d4:	d106      	bne.n	80070e4 <HAL_RCC_OscConfig+0x74>
 80070d6:	4b76      	ldr	r3, [pc, #472]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a75      	ldr	r2, [pc, #468]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80070dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	e01d      	b.n	8007120 <HAL_RCC_OscConfig+0xb0>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070ec:	d10c      	bne.n	8007108 <HAL_RCC_OscConfig+0x98>
 80070ee:	4b70      	ldr	r3, [pc, #448]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a6f      	ldr	r2, [pc, #444]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80070f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	4b6d      	ldr	r3, [pc, #436]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a6c      	ldr	r2, [pc, #432]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	e00b      	b.n	8007120 <HAL_RCC_OscConfig+0xb0>
 8007108:	4b69      	ldr	r3, [pc, #420]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a68      	ldr	r2, [pc, #416]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 800710e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	4b66      	ldr	r3, [pc, #408]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a65      	ldr	r2, [pc, #404]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 800711a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800711e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d013      	beq.n	8007150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007128:	f7fe f9e0 	bl	80054ec <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007130:	f7fe f9dc 	bl	80054ec <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b64      	cmp	r3, #100	; 0x64
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e207      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007142:	4b5b      	ldr	r3, [pc, #364]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0f0      	beq.n	8007130 <HAL_RCC_OscConfig+0xc0>
 800714e:	e014      	b.n	800717a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007150:	f7fe f9cc 	bl	80054ec <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007158:	f7fe f9c8 	bl	80054ec <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b64      	cmp	r3, #100	; 0x64
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e1f3      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800716a:	4b51      	ldr	r3, [pc, #324]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1f0      	bne.n	8007158 <HAL_RCC_OscConfig+0xe8>
 8007176:	e000      	b.n	800717a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d063      	beq.n	800724e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007186:	4b4a      	ldr	r3, [pc, #296]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 030c 	and.w	r3, r3, #12
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007192:	4b47      	ldr	r3, [pc, #284]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800719a:	2b08      	cmp	r3, #8
 800719c:	d11c      	bne.n	80071d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800719e:	4b44      	ldr	r3, [pc, #272]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d116      	bne.n	80071d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071aa:	4b41      	ldr	r3, [pc, #260]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_RCC_OscConfig+0x152>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d001      	beq.n	80071c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e1c7      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c2:	4b3b      	ldr	r3, [pc, #236]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	4937      	ldr	r1, [pc, #220]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d6:	e03a      	b.n	800724e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d020      	beq.n	8007222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071e0:	4b34      	ldr	r3, [pc, #208]	; (80072b4 <HAL_RCC_OscConfig+0x244>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e6:	f7fe f981 	bl	80054ec <HAL_GetTick>
 80071ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071ee:	f7fe f97d 	bl	80054ec <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e1a8      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007200:	4b2b      	ldr	r3, [pc, #172]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0f0      	beq.n	80071ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800720c:	4b28      	ldr	r3, [pc, #160]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	4925      	ldr	r1, [pc, #148]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 800721c:	4313      	orrs	r3, r2
 800721e:	600b      	str	r3, [r1, #0]
 8007220:	e015      	b.n	800724e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007222:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007228:	f7fe f960 	bl	80054ec <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007230:	f7fe f95c 	bl	80054ec <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e187      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007242:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1f0      	bne.n	8007230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d036      	beq.n	80072c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d016      	beq.n	8007290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <HAL_RCC_OscConfig+0x248>)
 8007264:	2201      	movs	r2, #1
 8007266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007268:	f7fe f940 	bl	80054ec <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007270:	f7fe f93c 	bl	80054ec <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e167      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007282:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <HAL_RCC_OscConfig+0x240>)
 8007284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0x200>
 800728e:	e01b      	b.n	80072c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <HAL_RCC_OscConfig+0x248>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007296:	f7fe f929 	bl	80054ec <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800729c:	e00e      	b.n	80072bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800729e:	f7fe f925 	bl	80054ec <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d907      	bls.n	80072bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e150      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
 80072b0:	40023800 	.word	0x40023800
 80072b4:	42470000 	.word	0x42470000
 80072b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072bc:	4b88      	ldr	r3, [pc, #544]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80072be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1ea      	bne.n	800729e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8097 	beq.w	8007404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072d6:	2300      	movs	r3, #0
 80072d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072da:	4b81      	ldr	r3, [pc, #516]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10f      	bne.n	8007306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072e6:	2300      	movs	r3, #0
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	4b7d      	ldr	r3, [pc, #500]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	4a7c      	ldr	r2, [pc, #496]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80072f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f4:	6413      	str	r3, [r2, #64]	; 0x40
 80072f6:	4b7a      	ldr	r3, [pc, #488]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fe:	60bb      	str	r3, [r7, #8]
 8007300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007302:	2301      	movs	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007306:	4b77      	ldr	r3, [pc, #476]	; (80074e4 <HAL_RCC_OscConfig+0x474>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730e:	2b00      	cmp	r3, #0
 8007310:	d118      	bne.n	8007344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007312:	4b74      	ldr	r3, [pc, #464]	; (80074e4 <HAL_RCC_OscConfig+0x474>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a73      	ldr	r2, [pc, #460]	; (80074e4 <HAL_RCC_OscConfig+0x474>)
 8007318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800731c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800731e:	f7fe f8e5 	bl	80054ec <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007326:	f7fe f8e1 	bl	80054ec <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e10c      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007338:	4b6a      	ldr	r3, [pc, #424]	; (80074e4 <HAL_RCC_OscConfig+0x474>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f0      	beq.n	8007326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d106      	bne.n	800735a <HAL_RCC_OscConfig+0x2ea>
 800734c:	4b64      	ldr	r3, [pc, #400]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 800734e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007350:	4a63      	ldr	r2, [pc, #396]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007352:	f043 0301 	orr.w	r3, r3, #1
 8007356:	6713      	str	r3, [r2, #112]	; 0x70
 8007358:	e01c      	b.n	8007394 <HAL_RCC_OscConfig+0x324>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b05      	cmp	r3, #5
 8007360:	d10c      	bne.n	800737c <HAL_RCC_OscConfig+0x30c>
 8007362:	4b5f      	ldr	r3, [pc, #380]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	4a5e      	ldr	r2, [pc, #376]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007368:	f043 0304 	orr.w	r3, r3, #4
 800736c:	6713      	str	r3, [r2, #112]	; 0x70
 800736e:	4b5c      	ldr	r3, [pc, #368]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	4a5b      	ldr	r2, [pc, #364]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	6713      	str	r3, [r2, #112]	; 0x70
 800737a:	e00b      	b.n	8007394 <HAL_RCC_OscConfig+0x324>
 800737c:	4b58      	ldr	r3, [pc, #352]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	4a57      	ldr	r2, [pc, #348]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	6713      	str	r3, [r2, #112]	; 0x70
 8007388:	4b55      	ldr	r3, [pc, #340]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	4a54      	ldr	r2, [pc, #336]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 800738e:	f023 0304 	bic.w	r3, r3, #4
 8007392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d015      	beq.n	80073c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739c:	f7fe f8a6 	bl	80054ec <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a2:	e00a      	b.n	80073ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073a4:	f7fe f8a2 	bl	80054ec <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e0cb      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ba:	4b49      	ldr	r3, [pc, #292]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0ee      	beq.n	80073a4 <HAL_RCC_OscConfig+0x334>
 80073c6:	e014      	b.n	80073f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073c8:	f7fe f890 	bl	80054ec <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073ce:	e00a      	b.n	80073e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d0:	f7fe f88c 	bl	80054ec <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	f241 3288 	movw	r2, #5000	; 0x1388
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e0b5      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073e6:	4b3e      	ldr	r3, [pc, #248]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1ee      	bne.n	80073d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d105      	bne.n	8007404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f8:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	4a38      	ldr	r2, [pc, #224]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80073fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80a1 	beq.w	8007550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800740e:	4b34      	ldr	r3, [pc, #208]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 030c 	and.w	r3, r3, #12
 8007416:	2b08      	cmp	r3, #8
 8007418:	d05c      	beq.n	80074d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d141      	bne.n	80074a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007422:	4b31      	ldr	r3, [pc, #196]	; (80074e8 <HAL_RCC_OscConfig+0x478>)
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007428:	f7fe f860 	bl	80054ec <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007430:	f7fe f85c 	bl	80054ec <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e087      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007442:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f0      	bne.n	8007430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69da      	ldr	r2, [r3, #28]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	019b      	lsls	r3, r3, #6
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	085b      	lsrs	r3, r3, #1
 8007466:	3b01      	subs	r3, #1
 8007468:	041b      	lsls	r3, r3, #16
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	061b      	lsls	r3, r3, #24
 8007472:	491b      	ldr	r1, [pc, #108]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 8007474:	4313      	orrs	r3, r2
 8007476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007478:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <HAL_RCC_OscConfig+0x478>)
 800747a:	2201      	movs	r2, #1
 800747c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747e:	f7fe f835 	bl	80054ec <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007484:	e008      	b.n	8007498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007486:	f7fe f831 	bl	80054ec <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e05c      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007498:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0f0      	beq.n	8007486 <HAL_RCC_OscConfig+0x416>
 80074a4:	e054      	b.n	8007550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <HAL_RCC_OscConfig+0x478>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ac:	f7fe f81e 	bl	80054ec <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b4:	f7fe f81a 	bl	80054ec <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e045      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c6:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <HAL_RCC_OscConfig+0x470>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0x444>
 80074d2:	e03d      	b.n	8007550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d107      	bne.n	80074ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e038      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
 80074e0:	40023800 	.word	0x40023800
 80074e4:	40007000 	.word	0x40007000
 80074e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074ec:	4b1b      	ldr	r3, [pc, #108]	; (800755c <HAL_RCC_OscConfig+0x4ec>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d028      	beq.n	800754c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007504:	429a      	cmp	r2, r3
 8007506:	d121      	bne.n	800754c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	429a      	cmp	r2, r3
 8007514:	d11a      	bne.n	800754c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800751c:	4013      	ands	r3, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007524:	4293      	cmp	r3, r2
 8007526:	d111      	bne.n	800754c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007532:	085b      	lsrs	r3, r3, #1
 8007534:	3b01      	subs	r3, #1
 8007536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007538:	429a      	cmp	r2, r3
 800753a:	d107      	bne.n	800754c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007548:	429a      	cmp	r2, r3
 800754a:	d001      	beq.n	8007550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800

08007560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e0cc      	b.n	800770e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007574:	4b68      	ldr	r3, [pc, #416]	; (8007718 <HAL_RCC_ClockConfig+0x1b8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d90c      	bls.n	800759c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007582:	4b65      	ldr	r3, [pc, #404]	; (8007718 <HAL_RCC_ClockConfig+0x1b8>)
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800758a:	4b63      	ldr	r3, [pc, #396]	; (8007718 <HAL_RCC_ClockConfig+0x1b8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d001      	beq.n	800759c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e0b8      	b.n	800770e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d020      	beq.n	80075ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d005      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075b4:	4b59      	ldr	r3, [pc, #356]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	4a58      	ldr	r2, [pc, #352]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80075ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075cc:	4b53      	ldr	r3, [pc, #332]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	4a52      	ldr	r2, [pc, #328]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80075d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d8:	4b50      	ldr	r3, [pc, #320]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	494d      	ldr	r1, [pc, #308]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d044      	beq.n	8007680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d107      	bne.n	800760e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075fe:	4b47      	ldr	r3, [pc, #284]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d119      	bne.n	800763e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e07f      	b.n	800770e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d003      	beq.n	800761e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800761a:	2b03      	cmp	r3, #3
 800761c:	d107      	bne.n	800762e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800761e:	4b3f      	ldr	r3, [pc, #252]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e06f      	b.n	800770e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800762e:	4b3b      	ldr	r3, [pc, #236]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e067      	b.n	800770e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800763e:	4b37      	ldr	r3, [pc, #220]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f023 0203 	bic.w	r2, r3, #3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	4934      	ldr	r1, [pc, #208]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	4313      	orrs	r3, r2
 800764e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007650:	f7fd ff4c 	bl	80054ec <HAL_GetTick>
 8007654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007656:	e00a      	b.n	800766e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007658:	f7fd ff48 	bl	80054ec <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	f241 3288 	movw	r2, #5000	; 0x1388
 8007666:	4293      	cmp	r3, r2
 8007668:	d901      	bls.n	800766e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e04f      	b.n	800770e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766e:	4b2b      	ldr	r3, [pc, #172]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 020c 	and.w	r2, r3, #12
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	429a      	cmp	r2, r3
 800767e:	d1eb      	bne.n	8007658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007680:	4b25      	ldr	r3, [pc, #148]	; (8007718 <HAL_RCC_ClockConfig+0x1b8>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d20c      	bcs.n	80076a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800768e:	4b22      	ldr	r3, [pc, #136]	; (8007718 <HAL_RCC_ClockConfig+0x1b8>)
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007696:	4b20      	ldr	r3, [pc, #128]	; (8007718 <HAL_RCC_ClockConfig+0x1b8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d001      	beq.n	80076a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e032      	b.n	800770e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076b4:	4b19      	ldr	r3, [pc, #100]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	4916      	ldr	r1, [pc, #88]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0308 	and.w	r3, r3, #8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	490e      	ldr	r1, [pc, #56]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076e6:	f000 f821 	bl	800772c <HAL_RCC_GetSysClockFreq>
 80076ea:	4602      	mov	r2, r0
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <HAL_RCC_ClockConfig+0x1bc>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	091b      	lsrs	r3, r3, #4
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	490a      	ldr	r1, [pc, #40]	; (8007720 <HAL_RCC_ClockConfig+0x1c0>)
 80076f8:	5ccb      	ldrb	r3, [r1, r3]
 80076fa:	fa22 f303 	lsr.w	r3, r2, r3
 80076fe:	4a09      	ldr	r2, [pc, #36]	; (8007724 <HAL_RCC_ClockConfig+0x1c4>)
 8007700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <HAL_RCC_ClockConfig+0x1c8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f7fd feac 	bl	8005464 <HAL_InitTick>

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	40023c00 	.word	0x40023c00
 800771c:	40023800 	.word	0x40023800
 8007720:	0801edd4 	.word	0x0801edd4
 8007724:	200026b8 	.word	0x200026b8
 8007728:	200026bc 	.word	0x200026bc

0800772c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800772c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007730:	b094      	sub	sp, #80	; 0x50
 8007732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	647b      	str	r3, [r7, #68]	; 0x44
 8007738:	2300      	movs	r3, #0
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773c:	2300      	movs	r3, #0
 800773e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007744:	4b79      	ldr	r3, [pc, #484]	; (800792c <HAL_RCC_GetSysClockFreq+0x200>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 030c 	and.w	r3, r3, #12
 800774c:	2b08      	cmp	r3, #8
 800774e:	d00d      	beq.n	800776c <HAL_RCC_GetSysClockFreq+0x40>
 8007750:	2b08      	cmp	r3, #8
 8007752:	f200 80e1 	bhi.w	8007918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <HAL_RCC_GetSysClockFreq+0x34>
 800775a:	2b04      	cmp	r3, #4
 800775c:	d003      	beq.n	8007766 <HAL_RCC_GetSysClockFreq+0x3a>
 800775e:	e0db      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007760:	4b73      	ldr	r3, [pc, #460]	; (8007930 <HAL_RCC_GetSysClockFreq+0x204>)
 8007762:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007764:	e0db      	b.n	800791e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007766:	4b73      	ldr	r3, [pc, #460]	; (8007934 <HAL_RCC_GetSysClockFreq+0x208>)
 8007768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800776a:	e0d8      	b.n	800791e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800776c:	4b6f      	ldr	r3, [pc, #444]	; (800792c <HAL_RCC_GetSysClockFreq+0x200>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007774:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007776:	4b6d      	ldr	r3, [pc, #436]	; (800792c <HAL_RCC_GetSysClockFreq+0x200>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d063      	beq.n	800784a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007782:	4b6a      	ldr	r3, [pc, #424]	; (800792c <HAL_RCC_GetSysClockFreq+0x200>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	099b      	lsrs	r3, r3, #6
 8007788:	2200      	movs	r2, #0
 800778a:	63bb      	str	r3, [r7, #56]	; 0x38
 800778c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007794:	633b      	str	r3, [r7, #48]	; 0x30
 8007796:	2300      	movs	r3, #0
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
 800779a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800779e:	4622      	mov	r2, r4
 80077a0:	462b      	mov	r3, r5
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f04f 0100 	mov.w	r1, #0
 80077aa:	0159      	lsls	r1, r3, #5
 80077ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077b0:	0150      	lsls	r0, r2, #5
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4621      	mov	r1, r4
 80077b8:	1a51      	subs	r1, r2, r1
 80077ba:	6139      	str	r1, [r7, #16]
 80077bc:	4629      	mov	r1, r5
 80077be:	eb63 0301 	sbc.w	r3, r3, r1
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	f04f 0300 	mov.w	r3, #0
 80077cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077d0:	4659      	mov	r1, fp
 80077d2:	018b      	lsls	r3, r1, #6
 80077d4:	4651      	mov	r1, sl
 80077d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077da:	4651      	mov	r1, sl
 80077dc:	018a      	lsls	r2, r1, #6
 80077de:	4651      	mov	r1, sl
 80077e0:	ebb2 0801 	subs.w	r8, r2, r1
 80077e4:	4659      	mov	r1, fp
 80077e6:	eb63 0901 	sbc.w	r9, r3, r1
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	f04f 0300 	mov.w	r3, #0
 80077f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077fe:	4690      	mov	r8, r2
 8007800:	4699      	mov	r9, r3
 8007802:	4623      	mov	r3, r4
 8007804:	eb18 0303 	adds.w	r3, r8, r3
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	462b      	mov	r3, r5
 800780c:	eb49 0303 	adc.w	r3, r9, r3
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800781e:	4629      	mov	r1, r5
 8007820:	024b      	lsls	r3, r1, #9
 8007822:	4621      	mov	r1, r4
 8007824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007828:	4621      	mov	r1, r4
 800782a:	024a      	lsls	r2, r1, #9
 800782c:	4610      	mov	r0, r2
 800782e:	4619      	mov	r1, r3
 8007830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007832:	2200      	movs	r2, #0
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28
 8007836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800783c:	f7f9 fa7e 	bl	8000d3c <__aeabi_uldivmod>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4613      	mov	r3, r2
 8007846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007848:	e058      	b.n	80078fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800784a:	4b38      	ldr	r3, [pc, #224]	; (800792c <HAL_RCC_GetSysClockFreq+0x200>)
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	099b      	lsrs	r3, r3, #6
 8007850:	2200      	movs	r2, #0
 8007852:	4618      	mov	r0, r3
 8007854:	4611      	mov	r1, r2
 8007856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800785a:	623b      	str	r3, [r7, #32]
 800785c:	2300      	movs	r3, #0
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
 8007860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007864:	4642      	mov	r2, r8
 8007866:	464b      	mov	r3, r9
 8007868:	f04f 0000 	mov.w	r0, #0
 800786c:	f04f 0100 	mov.w	r1, #0
 8007870:	0159      	lsls	r1, r3, #5
 8007872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007876:	0150      	lsls	r0, r2, #5
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4641      	mov	r1, r8
 800787e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007882:	4649      	mov	r1, r9
 8007884:	eb63 0b01 	sbc.w	fp, r3, r1
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800789c:	ebb2 040a 	subs.w	r4, r2, sl
 80078a0:	eb63 050b 	sbc.w	r5, r3, fp
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	00eb      	lsls	r3, r5, #3
 80078ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078b2:	00e2      	lsls	r2, r4, #3
 80078b4:	4614      	mov	r4, r2
 80078b6:	461d      	mov	r5, r3
 80078b8:	4643      	mov	r3, r8
 80078ba:	18e3      	adds	r3, r4, r3
 80078bc:	603b      	str	r3, [r7, #0]
 80078be:	464b      	mov	r3, r9
 80078c0:	eb45 0303 	adc.w	r3, r5, r3
 80078c4:	607b      	str	r3, [r7, #4]
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	f04f 0300 	mov.w	r3, #0
 80078ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078d2:	4629      	mov	r1, r5
 80078d4:	028b      	lsls	r3, r1, #10
 80078d6:	4621      	mov	r1, r4
 80078d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078dc:	4621      	mov	r1, r4
 80078de:	028a      	lsls	r2, r1, #10
 80078e0:	4610      	mov	r0, r2
 80078e2:	4619      	mov	r1, r3
 80078e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e6:	2200      	movs	r2, #0
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	61fa      	str	r2, [r7, #28]
 80078ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078f0:	f7f9 fa24 	bl	8000d3c <__aeabi_uldivmod>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4613      	mov	r3, r2
 80078fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <HAL_RCC_GetSysClockFreq+0x200>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	0c1b      	lsrs	r3, r3, #16
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	3301      	adds	r3, #1
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800790c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800790e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007916:	e002      	b.n	800791e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <HAL_RCC_GetSysClockFreq+0x204>)
 800791a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800791c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800791e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007920:	4618      	mov	r0, r3
 8007922:	3750      	adds	r7, #80	; 0x50
 8007924:	46bd      	mov	sp, r7
 8007926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800792a:	bf00      	nop
 800792c:	40023800 	.word	0x40023800
 8007930:	00f42400 	.word	0x00f42400
 8007934:	007a1200 	.word	0x007a1200

08007938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800793c:	4b03      	ldr	r3, [pc, #12]	; (800794c <HAL_RCC_GetHCLKFreq+0x14>)
 800793e:	681b      	ldr	r3, [r3, #0]
}
 8007940:	4618      	mov	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	200026b8 	.word	0x200026b8

08007950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e07b      	b.n	8007a5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d108      	bne.n	800797c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007972:	d009      	beq.n	8007988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	61da      	str	r2, [r3, #28]
 800797a:	e005      	b.n	8007988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fd fbb6 	bl	8005114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0c:	ea42 0103 	orr.w	r1, r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	0c1b      	lsrs	r3, r3, #16
 8007a26:	f003 0104 	and.w	r1, r3, #4
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	f003 0210 	and.w	r2, r3, #16
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69da      	ldr	r2, [r3, #28]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b088      	sub	sp, #32
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_SPI_Transmit+0x22>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e126      	b.n	8007cd2 <HAL_SPI_Transmit+0x270>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a8c:	f7fd fd2e 	bl	80054ec <HAL_GetTick>
 8007a90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d002      	beq.n	8007aa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007aa6:	e10b      	b.n	8007cc0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <HAL_SPI_Transmit+0x52>
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ab8:	e102      	b.n	8007cc0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2203      	movs	r2, #3
 8007abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	88fa      	ldrh	r2, [r7, #6]
 8007ad2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	88fa      	ldrh	r2, [r7, #6]
 8007ad8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b00:	d10f      	bne.n	8007b22 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d007      	beq.n	8007b40 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b48:	d14b      	bne.n	8007be2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_SPI_Transmit+0xf6>
 8007b52:	8afb      	ldrh	r3, [r7, #22]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d13e      	bne.n	8007bd6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	881a      	ldrh	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	1c9a      	adds	r2, r3, #2
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b7c:	e02b      	b.n	8007bd6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d112      	bne.n	8007bb2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	881a      	ldrh	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9c:	1c9a      	adds	r2, r3, #2
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	86da      	strh	r2, [r3, #54]	; 0x36
 8007bb0:	e011      	b.n	8007bd6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bb2:	f7fd fc9b 	bl	80054ec <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d803      	bhi.n	8007bca <HAL_SPI_Transmit+0x168>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc8:	d102      	bne.n	8007bd0 <HAL_SPI_Transmit+0x16e>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bd4:	e074      	b.n	8007cc0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1ce      	bne.n	8007b7e <HAL_SPI_Transmit+0x11c>
 8007be0:	e04c      	b.n	8007c7c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_SPI_Transmit+0x18e>
 8007bea:	8afb      	ldrh	r3, [r7, #22]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d140      	bne.n	8007c72 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	330c      	adds	r3, #12
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c16:	e02c      	b.n	8007c72 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d113      	bne.n	8007c4e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	7812      	ldrb	r2, [r2, #0]
 8007c32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c4c:	e011      	b.n	8007c72 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c4e:	f7fd fc4d 	bl	80054ec <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d803      	bhi.n	8007c66 <HAL_SPI_Transmit+0x204>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c64:	d102      	bne.n	8007c6c <HAL_SPI_Transmit+0x20a>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c70:	e026      	b.n	8007cc0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1cd      	bne.n	8007c18 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fbcb 	bl	800841c <SPI_EndRxTxTransaction>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e000      	b.n	8007cc0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b088      	sub	sp, #32
 8007cde:	af02      	add	r7, sp, #8
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cf6:	d112      	bne.n	8007d1e <HAL_SPI_Receive+0x44>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10e      	bne.n	8007d1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2204      	movs	r2, #4
 8007d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f8f1 	bl	8007efc <HAL_SPI_TransmitReceive>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	e0ea      	b.n	8007ef4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_SPI_Receive+0x52>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e0e3      	b.n	8007ef4 <HAL_SPI_Receive+0x21a>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d34:	f7fd fbda 	bl	80054ec <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d002      	beq.n	8007d4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007d46:	2302      	movs	r3, #2
 8007d48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d4a:	e0ca      	b.n	8007ee2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <HAL_SPI_Receive+0x7e>
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d5c:	e0c1      	b.n	8007ee2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2204      	movs	r2, #4
 8007d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	88fa      	ldrh	r2, [r7, #6]
 8007d76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da4:	d10f      	bne.n	8007dc6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007db4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007dc4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd0:	2b40      	cmp	r3, #64	; 0x40
 8007dd2:	d007      	beq.n	8007de4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d162      	bne.n	8007eb2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007dec:	e02e      	b.n	8007e4c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d115      	bne.n	8007e28 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f103 020c 	add.w	r2, r3, #12
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e26:	e011      	b.n	8007e4c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e28:	f7fd fb60 	bl	80054ec <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d803      	bhi.n	8007e40 <HAL_SPI_Receive+0x166>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3e:	d102      	bne.n	8007e46 <HAL_SPI_Receive+0x16c>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e4a:	e04a      	b.n	8007ee2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1cb      	bne.n	8007dee <HAL_SPI_Receive+0x114>
 8007e56:	e031      	b.n	8007ebc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d113      	bne.n	8007e8e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	b292      	uxth	r2, r2
 8007e72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	1c9a      	adds	r2, r3, #2
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e8c:	e011      	b.n	8007eb2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e8e:	f7fd fb2d 	bl	80054ec <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d803      	bhi.n	8007ea6 <HAL_SPI_Receive+0x1cc>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d102      	bne.n	8007eac <HAL_SPI_Receive+0x1d2>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007eb0:	e017      	b.n	8007ee2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1cd      	bne.n	8007e58 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fa45 	bl	8008350 <SPI_EndRxTransaction>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	75fb      	strb	r3, [r7, #23]
 8007ede:	e000      	b.n	8007ee2 <HAL_SPI_Receive+0x208>
  }

error :
 8007ee0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08c      	sub	sp, #48	; 0x30
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x26>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e18a      	b.n	8008238 <HAL_SPI_TransmitReceive+0x33c>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f2a:	f7fd fadf 	bl	80054ec <HAL_GetTick>
 8007f2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007f40:	887b      	ldrh	r3, [r7, #2]
 8007f42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d00f      	beq.n	8007f6c <HAL_SPI_TransmitReceive+0x70>
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f52:	d107      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x68>
 8007f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d003      	beq.n	8007f6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007f64:	2302      	movs	r3, #2
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f6a:	e15b      	b.n	8008224 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <HAL_SPI_TransmitReceive+0x82>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <HAL_SPI_TransmitReceive+0x82>
 8007f78:	887b      	ldrh	r3, [r7, #2]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f84:	e14e      	b.n	8008224 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d003      	beq.n	8007f9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2205      	movs	r2, #5
 8007f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	887a      	ldrh	r2, [r7, #2]
 8007faa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	887a      	ldrh	r2, [r7, #2]
 8007fb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	887a      	ldrh	r2, [r7, #2]
 8007fbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	887a      	ldrh	r2, [r7, #2]
 8007fc2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d007      	beq.n	8007fee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff6:	d178      	bne.n	80080ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SPI_TransmitReceive+0x10a>
 8008000:	8b7b      	ldrh	r3, [r7, #26]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d166      	bne.n	80080d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	881a      	ldrh	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	1c9a      	adds	r2, r3, #2
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800802a:	e053      	b.n	80080d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b02      	cmp	r3, #2
 8008038:	d11b      	bne.n	8008072 <HAL_SPI_TransmitReceive+0x176>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d016      	beq.n	8008072 <HAL_SPI_TransmitReceive+0x176>
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d113      	bne.n	8008072 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	881a      	ldrh	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805a:	1c9a      	adds	r2, r3, #2
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008064:	b29b      	uxth	r3, r3
 8008066:	3b01      	subs	r3, #1
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b01      	cmp	r3, #1
 800807e:	d119      	bne.n	80080b4 <HAL_SPI_TransmitReceive+0x1b8>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008084:	b29b      	uxth	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d014      	beq.n	80080b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	b292      	uxth	r2, r2
 8008096:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	1c9a      	adds	r2, r3, #2
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080b0:	2301      	movs	r3, #1
 80080b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80080b4:	f7fd fa1a 	bl	80054ec <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d807      	bhi.n	80080d4 <HAL_SPI_TransmitReceive+0x1d8>
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d003      	beq.n	80080d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080d2:	e0a7      	b.n	8008224 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1a6      	bne.n	800802c <HAL_SPI_TransmitReceive+0x130>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1a1      	bne.n	800802c <HAL_SPI_TransmitReceive+0x130>
 80080e8:	e07c      	b.n	80081e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <HAL_SPI_TransmitReceive+0x1fc>
 80080f2:	8b7b      	ldrh	r3, [r7, #26]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d16b      	bne.n	80081d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	7812      	ldrb	r2, [r2, #0]
 8008104:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800811e:	e057      	b.n	80081d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b02      	cmp	r3, #2
 800812c:	d11c      	bne.n	8008168 <HAL_SPI_TransmitReceive+0x26c>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d017      	beq.n	8008168 <HAL_SPI_TransmitReceive+0x26c>
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d114      	bne.n	8008168 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	7812      	ldrb	r2, [r2, #0]
 800814a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b01      	cmp	r3, #1
 8008174:	d119      	bne.n	80081aa <HAL_SPI_TransmitReceive+0x2ae>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d014      	beq.n	80081aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800819c:	b29b      	uxth	r3, r3
 800819e:	3b01      	subs	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081a6:	2301      	movs	r3, #1
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081aa:	f7fd f99f 	bl	80054ec <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d803      	bhi.n	80081c2 <HAL_SPI_TransmitReceive+0x2c6>
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d102      	bne.n	80081c8 <HAL_SPI_TransmitReceive+0x2cc>
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d103      	bne.n	80081d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80081ce:	e029      	b.n	8008224 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1a2      	bne.n	8008120 <HAL_SPI_TransmitReceive+0x224>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081de:	b29b      	uxth	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d19d      	bne.n	8008120 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f917 	bl	800841c <SPI_EndRxTxTransaction>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d006      	beq.n	8008202 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2220      	movs	r2, #32
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008200:	e010      	b.n	8008224 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10b      	bne.n	8008222 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800820a:	2300      	movs	r3, #0
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	e000      	b.n	8008224 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008222:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008234:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008238:	4618      	mov	r0, r3
 800823a:	3730      	adds	r7, #48	; 0x30
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	4613      	mov	r3, r2
 800824e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008250:	f7fd f94c 	bl	80054ec <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	1a9b      	subs	r3, r3, r2
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	4413      	add	r3, r2
 800825e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008260:	f7fd f944 	bl	80054ec <HAL_GetTick>
 8008264:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008266:	4b39      	ldr	r3, [pc, #228]	; (800834c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	015b      	lsls	r3, r3, #5
 800826c:	0d1b      	lsrs	r3, r3, #20
 800826e:	69fa      	ldr	r2, [r7, #28]
 8008270:	fb02 f303 	mul.w	r3, r2, r3
 8008274:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008276:	e054      	b.n	8008322 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827e:	d050      	beq.n	8008322 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008280:	f7fd f934 	bl	80054ec <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	429a      	cmp	r2, r3
 800828e:	d902      	bls.n	8008296 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d13d      	bne.n	8008312 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ae:	d111      	bne.n	80082d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b8:	d004      	beq.n	80082c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c2:	d107      	bne.n	80082d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082dc:	d10f      	bne.n	80082fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e017      	b.n	8008342 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	3b01      	subs	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	4013      	ands	r3, r2
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	bf0c      	ite	eq
 8008332:	2301      	moveq	r3, #1
 8008334:	2300      	movne	r3, #0
 8008336:	b2db      	uxtb	r3, r3
 8008338:	461a      	mov	r2, r3
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	429a      	cmp	r2, r3
 800833e:	d19b      	bne.n	8008278 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	200026b8 	.word	0x200026b8

08008350 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008364:	d111      	bne.n	800838a <SPI_EndRxTransaction+0x3a>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800836e:	d004      	beq.n	800837a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008378:	d107      	bne.n	800838a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008388:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008392:	d12a      	bne.n	80083ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800839c:	d012      	beq.n	80083c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	2180      	movs	r1, #128	; 0x80
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff ff49 	bl	8008240 <SPI_WaitFlagStateUntilTimeout>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d02d      	beq.n	8008410 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b8:	f043 0220 	orr.w	r2, r3, #32
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e026      	b.n	8008412 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2200      	movs	r2, #0
 80083cc:	2101      	movs	r1, #1
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f7ff ff36 	bl	8008240 <SPI_WaitFlagStateUntilTimeout>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01a      	beq.n	8008410 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083de:	f043 0220 	orr.w	r2, r3, #32
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e013      	b.n	8008412 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2200      	movs	r2, #0
 80083f2:	2101      	movs	r1, #1
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff ff23 	bl	8008240 <SPI_WaitFlagStateUntilTimeout>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d007      	beq.n	8008410 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008404:	f043 0220 	orr.w	r2, r3, #32
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e000      	b.n	8008412 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008428:	4b1b      	ldr	r3, [pc, #108]	; (8008498 <SPI_EndRxTxTransaction+0x7c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1b      	ldr	r2, [pc, #108]	; (800849c <SPI_EndRxTxTransaction+0x80>)
 800842e:	fba2 2303 	umull	r2, r3, r2, r3
 8008432:	0d5b      	lsrs	r3, r3, #21
 8008434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008446:	d112      	bne.n	800846e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2200      	movs	r2, #0
 8008450:	2180      	movs	r1, #128	; 0x80
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f7ff fef4 	bl	8008240 <SPI_WaitFlagStateUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d016      	beq.n	800848c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008462:	f043 0220 	orr.w	r2, r3, #32
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e00f      	b.n	800848e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	3b01      	subs	r3, #1
 8008478:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008484:	2b80      	cmp	r3, #128	; 0x80
 8008486:	d0f2      	beq.n	800846e <SPI_EndRxTxTransaction+0x52>
 8008488:	e000      	b.n	800848c <SPI_EndRxTxTransaction+0x70>
        break;
 800848a:	bf00      	nop
  }

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200026b8 	.word	0x200026b8
 800849c:	165e9f81 	.word	0x165e9f81

080084a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084a0:	b084      	sub	sp, #16
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	f107 001c 	add.w	r0, r7, #28
 80084ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d122      	bne.n	80084fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d105      	bne.n	80084f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 fbee 	bl	8009cd4 <USB_CoreReset>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
 80084fc:	e01a      	b.n	8008534 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fbe2 	bl	8009cd4 <USB_CoreReset>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
 8008526:	e005      	b.n	8008534 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	2b01      	cmp	r3, #1
 8008538:	d10b      	bne.n	8008552 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f043 0206 	orr.w	r2, r3, #6
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f043 0220 	orr.w	r2, r3, #32
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800855e:	b004      	add	sp, #16
 8008560:	4770      	bx	lr
	...

08008564 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d165      	bne.n	8008644 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4a41      	ldr	r2, [pc, #260]	; (8008680 <USB_SetTurnaroundTime+0x11c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d906      	bls.n	800858e <USB_SetTurnaroundTime+0x2a>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a40      	ldr	r2, [pc, #256]	; (8008684 <USB_SetTurnaroundTime+0x120>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d202      	bcs.n	800858e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008588:	230f      	movs	r3, #15
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	e062      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4a3c      	ldr	r2, [pc, #240]	; (8008684 <USB_SetTurnaroundTime+0x120>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d306      	bcc.n	80085a4 <USB_SetTurnaroundTime+0x40>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a3b      	ldr	r2, [pc, #236]	; (8008688 <USB_SetTurnaroundTime+0x124>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d202      	bcs.n	80085a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800859e:	230e      	movs	r3, #14
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	e057      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a38      	ldr	r2, [pc, #224]	; (8008688 <USB_SetTurnaroundTime+0x124>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d306      	bcc.n	80085ba <USB_SetTurnaroundTime+0x56>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a37      	ldr	r2, [pc, #220]	; (800868c <USB_SetTurnaroundTime+0x128>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d202      	bcs.n	80085ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80085b4:	230d      	movs	r3, #13
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	e04c      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4a33      	ldr	r2, [pc, #204]	; (800868c <USB_SetTurnaroundTime+0x128>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d306      	bcc.n	80085d0 <USB_SetTurnaroundTime+0x6c>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a32      	ldr	r2, [pc, #200]	; (8008690 <USB_SetTurnaroundTime+0x12c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d802      	bhi.n	80085d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085ca:	230c      	movs	r3, #12
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e041      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4a2f      	ldr	r2, [pc, #188]	; (8008690 <USB_SetTurnaroundTime+0x12c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d906      	bls.n	80085e6 <USB_SetTurnaroundTime+0x82>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4a2e      	ldr	r2, [pc, #184]	; (8008694 <USB_SetTurnaroundTime+0x130>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d802      	bhi.n	80085e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80085e0:	230b      	movs	r3, #11
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e036      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	4a2a      	ldr	r2, [pc, #168]	; (8008694 <USB_SetTurnaroundTime+0x130>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d906      	bls.n	80085fc <USB_SetTurnaroundTime+0x98>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	4a29      	ldr	r2, [pc, #164]	; (8008698 <USB_SetTurnaroundTime+0x134>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d802      	bhi.n	80085fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085f6:	230a      	movs	r3, #10
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	e02b      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4a26      	ldr	r2, [pc, #152]	; (8008698 <USB_SetTurnaroundTime+0x134>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d906      	bls.n	8008612 <USB_SetTurnaroundTime+0xae>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4a25      	ldr	r2, [pc, #148]	; (800869c <USB_SetTurnaroundTime+0x138>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d202      	bcs.n	8008612 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800860c:	2309      	movs	r3, #9
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e020      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4a21      	ldr	r2, [pc, #132]	; (800869c <USB_SetTurnaroundTime+0x138>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d306      	bcc.n	8008628 <USB_SetTurnaroundTime+0xc4>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4a20      	ldr	r2, [pc, #128]	; (80086a0 <USB_SetTurnaroundTime+0x13c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d802      	bhi.n	8008628 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008622:	2308      	movs	r3, #8
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	e015      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4a1d      	ldr	r2, [pc, #116]	; (80086a0 <USB_SetTurnaroundTime+0x13c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d906      	bls.n	800863e <USB_SetTurnaroundTime+0xda>
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	4a1c      	ldr	r2, [pc, #112]	; (80086a4 <USB_SetTurnaroundTime+0x140>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d202      	bcs.n	800863e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008638:	2307      	movs	r3, #7
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e00a      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800863e:	2306      	movs	r3, #6
 8008640:	617b      	str	r3, [r7, #20]
 8008642:	e007      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d102      	bne.n	8008650 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800864a:	2309      	movs	r3, #9
 800864c:	617b      	str	r3, [r7, #20]
 800864e:	e001      	b.n	8008654 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008650:	2309      	movs	r3, #9
 8008652:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	029b      	lsls	r3, r3, #10
 8008668:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800866c:	431a      	orrs	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	371c      	adds	r7, #28
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	00d8acbf 	.word	0x00d8acbf
 8008684:	00e4e1c0 	.word	0x00e4e1c0
 8008688:	00f42400 	.word	0x00f42400
 800868c:	01067380 	.word	0x01067380
 8008690:	011a499f 	.word	0x011a499f
 8008694:	01312cff 	.word	0x01312cff
 8008698:	014ca43f 	.word	0x014ca43f
 800869c:	016e3600 	.word	0x016e3600
 80086a0:	01a6ab1f 	.word	0x01a6ab1f
 80086a4:	01e84800 	.word	0x01e84800

080086a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f043 0201 	orr.w	r2, r3, #1
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f023 0201 	bic.w	r2, r3, #1
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d115      	bne.n	800873a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800871a:	2001      	movs	r0, #1
 800871c:	f7fc fef2 	bl	8005504 <HAL_Delay>
      ms++;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f001 fa45 	bl	8009bb6 <USB_GetMode>
 800872c:	4603      	mov	r3, r0
 800872e:	2b01      	cmp	r3, #1
 8008730:	d01e      	beq.n	8008770 <USB_SetCurrentMode+0x84>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b31      	cmp	r3, #49	; 0x31
 8008736:	d9f0      	bls.n	800871a <USB_SetCurrentMode+0x2e>
 8008738:	e01a      	b.n	8008770 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d115      	bne.n	800876c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800874c:	2001      	movs	r0, #1
 800874e:	f7fc fed9 	bl	8005504 <HAL_Delay>
      ms++;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3301      	adds	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 fa2c 	bl	8009bb6 <USB_GetMode>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <USB_SetCurrentMode+0x84>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b31      	cmp	r3, #49	; 0x31
 8008768:	d9f0      	bls.n	800874c <USB_SetCurrentMode+0x60>
 800876a:	e001      	b.n	8008770 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e005      	b.n	800877c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b32      	cmp	r3, #50	; 0x32
 8008774:	d101      	bne.n	800877a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008784:	b084      	sub	sp, #16
 8008786:	b580      	push	{r7, lr}
 8008788:	b086      	sub	sp, #24
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800879e:	2300      	movs	r3, #0
 80087a0:	613b      	str	r3, [r7, #16]
 80087a2:	e009      	b.n	80087b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	3340      	adds	r3, #64	; 0x40
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	3301      	adds	r3, #1
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b0e      	cmp	r3, #14
 80087bc:	d9f2      	bls.n	80087a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d11c      	bne.n	80087fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087d2:	f043 0302 	orr.w	r3, r3, #2
 80087d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
 80087fc:	e00b      	b.n	8008816 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800881c:	461a      	mov	r2, r3
 800881e:	2300      	movs	r3, #0
 8008820:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008828:	4619      	mov	r1, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	461a      	mov	r2, r3
 8008832:	680b      	ldr	r3, [r1, #0]
 8008834:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	2b01      	cmp	r3, #1
 800883a:	d10c      	bne.n	8008856 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008842:	2100      	movs	r1, #0
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f965 	bl	8008b14 <USB_SetDevSpeed>
 800884a:	e008      	b.n	800885e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800884c:	2101      	movs	r1, #1
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f960 	bl	8008b14 <USB_SetDevSpeed>
 8008854:	e003      	b.n	800885e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008856:	2103      	movs	r1, #3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f95b 	bl	8008b14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800885e:	2110      	movs	r1, #16
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f8f3 	bl	8008a4c <USB_FlushTxFifo>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f91f 	bl	8008ab4 <USB_FlushRxFifo>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008886:	461a      	mov	r2, r3
 8008888:	2300      	movs	r3, #0
 800888a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008892:	461a      	mov	r2, r3
 8008894:	2300      	movs	r3, #0
 8008896:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889e:	461a      	mov	r2, r3
 80088a0:	2300      	movs	r3, #0
 80088a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088a4:	2300      	movs	r3, #0
 80088a6:	613b      	str	r3, [r7, #16]
 80088a8:	e043      	b.n	8008932 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c0:	d118      	bne.n	80088f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d4:	461a      	mov	r2, r3
 80088d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	e013      	b.n	8008906 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ea:	461a      	mov	r2, r3
 80088ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	e008      	b.n	8008906 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008900:	461a      	mov	r2, r3
 8008902:	2300      	movs	r3, #0
 8008904:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008912:	461a      	mov	r2, r3
 8008914:	2300      	movs	r3, #0
 8008916:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008924:	461a      	mov	r2, r3
 8008926:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800892a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	3301      	adds	r3, #1
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	429a      	cmp	r2, r3
 8008938:	d3b7      	bcc.n	80088aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	e043      	b.n	80089c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008956:	d118      	bne.n	800898a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896a:	461a      	mov	r2, r3
 800896c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	e013      	b.n	800899c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008980:	461a      	mov	r2, r3
 8008982:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	e008      	b.n	800899c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008996:	461a      	mov	r2, r3
 8008998:	2300      	movs	r3, #0
 800899a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	461a      	mov	r2, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ba:	461a      	mov	r2, r3
 80089bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	3301      	adds	r3, #1
 80089c6:	613b      	str	r3, [r7, #16]
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d3b7      	bcc.n	8008940 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d105      	bne.n	8008a04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f043 0210 	orr.w	r2, r3, #16
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699a      	ldr	r2, [r3, #24]
 8008a08:	4b0f      	ldr	r3, [pc, #60]	; (8008a48 <USB_DevInit+0x2c4>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d005      	beq.n	8008a22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f043 0208 	orr.w	r2, r3, #8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d107      	bne.n	8008a38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a30:	f043 0304 	orr.w	r3, r3, #4
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a44:	b004      	add	sp, #16
 8008a46:	4770      	bx	lr
 8008a48:	803c3800 	.word	0x803c3800

08008a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <USB_FlushTxFifo+0x64>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d901      	bls.n	8008a6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e01b      	b.n	8008aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	daf2      	bge.n	8008a5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	019b      	lsls	r3, r3, #6
 8008a7c:	f043 0220 	orr.w	r2, r3, #32
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3301      	adds	r3, #1
 8008a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4a08      	ldr	r2, [pc, #32]	; (8008ab0 <USB_FlushTxFifo+0x64>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d901      	bls.n	8008a96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e006      	b.n	8008aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	f003 0320 	and.w	r3, r3, #32
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	d0f0      	beq.n	8008a84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	00030d40 	.word	0x00030d40

08008ab4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <USB_FlushRxFifo+0x5c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d901      	bls.n	8008ad2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e018      	b.n	8008b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	daf2      	bge.n	8008ac0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2210      	movs	r2, #16
 8008ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4a08      	ldr	r2, [pc, #32]	; (8008b10 <USB_FlushRxFifo+0x5c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d901      	bls.n	8008af6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e006      	b.n	8008b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f003 0310 	and.w	r3, r3, #16
 8008afe:	2b10      	cmp	r3, #16
 8008b00:	d0f0      	beq.n	8008ae4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	00030d40 	.word	0x00030d40

08008b14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b34:	4313      	orrs	r3, r2
 8008b36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b087      	sub	sp, #28
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 0306 	and.w	r3, r3, #6
 8008b5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75fb      	strb	r3, [r7, #23]
 8008b6a:	e00a      	b.n	8008b82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d002      	beq.n	8008b78 <USB_GetDevSpeed+0x32>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2b06      	cmp	r3, #6
 8008b76:	d102      	bne.n	8008b7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	75fb      	strb	r3, [r7, #23]
 8008b7c:	e001      	b.n	8008b82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b7e:	230f      	movs	r3, #15
 8008b80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d13a      	bne.n	8008c22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb2:	69da      	ldr	r2, [r3, #28]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	68f9      	ldr	r1, [r7, #12]
 8008bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d155      	bne.n	8008c90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	791b      	ldrb	r3, [r3, #4]
 8008bfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	059b      	lsls	r3, r3, #22
 8008c06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	e036      	b.n	8008c90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c28:	69da      	ldr	r2, [r3, #28]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	2101      	movs	r1, #1
 8008c34:	fa01 f303 	lsl.w	r3, r1, r3
 8008c38:	041b      	lsls	r3, r3, #16
 8008c3a:	68f9      	ldr	r1, [r7, #12]
 8008c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c40:	4313      	orrs	r3, r2
 8008c42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d11a      	bne.n	8008c90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	791b      	ldrb	r3, [r3, #4]
 8008c74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c76:	430b      	orrs	r3, r1
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d161      	bne.n	8008d80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd2:	d11f      	bne.n	8008d14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	0151      	lsls	r1, r2, #5
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	440a      	add	r2, r1
 8008d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	f003 030f 	and.w	r3, r3, #15
 8008d24:	2101      	movs	r1, #1
 8008d26:	fa01 f303 	lsl.w	r3, r1, r3
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	43db      	mvns	r3, r3
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d34:	4013      	ands	r3, r2
 8008d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3e:	69da      	ldr	r2, [r3, #28]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	2101      	movs	r1, #1
 8008d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	43db      	mvns	r3, r3
 8008d52:	68f9      	ldr	r1, [r7, #12]
 8008d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d58:	4013      	ands	r3, r2
 8008d5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	0159      	lsls	r1, r3, #5
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	440b      	add	r3, r1
 8008d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d76:	4619      	mov	r1, r3
 8008d78:	4b35      	ldr	r3, [pc, #212]	; (8008e50 <USB_DeactivateEndpoint+0x1b0>)
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	600b      	str	r3, [r1, #0]
 8008d7e:	e060      	b.n	8008e42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d96:	d11f      	bne.n	8008dd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	0151      	lsls	r1, r2, #5
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	440a      	add	r2, r1
 8008dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008db6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	2101      	movs	r1, #1
 8008dea:	fa01 f303 	lsl.w	r3, r1, r3
 8008dee:	041b      	lsls	r3, r3, #16
 8008df0:	43db      	mvns	r3, r3
 8008df2:	68f9      	ldr	r1, [r7, #12]
 8008df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008df8:	4013      	ands	r3, r2
 8008dfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e02:	69da      	ldr	r2, [r3, #28]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e12:	041b      	lsls	r3, r3, #16
 8008e14:	43db      	mvns	r3, r3
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	0159      	lsls	r1, r3, #5
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	440b      	add	r3, r1
 8008e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <USB_DeactivateEndpoint+0x1b4>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	ec337800 	.word	0xec337800
 8008e54:	eff37800 	.word	0xeff37800

08008e58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	; 0x28
 8008e5c:	af02      	add	r7, sp, #8
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	f040 815c 	bne.w	8009132 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d132      	bne.n	8008ee8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	0151      	lsls	r1, r2, #5
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	440a      	add	r2, r1
 8008e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ea4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	0151      	lsls	r1, r2, #5
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	440a      	add	r2, r1
 8008ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee0:	0cdb      	lsrs	r3, r3, #19
 8008ee2:	04db      	lsls	r3, r3, #19
 8008ee4:	6113      	str	r3, [r2, #16]
 8008ee6:	e074      	b.n	8008fd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f02:	0cdb      	lsrs	r3, r3, #19
 8008f04:	04db      	lsls	r3, r3, #19
 8008f06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	0151      	lsls	r1, r2, #5
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	440a      	add	r2, r1
 8008f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	6999      	ldr	r1, [r3, #24]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	440b      	add	r3, r1
 8008f44:	1e59      	subs	r1, r3, #1
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f50:	4b9d      	ldr	r3, [pc, #628]	; (80091c8 <USB_EPStartXfer+0x370>)
 8008f52:	400b      	ands	r3, r1
 8008f54:	69b9      	ldr	r1, [r7, #24]
 8008f56:	0148      	lsls	r0, r1, #5
 8008f58:	69f9      	ldr	r1, [r7, #28]
 8008f5a:	4401      	add	r1, r0
 8008f5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f60:	4313      	orrs	r3, r2
 8008f62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f70:	691a      	ldr	r2, [r3, #16]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f7a:	69b9      	ldr	r1, [r7, #24]
 8008f7c:	0148      	lsls	r0, r1, #5
 8008f7e:	69f9      	ldr	r1, [r7, #28]
 8008f80:	4401      	add	r1, r0
 8008f82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f86:	4313      	orrs	r3, r2
 8008f88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	791b      	ldrb	r3, [r3, #4]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d11f      	bne.n	8008fd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	0151      	lsls	r1, r2, #5
 8008fa4:	69fa      	ldr	r2, [r7, #28]
 8008fa6:	440a      	add	r2, r1
 8008fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008fb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	0151      	lsls	r1, r2, #5
 8008fc4:	69fa      	ldr	r2, [r7, #28]
 8008fc6:	440a      	add	r2, r1
 8008fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d14b      	bne.n	8009070 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fec:	461a      	mov	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	791b      	ldrb	r3, [r3, #4]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d128      	bne.n	800904e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009008:	2b00      	cmp	r3, #0
 800900a:	d110      	bne.n	800902e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	0151      	lsls	r1, r2, #5
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	440a      	add	r2, r1
 8009022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	e00f      	b.n	800904e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	0151      	lsls	r1, r2, #5
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	440a      	add	r2, r1
 8009044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800904c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	0151      	lsls	r1, r2, #5
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	440a      	add	r2, r1
 8009064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	e133      	b.n	80092d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	0151      	lsls	r1, r2, #5
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	440a      	add	r2, r1
 8009086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800908a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800908e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	791b      	ldrb	r3, [r3, #4]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d015      	beq.n	80090c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 811b 	beq.w	80092d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	2101      	movs	r1, #1
 80090b4:	fa01 f303 	lsl.w	r3, r1, r3
 80090b8:	69f9      	ldr	r1, [r7, #28]
 80090ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090be:	4313      	orrs	r3, r2
 80090c0:	634b      	str	r3, [r1, #52]	; 0x34
 80090c2:	e109      	b.n	80092d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d110      	bne.n	80090f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	0151      	lsls	r1, r2, #5
 80090e6:	69fa      	ldr	r2, [r7, #28]
 80090e8:	440a      	add	r2, r1
 80090ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	e00f      	b.n	8009116 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	0151      	lsls	r1, r2, #5
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	440a      	add	r2, r1
 800910c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009114:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6919      	ldr	r1, [r3, #16]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	781a      	ldrb	r2, [r3, #0]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	b298      	uxth	r0, r3
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	4603      	mov	r3, r0
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fade 	bl	80096ec <USB_WritePacket>
 8009130:	e0d2      	b.n	80092d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	0151      	lsls	r1, r2, #5
 8009144:	69fa      	ldr	r2, [r7, #28]
 8009146:	440a      	add	r2, r1
 8009148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800914c:	0cdb      	lsrs	r3, r3, #19
 800914e:	04db      	lsls	r3, r3, #19
 8009150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	0151      	lsls	r1, r2, #5
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	440a      	add	r2, r1
 8009168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800916c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009174:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d126      	bne.n	80091cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009194:	69b9      	ldr	r1, [r7, #24]
 8009196:	0148      	lsls	r0, r1, #5
 8009198:	69f9      	ldr	r1, [r7, #28]
 800919a:	4401      	add	r1, r0
 800919c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091a0:	4313      	orrs	r3, r2
 80091a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091c2:	6113      	str	r3, [r2, #16]
 80091c4:	e03a      	b.n	800923c <USB_EPStartXfer+0x3e4>
 80091c6:	bf00      	nop
 80091c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	699a      	ldr	r2, [r3, #24]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	4413      	add	r3, r2
 80091d6:	1e5a      	subs	r2, r3, #1
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	8afa      	ldrh	r2, [r7, #22]
 80091e8:	fb03 f202 	mul.w	r2, r3, r2
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	8afb      	ldrh	r3, [r7, #22]
 8009200:	04d9      	lsls	r1, r3, #19
 8009202:	4b38      	ldr	r3, [pc, #224]	; (80092e4 <USB_EPStartXfer+0x48c>)
 8009204:	400b      	ands	r3, r1
 8009206:	69b9      	ldr	r1, [r7, #24]
 8009208:	0148      	lsls	r0, r1, #5
 800920a:	69f9      	ldr	r1, [r7, #28]
 800920c:	4401      	add	r1, r0
 800920e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009212:	4313      	orrs	r3, r2
 8009214:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	4413      	add	r3, r2
 800921e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009222:	691a      	ldr	r2, [r3, #16]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800922c:	69b9      	ldr	r1, [r7, #24]
 800922e:	0148      	lsls	r0, r1, #5
 8009230:	69f9      	ldr	r1, [r7, #28]
 8009232:	4401      	add	r1, r0
 8009234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009238:	4313      	orrs	r3, r2
 800923a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d10d      	bne.n	800925e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6919      	ldr	r1, [r3, #16]
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925a:	460a      	mov	r2, r1
 800925c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	791b      	ldrb	r3, [r3, #4]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d128      	bne.n	80092b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009272:	2b00      	cmp	r3, #0
 8009274:	d110      	bne.n	8009298 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	0151      	lsls	r1, r2, #5
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	440a      	add	r2, r1
 800928c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009290:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	e00f      	b.n	80092b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3720      	adds	r7, #32
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	1ff80000 	.word	0x1ff80000

080092e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	2b01      	cmp	r3, #1
 8009306:	f040 80ce 	bne.w	80094a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d132      	bne.n	8009378 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	0151      	lsls	r1, r2, #5
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	440a      	add	r2, r1
 8009328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800932c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009330:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	4413      	add	r3, r2
 800933e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	0151      	lsls	r1, r2, #5
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	440a      	add	r2, r1
 800934c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	0151      	lsls	r1, r2, #5
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	440a      	add	r2, r1
 800936c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009370:	0cdb      	lsrs	r3, r3, #19
 8009372:	04db      	lsls	r3, r3, #19
 8009374:	6113      	str	r3, [r2, #16]
 8009376:	e04e      	b.n	8009416 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	0151      	lsls	r1, r2, #5
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	440a      	add	r2, r1
 800938e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009392:	0cdb      	lsrs	r3, r3, #19
 8009394:	04db      	lsls	r3, r3, #19
 8009396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d903      	bls.n	80093d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	691a      	ldr	r2, [r3, #16]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009406:	6939      	ldr	r1, [r7, #16]
 8009408:	0148      	lsls	r0, r1, #5
 800940a:	6979      	ldr	r1, [r7, #20]
 800940c:	4401      	add	r1, r0
 800940e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009412:	4313      	orrs	r3, r2
 8009414:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d11e      	bne.n	800945a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009430:	461a      	mov	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	0151      	lsls	r1, r2, #5
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	440a      	add	r2, r1
 800944e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	e097      	b.n	800958a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009478:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 8083 	beq.w	800958a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 030f 	and.w	r3, r3, #15
 8009494:	2101      	movs	r1, #1
 8009496:	fa01 f303 	lsl.w	r3, r1, r3
 800949a:	6979      	ldr	r1, [r7, #20]
 800949c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094a0:	4313      	orrs	r3, r2
 80094a2:	634b      	str	r3, [r1, #52]	; 0x34
 80094a4:	e071      	b.n	800958a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	0151      	lsls	r1, r2, #5
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	440a      	add	r2, r1
 80094bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094c0:	0cdb      	lsrs	r3, r3, #19
 80094c2:	04db      	lsls	r3, r3, #19
 80094c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	0151      	lsls	r1, r2, #5
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	440a      	add	r2, r1
 80094dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	440a      	add	r2, r1
 8009518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800951c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009538:	6939      	ldr	r1, [r7, #16]
 800953a:	0148      	lsls	r0, r1, #5
 800953c:	6979      	ldr	r1, [r7, #20]
 800953e:	4401      	add	r1, r0
 8009540:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009544:	4313      	orrs	r3, r2
 8009546:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d10d      	bne.n	800956a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6919      	ldr	r1, [r3, #16]
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009566:	460a      	mov	r2, r1
 8009568:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009584:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009588:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	371c      	adds	r7, #28
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	785b      	ldrb	r3, [r3, #1]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d14a      	bne.n	800964c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095ce:	f040 8086 	bne.w	80096de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	7812      	ldrb	r2, [r2, #0]
 80095e6:	0151      	lsls	r1, r2, #5
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	440a      	add	r2, r1
 80095ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	7812      	ldrb	r2, [r2, #0]
 800960a:	0151      	lsls	r1, r2, #5
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	440a      	add	r2, r1
 8009610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009618:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3301      	adds	r3, #1
 800961e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f242 7210 	movw	r2, #10000	; 0x2710
 8009626:	4293      	cmp	r3, r2
 8009628:	d902      	bls.n	8009630 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	75fb      	strb	r3, [r7, #23]
          break;
 800962e:	e056      	b.n	80096de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009648:	d0e7      	beq.n	800961a <USB_EPStopXfer+0x82>
 800964a:	e048      	b.n	80096de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	4413      	add	r3, r2
 8009656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009664:	d13b      	bne.n	80096de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	7812      	ldrb	r2, [r2, #0]
 800967a:	0151      	lsls	r1, r2, #5
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	440a      	add	r2, r1
 8009680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009684:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009688:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	7812      	ldrb	r2, [r2, #0]
 800969e:	0151      	lsls	r1, r2, #5
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	440a      	add	r2, r1
 80096a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3301      	adds	r3, #1
 80096b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d902      	bls.n	80096c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	75fb      	strb	r3, [r7, #23]
          break;
 80096c2:	e00c      	b.n	80096de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096dc:	d0e7      	beq.n	80096ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80096de:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b089      	sub	sp, #36	; 0x24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4611      	mov	r1, r2
 80096f8:	461a      	mov	r2, r3
 80096fa:	460b      	mov	r3, r1
 80096fc:	71fb      	strb	r3, [r7, #7]
 80096fe:	4613      	mov	r3, r2
 8009700:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800970a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800970e:	2b00      	cmp	r3, #0
 8009710:	d123      	bne.n	800975a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009712:	88bb      	ldrh	r3, [r7, #4]
 8009714:	3303      	adds	r3, #3
 8009716:	089b      	lsrs	r3, r3, #2
 8009718:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800971a:	2300      	movs	r3, #0
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	e018      	b.n	8009752 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	031a      	lsls	r2, r3, #12
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	4413      	add	r3, r2
 8009728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972c:	461a      	mov	r2, r3
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	3301      	adds	r3, #1
 8009738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	3301      	adds	r3, #1
 800973e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	3301      	adds	r3, #1
 8009744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	3301      	adds	r3, #1
 800974a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	3301      	adds	r3, #1
 8009750:	61bb      	str	r3, [r7, #24]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	429a      	cmp	r2, r3
 8009758:	d3e2      	bcc.n	8009720 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3724      	adds	r7, #36	; 0x24
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009768:	b480      	push	{r7}
 800976a:	b08b      	sub	sp, #44	; 0x2c
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	089b      	lsrs	r3, r3, #2
 8009782:	b29b      	uxth	r3, r3
 8009784:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009786:	88fb      	ldrh	r3, [r7, #6]
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800978e:	2300      	movs	r3, #0
 8009790:	623b      	str	r3, [r7, #32]
 8009792:	e014      	b.n	80097be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	601a      	str	r2, [r3, #0]
    pDest++;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	3301      	adds	r3, #1
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	3301      	adds	r3, #1
 80097aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	3301      	adds	r3, #1
 80097b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	3301      	adds	r3, #1
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	3301      	adds	r3, #1
 80097bc:	623b      	str	r3, [r7, #32]
 80097be:	6a3a      	ldr	r2, [r7, #32]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d3e6      	bcc.n	8009794 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80097c6:	8bfb      	ldrh	r3, [r7, #30]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d01e      	beq.n	800980a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d6:	461a      	mov	r2, r3
 80097d8:	f107 0310 	add.w	r3, r7, #16
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	fa22 f303 	lsr.w	r3, r2, r3
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	701a      	strb	r2, [r3, #0]
      i++;
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	3301      	adds	r3, #1
 80097f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	3301      	adds	r3, #1
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80097fe:	8bfb      	ldrh	r3, [r7, #30]
 8009800:	3b01      	subs	r3, #1
 8009802:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009804:	8bfb      	ldrh	r3, [r7, #30]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1ea      	bne.n	80097e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800980c:	4618      	mov	r0, r3
 800980e:	372c      	adds	r7, #44	; 0x2c
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d12c      	bne.n	800988e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	db12      	blt.n	800986c <USB_EPSetStall+0x54>
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00f      	beq.n	800986c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800986a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	e02b      	b.n	80098e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	db12      	blt.n	80098c6 <USB_EPSetStall+0xae>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00f      	beq.n	80098c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	785b      	ldrb	r3, [r3, #1]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d128      	bne.n	8009962 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	440a      	add	r2, r1
 8009926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800992a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800992e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	791b      	ldrb	r3, [r3, #4]
 8009934:	2b03      	cmp	r3, #3
 8009936:	d003      	beq.n	8009940 <USB_EPClearStall+0x4c>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	791b      	ldrb	r3, [r3, #4]
 800993c:	2b02      	cmp	r3, #2
 800993e:	d138      	bne.n	80099b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	0151      	lsls	r1, r2, #5
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	440a      	add	r2, r1
 8009956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800995a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	e027      	b.n	80099b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009980:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	791b      	ldrb	r3, [r3, #4]
 8009986:	2b03      	cmp	r3, #3
 8009988:	d003      	beq.n	8009992 <USB_EPClearStall+0x9e>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	791b      	ldrb	r3, [r3, #4]
 800998e:	2b02      	cmp	r3, #2
 8009990:	d10f      	bne.n	80099b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80099e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	78fb      	ldrb	r3, [r7, #3]
 80099ee:	011b      	lsls	r3, r3, #4
 80099f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80099f4:	68f9      	ldr	r1, [r7, #12]
 80099f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099fa:	4313      	orrs	r3, r2
 80099fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a26:	f023 0303 	bic.w	r3, r3, #3
 8009a2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a3a:	f023 0302 	bic.w	r3, r3, #2
 8009a3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a68:	f023 0303 	bic.w	r3, r3, #3
 8009a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a7c:	f043 0302 	orr.w	r3, r3, #2
 8009a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	0c1b      	lsrs	r3, r3, #16
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b085      	sub	sp, #20
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b06:	69db      	ldr	r3, [r3, #28]
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	b29b      	uxth	r3, r3
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	4013      	ands	r3, r2
 8009b4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b087      	sub	sp, #28
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b7e:	78fb      	ldrb	r3, [r7, #3]
 8009b80:	f003 030f 	and.w	r3, r3, #15
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8a:	01db      	lsls	r3, r3, #7
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b94:	78fb      	ldrb	r3, [r7, #3]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	371c      	adds	r7, #28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009bf0:	f023 0307 	bic.w	r3, r3, #7
 8009bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	460b      	mov	r3, r1
 8009c22:	607a      	str	r2, [r7, #4]
 8009c24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	333c      	adds	r3, #60	; 0x3c
 8009c2e:	3304      	adds	r3, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	4a26      	ldr	r2, [pc, #152]	; (8009cd0 <USB_EP0_OutStart+0xb8>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d90a      	bls.n	8009c52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c4c:	d101      	bne.n	8009c52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e037      	b.n	8009cc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c58:	461a      	mov	r2, r3
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c80:	f043 0318 	orr.w	r3, r3, #24
 8009c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d10f      	bne.n	8009cc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009cbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	4f54300a 	.word	0x4f54300a

08009cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4a13      	ldr	r2, [pc, #76]	; (8009d38 <USB_CoreReset+0x64>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d901      	bls.n	8009cf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e01b      	b.n	8009d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	daf2      	bge.n	8009ce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	f043 0201 	orr.w	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a09      	ldr	r2, [pc, #36]	; (8009d38 <USB_CoreReset+0x64>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d901      	bls.n	8009d1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e006      	b.n	8009d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d0f0      	beq.n	8009d0a <USB_CoreReset+0x36>

  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	00030d40 	.word	0x00030d40

08009d3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d4c:	f00e ffd2 	bl	8018cf4 <USBD_static_malloc>
 8009d50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d109      	bne.n	8009d6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	32b0      	adds	r2, #176	; 0xb0
 8009d62:	2100      	movs	r1, #0
 8009d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009d68:	2302      	movs	r3, #2
 8009d6a:	e0d4      	b.n	8009f16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009d6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009d70:	2100      	movs	r1, #0
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f010 fbd8 	bl	801a528 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	32b0      	adds	r2, #176	; 0xb0
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	32b0      	adds	r2, #176	; 0xb0
 8009d92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7c1b      	ldrb	r3, [r3, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d138      	bne.n	8009e16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009da4:	4b5e      	ldr	r3, [pc, #376]	; (8009f20 <USBD_CDC_Init+0x1e4>)
 8009da6:	7819      	ldrb	r1, [r3, #0]
 8009da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dac:	2202      	movs	r2, #2
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f00e fe7d 	bl	8018aae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009db4:	4b5a      	ldr	r3, [pc, #360]	; (8009f20 <USBD_CDC_Init+0x1e4>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	f003 020f 	and.w	r2, r3, #15
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	440b      	add	r3, r1
 8009dc8:	3324      	adds	r3, #36	; 0x24
 8009dca:	2201      	movs	r2, #1
 8009dcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009dce:	4b55      	ldr	r3, [pc, #340]	; (8009f24 <USBD_CDC_Init+0x1e8>)
 8009dd0:	7819      	ldrb	r1, [r3, #0]
 8009dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f00e fe68 	bl	8018aae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009dde:	4b51      	ldr	r3, [pc, #324]	; (8009f24 <USBD_CDC_Init+0x1e8>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f003 020f 	and.w	r2, r3, #15
 8009de6:	6879      	ldr	r1, [r7, #4]
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	440b      	add	r3, r1
 8009df2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009df6:	2201      	movs	r2, #1
 8009df8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009dfa:	4b4b      	ldr	r3, [pc, #300]	; (8009f28 <USBD_CDC_Init+0x1ec>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f003 020f 	and.w	r2, r3, #15
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3326      	adds	r3, #38	; 0x26
 8009e10:	2210      	movs	r2, #16
 8009e12:	801a      	strh	r2, [r3, #0]
 8009e14:	e035      	b.n	8009e82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009e16:	4b42      	ldr	r3, [pc, #264]	; (8009f20 <USBD_CDC_Init+0x1e4>)
 8009e18:	7819      	ldrb	r1, [r3, #0]
 8009e1a:	2340      	movs	r3, #64	; 0x40
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f00e fe45 	bl	8018aae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009e24:	4b3e      	ldr	r3, [pc, #248]	; (8009f20 <USBD_CDC_Init+0x1e4>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	f003 020f 	and.w	r2, r3, #15
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	440b      	add	r3, r1
 8009e38:	3324      	adds	r3, #36	; 0x24
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009e3e:	4b39      	ldr	r3, [pc, #228]	; (8009f24 <USBD_CDC_Init+0x1e8>)
 8009e40:	7819      	ldrb	r1, [r3, #0]
 8009e42:	2340      	movs	r3, #64	; 0x40
 8009e44:	2202      	movs	r2, #2
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f00e fe31 	bl	8018aae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009e4c:	4b35      	ldr	r3, [pc, #212]	; (8009f24 <USBD_CDC_Init+0x1e8>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	f003 020f 	and.w	r2, r3, #15
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e64:	2201      	movs	r2, #1
 8009e66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e68:	4b2f      	ldr	r3, [pc, #188]	; (8009f28 <USBD_CDC_Init+0x1ec>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	f003 020f 	and.w	r2, r3, #15
 8009e70:	6879      	ldr	r1, [r7, #4]
 8009e72:	4613      	mov	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	440b      	add	r3, r1
 8009e7c:	3326      	adds	r3, #38	; 0x26
 8009e7e:	2210      	movs	r2, #16
 8009e80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e82:	4b29      	ldr	r3, [pc, #164]	; (8009f28 <USBD_CDC_Init+0x1ec>)
 8009e84:	7819      	ldrb	r1, [r3, #0]
 8009e86:	2308      	movs	r3, #8
 8009e88:	2203      	movs	r2, #3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f00e fe0f 	bl	8018aae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e90:	4b25      	ldr	r3, [pc, #148]	; (8009f28 <USBD_CDC_Init+0x1ec>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	f003 020f 	and.w	r2, r3, #15
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	3324      	adds	r3, #36	; 0x24
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	33b0      	adds	r3, #176	; 0xb0
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e018      	b.n	8009f16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	7c1b      	ldrb	r3, [r3, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009eec:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <USBD_CDC_Init+0x1e8>)
 8009eee:	7819      	ldrb	r1, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f00e fec6 	bl	8018c8c <USBD_LL_PrepareReceive>
 8009f00:	e008      	b.n	8009f14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f02:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <USBD_CDC_Init+0x1e8>)
 8009f04:	7819      	ldrb	r1, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f0c:	2340      	movs	r3, #64	; 0x40
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f00e febc 	bl	8018c8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	2000274b 	.word	0x2000274b
 8009f24:	2000274c 	.word	0x2000274c
 8009f28:	2000274d 	.word	0x2000274d

08009f2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009f38:	4b3a      	ldr	r3, [pc, #232]	; (800a024 <USBD_CDC_DeInit+0xf8>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f00e fddb 	bl	8018afa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009f44:	4b37      	ldr	r3, [pc, #220]	; (800a024 <USBD_CDC_DeInit+0xf8>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	f003 020f 	and.w	r2, r3, #15
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	440b      	add	r3, r1
 8009f58:	3324      	adds	r3, #36	; 0x24
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009f5e:	4b32      	ldr	r3, [pc, #200]	; (800a028 <USBD_CDC_DeInit+0xfc>)
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f00e fdc8 	bl	8018afa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009f6a:	4b2f      	ldr	r3, [pc, #188]	; (800a028 <USBD_CDC_DeInit+0xfc>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	f003 020f 	and.w	r2, r3, #15
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f82:	2200      	movs	r2, #0
 8009f84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009f86:	4b29      	ldr	r3, [pc, #164]	; (800a02c <USBD_CDC_DeInit+0x100>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f00e fdb4 	bl	8018afa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009f92:	4b26      	ldr	r3, [pc, #152]	; (800a02c <USBD_CDC_DeInit+0x100>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	f003 020f 	and.w	r2, r3, #15
 8009f9a:	6879      	ldr	r1, [r7, #4]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	3324      	adds	r3, #36	; 0x24
 8009fa8:	2200      	movs	r2, #0
 8009faa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009fac:	4b1f      	ldr	r3, [pc, #124]	; (800a02c <USBD_CDC_DeInit+0x100>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	f003 020f 	and.w	r2, r3, #15
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	3326      	adds	r3, #38	; 0x26
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	32b0      	adds	r2, #176	; 0xb0
 8009fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d01f      	beq.n	800a018 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	33b0      	adds	r3, #176	; 0xb0
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	32b0      	adds	r2, #176	; 0xb0
 8009ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f00e fe88 	bl	8018d10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	32b0      	adds	r2, #176	; 0xb0
 800a00a:	2100      	movs	r1, #0
 800a00c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	2000274b 	.word	0x2000274b
 800a028:	2000274c 	.word	0x2000274c
 800a02c:	2000274d 	.word	0x2000274d

0800a030 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	32b0      	adds	r2, #176	; 0xb0
 800a044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a048:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e0bf      	b.n	800a1e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d050      	beq.n	800a10e <USBD_CDC_Setup+0xde>
 800a06c:	2b20      	cmp	r3, #32
 800a06e:	f040 80af 	bne.w	800a1d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	88db      	ldrh	r3, [r3, #6]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d03a      	beq.n	800a0f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b25b      	sxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	da1b      	bge.n	800a0bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	33b0      	adds	r3, #176	; 0xb0
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a09a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	88d2      	ldrh	r2, [r2, #6]
 800a0a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	88db      	ldrh	r3, [r3, #6]
 800a0a6:	2b07      	cmp	r3, #7
 800a0a8:	bf28      	it	cs
 800a0aa:	2307      	movcs	r3, #7
 800a0ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	89fa      	ldrh	r2, [r7, #14]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 fd89 	bl	800bbcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a0ba:	e090      	b.n	800a1de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	785a      	ldrb	r2, [r3, #1]
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	88db      	ldrh	r3, [r3, #6]
 800a0ca:	2b3f      	cmp	r3, #63	; 0x3f
 800a0cc:	d803      	bhi.n	800a0d6 <USBD_CDC_Setup+0xa6>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	88db      	ldrh	r3, [r3, #6]
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	e000      	b.n	800a0d8 <USBD_CDC_Setup+0xa8>
 800a0d6:	2240      	movs	r2, #64	; 0x40
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a0de:	6939      	ldr	r1, [r7, #16]
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f001 fd9b 	bl	800bc24 <USBD_CtlPrepareRx>
      break;
 800a0ee:	e076      	b.n	800a1de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	33b0      	adds	r3, #176	; 0xb0
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	7850      	ldrb	r0, [r2, #1]
 800a106:	2200      	movs	r2, #0
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	4798      	blx	r3
      break;
 800a10c:	e067      	b.n	800a1de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	785b      	ldrb	r3, [r3, #1]
 800a112:	2b0b      	cmp	r3, #11
 800a114:	d851      	bhi.n	800a1ba <USBD_CDC_Setup+0x18a>
 800a116:	a201      	add	r2, pc, #4	; (adr r2, 800a11c <USBD_CDC_Setup+0xec>)
 800a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11c:	0800a14d 	.word	0x0800a14d
 800a120:	0800a1c9 	.word	0x0800a1c9
 800a124:	0800a1bb 	.word	0x0800a1bb
 800a128:	0800a1bb 	.word	0x0800a1bb
 800a12c:	0800a1bb 	.word	0x0800a1bb
 800a130:	0800a1bb 	.word	0x0800a1bb
 800a134:	0800a1bb 	.word	0x0800a1bb
 800a138:	0800a1bb 	.word	0x0800a1bb
 800a13c:	0800a1bb 	.word	0x0800a1bb
 800a140:	0800a1bb 	.word	0x0800a1bb
 800a144:	0800a177 	.word	0x0800a177
 800a148:	0800a1a1 	.word	0x0800a1a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b03      	cmp	r3, #3
 800a156:	d107      	bne.n	800a168 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a158:	f107 030a 	add.w	r3, r7, #10
 800a15c:	2202      	movs	r2, #2
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f001 fd33 	bl	800bbcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a166:	e032      	b.n	800a1ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 fcbd 	bl	800baea <USBD_CtlError>
            ret = USBD_FAIL;
 800a170:	2303      	movs	r3, #3
 800a172:	75fb      	strb	r3, [r7, #23]
          break;
 800a174:	e02b      	b.n	800a1ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d107      	bne.n	800a192 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a182:	f107 030d 	add.w	r3, r7, #13
 800a186:	2201      	movs	r2, #1
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fd1e 	bl	800bbcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a190:	e01d      	b.n	800a1ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 fca8 	bl	800baea <USBD_CtlError>
            ret = USBD_FAIL;
 800a19a:	2303      	movs	r3, #3
 800a19c:	75fb      	strb	r3, [r7, #23]
          break;
 800a19e:	e016      	b.n	800a1ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b03      	cmp	r3, #3
 800a1aa:	d00f      	beq.n	800a1cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 fc9b 	bl	800baea <USBD_CtlError>
            ret = USBD_FAIL;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a1b8:	e008      	b.n	800a1cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fc94 	bl	800baea <USBD_CtlError>
          ret = USBD_FAIL;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	75fb      	strb	r3, [r7, #23]
          break;
 800a1c6:	e002      	b.n	800a1ce <USBD_CDC_Setup+0x19e>
          break;
 800a1c8:	bf00      	nop
 800a1ca:	e008      	b.n	800a1de <USBD_CDC_Setup+0x1ae>
          break;
 800a1cc:	bf00      	nop
      }
      break;
 800a1ce:	e006      	b.n	800a1de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f001 fc89 	bl	800baea <USBD_CtlError>
      ret = USBD_FAIL;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	75fb      	strb	r3, [r7, #23]
      break;
 800a1dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	32b0      	adds	r2, #176	; 0xb0
 800a206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a20e:	2303      	movs	r3, #3
 800a210:	e065      	b.n	800a2de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	32b0      	adds	r2, #176	; 0xb0
 800a21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a220:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a222:	78fb      	ldrb	r3, [r7, #3]
 800a224:	f003 020f 	and.w	r2, r3, #15
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	4613      	mov	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	3318      	adds	r3, #24
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d02f      	beq.n	800a29c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	f003 020f 	and.w	r2, r3, #15
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	3318      	adds	r3, #24
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	78fb      	ldrb	r3, [r7, #3]
 800a254:	f003 010f 	and.w	r1, r3, #15
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	460b      	mov	r3, r1
 800a25c:	00db      	lsls	r3, r3, #3
 800a25e:	440b      	add	r3, r1
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4403      	add	r3, r0
 800a264:	3348      	adds	r3, #72	; 0x48
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	fbb2 f1f3 	udiv	r1, r2, r3
 800a26c:	fb01 f303 	mul.w	r3, r1, r3
 800a270:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a272:	2b00      	cmp	r3, #0
 800a274:	d112      	bne.n	800a29c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a276:	78fb      	ldrb	r3, [r7, #3]
 800a278:	f003 020f 	and.w	r2, r3, #15
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	4613      	mov	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	440b      	add	r3, r1
 800a288:	3318      	adds	r3, #24
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a28e:	78f9      	ldrb	r1, [r7, #3]
 800a290:	2300      	movs	r3, #0
 800a292:	2200      	movs	r2, #0
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f00e fcd8 	bl	8018c4a <USBD_LL_Transmit>
 800a29a:	e01f      	b.n	800a2dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	33b0      	adds	r3, #176	; 0xb0
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d010      	beq.n	800a2dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	33b0      	adds	r3, #176	; 0xb0
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	32b0      	adds	r2, #176	; 0xb0
 800a2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a300:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	32b0      	adds	r2, #176	; 0xb0
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a314:	2303      	movs	r3, #3
 800a316:	e01a      	b.n	800a34e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f00e fcd6 	bl	8018cce <USBD_LL_GetRxDataSize>
 800a322:	4602      	mov	r2, r0
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	33b0      	adds	r3, #176	; 0xb0
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a348:	4611      	mov	r1, r2
 800a34a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	32b0      	adds	r2, #176	; 0xb0
 800a368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a36c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a374:	2303      	movs	r3, #3
 800a376:	e025      	b.n	800a3c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	33b0      	adds	r3, #176	; 0xb0
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d01a      	beq.n	800a3c2 <USBD_CDC_EP0_RxReady+0x6c>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a392:	2bff      	cmp	r3, #255	; 0xff
 800a394:	d015      	beq.n	800a3c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	33b0      	adds	r3, #176	; 0xb0
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a3ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a3b6:	b292      	uxth	r2, r2
 800a3b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	22ff      	movs	r2, #255	; 0xff
 800a3be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3d4:	2182      	movs	r1, #130	; 0x82
 800a3d6:	4818      	ldr	r0, [pc, #96]	; (800a438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3d8:	f000 fd4f 	bl	800ae7a <USBD_GetEpDesc>
 800a3dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3de:	2101      	movs	r1, #1
 800a3e0:	4815      	ldr	r0, [pc, #84]	; (800a438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3e2:	f000 fd4a 	bl	800ae7a <USBD_GetEpDesc>
 800a3e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3e8:	2181      	movs	r1, #129	; 0x81
 800a3ea:	4813      	ldr	r0, [pc, #76]	; (800a438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3ec:	f000 fd45 	bl	800ae7a <USBD_GetEpDesc>
 800a3f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2210      	movs	r2, #16
 800a3fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d006      	beq.n	800a412 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2200      	movs	r2, #0
 800a408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a40c:	711a      	strb	r2, [r3, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d006      	beq.n	800a426 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a420:	711a      	strb	r2, [r3, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2243      	movs	r2, #67	; 0x43
 800a42a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a42c:	4b02      	ldr	r3, [pc, #8]	; (800a438 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20002708 	.word	0x20002708

0800a43c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a444:	2182      	movs	r1, #130	; 0x82
 800a446:	4818      	ldr	r0, [pc, #96]	; (800a4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a448:	f000 fd17 	bl	800ae7a <USBD_GetEpDesc>
 800a44c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a44e:	2101      	movs	r1, #1
 800a450:	4815      	ldr	r0, [pc, #84]	; (800a4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a452:	f000 fd12 	bl	800ae7a <USBD_GetEpDesc>
 800a456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a458:	2181      	movs	r1, #129	; 0x81
 800a45a:	4813      	ldr	r0, [pc, #76]	; (800a4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a45c:	f000 fd0d 	bl	800ae7a <USBD_GetEpDesc>
 800a460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	2210      	movs	r2, #16
 800a46c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d006      	beq.n	800a482 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	2200      	movs	r2, #0
 800a478:	711a      	strb	r2, [r3, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f042 0202 	orr.w	r2, r2, #2
 800a480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d006      	beq.n	800a496 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	711a      	strb	r2, [r3, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f042 0202 	orr.w	r2, r2, #2
 800a494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2243      	movs	r2, #67	; 0x43
 800a49a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a49c:	4b02      	ldr	r3, [pc, #8]	; (800a4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20002708 	.word	0x20002708

0800a4ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a4b4:	2182      	movs	r1, #130	; 0x82
 800a4b6:	4818      	ldr	r0, [pc, #96]	; (800a518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a4b8:	f000 fcdf 	bl	800ae7a <USBD_GetEpDesc>
 800a4bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a4be:	2101      	movs	r1, #1
 800a4c0:	4815      	ldr	r0, [pc, #84]	; (800a518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a4c2:	f000 fcda 	bl	800ae7a <USBD_GetEpDesc>
 800a4c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a4c8:	2181      	movs	r1, #129	; 0x81
 800a4ca:	4813      	ldr	r0, [pc, #76]	; (800a518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a4cc:	f000 fcd5 	bl	800ae7a <USBD_GetEpDesc>
 800a4d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2210      	movs	r2, #16
 800a4dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d006      	beq.n	800a4f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4ec:	711a      	strb	r2, [r3, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d006      	beq.n	800a506 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a500:	711a      	strb	r2, [r3, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2243      	movs	r2, #67	; 0x43
 800a50a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20002708 	.word	0x20002708

0800a51c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	220a      	movs	r2, #10
 800a528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a52a:	4b03      	ldr	r3, [pc, #12]	; (800a538 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	200026c4 	.word	0x200026c4

0800a53c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e009      	b.n	800a564 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	33b0      	adds	r3, #176	; 0xb0
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	32b0      	adds	r2, #176	; 0xb0
 800a586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a592:	2303      	movs	r3, #3
 800a594:	e008      	b.n	800a5a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	32b0      	adds	r2, #176	; 0xb0
 800a5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e004      	b.n	800a5e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
	...

0800a5f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	32b0      	adds	r2, #176	; 0xb0
 800a602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a606:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a608:	2301      	movs	r3, #1
 800a60a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	32b0      	adds	r2, #176	; 0xb0
 800a616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a61e:	2303      	movs	r3, #3
 800a620:	e025      	b.n	800a66e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d11f      	bne.n	800a66c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2201      	movs	r2, #1
 800a630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a634:	4b10      	ldr	r3, [pc, #64]	; (800a678 <USBD_CDC_TransmitPacket+0x88>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	f003 020f 	and.w	r2, r3, #15
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	4613      	mov	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4403      	add	r3, r0
 800a64e:	3318      	adds	r3, #24
 800a650:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a652:	4b09      	ldr	r3, [pc, #36]	; (800a678 <USBD_CDC_TransmitPacket+0x88>)
 800a654:	7819      	ldrb	r1, [r3, #0]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f00e faf1 	bl	8018c4a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	2000274b 	.word	0x2000274b

0800a67c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	32b0      	adds	r2, #176	; 0xb0
 800a68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a692:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	32b0      	adds	r2, #176	; 0xb0
 800a69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e018      	b.n	800a6dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	7c1b      	ldrb	r3, [r3, #16]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10a      	bne.n	800a6c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6b2:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <USBD_CDC_ReceivePacket+0x68>)
 800a6b4:	7819      	ldrb	r1, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f00e fae3 	bl	8018c8c <USBD_LL_PrepareReceive>
 800a6c6:	e008      	b.n	800a6da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <USBD_CDC_ReceivePacket+0x68>)
 800a6ca:	7819      	ldrb	r1, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6d2:	2340      	movs	r3, #64	; 0x40
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f00e fad9 	bl	8018c8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	2000274c 	.word	0x2000274c

0800a6e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e01f      	b.n	800a740 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	79fa      	ldrb	r2, [r7, #7]
 800a732:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f00e f953 	bl	80189e0 <USBD_LL_Init>
 800a73a:	4603      	mov	r3, r0
 800a73c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a73e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e025      	b.n	800a7ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	32ae      	adds	r2, #174	; 0xae
 800a772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00f      	beq.n	800a79c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	32ae      	adds	r2, #174	; 0xae
 800a786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	f107 020e 	add.w	r2, r7, #14
 800a790:	4610      	mov	r0, r2
 800a792:	4798      	blx	r3
 800a794:	4602      	mov	r2, r0
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a7a2:	1c5a      	adds	r2, r3, #1
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f00e f95b 	bl	8018a78 <USBD_LL_Start>
 800a7c2:	4603      	mov	r3, r0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d009      	beq.n	800a810 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	78fa      	ldrb	r2, [r7, #3]
 800a806:	4611      	mov	r1, r2
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	4798      	blx	r3
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a810:	7bfb      	ldrb	r3, [r7, #15]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	78fa      	ldrb	r2, [r7, #3]
 800a834:	4611      	mov	r1, r2
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	4798      	blx	r3
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a844:	7bfb      	ldrb	r3, [r7, #15]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	4618      	mov	r0, r3
 800a862:	f001 f908 	bl	800ba76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a874:	461a      	mov	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a882:	f003 031f 	and.w	r3, r3, #31
 800a886:	2b02      	cmp	r3, #2
 800a888:	d01a      	beq.n	800a8c0 <USBD_LL_SetupStage+0x72>
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d822      	bhi.n	800a8d4 <USBD_LL_SetupStage+0x86>
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d002      	beq.n	800a898 <USBD_LL_SetupStage+0x4a>
 800a892:	2b01      	cmp	r3, #1
 800a894:	d00a      	beq.n	800a8ac <USBD_LL_SetupStage+0x5e>
 800a896:	e01d      	b.n	800a8d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fb5f 	bl	800af64 <USBD_StdDevReq>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8aa:	e020      	b.n	800a8ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fbc7 	bl	800b048 <USBD_StdItfReq>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8be:	e016      	b.n	800a8ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fc29 	bl	800b120 <USBD_StdEPReq>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d2:	e00c      	b.n	800a8ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f00e f928 	bl	8018b38 <USBD_LL_StallEP>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ec:	bf00      	nop
  }

  return ret;
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	460b      	mov	r3, r1
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a90a:	7afb      	ldrb	r3, [r7, #11]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d16e      	bne.n	800a9ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a916:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a91e:	2b03      	cmp	r3, #3
 800a920:	f040 8098 	bne.w	800aa54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d913      	bls.n	800a958 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	689a      	ldr	r2, [r3, #8]
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	1ad2      	subs	r2, r2, r3
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	4293      	cmp	r3, r2
 800a948:	bf28      	it	cs
 800a94a:	4613      	movcs	r3, r2
 800a94c:	461a      	mov	r2, r3
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f001 f984 	bl	800bc5e <USBD_CtlContinueRx>
 800a956:	e07d      	b.n	800aa54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a95e:	f003 031f 	and.w	r3, r3, #31
 800a962:	2b02      	cmp	r3, #2
 800a964:	d014      	beq.n	800a990 <USBD_LL_DataOutStage+0x98>
 800a966:	2b02      	cmp	r3, #2
 800a968:	d81d      	bhi.n	800a9a6 <USBD_LL_DataOutStage+0xae>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <USBD_LL_DataOutStage+0x7c>
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d003      	beq.n	800a97a <USBD_LL_DataOutStage+0x82>
 800a972:	e018      	b.n	800a9a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a974:	2300      	movs	r3, #0
 800a976:	75bb      	strb	r3, [r7, #22]
            break;
 800a978:	e018      	b.n	800a9ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a980:	b2db      	uxtb	r3, r3
 800a982:	4619      	mov	r1, r3
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 fa5e 	bl	800ae46 <USBD_CoreFindIF>
 800a98a:	4603      	mov	r3, r0
 800a98c:	75bb      	strb	r3, [r7, #22]
            break;
 800a98e:	e00d      	b.n	800a9ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a996:	b2db      	uxtb	r3, r3
 800a998:	4619      	mov	r1, r3
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 fa60 	bl	800ae60 <USBD_CoreFindEP>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	75bb      	strb	r3, [r7, #22]
            break;
 800a9a4:	e002      	b.n	800a9ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	75bb      	strb	r3, [r7, #22]
            break;
 800a9aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a9ac:	7dbb      	ldrb	r3, [r7, #22]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d119      	bne.n	800a9e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d113      	bne.n	800a9e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a9be:	7dba      	ldrb	r2, [r7, #22]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	32ae      	adds	r2, #174	; 0xae
 800a9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00b      	beq.n	800a9e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a9ce:	7dba      	ldrb	r2, [r7, #22]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a9d6:	7dba      	ldrb	r2, [r7, #22]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	32ae      	adds	r2, #174	; 0xae
 800a9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f001 f94a 	bl	800bc80 <USBD_CtlSendStatus>
 800a9ec:	e032      	b.n	800aa54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a9ee:	7afb      	ldrb	r3, [r7, #11]
 800a9f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 fa31 	bl	800ae60 <USBD_CoreFindEP>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa02:	7dbb      	ldrb	r3, [r7, #22]
 800aa04:	2bff      	cmp	r3, #255	; 0xff
 800aa06:	d025      	beq.n	800aa54 <USBD_LL_DataOutStage+0x15c>
 800aa08:	7dbb      	ldrb	r3, [r7, #22]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d122      	bne.n	800aa54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d117      	bne.n	800aa4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aa1a:	7dba      	ldrb	r2, [r7, #22]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	32ae      	adds	r2, #174	; 0xae
 800aa20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00f      	beq.n	800aa4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aa2a:	7dba      	ldrb	r2, [r7, #22]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aa32:	7dba      	ldrb	r2, [r7, #22]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	32ae      	adds	r2, #174	; 0xae
 800aa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	7afa      	ldrb	r2, [r7, #11]
 800aa40:	4611      	mov	r1, r2
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	4798      	blx	r3
 800aa46:	4603      	mov	r3, r0
 800aa48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	e000      	b.n	800aa56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	460b      	mov	r3, r1
 800aa68:	607a      	str	r2, [r7, #4]
 800aa6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d16f      	bne.n	800ab52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3314      	adds	r3, #20
 800aa76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d15a      	bne.n	800ab38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d914      	bls.n	800aab8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	689a      	ldr	r2, [r3, #8]
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	1ad2      	subs	r2, r2, r3
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f001 f8ac 	bl	800bc02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2200      	movs	r2, #0
 800aaae:	2100      	movs	r1, #0
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f00e f8eb 	bl	8018c8c <USBD_LL_PrepareReceive>
 800aab6:	e03f      	b.n	800ab38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	68da      	ldr	r2, [r3, #12]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d11c      	bne.n	800aafe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aacc:	429a      	cmp	r2, r3
 800aace:	d316      	bcc.n	800aafe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aada:	429a      	cmp	r2, r3
 800aadc:	d20f      	bcs.n	800aafe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aade:	2200      	movs	r2, #0
 800aae0:	2100      	movs	r1, #0
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f001 f88d 	bl	800bc02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f00e f8c8 	bl	8018c8c <USBD_LL_PrepareReceive>
 800aafc:	e01c      	b.n	800ab38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d10f      	bne.n	800ab2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d009      	beq.n	800ab2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab2a:	2180      	movs	r1, #128	; 0x80
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f00e f803 	bl	8018b38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f001 f8b7 	bl	800bca6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d03a      	beq.n	800abb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f7ff fe42 	bl	800a7cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab50:	e032      	b.n	800abb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f000 f97f 	bl	800ae60 <USBD_CoreFindEP>
 800ab62:	4603      	mov	r3, r0
 800ab64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
 800ab68:	2bff      	cmp	r3, #255	; 0xff
 800ab6a:	d025      	beq.n	800abb8 <USBD_LL_DataInStage+0x15a>
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d122      	bne.n	800abb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d11c      	bne.n	800abb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab7e:	7dfa      	ldrb	r2, [r7, #23]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	32ae      	adds	r2, #174	; 0xae
 800ab84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d014      	beq.n	800abb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab8e:	7dfa      	ldrb	r2, [r7, #23]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab96:	7dfa      	ldrb	r2, [r7, #23]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	32ae      	adds	r2, #174	; 0xae
 800ab9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	7afa      	ldrb	r2, [r7, #11]
 800aba4:	4611      	mov	r1, r2
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	4798      	blx	r3
 800abaa:	4603      	mov	r3, r0
 800abac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800abae:	7dbb      	ldrb	r3, [r7, #22]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800abb4:	7dbb      	ldrb	r3, [r7, #22]
 800abb6:	e000      	b.n	800abba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d014      	beq.n	800ac28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00e      	beq.n	800ac28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	6852      	ldr	r2, [r2, #4]
 800ac16:	b2d2      	uxtb	r2, r2
 800ac18:	4611      	mov	r1, r2
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	4798      	blx	r3
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ac24:	2303      	movs	r3, #3
 800ac26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac28:	2340      	movs	r3, #64	; 0x40
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f00d ff3d 	bl	8018aae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2240      	movs	r2, #64	; 0x40
 800ac40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac44:	2340      	movs	r3, #64	; 0x40
 800ac46:	2200      	movs	r2, #0
 800ac48:	2180      	movs	r1, #128	; 0x80
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f00d ff2f 	bl	8018aae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2240      	movs	r2, #64	; 0x40
 800ac5a:	621a      	str	r2, [r3, #32]

  return ret;
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	78fa      	ldrb	r2, [r7, #3]
 800ac76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b083      	sub	sp, #12
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2204      	movs	r2, #4
 800aca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b083      	sub	sp, #12
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b04      	cmp	r3, #4
 800acc4:	d106      	bne.n	800acd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800accc:	b2da      	uxtb	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d110      	bne.n	800ad18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00b      	beq.n	800ad18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d005      	beq.n	800ad18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	32ae      	adds	r2, #174	; 0xae
 800ad38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad40:	2303      	movs	r3, #3
 800ad42:	e01c      	b.n	800ad7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d115      	bne.n	800ad7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	32ae      	adds	r2, #174	; 0xae
 800ad5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00b      	beq.n	800ad7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	32ae      	adds	r2, #174	; 0xae
 800ad6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	78fa      	ldrb	r2, [r7, #3]
 800ad76:	4611      	mov	r1, r2
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b082      	sub	sp, #8
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	32ae      	adds	r2, #174	; 0xae
 800ad9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e01c      	b.n	800ade2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b03      	cmp	r3, #3
 800adb2:	d115      	bne.n	800ade0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	32ae      	adds	r2, #174	; 0xae
 800adbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	32ae      	adds	r2, #174	; 0xae
 800add2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	78fa      	ldrb	r2, [r7, #3]
 800adda:	4611      	mov	r1, r2
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800adea:	b480      	push	{r7}
 800adec:	b083      	sub	sp, #12
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00e      	beq.n	800ae3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	6852      	ldr	r2, [r2, #4]
 800ae2a:	b2d2      	uxtb	r2, r2
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	4798      	blx	r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b086      	sub	sp, #24
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d920      	bls.n	800aee4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aeaa:	e013      	b.n	800aed4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aeac:	f107 030a 	add.w	r3, r7, #10
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6978      	ldr	r0, [r7, #20]
 800aeb4:	f000 f81b 	bl	800aeee <USBD_GetNextDesc>
 800aeb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b05      	cmp	r3, #5
 800aec0:	d108      	bne.n	800aed4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	789b      	ldrb	r3, [r3, #2]
 800aeca:	78fa      	ldrb	r2, [r7, #3]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d008      	beq.n	800aee2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aed0:	2300      	movs	r3, #0
 800aed2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	885b      	ldrh	r3, [r3, #2]
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	897b      	ldrh	r3, [r7, #10]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d8e5      	bhi.n	800aeac <USBD_GetEpDesc+0x32>
 800aee0:	e000      	b.n	800aee4 <USBD_GetEpDesc+0x6a>
          break;
 800aee2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aee4:	693b      	ldr	r3, [r7, #16]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b085      	sub	sp, #20
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	881a      	ldrh	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	b29b      	uxth	r3, r3
 800af06:	4413      	add	r3, r2
 800af08:	b29a      	uxth	r2, r3
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4413      	add	r3, r2
 800af18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800af1a:	68fb      	ldr	r3, [r7, #12]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	3301      	adds	r3, #1
 800af3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af46:	8a3b      	ldrh	r3, [r7, #16]
 800af48:	021b      	lsls	r3, r3, #8
 800af4a:	b21a      	sxth	r2, r3
 800af4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af50:	4313      	orrs	r3, r2
 800af52:	b21b      	sxth	r3, r3
 800af54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af56:	89fb      	ldrh	r3, [r7, #14]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af7a:	2b40      	cmp	r3, #64	; 0x40
 800af7c:	d005      	beq.n	800af8a <USBD_StdDevReq+0x26>
 800af7e:	2b40      	cmp	r3, #64	; 0x40
 800af80:	d857      	bhi.n	800b032 <USBD_StdDevReq+0xce>
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00f      	beq.n	800afa6 <USBD_StdDevReq+0x42>
 800af86:	2b20      	cmp	r3, #32
 800af88:	d153      	bne.n	800b032 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	32ae      	adds	r2, #174	; 0xae
 800af94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	4798      	blx	r3
 800afa0:	4603      	mov	r3, r0
 800afa2:	73fb      	strb	r3, [r7, #15]
      break;
 800afa4:	e04a      	b.n	800b03c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	785b      	ldrb	r3, [r3, #1]
 800afaa:	2b09      	cmp	r3, #9
 800afac:	d83b      	bhi.n	800b026 <USBD_StdDevReq+0xc2>
 800afae:	a201      	add	r2, pc, #4	; (adr r2, 800afb4 <USBD_StdDevReq+0x50>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800b009 	.word	0x0800b009
 800afb8:	0800b01d 	.word	0x0800b01d
 800afbc:	0800b027 	.word	0x0800b027
 800afc0:	0800b013 	.word	0x0800b013
 800afc4:	0800b027 	.word	0x0800b027
 800afc8:	0800afe7 	.word	0x0800afe7
 800afcc:	0800afdd 	.word	0x0800afdd
 800afd0:	0800b027 	.word	0x0800b027
 800afd4:	0800afff 	.word	0x0800afff
 800afd8:	0800aff1 	.word	0x0800aff1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fa3c 	bl	800b45c <USBD_GetDescriptor>
          break;
 800afe4:	e024      	b.n	800b030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fba1 	bl	800b730 <USBD_SetAddress>
          break;
 800afee:	e01f      	b.n	800b030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fbe0 	bl	800b7b8 <USBD_SetConfig>
 800aff8:	4603      	mov	r3, r0
 800affa:	73fb      	strb	r3, [r7, #15]
          break;
 800affc:	e018      	b.n	800b030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 fc83 	bl	800b90c <USBD_GetConfig>
          break;
 800b006:	e013      	b.n	800b030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fcb4 	bl	800b978 <USBD_GetStatus>
          break;
 800b010:	e00e      	b.n	800b030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fce3 	bl	800b9e0 <USBD_SetFeature>
          break;
 800b01a:	e009      	b.n	800b030 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fd07 	bl	800ba32 <USBD_ClrFeature>
          break;
 800b024:	e004      	b.n	800b030 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fd5e 	bl	800baea <USBD_CtlError>
          break;
 800b02e:	bf00      	nop
      }
      break;
 800b030:	e004      	b.n	800b03c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fd58 	bl	800baea <USBD_CtlError>
      break;
 800b03a:	bf00      	nop
  }

  return ret;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop

0800b048 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b05e:	2b40      	cmp	r3, #64	; 0x40
 800b060:	d005      	beq.n	800b06e <USBD_StdItfReq+0x26>
 800b062:	2b40      	cmp	r3, #64	; 0x40
 800b064:	d852      	bhi.n	800b10c <USBD_StdItfReq+0xc4>
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <USBD_StdItfReq+0x26>
 800b06a:	2b20      	cmp	r3, #32
 800b06c:	d14e      	bne.n	800b10c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b074:	b2db      	uxtb	r3, r3
 800b076:	3b01      	subs	r3, #1
 800b078:	2b02      	cmp	r3, #2
 800b07a:	d840      	bhi.n	800b0fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	889b      	ldrh	r3, [r3, #4]
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b01      	cmp	r3, #1
 800b084:	d836      	bhi.n	800b0f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	889b      	ldrh	r3, [r3, #4]
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff fed9 	bl	800ae46 <USBD_CoreFindIF>
 800b094:	4603      	mov	r3, r0
 800b096:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	2bff      	cmp	r3, #255	; 0xff
 800b09c:	d01d      	beq.n	800b0da <USBD_StdItfReq+0x92>
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d11a      	bne.n	800b0da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b0a4:	7bba      	ldrb	r2, [r7, #14]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	32ae      	adds	r2, #174	; 0xae
 800b0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00f      	beq.n	800b0d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b0b4:	7bba      	ldrb	r2, [r7, #14]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0bc:	7bba      	ldrb	r2, [r7, #14]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	32ae      	adds	r2, #174	; 0xae
 800b0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b0d2:	e004      	b.n	800b0de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b0d8:	e001      	b.n	800b0de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	88db      	ldrh	r3, [r3, #6]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d110      	bne.n	800b108 <USBD_StdItfReq+0xc0>
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10d      	bne.n	800b108 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fdc7 	bl	800bc80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0f2:	e009      	b.n	800b108 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fcf7 	bl	800baea <USBD_CtlError>
          break;
 800b0fc:	e004      	b.n	800b108 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fcf2 	bl	800baea <USBD_CtlError>
          break;
 800b106:	e000      	b.n	800b10a <USBD_StdItfReq+0xc2>
          break;
 800b108:	bf00      	nop
      }
      break;
 800b10a:	e004      	b.n	800b116 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fceb 	bl	800baea <USBD_CtlError>
      break;
 800b114:	bf00      	nop
  }

  return ret;
 800b116:	7bfb      	ldrb	r3, [r7, #15]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	889b      	ldrh	r3, [r3, #4]
 800b132:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b13c:	2b40      	cmp	r3, #64	; 0x40
 800b13e:	d007      	beq.n	800b150 <USBD_StdEPReq+0x30>
 800b140:	2b40      	cmp	r3, #64	; 0x40
 800b142:	f200 817f 	bhi.w	800b444 <USBD_StdEPReq+0x324>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d02a      	beq.n	800b1a0 <USBD_StdEPReq+0x80>
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	f040 817a 	bne.w	800b444 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b150:	7bbb      	ldrb	r3, [r7, #14]
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff fe83 	bl	800ae60 <USBD_CoreFindEP>
 800b15a:	4603      	mov	r3, r0
 800b15c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b15e:	7b7b      	ldrb	r3, [r7, #13]
 800b160:	2bff      	cmp	r3, #255	; 0xff
 800b162:	f000 8174 	beq.w	800b44e <USBD_StdEPReq+0x32e>
 800b166:	7b7b      	ldrb	r3, [r7, #13]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f040 8170 	bne.w	800b44e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b16e:	7b7a      	ldrb	r2, [r7, #13]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b176:	7b7a      	ldrb	r2, [r7, #13]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	32ae      	adds	r2, #174	; 0xae
 800b17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 8163 	beq.w	800b44e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b188:	7b7a      	ldrb	r2, [r7, #13]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	32ae      	adds	r2, #174	; 0xae
 800b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	6839      	ldr	r1, [r7, #0]
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	4798      	blx	r3
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b19e:	e156      	b.n	800b44e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	785b      	ldrb	r3, [r3, #1]
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d008      	beq.n	800b1ba <USBD_StdEPReq+0x9a>
 800b1a8:	2b03      	cmp	r3, #3
 800b1aa:	f300 8145 	bgt.w	800b438 <USBD_StdEPReq+0x318>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 809b 	beq.w	800b2ea <USBD_StdEPReq+0x1ca>
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d03c      	beq.n	800b232 <USBD_StdEPReq+0x112>
 800b1b8:	e13e      	b.n	800b438 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d002      	beq.n	800b1cc <USBD_StdEPReq+0xac>
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d016      	beq.n	800b1f8 <USBD_StdEPReq+0xd8>
 800b1ca:	e02c      	b.n	800b226 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00d      	beq.n	800b1ee <USBD_StdEPReq+0xce>
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b80      	cmp	r3, #128	; 0x80
 800b1d6:	d00a      	beq.n	800b1ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f00d fcab 	bl	8018b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1e2:	2180      	movs	r1, #128	; 0x80
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f00d fca7 	bl	8018b38 <USBD_LL_StallEP>
 800b1ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1ec:	e020      	b.n	800b230 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fc7a 	bl	800baea <USBD_CtlError>
              break;
 800b1f6:	e01b      	b.n	800b230 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	885b      	ldrh	r3, [r3, #2]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10e      	bne.n	800b21e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00b      	beq.n	800b21e <USBD_StdEPReq+0xfe>
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	2b80      	cmp	r3, #128	; 0x80
 800b20a:	d008      	beq.n	800b21e <USBD_StdEPReq+0xfe>
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	88db      	ldrh	r3, [r3, #6]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d104      	bne.n	800b21e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b214:	7bbb      	ldrb	r3, [r7, #14]
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f00d fc8d 	bl	8018b38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fd2e 	bl	800bc80 <USBD_CtlSendStatus>

              break;
 800b224:	e004      	b.n	800b230 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fc5e 	bl	800baea <USBD_CtlError>
              break;
 800b22e:	bf00      	nop
          }
          break;
 800b230:	e107      	b.n	800b442 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d002      	beq.n	800b244 <USBD_StdEPReq+0x124>
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d016      	beq.n	800b270 <USBD_StdEPReq+0x150>
 800b242:	e04b      	b.n	800b2dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00d      	beq.n	800b266 <USBD_StdEPReq+0x146>
 800b24a:	7bbb      	ldrb	r3, [r7, #14]
 800b24c:	2b80      	cmp	r3, #128	; 0x80
 800b24e:	d00a      	beq.n	800b266 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b250:	7bbb      	ldrb	r3, [r7, #14]
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f00d fc6f 	bl	8018b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b25a:	2180      	movs	r1, #128	; 0x80
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f00d fc6b 	bl	8018b38 <USBD_LL_StallEP>
 800b262:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b264:	e040      	b.n	800b2e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fc3e 	bl	800baea <USBD_CtlError>
              break;
 800b26e:	e03b      	b.n	800b2e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	885b      	ldrh	r3, [r3, #2]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d136      	bne.n	800b2e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d004      	beq.n	800b28c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f00d fc75 	bl	8018b76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fcf7 	bl	800bc80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b292:	7bbb      	ldrb	r3, [r7, #14]
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff fde2 	bl	800ae60 <USBD_CoreFindEP>
 800b29c:	4603      	mov	r3, r0
 800b29e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2a0:	7b7b      	ldrb	r3, [r7, #13]
 800b2a2:	2bff      	cmp	r3, #255	; 0xff
 800b2a4:	d01f      	beq.n	800b2e6 <USBD_StdEPReq+0x1c6>
 800b2a6:	7b7b      	ldrb	r3, [r7, #13]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d11c      	bne.n	800b2e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b2ac:	7b7a      	ldrb	r2, [r7, #13]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b2b4:	7b7a      	ldrb	r2, [r7, #13]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	32ae      	adds	r2, #174	; 0xae
 800b2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d010      	beq.n	800b2e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b2c4:	7b7a      	ldrb	r2, [r7, #13]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	32ae      	adds	r2, #174	; 0xae
 800b2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	4798      	blx	r3
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b2da:	e004      	b.n	800b2e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fc03 	bl	800baea <USBD_CtlError>
              break;
 800b2e4:	e000      	b.n	800b2e8 <USBD_StdEPReq+0x1c8>
              break;
 800b2e6:	bf00      	nop
          }
          break;
 800b2e8:	e0ab      	b.n	800b442 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d002      	beq.n	800b2fc <USBD_StdEPReq+0x1dc>
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d032      	beq.n	800b360 <USBD_StdEPReq+0x240>
 800b2fa:	e097      	b.n	800b42c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d007      	beq.n	800b312 <USBD_StdEPReq+0x1f2>
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b80      	cmp	r3, #128	; 0x80
 800b306:	d004      	beq.n	800b312 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fbed 	bl	800baea <USBD_CtlError>
                break;
 800b310:	e091      	b.n	800b436 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b316:	2b00      	cmp	r3, #0
 800b318:	da0b      	bge.n	800b332 <USBD_StdEPReq+0x212>
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
 800b31c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	3310      	adds	r3, #16
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	4413      	add	r3, r2
 800b32e:	3304      	adds	r3, #4
 800b330:	e00b      	b.n	800b34a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b332:	7bbb      	ldrb	r3, [r7, #14]
 800b334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	4413      	add	r3, r2
 800b348:	3304      	adds	r3, #4
 800b34a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2200      	movs	r2, #0
 800b350:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2202      	movs	r2, #2
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 fc37 	bl	800bbcc <USBD_CtlSendData>
              break;
 800b35e:	e06a      	b.n	800b436 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b364:	2b00      	cmp	r3, #0
 800b366:	da11      	bge.n	800b38c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	f003 020f 	and.w	r2, r3, #15
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	4613      	mov	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	440b      	add	r3, r1
 800b37a:	3324      	adds	r3, #36	; 0x24
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d117      	bne.n	800b3b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fbb0 	bl	800baea <USBD_CtlError>
                  break;
 800b38a:	e054      	b.n	800b436 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
 800b38e:	f003 020f 	and.w	r2, r3, #15
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	4613      	mov	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	440b      	add	r3, r1
 800b39e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b3a2:	881b      	ldrh	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d104      	bne.n	800b3b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fb9d 	bl	800baea <USBD_CtlError>
                  break;
 800b3b0:	e041      	b.n	800b436 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da0b      	bge.n	800b3d2 <USBD_StdEPReq+0x2b2>
 800b3ba:	7bbb      	ldrb	r3, [r7, #14]
 800b3bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	3310      	adds	r3, #16
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	e00b      	b.n	800b3ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3ec:	7bbb      	ldrb	r3, [r7, #14]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <USBD_StdEPReq+0x2d8>
 800b3f2:	7bbb      	ldrb	r3, [r7, #14]
 800b3f4:	2b80      	cmp	r3, #128	; 0x80
 800b3f6:	d103      	bne.n	800b400 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	e00e      	b.n	800b41e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f00d fbd5 	bl	8018bb4 <USBD_LL_IsStallEP>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2201      	movs	r2, #1
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	e002      	b.n	800b41e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2202      	movs	r2, #2
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fbd1 	bl	800bbcc <USBD_CtlSendData>
              break;
 800b42a:	e004      	b.n	800b436 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fb5b 	bl	800baea <USBD_CtlError>
              break;
 800b434:	bf00      	nop
          }
          break;
 800b436:	e004      	b.n	800b442 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fb55 	bl	800baea <USBD_CtlError>
          break;
 800b440:	bf00      	nop
      }
      break;
 800b442:	e005      	b.n	800b450 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fb4f 	bl	800baea <USBD_CtlError>
      break;
 800b44c:	e000      	b.n	800b450 <USBD_StdEPReq+0x330>
      break;
 800b44e:	bf00      	nop
  }

  return ret;
 800b450:	7bfb      	ldrb	r3, [r7, #15]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b466:	2300      	movs	r3, #0
 800b468:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b46e:	2300      	movs	r3, #0
 800b470:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	885b      	ldrh	r3, [r3, #2]
 800b476:	0a1b      	lsrs	r3, r3, #8
 800b478:	b29b      	uxth	r3, r3
 800b47a:	3b01      	subs	r3, #1
 800b47c:	2b06      	cmp	r3, #6
 800b47e:	f200 8128 	bhi.w	800b6d2 <USBD_GetDescriptor+0x276>
 800b482:	a201      	add	r2, pc, #4	; (adr r2, 800b488 <USBD_GetDescriptor+0x2c>)
 800b484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b488:	0800b4a5 	.word	0x0800b4a5
 800b48c:	0800b4bd 	.word	0x0800b4bd
 800b490:	0800b4fd 	.word	0x0800b4fd
 800b494:	0800b6d3 	.word	0x0800b6d3
 800b498:	0800b6d3 	.word	0x0800b6d3
 800b49c:	0800b673 	.word	0x0800b673
 800b4a0:	0800b69f 	.word	0x0800b69f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	7c12      	ldrb	r2, [r2, #16]
 800b4b0:	f107 0108 	add.w	r1, r7, #8
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4798      	blx	r3
 800b4b8:	60f8      	str	r0, [r7, #12]
      break;
 800b4ba:	e112      	b.n	800b6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	7c1b      	ldrb	r3, [r3, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10d      	bne.n	800b4e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4cc:	f107 0208 	add.w	r2, r7, #8
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	4798      	blx	r3
 800b4d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	2202      	movs	r2, #2
 800b4dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4de:	e100      	b.n	800b6e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e8:	f107 0208 	add.w	r2, r7, #8
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	4798      	blx	r3
 800b4f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	701a      	strb	r2, [r3, #0]
      break;
 800b4fa:	e0f2      	b.n	800b6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	885b      	ldrh	r3, [r3, #2]
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b05      	cmp	r3, #5
 800b504:	f200 80ac 	bhi.w	800b660 <USBD_GetDescriptor+0x204>
 800b508:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <USBD_GetDescriptor+0xb4>)
 800b50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50e:	bf00      	nop
 800b510:	0800b529 	.word	0x0800b529
 800b514:	0800b55d 	.word	0x0800b55d
 800b518:	0800b591 	.word	0x0800b591
 800b51c:	0800b5c5 	.word	0x0800b5c5
 800b520:	0800b5f9 	.word	0x0800b5f9
 800b524:	0800b62d 	.word	0x0800b62d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00b      	beq.n	800b54c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	7c12      	ldrb	r2, [r2, #16]
 800b540:	f107 0108 	add.w	r1, r7, #8
 800b544:	4610      	mov	r0, r2
 800b546:	4798      	blx	r3
 800b548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b54a:	e091      	b.n	800b670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 facb 	bl	800baea <USBD_CtlError>
            err++;
 800b554:	7afb      	ldrb	r3, [r7, #11]
 800b556:	3301      	adds	r3, #1
 800b558:	72fb      	strb	r3, [r7, #11]
          break;
 800b55a:	e089      	b.n	800b670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00b      	beq.n	800b580 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	7c12      	ldrb	r2, [r2, #16]
 800b574:	f107 0108 	add.w	r1, r7, #8
 800b578:	4610      	mov	r0, r2
 800b57a:	4798      	blx	r3
 800b57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b57e:	e077      	b.n	800b670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fab1 	bl	800baea <USBD_CtlError>
            err++;
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	3301      	adds	r3, #1
 800b58c:	72fb      	strb	r3, [r7, #11]
          break;
 800b58e:	e06f      	b.n	800b670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	7c12      	ldrb	r2, [r2, #16]
 800b5a8:	f107 0108 	add.w	r1, r7, #8
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	4798      	blx	r3
 800b5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5b2:	e05d      	b.n	800b670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fa97 	bl	800baea <USBD_CtlError>
            err++;
 800b5bc:	7afb      	ldrb	r3, [r7, #11]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5c2:	e055      	b.n	800b670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	7c12      	ldrb	r2, [r2, #16]
 800b5dc:	f107 0108 	add.w	r1, r7, #8
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4798      	blx	r3
 800b5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5e6:	e043      	b.n	800b670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fa7d 	bl	800baea <USBD_CtlError>
            err++;
 800b5f0:	7afb      	ldrb	r3, [r7, #11]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5f6:	e03b      	b.n	800b670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00b      	beq.n	800b61c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	7c12      	ldrb	r2, [r2, #16]
 800b610:	f107 0108 	add.w	r1, r7, #8
 800b614:	4610      	mov	r0, r2
 800b616:	4798      	blx	r3
 800b618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b61a:	e029      	b.n	800b670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa63 	bl	800baea <USBD_CtlError>
            err++;
 800b624:	7afb      	ldrb	r3, [r7, #11]
 800b626:	3301      	adds	r3, #1
 800b628:	72fb      	strb	r3, [r7, #11]
          break;
 800b62a:	e021      	b.n	800b670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00b      	beq.n	800b650 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	7c12      	ldrb	r2, [r2, #16]
 800b644:	f107 0108 	add.w	r1, r7, #8
 800b648:	4610      	mov	r0, r2
 800b64a:	4798      	blx	r3
 800b64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b64e:	e00f      	b.n	800b670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fa49 	bl	800baea <USBD_CtlError>
            err++;
 800b658:	7afb      	ldrb	r3, [r7, #11]
 800b65a:	3301      	adds	r3, #1
 800b65c:	72fb      	strb	r3, [r7, #11]
          break;
 800b65e:	e007      	b.n	800b670 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fa41 	bl	800baea <USBD_CtlError>
          err++;
 800b668:	7afb      	ldrb	r3, [r7, #11]
 800b66a:	3301      	adds	r3, #1
 800b66c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b66e:	bf00      	nop
      }
      break;
 800b670:	e037      	b.n	800b6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	7c1b      	ldrb	r3, [r3, #16]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d109      	bne.n	800b68e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b682:	f107 0208 	add.w	r2, r7, #8
 800b686:	4610      	mov	r0, r2
 800b688:	4798      	blx	r3
 800b68a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b68c:	e029      	b.n	800b6e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fa2a 	bl	800baea <USBD_CtlError>
        err++;
 800b696:	7afb      	ldrb	r3, [r7, #11]
 800b698:	3301      	adds	r3, #1
 800b69a:	72fb      	strb	r3, [r7, #11]
      break;
 800b69c:	e021      	b.n	800b6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	7c1b      	ldrb	r3, [r3, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10d      	bne.n	800b6c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ae:	f107 0208 	add.w	r2, r7, #8
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	4798      	blx	r3
 800b6b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	2207      	movs	r2, #7
 800b6be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6c0:	e00f      	b.n	800b6e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fa10 	bl	800baea <USBD_CtlError>
        err++;
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b6d0:	e007      	b.n	800b6e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fa08 	bl	800baea <USBD_CtlError>
      err++;
 800b6da:	7afb      	ldrb	r3, [r7, #11]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	72fb      	strb	r3, [r7, #11]
      break;
 800b6e0:	bf00      	nop
  }

  if (err != 0U)
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d11e      	bne.n	800b726 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	88db      	ldrh	r3, [r3, #6]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d016      	beq.n	800b71e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b6f0:	893b      	ldrh	r3, [r7, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00e      	beq.n	800b714 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	88da      	ldrh	r2, [r3, #6]
 800b6fa:	893b      	ldrh	r3, [r7, #8]
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	bf28      	it	cs
 800b700:	4613      	movcs	r3, r2
 800b702:	b29b      	uxth	r3, r3
 800b704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b706:	893b      	ldrh	r3, [r7, #8]
 800b708:	461a      	mov	r2, r3
 800b70a:	68f9      	ldr	r1, [r7, #12]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fa5d 	bl	800bbcc <USBD_CtlSendData>
 800b712:	e009      	b.n	800b728 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f9e7 	bl	800baea <USBD_CtlError>
 800b71c:	e004      	b.n	800b728 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 faae 	bl	800bc80 <USBD_CtlSendStatus>
 800b724:	e000      	b.n	800b728 <USBD_GetDescriptor+0x2cc>
    return;
 800b726:	bf00      	nop
  }
}
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop

0800b730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	889b      	ldrh	r3, [r3, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d131      	bne.n	800b7a6 <USBD_SetAddress+0x76>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	88db      	ldrh	r3, [r3, #6]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d12d      	bne.n	800b7a6 <USBD_SetAddress+0x76>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	885b      	ldrh	r3, [r3, #2]
 800b74e:	2b7f      	cmp	r3, #127	; 0x7f
 800b750:	d829      	bhi.n	800b7a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	885b      	ldrh	r3, [r3, #2]
 800b756:	b2db      	uxtb	r3, r3
 800b758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b75c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b03      	cmp	r3, #3
 800b768:	d104      	bne.n	800b774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f9bc 	bl	800baea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b772:	e01d      	b.n	800b7b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	7bfa      	ldrb	r2, [r7, #15]
 800b778:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f00d fa43 	bl	8018c0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fa7a 	bl	800bc80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d004      	beq.n	800b79c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2202      	movs	r2, #2
 800b796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b79a:	e009      	b.n	800b7b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a4:	e004      	b.n	800b7b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f99e 	bl	800baea <USBD_CtlError>
  }
}
 800b7ae:	bf00      	nop
 800b7b0:	bf00      	nop
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	885b      	ldrh	r3, [r3, #2]
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	4b4e      	ldr	r3, [pc, #312]	; (800b908 <USBD_SetConfig+0x150>)
 800b7ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7d0:	4b4d      	ldr	r3, [pc, #308]	; (800b908 <USBD_SetConfig+0x150>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d905      	bls.n	800b7e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f985 	bl	800baea <USBD_CtlError>
    return USBD_FAIL;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e08c      	b.n	800b8fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d002      	beq.n	800b7f6 <USBD_SetConfig+0x3e>
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d029      	beq.n	800b848 <USBD_SetConfig+0x90>
 800b7f4:	e075      	b.n	800b8e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7f6:	4b44      	ldr	r3, [pc, #272]	; (800b908 <USBD_SetConfig+0x150>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d020      	beq.n	800b840 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b7fe:	4b42      	ldr	r3, [pc, #264]	; (800b908 <USBD_SetConfig+0x150>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b808:	4b3f      	ldr	r3, [pc, #252]	; (800b908 <USBD_SetConfig+0x150>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7fe ffe7 	bl	800a7e2 <USBD_SetClassConfig>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b818:	7bfb      	ldrb	r3, [r7, #15]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d008      	beq.n	800b830 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f962 	bl	800baea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2202      	movs	r2, #2
 800b82a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b82e:	e065      	b.n	800b8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fa25 	bl	800bc80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2203      	movs	r2, #3
 800b83a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b83e:	e05d      	b.n	800b8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fa1d 	bl	800bc80 <USBD_CtlSendStatus>
      break;
 800b846:	e059      	b.n	800b8fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b848:	4b2f      	ldr	r3, [pc, #188]	; (800b908 <USBD_SetConfig+0x150>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d112      	bne.n	800b876 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2202      	movs	r2, #2
 800b854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b858:	4b2b      	ldr	r3, [pc, #172]	; (800b908 <USBD_SetConfig+0x150>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	461a      	mov	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b862:	4b29      	ldr	r3, [pc, #164]	; (800b908 <USBD_SetConfig+0x150>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7fe ffd6 	bl	800a81a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fa06 	bl	800bc80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b874:	e042      	b.n	800b8fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b876:	4b24      	ldr	r3, [pc, #144]	; (800b908 <USBD_SetConfig+0x150>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	429a      	cmp	r2, r3
 800b882:	d02a      	beq.n	800b8da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7fe ffc4 	bl	800a81a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b892:	4b1d      	ldr	r3, [pc, #116]	; (800b908 <USBD_SetConfig+0x150>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b89c:	4b1a      	ldr	r3, [pc, #104]	; (800b908 <USBD_SetConfig+0x150>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7fe ff9d 	bl	800a7e2 <USBD_SetClassConfig>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00f      	beq.n	800b8d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f918 	bl	800baea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7fe ffa9 	bl	800a81a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8d0:	e014      	b.n	800b8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f9d4 	bl	800bc80 <USBD_CtlSendStatus>
      break;
 800b8d8:	e010      	b.n	800b8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f9d0 	bl	800bc80 <USBD_CtlSendStatus>
      break;
 800b8e0:	e00c      	b.n	800b8fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f900 	bl	800baea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8ea:	4b07      	ldr	r3, [pc, #28]	; (800b908 <USBD_SetConfig+0x150>)
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7fe ff92 	bl	800a81a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8fa:	bf00      	nop
  }

  return ret;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	20002b94 	.word	0x20002b94

0800b90c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	88db      	ldrh	r3, [r3, #6]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d004      	beq.n	800b928 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f8e2 	bl	800baea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b926:	e023      	b.n	800b970 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b02      	cmp	r3, #2
 800b932:	dc02      	bgt.n	800b93a <USBD_GetConfig+0x2e>
 800b934:	2b00      	cmp	r3, #0
 800b936:	dc03      	bgt.n	800b940 <USBD_GetConfig+0x34>
 800b938:	e015      	b.n	800b966 <USBD_GetConfig+0x5a>
 800b93a:	2b03      	cmp	r3, #3
 800b93c:	d00b      	beq.n	800b956 <USBD_GetConfig+0x4a>
 800b93e:	e012      	b.n	800b966 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	3308      	adds	r3, #8
 800b94a:	2201      	movs	r2, #1
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f93c 	bl	800bbcc <USBD_CtlSendData>
        break;
 800b954:	e00c      	b.n	800b970 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	3304      	adds	r3, #4
 800b95a:	2201      	movs	r2, #1
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f934 	bl	800bbcc <USBD_CtlSendData>
        break;
 800b964:	e004      	b.n	800b970 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f8be 	bl	800baea <USBD_CtlError>
        break;
 800b96e:	bf00      	nop
}
 800b970:	bf00      	nop
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	3b01      	subs	r3, #1
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d81e      	bhi.n	800b9ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	88db      	ldrh	r3, [r3, #6]
 800b994:	2b02      	cmp	r3, #2
 800b996:	d004      	beq.n	800b9a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f8a5 	bl	800baea <USBD_CtlError>
        break;
 800b9a0:	e01a      	b.n	800b9d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d005      	beq.n	800b9be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	f043 0202 	orr.w	r2, r3, #2
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	330c      	adds	r3, #12
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f900 	bl	800bbcc <USBD_CtlSendData>
      break;
 800b9cc:	e004      	b.n	800b9d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f88a 	bl	800baea <USBD_CtlError>
      break;
 800b9d6:	bf00      	nop
  }
}
 800b9d8:	bf00      	nop
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	885b      	ldrh	r3, [r3, #2]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d107      	bne.n	800ba02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f940 	bl	800bc80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ba00:	e013      	b.n	800ba2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	885b      	ldrh	r3, [r3, #2]
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d10b      	bne.n	800ba22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	889b      	ldrh	r3, [r3, #4]
 800ba0e:	0a1b      	lsrs	r3, r3, #8
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 f930 	bl	800bc80 <USBD_CtlSendStatus>
}
 800ba20:	e003      	b.n	800ba2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f860 	bl	800baea <USBD_CtlError>
}
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	3b01      	subs	r3, #1
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d80b      	bhi.n	800ba62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	885b      	ldrh	r3, [r3, #2]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d10c      	bne.n	800ba6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f910 	bl	800bc80 <USBD_CtlSendStatus>
      }
      break;
 800ba60:	e004      	b.n	800ba6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f840 	bl	800baea <USBD_CtlError>
      break;
 800ba6a:	e000      	b.n	800ba6e <USBD_ClrFeature+0x3c>
      break;
 800ba6c:	bf00      	nop
  }
}
 800ba6e:	bf00      	nop
 800ba70:	3708      	adds	r7, #8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	781a      	ldrb	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	781a      	ldrb	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f7ff fa41 	bl	800af28 <SWAPBYTE>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461a      	mov	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3301      	adds	r3, #1
 800bab2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3301      	adds	r3, #1
 800bab8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f7ff fa34 	bl	800af28 <SWAPBYTE>
 800bac0:	4603      	mov	r3, r0
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	3301      	adds	r3, #1
 800bacc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3301      	adds	r3, #1
 800bad2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7ff fa27 	bl	800af28 <SWAPBYTE>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	80da      	strh	r2, [r3, #6]
}
 800bae2:	bf00      	nop
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b082      	sub	sp, #8
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800baf4:	2180      	movs	r1, #128	; 0x80
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f00d f81e 	bl	8018b38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bafc:	2100      	movs	r1, #0
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f00d f81a 	bl	8018b38 <USBD_LL_StallEP>
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d036      	beq.n	800bb90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb26:	6938      	ldr	r0, [r7, #16]
 800bb28:	f000 f836 	bl	800bb98 <USBD_GetLen>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	3301      	adds	r3, #1
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	4413      	add	r3, r2
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7812      	ldrb	r2, [r2, #0]
 800bb44:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb46:	7dfb      	ldrb	r3, [r7, #23]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb4c:	7dfb      	ldrb	r3, [r7, #23]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	4413      	add	r3, r2
 800bb52:	2203      	movs	r2, #3
 800bb54:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb5c:	e013      	b.n	800bb86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	4413      	add	r3, r2
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	7812      	ldrb	r2, [r2, #0]
 800bb68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	613b      	str	r3, [r7, #16]
    idx++;
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	3301      	adds	r3, #1
 800bb74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	3301      	adds	r3, #1
 800bb84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1e7      	bne.n	800bb5e <USBD_GetString+0x52>
 800bb8e:	e000      	b.n	800bb92 <USBD_GetString+0x86>
    return;
 800bb90:	bf00      	nop
  }
}
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bba8:	e005      	b.n	800bbb6 <USBD_GetLen+0x1e>
  {
    len++;
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	3301      	adds	r3, #1
 800bbae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1f5      	bne.n	800bbaa <USBD_GetLen+0x12>
  }

  return len;
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2202      	movs	r2, #2
 800bbdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f00d f829 	bl	8018c4a <USBD_LL_Transmit>

  return USBD_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	2100      	movs	r1, #0
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f00d f818 	bl	8018c4a <USBD_LL_Transmit>

  return USBD_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2203      	movs	r2, #3
 800bc34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f00d f81c 	bl	8018c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b084      	sub	sp, #16
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	60f8      	str	r0, [r7, #12]
 800bc66:	60b9      	str	r1, [r7, #8]
 800bc68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	2100      	movs	r1, #0
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f00d f80b 	bl	8018c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2204      	movs	r2, #4
 800bc8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc90:	2300      	movs	r3, #0
 800bc92:	2200      	movs	r2, #0
 800bc94:	2100      	movs	r1, #0
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f00c ffd7 	bl	8018c4a <USBD_LL_Transmit>

  return USBD_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2205      	movs	r2, #5
 800bcb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2100      	movs	r1, #0
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f00c ffe5 	bl	8018c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b08b      	sub	sp, #44	; 0x2c
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	ed87 0a02 	vstr	s0, [r7, #8]
 800bcd8:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	885b      	ldrh	r3, [r3, #2]
 800bcf0:	fb02 f303 	mul.w	r3, r2, r3
 800bcf4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bcfa:	e010      	b.n	800bd1e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	1d1a      	adds	r2, r3, #4
 800bd00:	627a      	str	r2, [r7, #36]	; 0x24
 800bd02:	ed93 7a00 	vldr	s14, [r3]
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	1d1a      	adds	r2, r3, #4
 800bd0a:	623a      	str	r2, [r7, #32]
 800bd0c:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd14:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1eb      	bne.n	800bcfc <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bd24:	2300      	movs	r3, #0
 800bd26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800bd28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	372c      	adds	r7, #44	; 0x2c
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b08b      	sub	sp, #44	; 0x2c
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	885b      	ldrh	r3, [r3, #2]
 800bd58:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800bd5a:	89fb      	ldrh	r3, [r7, #14]
 800bd5c:	61bb      	str	r3, [r7, #24]
 800bd5e:	2300      	movs	r3, #0
 800bd60:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	4413      	add	r3, r2
 800bd6a:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800bd6c:	89bb      	ldrh	r3, [r7, #12]
 800bd6e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800bd70:	e00d      	b.n	800bd8e <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800bd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd74:	1d1a      	adds	r2, r3, #4
 800bd76:	627a      	str	r2, [r7, #36]	; 0x24
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800bd7e:	89fb      	ldrh	r3, [r7, #14]
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	6a3a      	ldr	r2, [r7, #32]
 800bd84:	4413      	add	r3, r2
 800bd86:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1ee      	bne.n	800bd72 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	3301      	adds	r3, #1
 800bd98:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1dd      	bne.n	800bd62 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bda6:	2300      	movs	r3, #0
 800bda8:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800bdaa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	372c      	adds	r7, #44	; 0x2c
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800bdba:	b480      	push	{r7}
 800bdbc:	b089      	sub	sp, #36	; 0x24
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	607a      	str	r2, [r7, #4]
 800bdc6:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	1d1a      	adds	r2, r3, #4
 800bdd0:	60fa      	str	r2, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800bddc:	e016      	b.n	800be0c <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	1d1a      	adds	r2, r3, #4
 800bde2:	60fa      	str	r2, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 800bde8:	ed97 7a07 	vldr	s14, [r7, #28]
 800bdec:	edd7 7a04 	vldr	s15, [r7, #16]
 800bdf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf8:	d505      	bpl.n	800be06 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	3b01      	subs	r3, #1
 800be0a:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1e5      	bne.n	800bdde <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	69fa      	ldr	r2, [r7, #28]
 800be16:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	601a      	str	r2, [r3, #0]
}
 800be1e:	bf00      	nop
 800be20:	3724      	adds	r7, #36	; 0x24
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b087      	sub	sp, #28
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800be36:	f04f 0300 	mov.w	r3, #0
 800be3a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800be40:	e00d      	b.n	800be5e <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	1d1a      	adds	r2, r3, #4
 800be46:	60fa      	str	r2, [r7, #12]
 800be48:	edd3 7a00 	vldr	s15, [r3]
 800be4c:	ed97 7a04 	vldr	s14, [r7, #16]
 800be50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be54:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1ee      	bne.n	800be42 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be6e:	edd7 6a04 	vldr	s13, [r7, #16]
 800be72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	edc3 7a00 	vstr	s15, [r3]
}
 800be7c:	bf00      	nop
 800be7e:	371c      	adds	r7, #28
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800be88:	b480      	push	{r7}
 800be8a:	b089      	sub	sp, #36	; 0x24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	1d1a      	adds	r2, r3, #4
 800be9e:	60fa      	str	r2, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	3b01      	subs	r3, #1
 800bea8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800beaa:	e016      	b.n	800beda <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	1d1a      	adds	r2, r3, #4
 800beb0:	60fa      	str	r2, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 800beb6:	ed97 7a07 	vldr	s14, [r7, #28]
 800beba:	edd7 7a04 	vldr	s15, [r7, #16]
 800bebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec6:	dd05      	ble.n	800bed4 <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	3b01      	subs	r3, #1
 800bed8:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1e5      	bne.n	800beac <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	69fa      	ldr	r2, [r7, #28]
 800bee4:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	601a      	str	r2, [r3, #0]
}
 800beec:	bf00      	nop
 800beee:	3724      	adds	r7, #36	; 0x24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08a      	sub	sp, #40	; 0x28
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800bf04:	f04f 0300 	mov.w	r3, #0
 800bf08:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800bf0e:	e011      	b.n	800bf34 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	1d1a      	adds	r2, r3, #4
 800bf14:	60fa      	str	r2, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800bf1a:	edd7 7a07 	vldr	s15, [r7, #28]
 800bf1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf22:	ed97 7a08 	vldr	s14, [r7, #32]
 800bf26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf2a:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	3b01      	subs	r3, #1
 800bf32:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1ea      	bne.n	800bf10 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	ee07 3a90 	vmov	s15, r3
 800bf40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf44:	edd7 6a08 	vldr	s13, [r7, #32]
 800bf48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf4c:	edc7 7a06 	vstr	s15, [r7, #24]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800bf54:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf60:	db09      	blt.n	800bf76 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800bf62:	ed97 0a06 	vldr	s0, [r7, #24]
 800bf66:	f00d f921 	bl	80191ac <sqrtf>
 800bf6a:	eef0 7a40 	vmov.f32	s15, s0
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800bf74:	e004      	b.n	800bf80 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f04f 0200 	mov.w	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800bf7e:	bf00      	nop
}
 800bf80:	bf00      	nop
 800bf82:	3728      	adds	r7, #40	; 0x28
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 800bf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf8a:	b093      	sub	sp, #76	; 0x4c
 800bf8c:	af0a      	add	r7, sp, #40	; 0x28
 800bf8e:	6178      	str	r0, [r7, #20]
 800bf90:	6139      	str	r1, [r7, #16]
 800bf92:	60fa      	str	r2, [r7, #12]
 800bf94:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 800bf9c:	e033      	b.n	800c006 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	607b      	str	r3, [r7, #4]
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	6852      	ldr	r2, [r2, #4]
 800bfa8:	6939      	ldr	r1, [r7, #16]
 800bfaa:	6889      	ldr	r1, [r1, #8]
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	6800      	ldr	r0, [r0, #0]
 800bfb0:	68fc      	ldr	r4, [r7, #12]
 800bfb2:	6864      	ldr	r4, [r4, #4]
 800bfb4:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800bfb6:	682d      	ldr	r5, [r5, #0]
 800bfb8:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800bfba:	68f6      	ldr	r6, [r6, #12]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	603b      	str	r3, [r7, #0]
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	9308      	str	r3, [sp, #32]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	9307      	str	r3, [sp, #28]
 800bfcc:	9606      	str	r6, [sp, #24]
 800bfce:	9505      	str	r5, [sp, #20]
 800bfd0:	9404      	str	r4, [sp, #16]
 800bfd2:	9003      	str	r0, [sp, #12]
 800bfd4:	9102      	str	r1, [sp, #8]
 800bfd6:	9201      	str	r2, [sp, #4]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfe0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfe2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfe4:	f000 f822 	bl	800c02c <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800bfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	461a      	mov	r2, r3
 800bfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff0:	4413      	add	r3, r2
 800bff2:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 800bff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	461a      	mov	r2, r3
 800bffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bffc:	4413      	add	r3, r2
 800bffe:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	3b01      	subs	r3, #1
 800c004:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1c8      	bne.n	800bf9e <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3724      	adds	r7, #36	; 0x24
 800c012:	46bd      	mov	sp, r7
 800c014:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c016 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800c016:	b480      	push	{r7}
 800c018:	b083      	sub	sp, #12
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800c02c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c030:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800c034:	af00      	add	r7, sp, #0
 800c036:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 800c03a:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 800c03e:	6020      	str	r0, [r4, #0]
 800c040:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 800c044:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 800c048:	6001      	str	r1, [r0, #0]
 800c04a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c04e:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 800c052:	600a      	str	r2, [r1, #0]
 800c054:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c058:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 800c05c:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 800c05e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c062:	3b04      	subs	r3, #4
 800c064:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 800c068:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800c06c:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 800c070:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800c074:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800c078:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800c07c:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800c080:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800c084:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800c088:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 800c08c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800c090:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800c094:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800c098:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800c09c:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800c0a0:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800c0a4:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800c0a8:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800c0ac:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 800c0b0:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800c0b4:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800c0b8:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800c0bc:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800c0c0:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800c0c4:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800c0ce:	f001 bd13 	b.w	800daf8 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800c0d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0d6:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800c0da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0de:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800c0e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ea:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 800c0ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0f2:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 800c106:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c10a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01b      	beq.n	800c14c <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 800c114:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c118:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c11c:	6819      	ldr	r1, [r3, #0]
 800c11e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c122:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800c126:	1d0b      	adds	r3, r1, #4
 800c128:	6013      	str	r3, [r2, #0]
 800c12a:	680b      	ldr	r3, [r1, #0]
 800c12c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 800c130:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c134:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c138:	6819      	ldr	r1, [r3, #0]
 800c13a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c13e:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800c142:	1d0b      	adds	r3, r1, #4
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	680b      	ldr	r3, [r1, #0]
 800c148:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800c152:	f001 b9db 	b.w	800d50c <arm_nn_vec_mat_mult_t_s8+0x14e0>
 800c156:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c15a:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800c15e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c162:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800c164:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c168:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c178:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800c17c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c17e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c182:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	1d1a      	adds	r2, r3, #4
 800c18c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c190:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	601a      	str	r2, [r3, #0]

    return (val);
 800c198:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c19c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800c1a0:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c1a2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c1a6:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c1aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1ae:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800c1b2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1bc:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800c1c0:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c1c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1c6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1d0:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	fa22 f283 	sxtab16	r2, r2, r3
 800c1da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1de:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800c1e2:	601a      	str	r2, [r3, #0]
  return(result);
 800c1e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1e8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c1f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1f6:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800c1fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c1fe:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c200:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c204:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c214:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800c218:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c21a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c21e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	1d1a      	adds	r2, r3, #4
 800c228:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c22c:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	601a      	str	r2, [r3, #0]
    return (val);
 800c234:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c238:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800c23c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c23e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c242:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c24a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800c24e:	601a      	str	r2, [r3, #0]
 800c250:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c254:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800c258:	2308      	movs	r3, #8
 800c25a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c25c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c260:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800c264:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c268:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 031f 	and.w	r3, r3, #31
 800c272:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c274:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c278:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d105      	bne.n	800c28e <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 800c282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c286:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800c28a:	6819      	ldr	r1, [r3, #0]
 800c28c:	e00b      	b.n	800c2a6 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c28e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c292:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800c296:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c29a:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c29e:	6812      	ldr	r2, [r2, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	fa62 f103 	ror.w	r1, r2, r3
 800c2a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2aa:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 800c2ae:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c2b2:	6013      	str	r3, [r2, #0]
 800c2b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2b8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800c2bc:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c2be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2c2:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2cc:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	fa22 f283 	sxtab16	r2, r2, r3
 800c2d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2da:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800c2de:	601a      	str	r2, [r3, #0]
  return(result);
 800c2e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2e4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c2ee:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c2f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2f6:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 800c2fa:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c304:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800c308:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c30a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c30e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c318:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	fa22 f283 	sxtab16	r2, r2, r3
 800c322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c326:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800c32a:	601a      	str	r2, [r3, #0]
  return(result);
 800c32c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c330:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c33a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c33e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c348:	441a      	add	r2, r3
 800c34a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c34e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c358:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 800c362:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c366:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800c36a:	601a      	str	r2, [r3, #0]

    return (val);
 800c36c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c370:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c37a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c37e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c382:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800c386:	601a      	str	r2, [r3, #0]
 800c388:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c38c:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800c390:	2308      	movs	r3, #8
 800c392:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c394:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c398:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800c39c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3a0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 031f 	and.w	r3, r3, #31
 800c3aa:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c3ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3b0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 800c3ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3be:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800c3c2:	6819      	ldr	r1, [r3, #0]
 800c3c4:	e00b      	b.n	800c3de <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c3c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3ca:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800c3ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3d2:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c3d6:	6812      	ldr	r2, [r2, #0]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	fa62 f103 	ror.w	r1, r2, r3
 800c3de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3e2:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800c3e6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c3ea:	6013      	str	r3, [r2, #0]
 800c3ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3f0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800c3f4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c3f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3fa:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c404:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	fa22 f283 	sxtab16	r2, r2, r3
 800c40e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c412:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800c416:	601a      	str	r2, [r3, #0]
  return(result);
 800c418:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c41c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c426:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c42a:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800c42e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c432:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c436:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800c43a:	601a      	str	r2, [r3, #0]
 800c43c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c440:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800c444:	6019      	str	r1, [r3, #0]
 800c446:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c44a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800c44e:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c450:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c454:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800c458:	6819      	ldr	r1, [r3, #0]
 800c45a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c45e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c468:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	fb21 3202 	smlad	r2, r1, r2, r3
 800c472:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c476:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800c47a:	601a      	str	r2, [r3, #0]
  return(result);
 800c47c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c480:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c48a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c48e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c492:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800c496:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4a0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800c4a4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c4a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4aa:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4b4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	fa22 f283 	sxtab16	r2, r2, r3
 800c4be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4c2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800c4c6:	601a      	str	r2, [r3, #0]
  return(result);
 800c4c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4cc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800c4d6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c4da:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c4de:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c4e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4e6:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4f0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800c4f4:	6019      	str	r1, [r3, #0]
 800c4f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4fa:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800c4fe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c504:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800c508:	6819      	ldr	r1, [r3, #0]
 800c50a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c50e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c518:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	fb21 3202 	smlad	r2, r1, r2, r3
 800c522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c526:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800c52a:	601a      	str	r2, [r3, #0]
  return(result);
 800c52c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c530:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800c53a:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800c53e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c542:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800c546:	601a      	str	r2, [r3, #0]
 800c548:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c54c:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800c550:	2308      	movs	r3, #8
 800c552:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c558:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800c55c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c560:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 031f 	and.w	r3, r3, #31
 800c56a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c56c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c570:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d105      	bne.n	800c586 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 800c57a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c57e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800c582:	6819      	ldr	r1, [r3, #0]
 800c584:	e00b      	b.n	800c59e <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c58a:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800c58e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c592:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c596:	6812      	ldr	r2, [r2, #0]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	fa62 f103 	ror.w	r1, r2, r3
 800c59e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5a2:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800c5a6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5b0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800c5b4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c5b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ba:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5c4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	fa22 f283 	sxtab16	r2, r2, r3
 800c5ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5d2:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800c5d6:	601a      	str	r2, [r3, #0]
  return(result);
 800c5d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5dc:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800c5e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ea:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800c5ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c5f2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c5f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5f8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	461a      	mov	r2, r3
 800c604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c608:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800c60c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c60e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c612:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	1d1a      	adds	r2, r3, #4
 800c61c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c620:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	601a      	str	r2, [r3, #0]
    return (val);
 800c628:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c62c:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800c630:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c632:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800c636:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c63a:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800c63e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c646:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c650:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800c654:	6019      	str	r1, [r3, #0]
 800c656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c65a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800c65e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c664:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800c668:	6819      	ldr	r1, [r3, #0]
 800c66a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c66e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c678:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	fb21 3202 	smlad	r2, r1, r2, r3
 800c682:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c686:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800c68a:	601a      	str	r2, [r3, #0]
  return(result);
 800c68c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c690:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800c69a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c69e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c6a2:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c6a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6aa:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6b4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800c6b8:	6019      	str	r1, [r3, #0]
 800c6ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6be:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800c6c2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c6c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6c8:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800c6cc:	6819      	ldr	r1, [r3, #0]
 800c6ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6d2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6dc:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	fb21 3202 	smlad	r2, r1, r2, r3
 800c6e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6ea:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800c6ee:	601a      	str	r2, [r3, #0]
  return(result);
 800c6f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6f4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c6fe:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c702:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c706:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 800c70a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c714:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800c718:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c71a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c71e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c728:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	fa22 f283 	sxtab16	r2, r2, r3
 800c732:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c736:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800c73a:	601a      	str	r2, [r3, #0]
  return(result);
 800c73c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c740:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c74a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c74e:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 800c752:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c756:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c758:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c75c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c76c:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800c770:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c772:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c776:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	1d1a      	adds	r2, r3, #4
 800c780:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c784:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	601a      	str	r2, [r3, #0]
    return (val);
 800c78c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c790:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800c794:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c796:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c79a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c79e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7a2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ac:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800c7b0:	2308      	movs	r3, #8
 800c7b2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c7b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7b8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800c7bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7c0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 031f 	and.w	r3, r3, #31
 800c7ca:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c7cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7d0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d105      	bne.n	800c7e6 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 800c7da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7de:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800c7e2:	6819      	ldr	r1, [r3, #0]
 800c7e4:	e00b      	b.n	800c7fe <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c7e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ea:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800c7ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7f2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c7f6:	6812      	ldr	r2, [r2, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	fa62 f103 	ror.w	r1, r2, r3
 800c7fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c802:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800c806:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c810:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800c814:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c816:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c81a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c824:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	fa22 f283 	sxtab16	r2, r2, r3
 800c82e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c832:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800c836:	601a      	str	r2, [r3, #0]
  return(result);
 800c838:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c83c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c846:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c84a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c84e:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800c852:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c85c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c860:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c862:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c866:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c870:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	fa22 f283 	sxtab16	r2, r2, r3
 800c87a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c87e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800c882:	601a      	str	r2, [r3, #0]
  return(result);
 800c884:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c888:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c892:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c896:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c8a0:	441a      	add	r2, r3
 800c8a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800c8ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8be:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800c8c2:	601a      	str	r2, [r3, #0]
    return (val);
 800c8c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8c8:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c8d2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c8d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8e4:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800c8e8:	2308      	movs	r3, #8
 800c8ea:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c8ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8f0:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800c8f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8f8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f003 031f 	and.w	r3, r3, #31
 800c902:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c904:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c908:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d105      	bne.n	800c91e <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 800c912:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c916:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800c91a:	6819      	ldr	r1, [r3, #0]
 800c91c:	e00b      	b.n	800c936 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c91e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c922:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800c926:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c92a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c92e:	6812      	ldr	r2, [r2, #0]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	fa62 f103 	ror.w	r1, r2, r3
 800c936:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c93a:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 800c93e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c948:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800c94c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c94e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c952:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c95c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	fa22 f283 	sxtab16	r2, r2, r3
 800c966:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c96a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800c96e:	601a      	str	r2, [r3, #0]
  return(result);
 800c970:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c974:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c97e:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c982:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800c986:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c98a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c98e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c998:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800c99c:	6019      	str	r1, [r3, #0]
 800c99e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9a2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c9a6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c9a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ac:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c9b0:	6819      	ldr	r1, [r3, #0]
 800c9b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9b6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9c0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	fb21 3202 	smlad	r2, r1, r2, r3
 800c9ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ce:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800c9d2:	601a      	str	r2, [r3, #0]
  return(result);
 800c9d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9d8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c9e2:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c9e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ea:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800c9ee:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c9f2:	6013      	str	r3, [r2, #0]
 800c9f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9f8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c9fc:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c9fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca02:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca0c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	fa22 f283 	sxtab16	r2, r2, r3
 800ca16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca1a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800ca1e:	601a      	str	r2, [r3, #0]
  return(result);
 800ca20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca24:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800ca2e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800ca32:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800ca36:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800ca3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca3e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ca42:	601a      	str	r2, [r3, #0]
 800ca44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca48:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ca4c:	6019      	str	r1, [r3, #0]
 800ca4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca52:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ca56:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ca58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca5c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ca60:	6819      	ldr	r1, [r3, #0]
 800ca62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca66:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca70:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	fb21 3202 	smlad	r2, r1, r2, r3
 800ca7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca7e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ca82:	601a      	str	r2, [r3, #0]
  return(result);
 800ca84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca88:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800ca92:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800ca96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ca9e:	601a      	str	r2, [r3, #0]
 800caa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caa4:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800caa8:	2308      	movs	r3, #8
 800caaa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800caac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cab0:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800cab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cab8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f003 031f 	and.w	r3, r3, #31
 800cac2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800cac4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cac8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d105      	bne.n	800cade <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 800cad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cad6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800cada:	6819      	ldr	r1, [r3, #0]
 800cadc:	e00b      	b.n	800caf6 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cae2:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800cae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caea:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800caee:	6812      	ldr	r2, [r2, #0]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	fa62 f103 	ror.w	r1, r2, r3
 800caf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cafa:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800cafe:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cb02:	6013      	str	r3, [r2, #0]
 800cb04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb0c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cb0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb12:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	fa22 f283 	sxtab16	r2, r2, r3
 800cb26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb2a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800cb2e:	601a      	str	r2, [r3, #0]
  return(result);
 800cb30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb34:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800cb3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb42:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800cb46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800cb4a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800cb4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb50:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb60:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800cb64:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cb66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb6a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	1d1a      	adds	r2, r3, #4
 800cb74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb78:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	601a      	str	r2, [r3, #0]
    return (val);
 800cb80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb84:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800cb88:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800cb8a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800cb8e:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800cb92:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800cb96:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800cb9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb9e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cba8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800cbac:	6019      	str	r1, [r3, #0]
 800cbae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbb2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800cbb6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cbb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800cbc0:	6819      	ldr	r1, [r3, #0]
 800cbc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbd0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	fb21 3202 	smlad	r2, r1, r2, r3
 800cbda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbde:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800cbe2:	601a      	str	r2, [r3, #0]
  return(result);
 800cbe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbe8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800cbf2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cbf6:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800cbfa:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800cbfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800cc06:	601a      	str	r2, [r3, #0]
 800cc08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800cc10:	6019      	str	r1, [r3, #0]
 800cc12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800cc1a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cc1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc20:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800cc24:	6819      	ldr	r1, [r3, #0]
 800cc26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc2a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	fb21 3202 	smlad	r2, r1, r2, r3
 800cc3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cc46:	601a      	str	r2, [r3, #0]
  return(result);
 800cc48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800cc56:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800cc5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc5e:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800cc62:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc6c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800cc70:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cc72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc76:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc80:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	fa22 f283 	sxtab16	r2, r2, r3
 800cc8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc8e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800cc92:	601a      	str	r2, [r3, #0]
  return(result);
 800cc94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc98:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800cca2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cca6:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800ccaa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ccae:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800ccb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccb4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccc4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800ccc8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ccca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	1d1a      	adds	r2, r3, #4
 800ccd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccdc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	601a      	str	r2, [r3, #0]
    return (val);
 800cce4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cce8:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800ccec:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ccee:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ccf2:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800ccf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccfa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ccfe:	601a      	str	r2, [r3, #0]
 800cd00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd04:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800cd08:	2308      	movs	r3, #8
 800cd0a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800cd0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd10:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800cd14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd18:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 031f 	and.w	r3, r3, #31
 800cd22:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800cd24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d105      	bne.n	800cd3e <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 800cd32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd36:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800cd3a:	6819      	ldr	r1, [r3, #0]
 800cd3c:	e00b      	b.n	800cd56 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cd3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd42:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800cd46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cd4e:	6812      	ldr	r2, [r2, #0]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	fa62 f103 	ror.w	r1, r2, r3
 800cd56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd5a:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800cd5e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd68:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800cd6c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cd6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	fa22 f283 	sxtab16	r2, r2, r3
 800cd86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800cd8e:	601a      	str	r2, [r3, #0]
  return(result);
 800cd90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800cd9e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800cda2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cda6:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800cdaa:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800cdae:	6013      	str	r3, [r2, #0]
 800cdb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdb4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800cdb8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cdba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdbe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdc8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	fa22 f283 	sxtab16	r2, r2, r3
 800cdd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdd6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cdda:	601a      	str	r2, [r3, #0]
  return(result);
 800cddc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cde0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800cdea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdee:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800cdf8:	441a      	add	r2, r3
 800cdfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdfe:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce08:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800ce12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce16:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800ce1a:	601a      	str	r2, [r3, #0]
    return (val);
 800ce1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce20:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800ce2a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800ce2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce3c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ce40:	2308      	movs	r3, #8
 800ce42:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ce44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce48:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ce4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 031f 	and.w	r3, r3, #31
 800ce5a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ce5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 800ce6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ce72:	6819      	ldr	r1, [r3, #0]
 800ce74:	e00b      	b.n	800ce8e <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ce76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce7a:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800ce7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce86:	6812      	ldr	r2, [r2, #0]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	fa62 f103 	ror.w	r1, r2, r3
 800ce8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce92:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800ce96:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cea0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800cea4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cea6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceaa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceb4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	fa22 f283 	sxtab16	r2, r2, r3
 800cebe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cec2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800cec6:	601a      	str	r2, [r3, #0]
  return(result);
 800cec8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cecc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800ced6:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800ceda:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800cede:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800cee2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cee6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ceea:	601a      	str	r2, [r3, #0]
 800ceec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cef0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800cef4:	6019      	str	r1, [r3, #0]
 800cef6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cefa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800cefe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cf00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800cf08:	6819      	ldr	r1, [r3, #0]
 800cf0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf0e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf18:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	fb21 3202 	smlad	r2, r1, r2, r3
 800cf22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf26:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800cf2a:	601a      	str	r2, [r3, #0]
  return(result);
 800cf2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800cf3a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800cf3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf42:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800cf46:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cf4a:	6013      	str	r3, [r2, #0]
 800cf4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf50:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800cf54:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cf56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf64:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	fa22 f283 	sxtab16	r2, r2, r3
 800cf6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf72:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800cf76:	601a      	str	r2, [r3, #0]
  return(result);
 800cf78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf7c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800cf86:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cf8a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800cf8e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800cf92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfa0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cfa4:	6019      	str	r1, [r3, #0]
 800cfa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfaa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cfae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cfb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfb4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cfb8:	6819      	ldr	r1, [r3, #0]
 800cfba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfbe:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfc8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	fb21 3202 	smlad	r2, r1, r2, r3
 800cfd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfd6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cfda:	601a      	str	r2, [r3, #0]
  return(result);
 800cfdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfe0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800cfea:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800cfee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cff2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800cff6:	601a      	str	r2, [r3, #0]
 800cff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cffc:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800d000:	2308      	movs	r3, #8
 800d002:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d004:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d008:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800d00c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d010:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 031f 	and.w	r3, r3, #31
 800d01a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d01c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d020:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d105      	bne.n	800d036 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 800d02a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d02e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d032:	6819      	ldr	r1, [r3, #0]
 800d034:	e00b      	b.n	800d04e <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d03a:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800d03e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d042:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d046:	6812      	ldr	r2, [r2, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	fa62 f103 	ror.w	r1, r2, r3
 800d04e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d052:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800d056:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d060:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d064:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d066:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d06a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d074:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	fa22 f283 	sxtab16	r2, r2, r3
 800d07e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d082:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d086:	601a      	str	r2, [r3, #0]
  return(result);
 800d088:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d08c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800d096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d09a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800d09e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d0a2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d0a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0b8:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800d0bc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d0be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0c2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	1d1a      	adds	r2, r3, #4
 800d0cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	601a      	str	r2, [r3, #0]
    return (val);
 800d0d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0dc:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800d0e0:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d0e2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800d0e6:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800d0ea:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800d0ee:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d0f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d0fa:	601a      	str	r2, [r3, #0]
 800d0fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d100:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d104:	6019      	str	r1, [r3, #0]
 800d106:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d10a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d10e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d114:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d118:	6819      	ldr	r1, [r3, #0]
 800d11a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d11e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d128:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	fb21 3202 	smlad	r2, r1, r2, r3
 800d132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d136:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d13a:	601a      	str	r2, [r3, #0]
  return(result);
 800d13c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d140:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800d14a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d14e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800d152:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d156:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d15a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d168:	6019      	str	r1, [r3, #0]
 800d16a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d16e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d172:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d174:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d178:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d17c:	6819      	ldr	r1, [r3, #0]
 800d17e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d18c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	fb21 3202 	smlad	r2, r1, r2, r3
 800d196:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d19a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d19e:	601a      	str	r2, [r3, #0]
  return(result);
 800d1a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800d1ae:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800d1b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1b6:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800d1ba:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d1c8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d1ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	fa22 f283 	sxtab16	r2, r2, r3
 800d1e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1ea:	601a      	str	r2, [r3, #0]
  return(result);
 800d1ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800d1fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1fe:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800d202:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d206:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d208:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d20c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	461a      	mov	r2, r3
 800d218:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d21c:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800d220:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d222:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d226:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	1d1a      	adds	r2, r3, #4
 800d230:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d234:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	601a      	str	r2, [r3, #0]
    return (val);
 800d23c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d240:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800d244:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d246:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d24a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d24e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d252:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d256:	601a      	str	r2, [r3, #0]
 800d258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d25c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800d260:	2308      	movs	r3, #8
 800d262:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d264:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d268:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800d26c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d270:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f003 031f 	and.w	r3, r3, #31
 800d27a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d27c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d280:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d105      	bne.n	800d296 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 800d28a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d28e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d292:	6819      	ldr	r1, [r3, #0]
 800d294:	e00b      	b.n	800d2ae <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d296:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d29a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d29e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d2a6:	6812      	ldr	r2, [r2, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	fa62 f103 	ror.w	r1, r2, r3
 800d2ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2b2:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800d2b6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2c4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d2c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	fa22 f283 	sxtab16	r2, r2, r3
 800d2de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d2e6:	601a      	str	r2, [r3, #0]
  return(result);
 800d2e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800d2f6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d2fa:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d2fe:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800d302:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d306:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800d30a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800d30e:	fa22 f283 	sxtab16	r2, r2, r3
 800d312:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d316:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d31a:	601a      	str	r2, [r3, #0]
  return(result);
 800d31c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d320:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800d32a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d32e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800d338:	4413      	add	r3, r2
 800d33a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d33e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800d346:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d34a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800d34e:	601a      	str	r2, [r3, #0]
    return (val);
 800d350:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d354:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800d35e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800d362:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800d366:	2308      	movs	r3, #8
 800d368:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800d36c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d370:	f003 031f 	and.w	r3, r3, #31
 800d374:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800d378:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d102      	bne.n	800d386 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 800d380:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d384:	e004      	b.n	800d390 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d386:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d38a:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d38e:	41da      	rors	r2, r3
 800d390:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d394:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800d398:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d39c:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800d3a0:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800d3a4:	fa22 f383 	sxtab16	r3, r2, r3
 800d3a8:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800d3ac:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800d3b0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800d3b4:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800d3b8:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 800d3bc:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d3c0:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800d3c4:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800d3c8:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d3cc:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800d3d0:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800d3d4:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800d3d8:	fb21 3302 	smlad	r3, r1, r2, r3
 800d3dc:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800d3e0:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800d3e4:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800d3e8:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800d3ec:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d3f0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800d3f4:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d3f8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800d3fc:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800d400:	fa22 f383 	sxtab16	r3, r2, r3
 800d404:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800d408:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800d40c:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800d410:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d414:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d418:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d41c:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 800d420:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800d424:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d428:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800d42c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800d430:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d434:	fb21 3302 	smlad	r3, r1, r2, r3
 800d438:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 800d43c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800d440:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800d444:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800d448:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800d44c:	2308      	movs	r3, #8
 800d44e:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 800d452:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d456:	f003 031f 	and.w	r3, r3, #31
 800d45a:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 800d45e:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d462:	2b00      	cmp	r3, #0
 800d464:	d102      	bne.n	800d46c <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 800d466:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800d46a:	e004      	b.n	800d476 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d46c:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800d470:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d474:	41da      	rors	r2, r3
 800d476:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d47a:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800d47e:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d482:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800d486:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800d48a:	fa22 f383 	sxtab16	r3, r2, r3
 800d48e:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 800d492:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800d496:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 800d49a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800d49e:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 800d4a2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d4a6:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800d4aa:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 800d4ae:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d4b2:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800d4b6:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800d4ba:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800d4be:	fb21 3302 	smlad	r3, r1, r2, r3
 800d4c2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 800d4c6:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800d4ca:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800d4ce:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d4d2:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800d4d6:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d4da:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800d4de:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800d4e2:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d4e6:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800d4ea:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800d4ee:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800d4f2:	fb21 3302 	smlad	r3, r1, r2, r3
 800d4f6:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 800d4fa:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800d4fe:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800d502:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d506:	3310      	adds	r3, #16
 800d508:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800d50c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d510:	f1a3 020f 	sub.w	r2, r3, #15
 800d514:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d518:	4293      	cmp	r3, r2
 800d51a:	f6fe ae1c 	blt.w	800c156 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d51e:	e05a      	b.n	800d5d6 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800d520:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d524:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f993 3000 	ldrsb.w	r3, [r3]
 800d52e:	461a      	mov	r2, r3
 800d530:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800d534:	4413      	add	r3, r2
 800d536:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800d53a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d53e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d548:	4413      	add	r3, r2
 800d54a:	f993 3000 	ldrsb.w	r3, [r3]
 800d54e:	461a      	mov	r2, r3
 800d550:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800d554:	4413      	add	r3, r2
 800d556:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800d55a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d55e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f993 3000 	ldrsb.w	r3, [r3]
 800d568:	461a      	mov	r2, r3
 800d56a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800d56e:	4413      	add	r3, r2
 800d570:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 800d574:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800d578:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800d57c:	fb03 f202 	mul.w	r2, r3, r2
 800d580:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d584:	4413      	add	r3, r2
 800d586:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 800d58a:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800d58e:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800d592:	fb03 f202 	mul.w	r2, r3, r2
 800d596:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d59a:	4413      	add	r3, r2
 800d59c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 800d5a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5a4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	1c5a      	adds	r2, r3, #1
 800d5ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5b0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d5b4:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800d5b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5ba:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5c6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d5ca:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d5cc:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800d5d6:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800d5da:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	db9e      	blt.n	800d520 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 800d5e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5e6:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800d5ea:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5f4:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 800d5f8:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800d5fc:	6013      	str	r3, [r2, #0]
 800d5fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d602:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800d606:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800d60a:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d60c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d610:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800d61a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d61e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	fa03 f202 	lsl.w	r2, r3, r2
 800d628:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d62c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d636:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800d63a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d63e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d646:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d64a:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800d64e:	2300      	movs	r3, #0
 800d650:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800d652:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d656:	461a      	mov	r2, r3
 800d658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d65c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800d65e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d662:	461a      	mov	r2, r3
 800d664:	2300      	movs	r3, #0
 800d666:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800d668:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d66c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d674:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	17da      	asrs	r2, r3, #31
 800d67c:	633b      	str	r3, [r7, #48]	; 0x30
 800d67e:	637a      	str	r2, [r7, #52]	; 0x34
 800d680:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d684:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	17da      	asrs	r2, r3, #31
 800d68c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d68e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d694:	fb02 f203 	mul.w	r2, r2, r3
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d69c:	fb04 f303 	mul.w	r3, r4, r3
 800d6a0:	4413      	add	r3, r2
 800d6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800d6a6:	fba2 5604 	umull	r5, r6, r2, r4
 800d6aa:	4433      	add	r3, r6
 800d6ac:	461e      	mov	r6, r3
 800d6ae:	1943      	adds	r3, r0, r5
 800d6b0:	61bb      	str	r3, [r7, #24]
 800d6b2:	eb41 0306 	adc.w	r3, r1, r6
 800d6b6:	61fb      	str	r3, [r7, #28]
 800d6b8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d6bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d6c0:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800d6c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	f04f 0000 	mov.w	r0, #0
 800d6d0:	f04f 0100 	mov.w	r1, #0
 800d6d4:	0fd0      	lsrs	r0, r2, #31
 800d6d6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d6da:	17d9      	asrs	r1, r3, #31
 800d6dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6e0:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	6013      	str	r3, [r2, #0]
    return result;
 800d6e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6ec:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800d6f0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d6f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6f6:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	dc06      	bgt.n	800d70e <arm_nn_vec_mat_mult_t_s8+0x16e2>
 800d700:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d704:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	425a      	negs	r2, r3
 800d70c:	e000      	b.n	800d710 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 800d70e:	2200      	movs	r2, #0
 800d710:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d714:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800d718:	6019      	str	r1, [r3, #0]
 800d71a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d71e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d722:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800d724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d728:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800d72c:	2300      	movs	r3, #0
 800d72e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d730:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d734:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d738:	2201      	movs	r2, #1
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	fa02 f103 	lsl.w	r1, r2, r3
 800d740:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d744:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800d748:	1e4b      	subs	r3, r1, #1
 800d74a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800d74c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d750:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 800d754:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d758:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800d75c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d760:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800d764:	6812      	ldr	r2, [r2, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4013      	ands	r3, r2
 800d76a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800d76c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d770:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 800d774:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d778:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800d77c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d780:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d784:	6812      	ldr	r2, [r2, #0]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	fa42 f303 	asr.w	r3, r2, r3
 800d78c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800d78e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d792:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800d796:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d79a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	105b      	asrs	r3, r3, #1
 800d7a2:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800d7a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7a8:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	da0a      	bge.n	800d7c8 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 800d7b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7b6:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800d7ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7be:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800d7c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7cc:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 800d7d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7d4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800d7d8:	6812      	ldr	r2, [r2, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	dd0a      	ble.n	800d7f6 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 800d7e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7e4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800d7e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7ec:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	6013      	str	r3, [r2, #0]
    return result;
 800d7f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7fa:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d7fe:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d800:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800d802:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800d806:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d80a:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 800d80e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d812:	6013      	str	r3, [r2, #0]
 800d814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d818:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800d81c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800d820:	6013      	str	r3, [r2, #0]
 800d822:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d826:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800d82a:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800d82e:	6013      	str	r3, [r2, #0]
 800d830:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d834:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800d83e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d842:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	fa03 f202 	lsl.w	r2, r3, r2
 800d84c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d850:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800d854:	601a      	str	r2, [r3, #0]
 800d856:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d85a:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800d85e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d862:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d86a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d86e:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800d872:	2300      	movs	r3, #0
 800d874:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800d876:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d87a:	461a      	mov	r2, r3
 800d87c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d880:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800d884:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d888:	461a      	mov	r2, r3
 800d88a:	2300      	movs	r3, #0
 800d88c:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800d890:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d894:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d898:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d89c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	17da      	asrs	r2, r3, #31
 800d8a4:	643b      	str	r3, [r7, #64]	; 0x40
 800d8a6:	647a      	str	r2, [r7, #68]	; 0x44
 800d8a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8ac:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	17da      	asrs	r2, r3, #31
 800d8b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8b6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d8b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8bc:	fb02 f203 	mul.w	r2, r2, r3
 800d8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d8c4:	fb04 f303 	mul.w	r3, r4, r3
 800d8c8:	4413      	add	r3, r2
 800d8ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8cc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d8ce:	fba2 ab04 	umull	sl, fp, r2, r4
 800d8d2:	445b      	add	r3, fp
 800d8d4:	469b      	mov	fp, r3
 800d8d6:	eb10 030a 	adds.w	r3, r0, sl
 800d8da:	623b      	str	r3, [r7, #32]
 800d8dc:	eb41 030b 	adc.w	r3, r1, fp
 800d8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d8e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d8ea:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800d8ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d8f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8f6:	f04f 0000 	mov.w	r0, #0
 800d8fa:	f04f 0100 	mov.w	r1, #0
 800d8fe:	0fd0      	lsrs	r0, r2, #31
 800d900:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d904:	17d9      	asrs	r1, r3, #31
 800d906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d90a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800d90e:	4603      	mov	r3, r0
 800d910:	6013      	str	r3, [r2, #0]
    return result;
 800d912:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d916:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800d91a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d91c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d920:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	dc06      	bgt.n	800d938 <arm_nn_vec_mat_mult_t_s8+0x190c>
 800d92a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d92e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	425a      	negs	r2, r3
 800d936:	e000      	b.n	800d93a <arm_nn_vec_mat_mult_t_s8+0x190e>
 800d938:	2200      	movs	r2, #0
 800d93a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d93e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800d942:	6019      	str	r1, [r3, #0]
 800d944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d948:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d94c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800d94e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d952:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800d956:	2300      	movs	r3, #0
 800d958:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d95a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d95e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d962:	2201      	movs	r2, #1
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	fa02 f103 	lsl.w	r1, r2, r3
 800d96a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d96e:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800d972:	1e4b      	subs	r3, r1, #1
 800d974:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800d976:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d97a:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 800d97e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d982:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800d986:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d98a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800d98e:	6812      	ldr	r2, [r2, #0]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4013      	ands	r3, r2
 800d994:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800d996:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d99a:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 800d99e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9a2:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800d9a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9aa:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d9ae:	6812      	ldr	r2, [r2, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	fa42 f303 	asr.w	r3, r2, r3
 800d9b6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800d9b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9bc:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800d9c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9c4:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	105b      	asrs	r3, r3, #1
 800d9cc:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800d9ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9d2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	da0a      	bge.n	800d9f2 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 800d9dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9e0:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800d9e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9e8:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800d9f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9f6:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 800d9fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9fe:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800da02:	6812      	ldr	r2, [r2, #0]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	429a      	cmp	r2, r3
 800da08:	dd0a      	ble.n	800da20 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 800da0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da0e:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800da12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da16:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3301      	adds	r3, #1
 800da1e:	6013      	str	r3, [r2, #0]
    return result;
 800da20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da24:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800da28:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800da2a:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800da2c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 800da30:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800da34:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800da38:	4413      	add	r3, r2
 800da3a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 800da3e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800da42:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800da46:	4413      	add	r3, r2
 800da48:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800da4c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800da50:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800da54:	4293      	cmp	r3, r2
 800da56:	bfb8      	it	lt
 800da58:	4613      	movlt	r3, r2
 800da5a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 800da5e:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800da62:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800da66:	4293      	cmp	r3, r2
 800da68:	bfa8      	it	ge
 800da6a:	4613      	movge	r3, r2
 800da6c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 800da70:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800da74:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800da78:	4293      	cmp	r3, r2
 800da7a:	bfb8      	it	lt
 800da7c:	4613      	movlt	r3, r2
 800da7e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 800da82:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800da86:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800da8a:	4293      	cmp	r3, r2
 800da8c:	bfa8      	it	ge
 800da8e:	4613      	movge	r3, r2
 800da90:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 800da94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da98:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800da9c:	6819      	ldr	r1, [r3, #0]
 800da9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daa2:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800daa6:	1c4b      	adds	r3, r1, #1
 800daa8:	6013      	str	r3, [r2, #0]
 800daaa:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800daae:	b25b      	sxtb	r3, r3
 800dab0:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 800dab2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dab6:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800daba:	6819      	ldr	r1, [r3, #0]
 800dabc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dac0:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800dac4:	1c4b      	adds	r3, r1, #1
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800dacc:	b25b      	sxtb	r3, r3
 800dace:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 800dad0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	4619      	mov	r1, r3
 800dad8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dadc:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800dae0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dae4:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	440b      	add	r3, r1
 800daec:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800daee:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800daf2:	3302      	adds	r3, #2
 800daf4:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800daf8:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800dafc:	1e5a      	subs	r2, r3, #1
 800dafe:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800db02:	4293      	cmp	r3, r2
 800db04:	f6fe aae5 	blt.w	800c0d2 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 800db08:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	f001 806e 	beq.w	800ebf2 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800db16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db1a:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800db1e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db22:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800db26:	6812      	ldr	r2, [r2, #0]
 800db28:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800db2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db2e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800db32:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db36:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800db3a:	6812      	ldr	r2, [r2, #0]
 800db3c:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 800db44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db48:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00d      	beq.n	800db6e <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 800db52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db56:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db60:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 800db64:	1d19      	adds	r1, r3, #4
 800db66:	6011      	str	r1, [r2, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800db74:	f000 beb5 	b.w	800e8e2 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 800db78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db7c:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800db80:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800db84:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800db86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db8a:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	461a      	mov	r2, r3
 800db96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db9a:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800db9e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800dba0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dba4:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	1d1a      	adds	r2, r3, #4
 800dbae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbb2:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	601a      	str	r2, [r3, #0]
    return (val);
 800dbba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbbe:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800dbc2:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800dbc4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800dbc8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800dbcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbd0:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800dbd4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800dbd8:	6019      	str	r1, [r3, #0]
 800dbda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbde:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800dbe2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dbe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbe8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dbf2:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800dbf6:	6812      	ldr	r2, [r2, #0]
 800dbf8:	fa23 f282 	sxtab16	r2, r3, r2
 800dbfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc00:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800dc04:	601a      	str	r2, [r3, #0]
  return(result);
 800dc06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc0a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800dc14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc18:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc1c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800dc20:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800dc22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc26:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	461a      	mov	r2, r3
 800dc32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc36:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800dc3a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800dc3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc40:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	1d1a      	adds	r2, r3, #4
 800dc4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc4e:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	601a      	str	r2, [r3, #0]
    return (val);
 800dc56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc5a:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800dc5e:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800dc60:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800dc64:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800dc68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc6c:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc76:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc7a:	2208      	movs	r2, #8
 800dc7c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dc7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc82:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc86:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc8a:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800dc8e:	6812      	ldr	r2, [r2, #0]
 800dc90:	f002 021f 	and.w	r2, r2, #31
 800dc94:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dc96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc9a:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d105      	bne.n	800dcb0 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 800dca4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dca8:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	e00b      	b.n	800dcc8 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dcb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcb4:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 800dcb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcbc:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dcc0:	6812      	ldr	r2, [r2, #0]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	fa62 f303 	ror.w	r3, r2, r3
 800dcc8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dccc:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 800dcd0:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800dcd4:	6011      	str	r1, [r2, #0]
 800dcd6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dcda:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800dcde:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dce0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dce4:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dcee:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800dcf2:	6812      	ldr	r2, [r2, #0]
 800dcf4:	fa23 f282 	sxtab16	r2, r3, r2
 800dcf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcfc:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800dd00:	601a      	str	r2, [r3, #0]
  return(result);
 800dd02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd06:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800dd10:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800dd14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd18:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800dd1c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800dd20:	6019      	str	r1, [r3, #0]
 800dd22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd26:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800dd2a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dd2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd30:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dd3a:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800dd3e:	6812      	ldr	r2, [r2, #0]
 800dd40:	fa23 f282 	sxtab16	r2, r3, r2
 800dd44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd48:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800dd4c:	601a      	str	r2, [r3, #0]
  return(result);
 800dd4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd52:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800dd5c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800dd60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd64:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800dd68:	601a      	str	r2, [r3, #0]
 800dd6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd6e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd72:	2208      	movs	r2, #8
 800dd74:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dd76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd7a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd7e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dd82:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 800dd86:	6812      	ldr	r2, [r2, #0]
 800dd88:	f002 021f 	and.w	r2, r2, #31
 800dd8c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dd8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd92:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d105      	bne.n	800dda8 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 800dd9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dda0:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	e00b      	b.n	800ddc0 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dda8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddac:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 800ddb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddb4:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800ddb8:	6812      	ldr	r2, [r2, #0]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	fa62 f303 	ror.w	r3, r2, r3
 800ddc0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ddc4:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 800ddc8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800ddcc:	6011      	str	r1, [r2, #0]
 800ddce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ddd2:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800ddd6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ddd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dddc:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dde6:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800ddea:	6812      	ldr	r2, [r2, #0]
 800ddec:	fa23 f282 	sxtab16	r2, r3, r2
 800ddf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddf4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800ddf8:	601a      	str	r2, [r3, #0]
  return(result);
 800ddfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddfe:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800de08:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800de0c:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800de10:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800de14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de18:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800de1c:	6018      	str	r0, [r3, #0]
 800de1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de22:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800de26:	6019      	str	r1, [r3, #0]
 800de28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de2c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800de30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800de32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de36:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800de40:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 800de44:	6812      	ldr	r2, [r2, #0]
 800de46:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800de4a:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 800de4e:	6809      	ldr	r1, [r1, #0]
 800de50:	fb23 1202 	smlad	r2, r3, r2, r1
 800de54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de58:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800de5c:	601a      	str	r2, [r3, #0]
  return(result);
 800de5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de62:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800de6c:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800de70:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800de74:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800de78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de7c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800de80:	6018      	str	r0, [r3, #0]
 800de82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de86:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800de8a:	6019      	str	r1, [r3, #0]
 800de8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de90:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800de94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800de96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de9a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dea4:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 800dea8:	6812      	ldr	r2, [r2, #0]
 800deaa:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800deae:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 800deb2:	6809      	ldr	r1, [r1, #0]
 800deb4:	fb23 1202 	smlad	r2, r3, r2, r1
 800deb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800debc:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800dec0:	601a      	str	r2, [r3, #0]
  return(result);
 800dec2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dec6:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800ded0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ded4:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800ded8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800dedc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800dede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dee2:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	461a      	mov	r2, r3
 800deee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800def2:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800def6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800def8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800defc:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	1d1a      	adds	r2, r3, #4
 800df06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df0a:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	601a      	str	r2, [r3, #0]
    return (val);
 800df12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df16:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800df1a:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800df1c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800df20:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800df24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df28:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800df2c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800df30:	6019      	str	r1, [r3, #0]
 800df32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df36:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800df3a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800df3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df40:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800df4a:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800df4e:	6812      	ldr	r2, [r2, #0]
 800df50:	fa23 f282 	sxtab16	r2, r3, r2
 800df54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df58:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800df5c:	601a      	str	r2, [r3, #0]
  return(result);
 800df5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df62:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800df6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df70:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df74:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800df78:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800df7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df7e:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	461a      	mov	r2, r3
 800df8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df8e:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800df92:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800df94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df98:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	1d1a      	adds	r2, r3, #4
 800dfa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfa6:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	601a      	str	r2, [r3, #0]
    return (val);
 800dfae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfb2:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800dfb6:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800dfb8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800dfbc:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800dfc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfc4:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800dfc8:	601a      	str	r2, [r3, #0]
 800dfca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfce:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800dfd2:	2208      	movs	r2, #8
 800dfd4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dfd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfda:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800dfde:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfe2:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 800dfe6:	6812      	ldr	r2, [r2, #0]
 800dfe8:	f002 021f 	and.w	r2, r2, #31
 800dfec:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dfee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dff2:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d105      	bne.n	800e008 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 800dffc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e000:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	e00b      	b.n	800e020 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e008:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e00c:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 800e010:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e014:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800e018:	6812      	ldr	r2, [r2, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	fa62 f303 	ror.w	r3, r2, r3
 800e020:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e024:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 800e028:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e02c:	6011      	str	r1, [r2, #0]
 800e02e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e032:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800e036:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e038:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e03c:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e046:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800e04a:	6812      	ldr	r2, [r2, #0]
 800e04c:	fa23 f282 	sxtab16	r2, r3, r2
 800e050:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e054:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800e058:	601a      	str	r2, [r3, #0]
  return(result);
 800e05a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e05e:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e068:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e06c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e070:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800e074:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e078:	6019      	str	r1, [r3, #0]
 800e07a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e07e:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800e082:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e084:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e088:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e092:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 800e096:	6812      	ldr	r2, [r2, #0]
 800e098:	fa23 f282 	sxtab16	r2, r3, r2
 800e09c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0a0:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800e0a4:	601a      	str	r2, [r3, #0]
  return(result);
 800e0a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0aa:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e0b4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e0b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0bc:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0c6:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e0ca:	2208      	movs	r2, #8
 800e0cc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e0ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0d2:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e0d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e0da:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 800e0de:	6812      	ldr	r2, [r2, #0]
 800e0e0:	f002 021f 	and.w	r2, r2, #31
 800e0e4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e0e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0ea:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d105      	bne.n	800e100 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 800e0f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0f8:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	e00b      	b.n	800e118 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e100:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e104:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800e108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e10c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e110:	6812      	ldr	r2, [r2, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	fa62 f303 	ror.w	r3, r2, r3
 800e118:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e11c:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800e120:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e124:	6011      	str	r1, [r2, #0]
 800e126:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e12a:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800e12e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e130:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e134:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e13e:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800e142:	6812      	ldr	r2, [r2, #0]
 800e144:	fa23 f282 	sxtab16	r2, r3, r2
 800e148:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e14c:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800e150:	601a      	str	r2, [r3, #0]
  return(result);
 800e152:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e156:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e160:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e164:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e168:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e16c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e170:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800e174:	6018      	str	r0, [r3, #0]
 800e176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e17a:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800e17e:	6019      	str	r1, [r3, #0]
 800e180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e184:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800e188:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e18a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e18e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e198:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800e19c:	6812      	ldr	r2, [r2, #0]
 800e19e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e1a2:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800e1a6:	6809      	ldr	r1, [r1, #0]
 800e1a8:	fb23 1202 	smlad	r2, r3, r2, r1
 800e1ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1b0:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800e1b4:	601a      	str	r2, [r3, #0]
  return(result);
 800e1b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1ba:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e1c4:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e1c8:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e1cc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e1d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1d4:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800e1d8:	6018      	str	r0, [r3, #0]
 800e1da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1de:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800e1e2:	6019      	str	r1, [r3, #0]
 800e1e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1e8:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800e1ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e1ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1f2:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e1fc:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800e200:	6812      	ldr	r2, [r2, #0]
 800e202:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e206:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 800e20a:	6809      	ldr	r1, [r1, #0]
 800e20c:	fb23 1202 	smlad	r2, r3, r2, r1
 800e210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e214:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800e218:	601a      	str	r2, [r3, #0]
  return(result);
 800e21a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e21e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800e228:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e22c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e230:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e234:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e236:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e23a:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	461a      	mov	r2, r3
 800e246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e24a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800e24e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e250:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e254:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	1d1a      	adds	r2, r3, #4
 800e25e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e262:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	601a      	str	r2, [r3, #0]
    return (val);
 800e26a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e26e:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800e272:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800e274:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800e278:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e27c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e280:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800e284:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e288:	6019      	str	r1, [r3, #0]
 800e28a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e28e:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800e292:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e298:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e2a2:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 800e2a6:	6812      	ldr	r2, [r2, #0]
 800e2a8:	fa23 f282 	sxtab16	r2, r3, r2
 800e2ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2b0:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800e2b4:	601a      	str	r2, [r3, #0]
  return(result);
 800e2b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2ba:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800e2c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2c8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2cc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e2d0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e2d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2d6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2e6:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800e2ea:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e2ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2f0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	1d1a      	adds	r2, r3, #4
 800e2fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2fe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	601a      	str	r2, [r3, #0]
    return (val);
 800e306:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e30a:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800e30e:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800e310:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800e314:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e318:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e31c:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e326:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e32a:	2208      	movs	r2, #8
 800e32c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e32e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e332:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e336:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e33a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800e33e:	6812      	ldr	r2, [r2, #0]
 800e340:	f002 021f 	and.w	r2, r2, #31
 800e344:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e346:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e34a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d105      	bne.n	800e360 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 800e354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e358:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	e00b      	b.n	800e378 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e360:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e364:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800e368:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e36c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e370:	6812      	ldr	r2, [r2, #0]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	fa62 f303 	ror.w	r3, r2, r3
 800e378:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e37c:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800e380:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e384:	6011      	str	r1, [r2, #0]
 800e386:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e38a:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800e38e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e390:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e394:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e39e:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800e3a2:	6812      	ldr	r2, [r2, #0]
 800e3a4:	fa23 f282 	sxtab16	r2, r3, r2
 800e3a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3ac:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800e3b0:	601a      	str	r2, [r3, #0]
  return(result);
 800e3b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3b6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e3c0:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e3c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3c8:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800e3cc:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e3d0:	6019      	str	r1, [r3, #0]
 800e3d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3d6:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800e3da:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e3dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3e0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e3ea:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800e3ee:	6812      	ldr	r2, [r2, #0]
 800e3f0:	fa23 f282 	sxtab16	r2, r3, r2
 800e3f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3f8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800e3fc:	601a      	str	r2, [r3, #0]
  return(result);
 800e3fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e402:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e40c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e410:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e414:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e418:	601a      	str	r2, [r3, #0]
 800e41a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e41e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e422:	2208      	movs	r2, #8
 800e424:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e426:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e42a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e42e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e432:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 800e436:	6812      	ldr	r2, [r2, #0]
 800e438:	f002 021f 	and.w	r2, r2, #31
 800e43c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e43e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e442:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d105      	bne.n	800e458 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 800e44c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e450:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	e00b      	b.n	800e470 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e45c:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800e460:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e464:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e468:	6812      	ldr	r2, [r2, #0]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	fa62 f303 	ror.w	r3, r2, r3
 800e470:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e474:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800e478:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e47c:	6011      	str	r1, [r2, #0]
 800e47e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e482:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800e486:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e488:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e48c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e496:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800e49a:	6812      	ldr	r2, [r2, #0]
 800e49c:	fa23 f282 	sxtab16	r2, r3, r2
 800e4a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4a4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800e4a8:	601a      	str	r2, [r3, #0]
  return(result);
 800e4aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4ae:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e4b8:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e4bc:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e4c0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e4c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4c8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800e4cc:	6018      	str	r0, [r3, #0]
 800e4ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4d2:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800e4d6:	6019      	str	r1, [r3, #0]
 800e4d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4dc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800e4e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e4e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4e6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e4f0:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800e4f4:	6812      	ldr	r2, [r2, #0]
 800e4f6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e4fa:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 800e4fe:	6809      	ldr	r1, [r1, #0]
 800e500:	fb23 1202 	smlad	r2, r3, r2, r1
 800e504:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e508:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800e50c:	601a      	str	r2, [r3, #0]
  return(result);
 800e50e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e512:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e51c:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e520:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e524:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e528:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e52c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800e530:	6018      	str	r0, [r3, #0]
 800e532:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e536:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800e53a:	6019      	str	r1, [r3, #0]
 800e53c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e540:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e544:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e546:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e54a:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e554:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 800e558:	6812      	ldr	r2, [r2, #0]
 800e55a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e55e:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800e562:	6809      	ldr	r1, [r1, #0]
 800e564:	fb23 1202 	smlad	r2, r3, r2, r1
 800e568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e56c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800e570:	601a      	str	r2, [r3, #0]
  return(result);
 800e572:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e576:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800e580:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e584:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e588:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e58c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e58e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e592:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	461a      	mov	r2, r3
 800e59e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5a2:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800e5a6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e5a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5ac:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	1d1a      	adds	r2, r3, #4
 800e5b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5ba:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	601a      	str	r2, [r3, #0]
    return (val);
 800e5c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5c6:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800e5ca:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800e5cc:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800e5d0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e5d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5d8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e5dc:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e5e0:	6019      	str	r1, [r3, #0]
 800e5e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5e6:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800e5ea:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e5ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5f0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e5fa:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800e5fe:	6812      	ldr	r2, [r2, #0]
 800e600:	fa23 f282 	sxtab16	r2, r3, r2
 800e604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e608:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800e60c:	601a      	str	r2, [r3, #0]
  return(result);
 800e60e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e612:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800e61c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e620:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e624:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e628:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e62a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e62e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	461a      	mov	r2, r3
 800e63a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e63e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800e642:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e644:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e648:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	1d1a      	adds	r2, r3, #4
 800e652:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e656:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	601a      	str	r2, [r3, #0]
    return (val);
 800e65e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e662:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800e666:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800e668:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800e66c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e674:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800e678:	601a      	str	r2, [r3, #0]
 800e67a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e67e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e682:	2208      	movs	r2, #8
 800e684:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e68a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e68e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e692:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 800e696:	6812      	ldr	r2, [r2, #0]
 800e698:	f002 021f 	and.w	r2, r2, #31
 800e69c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e69e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6a2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d105      	bne.n	800e6b8 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 800e6ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6b0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	e00b      	b.n	800e6d0 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e6b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6bc:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800e6c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6c4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e6c8:	6812      	ldr	r2, [r2, #0]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	fa62 f303 	ror.w	r3, r2, r3
 800e6d0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6d4:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800e6d8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e6dc:	6011      	str	r1, [r2, #0]
 800e6de:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6e2:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800e6e6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e6e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6ec:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6f6:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800e6fa:	6812      	ldr	r2, [r2, #0]
 800e6fc:	fa23 f282 	sxtab16	r2, r3, r2
 800e700:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e704:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800e708:	601a      	str	r2, [r3, #0]
  return(result);
 800e70a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e70e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e718:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e71c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e720:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800e724:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e728:	6019      	str	r1, [r3, #0]
 800e72a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e72e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800e732:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e738:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e742:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800e746:	6812      	ldr	r2, [r2, #0]
 800e748:	fa23 f282 	sxtab16	r2, r3, r2
 800e74c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e750:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800e754:	601a      	str	r2, [r3, #0]
  return(result);
 800e756:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e75a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e764:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e768:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e76c:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e776:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e77a:	2208      	movs	r2, #8
 800e77c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e77e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e782:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e786:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e78a:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 800e78e:	6812      	ldr	r2, [r2, #0]
 800e790:	f002 021f 	and.w	r2, r2, #31
 800e794:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e796:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e79a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d105      	bne.n	800e7b0 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 800e7a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7a8:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	e00b      	b.n	800e7c8 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e7b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7b4:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 800e7b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7bc:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e7c0:	6812      	ldr	r2, [r2, #0]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	fa62 f303 	ror.w	r3, r2, r3
 800e7c8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e7cc:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 800e7d0:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e7d4:	6011      	str	r1, [r2, #0]
 800e7d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e7da:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800e7de:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e7e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7e4:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e7ee:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800e7f2:	6812      	ldr	r2, [r2, #0]
 800e7f4:	fa23 f282 	sxtab16	r2, r3, r2
 800e7f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7fc:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800e800:	601a      	str	r2, [r3, #0]
  return(result);
 800e802:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e806:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e810:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e814:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e818:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e81c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e820:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e824:	6018      	str	r0, [r3, #0]
 800e826:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e82a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800e82e:	6019      	str	r1, [r3, #0]
 800e830:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e834:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800e838:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e83a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e83e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e848:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800e84c:	6812      	ldr	r2, [r2, #0]
 800e84e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e852:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 800e856:	6809      	ldr	r1, [r1, #0]
 800e858:	fb23 1202 	smlad	r2, r3, r2, r1
 800e85c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e860:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800e864:	601a      	str	r2, [r3, #0]
  return(result);
 800e866:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e86a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e874:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e878:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e87c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e884:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800e888:	6018      	str	r0, [r3, #0]
 800e88a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e88e:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800e892:	6019      	str	r1, [r3, #0]
 800e894:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e898:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800e89c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e89e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8a2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e8ac:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 800e8b0:	6812      	ldr	r2, [r2, #0]
 800e8b2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e8b6:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 800e8ba:	6809      	ldr	r1, [r1, #0]
 800e8bc:	fb23 1202 	smlad	r2, r3, r2, r1
 800e8c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8c4:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800e8c8:	601a      	str	r2, [r3, #0]
  return(result);
 800e8ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8ce:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800e8d8:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800e8dc:	3310      	adds	r3, #16
 800e8de:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800e8e2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800e8e6:	3b0f      	subs	r3, #15
 800e8e8:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	f6ff a943 	blt.w	800db78 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800e8f2:	e03f      	b.n	800e974 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800e8f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8f8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f993 3000 	ldrsb.w	r3, [r3]
 800e902:	461a      	mov	r2, r3
 800e904:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800e908:	4413      	add	r3, r2
 800e90a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800e90e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e912:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f993 3000 	ldrsb.w	r3, [r3]
 800e91c:	461a      	mov	r2, r3
 800e91e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800e922:	4413      	add	r3, r2
 800e924:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 800e928:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800e92c:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800e930:	fb02 f303 	mul.w	r3, r2, r3
 800e934:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e938:	4413      	add	r3, r2
 800e93a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 800e93e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e942:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	1c5a      	adds	r2, r3, #1
 800e94a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e94e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e952:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800e954:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e958:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	1c5a      	adds	r2, r3, #1
 800e960:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e964:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e968:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800e96a:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800e96e:	3301      	adds	r3, #1
 800e970:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800e974:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800e978:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800e97c:	429a      	cmp	r2, r3
 800e97e:	dbb9      	blt.n	800e8f4 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 800e980:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e984:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800e988:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e992:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800e996:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800e99a:	601a      	str	r2, [r3, #0]
 800e99c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9a0:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800e9a4:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800e9a8:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e9aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9ae:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e9b8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e9bc:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 800e9c0:	6812      	ldr	r2, [r2, #0]
 800e9c2:	409a      	lsls	r2, r3
 800e9c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9c8:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800e9cc:	601a      	str	r2, [r3, #0]
 800e9ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9d2:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800e9d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e9da:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 800e9de:	6812      	ldr	r2, [r2, #0]
 800e9e0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800e9e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9e6:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800e9ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e9f8:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800e9fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea00:	461a      	mov	r2, r3
 800ea02:	2300      	movs	r3, #0
 800ea04:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ea08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea10:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ea14:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 800ea18:	6809      	ldr	r1, [r1, #0]
 800ea1a:	17c8      	asrs	r0, r1, #31
 800ea1c:	6139      	str	r1, [r7, #16]
 800ea1e:	6178      	str	r0, [r7, #20]
 800ea20:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ea24:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 800ea28:	6809      	ldr	r1, [r1, #0]
 800ea2a:	17c8      	asrs	r0, r1, #31
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800ea34:	4631      	mov	r1, r6
 800ea36:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ea3a:	4650      	mov	r0, sl
 800ea3c:	fb00 f001 	mul.w	r0, r0, r1
 800ea40:	4659      	mov	r1, fp
 800ea42:	462c      	mov	r4, r5
 800ea44:	fb04 f101 	mul.w	r1, r4, r1
 800ea48:	4401      	add	r1, r0
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	4654      	mov	r4, sl
 800ea4e:	fba0 8904 	umull	r8, r9, r0, r4
 800ea52:	4449      	add	r1, r9
 800ea54:	4689      	mov	r9, r1
 800ea56:	eb12 0108 	adds.w	r1, r2, r8
 800ea5a:	6039      	str	r1, [r7, #0]
 800ea5c:	eb43 0309 	adc.w	r3, r3, r9
 800ea60:	607b      	str	r3, [r7, #4]
 800ea62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea66:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ea6a:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800ea6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ea76:	f04f 0200 	mov.w	r2, #0
 800ea7a:	f04f 0300 	mov.w	r3, #0
 800ea7e:	0fc2      	lsrs	r2, r0, #31
 800ea80:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ea84:	17cb      	asrs	r3, r1, #31
 800ea86:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ea8a:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 800ea8e:	4613      	mov	r3, r2
 800ea90:	600b      	str	r3, [r1, #0]
    return result;
 800ea92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea96:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800ea9a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ea9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaa0:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	dc06      	bgt.n	800eab8 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 800eaaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaae:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	425b      	negs	r3, r3
 800eab6:	e000      	b.n	800eaba <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 800eab8:	2300      	movs	r3, #0
 800eaba:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eabe:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 800eac2:	6011      	str	r1, [r2, #0]
 800eac4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eac8:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800eacc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800eace:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ead2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800ead6:	2200      	movs	r2, #0
 800ead8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800eada:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eade:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800eae2:	2201      	movs	r2, #1
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	409a      	lsls	r2, r3
 800eae8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaec:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800eaf0:	3a01      	subs	r2, #1
 800eaf2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800eaf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaf8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800eafc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb00:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800eb04:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb08:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800eb0c:	6809      	ldr	r1, [r1, #0]
 800eb0e:	6812      	ldr	r2, [r2, #0]
 800eb10:	400a      	ands	r2, r1
 800eb12:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800eb14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb18:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb1c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb20:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800eb24:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb28:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800eb2c:	6809      	ldr	r1, [r1, #0]
 800eb2e:	6812      	ldr	r2, [r2, #0]
 800eb30:	fa41 f202 	asr.w	r2, r1, r2
 800eb34:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800eb36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb3a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eb3e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb42:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800eb46:	6812      	ldr	r2, [r2, #0]
 800eb48:	1052      	asrs	r2, r2, #1
 800eb4a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800eb4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb50:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	da0a      	bge.n	800eb70 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 800eb5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb5e:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eb62:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb66:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 800eb6a:	6812      	ldr	r2, [r2, #0]
 800eb6c:	3201      	adds	r2, #1
 800eb6e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800eb70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb74:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800eb78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb7c:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eb80:	6812      	ldr	r2, [r2, #0]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	dd0a      	ble.n	800eb9e <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 800eb88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb8c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb90:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb94:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 800eb98:	6812      	ldr	r2, [r2, #0]
 800eb9a:	3201      	adds	r2, #1
 800eb9c:	601a      	str	r2, [r3, #0]
    return result;
 800eb9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eba2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eba6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800eba8:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800ebaa:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 800ebae:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ebb2:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800ebbc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ebc0:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	bfb8      	it	lt
 800ebc8:	4613      	movlt	r3, r2
 800ebca:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 800ebce:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ebd2:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	bfa8      	it	ge
 800ebda:	4613      	movge	r3, r2
 800ebdc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 800ebe0:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800ebe4:	b25a      	sxtb	r2, r3
 800ebe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ebea:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ec00:	4770      	bx	lr
 800ec02:	0000      	movs	r0, r0
 800ec04:	0000      	movs	r0, r0
	...

0800ec08 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800ec08:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ec0c:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 800ec16:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 800ec1a:	6020      	str	r0, [r4, #0]
 800ec1c:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 800ec20:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 800ec24:	6001      	str	r1, [r0, #0]
 800ec26:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800ec2a:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 800ec2e:	600a      	str	r2, [r1, #0]
 800ec30:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800ec34:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800ec38:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800ec40:	fa02 f303 	lsl.w	r3, r2, r3
 800ec44:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 800ec54:	f004 b863 	b.w	8012d1e <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800ec58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec5c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 800ec68:	2301      	movs	r3, #1
 800ec6a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ec6e:	e015      	b.n	800ec9c <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 800ec70:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800ec74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec78:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4413      	add	r3, r2
 800ec80:	f993 2000 	ldrsb.w	r2, [r3]
 800ec84:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	bfb8      	it	lt
 800ec8c:	4613      	movlt	r3, r2
 800ec8e:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 800ec92:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800ec96:	3301      	adds	r3, #1
 800ec98:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ec9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eca0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800eca4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	dbe0      	blt.n	800ec70 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 800ecba:	2300      	movs	r3, #0
 800ecbc:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ecc0:	f001 ba24 	b.w	801010c <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 800ecc4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800ecc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eccc:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	f993 3000 	ldrsb.w	r3, [r3]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800ece4:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800ece8:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800ecec:	429a      	cmp	r2, r3
 800ecee:	f2c1 8208 	blt.w	8010102 <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800ecf2:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800ecf6:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800ecfa:	fb03 f202 	mul.w	r2, r3, r2
 800ecfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed02:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ed06:	601a      	str	r2, [r3, #0]
 800ed08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed0c:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800ed10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed14:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ed1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed20:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ed24:	2300      	movs	r3, #0
 800ed26:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ed28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ed2c:	f04f 0300 	mov.w	r3, #0
 800ed30:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800ed34:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ed38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed3c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	0fdb      	lsrs	r3, r3, #31
 800ed44:	b2da      	uxtb	r2, r3
 800ed46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	0fdb      	lsrs	r3, r3, #31
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	4053      	eors	r3, r2
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d012      	beq.n	800ed82 <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 800ed5c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	2100      	movs	r1, #0
 800ed66:	f1d2 0001 	rsbs	r0, r2, #1
 800ed6a:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 800ed6e:	eb61 0303 	sbc.w	r3, r1, r3
 800ed72:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800ed76:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800ed7a:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800ed7e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ed82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed86:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	17da      	asrs	r2, r3, #31
 800ed8e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800ed92:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 800ed96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	17da      	asrs	r2, r3, #31
 800eda2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800eda6:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 800edaa:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800edae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800edb2:	460b      	mov	r3, r1
 800edb4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800edb8:	fb02 f203 	mul.w	r2, r2, r3
 800edbc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800edc0:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 800edc4:	e9c4 0100 	strd	r0, r1, [r4]
 800edc8:	4601      	mov	r1, r0
 800edca:	fb01 f303 	mul.w	r3, r1, r3
 800edce:	4413      	add	r3, r2
 800edd0:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800edd4:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 800edd8:	fba2 1201 	umull	r1, r2, r2, r1
 800eddc:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 800ede0:	460a      	mov	r2, r1
 800ede2:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 800ede6:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 800edea:	4413      	add	r3, r2
 800edec:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800edf0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800edfc:	1851      	adds	r1, r2, r1
 800edfe:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800ee02:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800ee06:	414b      	adcs	r3, r1
 800ee08:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800ee0c:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800ee10:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800ee14:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ee18:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800ee1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	da0a      	bge.n	800ee3a <arm_softmax_s8+0x232>
 800ee24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee28:	1851      	adds	r1, r2, r1
 800ee2a:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800ee2e:	f143 0300 	adc.w	r3, r3, #0
 800ee32:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800ee36:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800ee3a:	f04f 0000 	mov.w	r0, #0
 800ee3e:	f04f 0100 	mov.w	r1, #0
 800ee42:	0fd0      	lsrs	r0, r2, #31
 800ee44:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ee48:	17d9      	asrs	r1, r3, #31
 800ee4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee4e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ee52:	4603      	mov	r3, r0
 800ee54:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ee56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee5a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800ee5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ee66:	6812      	ldr	r2, [r2, #0]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d10e      	bne.n	800ee8c <arm_softmax_s8+0x284>
 800ee6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee72:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee7c:	d106      	bne.n	800ee8c <arm_softmax_s8+0x284>
        result = Q31_MAX;
 800ee7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee82:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ee86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee8a:	6013      	str	r3, [r2, #0]
    return result;
 800ee8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 800eea0:	2318      	movs	r3, #24
 800eea2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800eea6:	2201      	movs	r2, #1
 800eea8:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800eeac:	fa02 f303 	lsl.w	r3, r2, r3
 800eeb0:	1e5a      	subs	r2, r3, #1
 800eeb2:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800eeb6:	ea02 0103 	and.w	r1, r2, r3
 800eeba:	2201      	movs	r2, #1
 800eebc:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800eec0:	fa02 f303 	lsl.w	r3, r2, r3
 800eec4:	1acb      	subs	r3, r1, r3
 800eec6:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 800eeca:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 800eece:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800eed8:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 800eedc:	015b      	lsls	r3, r3, #5
 800eede:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800eee2:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800eee6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800eeea:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800eeee:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800eef2:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 800eefc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ef00:	f04f 0300 	mov.w	r3, #0
 800ef04:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800ef08:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ef0c:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800ef10:	0fdb      	lsrs	r3, r3, #31
 800ef12:	b2da      	uxtb	r2, r3
 800ef14:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800ef18:	0fdb      	lsrs	r3, r3, #31
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	4053      	eors	r3, r2
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d012      	beq.n	800ef4a <arm_softmax_s8+0x342>
        mult = 1 - mult;
 800ef24:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ef28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	f1d2 0001 	rsbs	r0, r2, #1
 800ef32:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 800ef36:	eb61 0303 	sbc.w	r3, r1, r3
 800ef3a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800ef3e:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800ef42:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800ef46:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ef4a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800ef4e:	17da      	asrs	r2, r3, #31
 800ef50:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800ef54:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 800ef58:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800ef5c:	17da      	asrs	r2, r3, #31
 800ef5e:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 800ef62:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 800ef66:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800ef6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef6e:	460b      	mov	r3, r1
 800ef70:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800ef74:	fb02 f203 	mul.w	r2, r2, r3
 800ef78:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800ef7c:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 800ef80:	e9c4 0100 	strd	r0, r1, [r4]
 800ef84:	4601      	mov	r1, r0
 800ef86:	fb01 f303 	mul.w	r3, r1, r3
 800ef8a:	4413      	add	r3, r2
 800ef8c:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800ef90:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 800ef94:	fba2 8901 	umull	r8, r9, r2, r1
 800ef98:	444b      	add	r3, r9
 800ef9a:	4699      	mov	r9, r3
 800ef9c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	eb12 0108 	adds.w	r1, r2, r8
 800efa8:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 800efac:	eb43 0309 	adc.w	r3, r3, r9
 800efb0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800efb4:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800efb8:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800efbc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800efc0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800efc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	da0a      	bge.n	800efe2 <arm_softmax_s8+0x3da>
 800efcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efd0:	1851      	adds	r1, r2, r1
 800efd2:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 800efd6:	f143 0300 	adc.w	r3, r3, #0
 800efda:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800efde:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800efe2:	f04f 0000 	mov.w	r0, #0
 800efe6:	f04f 0100 	mov.w	r1, #0
 800efea:	0fd0      	lsrs	r0, r2, #31
 800efec:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800eff0:	17d9      	asrs	r1, r3, #31
 800eff2:	4602      	mov	r2, r0
 800eff4:	460b      	mov	r3, r1
 800eff6:	4613      	mov	r3, r2
 800eff8:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800effc:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800f000:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800f004:	429a      	cmp	r2, r3
 800f006:	d108      	bne.n	800f01a <arm_softmax_s8+0x412>
 800f008:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800f00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f010:	d103      	bne.n	800f01a <arm_softmax_s8+0x412>
        result = Q31_MAX;
 800f012:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f016:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 800f01a:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 800f01e:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800f022:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f026:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 800f02a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f02e:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 800f032:	2300      	movs	r3, #0
 800f034:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 800f038:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f03c:	f04f 0300 	mov.w	r3, #0
 800f040:	f607 1128 	addw	r1, r7, #2344	; 0x928
 800f044:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f048:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f04c:	0fdb      	lsrs	r3, r3, #31
 800f04e:	b2da      	uxtb	r2, r3
 800f050:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f054:	0fdb      	lsrs	r3, r3, #31
 800f056:	b2db      	uxtb	r3, r3
 800f058:	4053      	eors	r3, r2
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d012      	beq.n	800f086 <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 800f060:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f068:	2100      	movs	r1, #0
 800f06a:	f1d2 0001 	rsbs	r0, r2, #1
 800f06e:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 800f072:	eb61 0303 	sbc.w	r3, r1, r3
 800f076:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800f07a:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800f07e:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800f082:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f086:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f08a:	17da      	asrs	r2, r3, #31
 800f08c:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800f090:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 800f094:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f098:	17da      	asrs	r2, r3, #31
 800f09a:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 800f09e:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 800f0a2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f0a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 800f0b0:	fb02 f203 	mul.w	r2, r2, r3
 800f0b4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800f0b8:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 800f0bc:	e9c4 0100 	strd	r0, r1, [r4]
 800f0c0:	4601      	mov	r1, r0
 800f0c2:	fb01 f303 	mul.w	r3, r1, r3
 800f0c6:	4413      	add	r3, r2
 800f0c8:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800f0cc:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800f0d0:	fba2 ab01 	umull	sl, fp, r2, r1
 800f0d4:	445b      	add	r3, fp
 800f0d6:	469b      	mov	fp, r3
 800f0d8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e0:	eb12 010a 	adds.w	r1, r2, sl
 800f0e4:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 800f0e8:	eb43 030b 	adc.w	r3, r3, fp
 800f0ec:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800f0f0:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800f0f4:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800f0f8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f0fc:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f104:	2b00      	cmp	r3, #0
 800f106:	da0a      	bge.n	800f11e <arm_softmax_s8+0x516>
 800f108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f10c:	1851      	adds	r1, r2, r1
 800f10e:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 800f112:	f143 0300 	adc.w	r3, r3, #0
 800f116:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800f11a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800f11e:	f04f 0000 	mov.w	r0, #0
 800f122:	f04f 0100 	mov.w	r1, #0
 800f126:	0fd0      	lsrs	r0, r2, #31
 800f128:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f12c:	17d9      	asrs	r1, r3, #31
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	4613      	mov	r3, r2
 800f134:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f138:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 800f13c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f140:	429a      	cmp	r2, r3
 800f142:	d108      	bne.n	800f156 <arm_softmax_s8+0x54e>
 800f144:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f14c:	d103      	bne.n	800f156 <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 800f14e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f152:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 800f156:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 800f15a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f164:	2304      	movs	r3, #4
 800f166:	3b01      	subs	r3, #1
 800f168:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 800f16c:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 800f170:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800f174:	4013      	ands	r3, r2
 800f176:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 800f17a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800f17e:	109b      	asrs	r3, r3, #2
 800f180:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 800f184:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800f188:	105b      	asrs	r3, r3, #1
 800f18a:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 800f18e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800f192:	2b00      	cmp	r3, #0
 800f194:	da04      	bge.n	800f1a0 <arm_softmax_s8+0x598>
        threshold++;
 800f196:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800f19a:	3301      	adds	r3, #1
 800f19c:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 800f1a0:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 800f1a4:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	dd04      	ble.n	800f1b6 <arm_softmax_s8+0x5ae>
        result++;
 800f1ac:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 800f1b6:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 800f1ba:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f1be:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800f1c2:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800f1c6:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 800f1d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f1d4:	f04f 0300 	mov.w	r3, #0
 800f1d8:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f1dc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f1e0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f1e4:	0fdb      	lsrs	r3, r3, #31
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f1ec:	0fdb      	lsrs	r3, r3, #31
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	4053      	eors	r3, r2
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d012      	beq.n	800f21e <arm_softmax_s8+0x616>
        mult = 1 - mult;
 800f1f8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f200:	2100      	movs	r1, #0
 800f202:	f1d2 0001 	rsbs	r0, r2, #1
 800f206:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 800f20a:	eb61 0303 	sbc.w	r3, r1, r3
 800f20e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800f212:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800f216:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f21a:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 800f21e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f222:	17da      	asrs	r2, r3, #31
 800f224:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f228:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 800f22c:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f230:	17da      	asrs	r2, r3, #31
 800f232:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 800f236:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 800f23a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800f23e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f242:	460b      	mov	r3, r1
 800f244:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 800f248:	fb02 f203 	mul.w	r2, r2, r3
 800f24c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800f250:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 800f254:	e9cc 0100 	strd	r0, r1, [ip]
 800f258:	4601      	mov	r1, r0
 800f25a:	fb01 f303 	mul.w	r3, r1, r3
 800f25e:	4413      	add	r3, r2
 800f260:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800f264:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 800f268:	fba2 5601 	umull	r5, r6, r2, r1
 800f26c:	4433      	add	r3, r6
 800f26e:	461e      	mov	r6, r3
 800f270:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f278:	1951      	adds	r1, r2, r5
 800f27a:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 800f27e:	4173      	adcs	r3, r6
 800f280:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800f284:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800f288:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f28c:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 800f290:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	da0a      	bge.n	800f2b2 <arm_softmax_s8+0x6aa>
 800f29c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2a0:	1851      	adds	r1, r2, r1
 800f2a2:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 800f2a6:	f143 0300 	adc.w	r3, r3, #0
 800f2aa:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800f2ae:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800f2b2:	f04f 0000 	mov.w	r0, #0
 800f2b6:	f04f 0100 	mov.w	r1, #0
 800f2ba:	0fd0      	lsrs	r0, r2, #31
 800f2bc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f2c0:	17d9      	asrs	r1, r3, #31
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f2cc:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 800f2d0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d108      	bne.n	800f2ea <arm_softmax_s8+0x6e2>
 800f2d8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f2dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2e0:	d103      	bne.n	800f2ea <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 800f2e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f2e6:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 800f2ea:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f2ee:	4423      	add	r3, r4
 800f2f0:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 800f2fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f2fe:	f04f 0300 	mov.w	r3, #0
 800f302:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 800f306:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f30a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f30e:	0fdb      	lsrs	r3, r3, #31
 800f310:	b2da      	uxtb	r2, r3
 800f312:	2300      	movs	r3, #0
 800f314:	4053      	eors	r3, r2
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d012      	beq.n	800f342 <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 800f31c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f324:	2100      	movs	r1, #0
 800f326:	f1d2 0001 	rsbs	r0, r2, #1
 800f32a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 800f32e:	eb61 0303 	sbc.w	r3, r1, r3
 800f332:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800f336:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800f33a:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800f33e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f342:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f346:	17da      	asrs	r2, r3, #31
 800f348:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800f34c:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 800f350:	a3f0      	add	r3, pc, #960	; (adr r3, 800f714 <arm_softmax_s8+0xb0c>)
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 800f35a:	fb02 f001 	mul.w	r0, r2, r1
 800f35e:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 800f362:	fb01 f103 	mul.w	r1, r1, r3
 800f366:	4401      	add	r1, r0
 800f368:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 800f36c:	fba0 2302 	umull	r2, r3, r0, r2
 800f370:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800f374:	4613      	mov	r3, r2
 800f376:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 800f37a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800f37e:	18cb      	adds	r3, r1, r3
 800f380:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800f384:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38c:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800f390:	1851      	adds	r1, r2, r1
 800f392:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800f396:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 800f39a:	414b      	adcs	r3, r1
 800f39c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800f3a0:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800f3a4:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800f3a8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f3ac:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	da0a      	bge.n	800f3ce <arm_softmax_s8+0x7c6>
 800f3b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3bc:	1851      	adds	r1, r2, r1
 800f3be:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800f3c2:	f143 0300 	adc.w	r3, r3, #0
 800f3c6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800f3ca:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800f3ce:	f04f 0000 	mov.w	r0, #0
 800f3d2:	f04f 0100 	mov.w	r1, #0
 800f3d6:	0fd0      	lsrs	r0, r2, #31
 800f3d8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f3dc:	17d9      	asrs	r1, r3, #31
 800f3de:	4602      	mov	r2, r0
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f3e8:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800f3ec:	4bc6      	ldr	r3, [pc, #792]	; (800f708 <arm_softmax_s8+0xb00>)
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d108      	bne.n	800f404 <arm_softmax_s8+0x7fc>
 800f3f2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f3f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3fa:	d103      	bne.n	800f404 <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 800f3fc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f400:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 800f404:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f408:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f40c:	4413      	add	r3, r2
 800f40e:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f418:	2302      	movs	r3, #2
 800f41a:	3b01      	subs	r3, #1
 800f41c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 800f420:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 800f424:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800f428:	4013      	ands	r3, r2
 800f42a:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 800f42e:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 800f432:	105b      	asrs	r3, r3, #1
 800f434:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 800f438:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800f43c:	105b      	asrs	r3, r3, #1
 800f43e:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 800f442:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800f446:	2b00      	cmp	r3, #0
 800f448:	da04      	bge.n	800f454 <arm_softmax_s8+0x84c>
        threshold++;
 800f44a:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800f44e:	3301      	adds	r3, #1
 800f450:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 800f454:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 800f458:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800f45c:	429a      	cmp	r2, r3
 800f45e:	dd04      	ble.n	800f46a <arm_softmax_s8+0x862>
        result++;
 800f460:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800f464:	3301      	adds	r3, #1
 800f466:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 800f46a:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f46e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800f472:	4413      	add	r3, r2
 800f474:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 800f478:	2300      	movs	r3, #0
 800f47a:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 800f47e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f482:	f04f 0300 	mov.w	r3, #0
 800f486:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800f48a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f48e:	2200      	movs	r2, #0
 800f490:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800f494:	0fdb      	lsrs	r3, r3, #31
 800f496:	b2db      	uxtb	r3, r3
 800f498:	4053      	eors	r3, r2
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d012      	beq.n	800f4c6 <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 800f4a0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	f1d2 0001 	rsbs	r0, r2, #1
 800f4ae:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 800f4b2:	eb61 0303 	sbc.w	r3, r1, r3
 800f4b6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800f4ba:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800f4be:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800f4c2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f4c6:	a18c      	add	r1, pc, #560	; (adr r1, 800f6f8 <arm_softmax_s8+0xaf0>)
 800f4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4cc:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800f4d0:	17da      	asrs	r2, r3, #31
 800f4d2:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 800f4d6:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 800f4da:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800f4de:	fb03 f201 	mul.w	r2, r3, r1
 800f4e2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800f4e6:	fb00 f303 	mul.w	r3, r0, r3
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800f4f0:	fba0 1202 	umull	r1, r2, r0, r2
 800f4f4:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 800f4f8:	460a      	mov	r2, r1
 800f4fa:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 800f4fe:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800f502:	4413      	add	r3, r2
 800f504:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800f508:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f510:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800f514:	1851      	adds	r1, r2, r1
 800f516:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800f51a:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800f51e:	414b      	adcs	r3, r1
 800f520:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800f524:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800f528:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800f52c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f530:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	da0a      	bge.n	800f552 <arm_softmax_s8+0x94a>
 800f53c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f540:	1851      	adds	r1, r2, r1
 800f542:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 800f546:	f143 0300 	adc.w	r3, r3, #0
 800f54a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800f54e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800f552:	f04f 0000 	mov.w	r0, #0
 800f556:	f04f 0100 	mov.w	r1, #0
 800f55a:	0fd0      	lsrs	r0, r2, #31
 800f55c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f560:	17d9      	asrs	r1, r3, #31
 800f562:	4602      	mov	r2, r0
 800f564:	460b      	mov	r3, r1
 800f566:	4613      	mov	r3, r2
 800f568:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 800f56c:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 800f570:	4b66      	ldr	r3, [pc, #408]	; (800f70c <arm_softmax_s8+0xb04>)
 800f572:	4413      	add	r3, r2
 800f574:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 800f578:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f57c:	1c53      	adds	r3, r2, #1
 800f57e:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f582:	2301      	movs	r3, #1
 800f584:	fa03 f202 	lsl.w	r2, r3, r2
 800f588:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f58c:	4013      	ands	r3, r2
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d002      	beq.n	800f598 <arm_softmax_s8+0x990>
 800f592:	f04f 33ff 	mov.w	r3, #4294967295
 800f596:	e000      	b.n	800f59a <arm_softmax_s8+0x992>
 800f598:	2300      	movs	r3, #0
 800f59a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f59e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f5a2:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 800f5ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f5b0:	f04f 0300 	mov.w	r3, #0
 800f5b4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800f5b8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f5bc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f5c0:	0fdb      	lsrs	r3, r3, #31
 800f5c2:	b2da      	uxtb	r2, r3
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4053      	eors	r3, r2
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d012      	beq.n	800f5f4 <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 800f5ce:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	f1d2 0001 	rsbs	r0, r2, #1
 800f5dc:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 800f5e0:	eb61 0303 	sbc.w	r3, r1, r3
 800f5e4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800f5e8:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800f5ec:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800f5f0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f5f4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f5f8:	17da      	asrs	r2, r3, #31
 800f5fa:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800f5fe:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 800f602:	a33f      	add	r3, pc, #252	; (adr r3, 800f700 <arm_softmax_s8+0xaf8>)
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800f60c:	fb02 f001 	mul.w	r0, r2, r1
 800f610:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 800f614:	fb01 f103 	mul.w	r1, r1, r3
 800f618:	4401      	add	r1, r0
 800f61a:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 800f61e:	fba0 2302 	umull	r2, r3, r0, r2
 800f622:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800f626:	4613      	mov	r3, r2
 800f628:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800f62c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800f630:	18cb      	adds	r3, r1, r3
 800f632:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800f636:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800f642:	1851      	adds	r1, r2, r1
 800f644:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 800f648:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800f64c:	414b      	adcs	r3, r1
 800f64e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800f652:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800f656:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800f65a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f65e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	2b00      	cmp	r3, #0
 800f668:	da0a      	bge.n	800f680 <arm_softmax_s8+0xa78>
 800f66a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f66e:	1851      	adds	r1, r2, r1
 800f670:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800f674:	f143 0300 	adc.w	r3, r3, #0
 800f678:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800f67c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800f680:	f04f 0000 	mov.w	r0, #0
 800f684:	f04f 0100 	mov.w	r1, #0
 800f688:	0fd0      	lsrs	r0, r2, #31
 800f68a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f68e:	17d9      	asrs	r1, r3, #31
 800f690:	4602      	mov	r2, r0
 800f692:	460b      	mov	r3, r1
 800f694:	4613      	mov	r3, r2
 800f696:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f69a:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800f69e:	4b1c      	ldr	r3, [pc, #112]	; (800f710 <arm_softmax_s8+0xb08>)
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d108      	bne.n	800f6b6 <arm_softmax_s8+0xaae>
 800f6a4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f6ac:	d103      	bne.n	800f6b6 <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 800f6ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f6b2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 800f6b6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 800f6ba:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f6be:	ea02 0103 	and.w	r1, r2, r3
 800f6c2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f6c6:	43da      	mvns	r2, r3
 800f6c8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	404b      	eors	r3, r1
 800f6d0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 800f6d4:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f6d8:	1c53      	adds	r3, r2, #1
 800f6da:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f6de:	2301      	movs	r3, #1
 800f6e0:	fa03 f202 	lsl.w	r2, r3, r2
 800f6e4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d016      	beq.n	800f71c <arm_softmax_s8+0xb14>
 800f6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f2:	e014      	b.n	800f71e <arm_softmax_s8+0xb16>
 800f6f4:	f3af 8000 	nop.w
 800f6f8:	70f5a894 	.word	0x70f5a894
 800f6fc:	00000000 	.word	0x00000000
 800f700:	63afbe7b 	.word	0x63afbe7b
 800f704:	00000000 	.word	0x00000000
 800f708:	2aaaaaab 	.word	0x2aaaaaab
 800f70c:	70f5a894 	.word	0x70f5a894
 800f710:	63afbe7b 	.word	0x63afbe7b
 800f714:	2aaaaaab 	.word	0x2aaaaaab
 800f718:	00000000 	.word	0x00000000
 800f71c:	2300      	movs	r3, #0
 800f71e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f722:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f726:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 800f72a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f72e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f732:	2300      	movs	r3, #0
 800f734:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f73a:	f04f 0300 	mov.w	r3, #0
 800f73e:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 800f742:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f746:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f74a:	0fdb      	lsrs	r3, r3, #31
 800f74c:	b2da      	uxtb	r2, r3
 800f74e:	2300      	movs	r3, #0
 800f750:	4053      	eors	r3, r2
 800f752:	b2db      	uxtb	r3, r3
 800f754:	2b00      	cmp	r3, #0
 800f756:	d012      	beq.n	800f77e <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 800f758:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f760:	2100      	movs	r1, #0
 800f762:	f1d2 0001 	rsbs	r0, r2, #1
 800f766:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 800f76a:	eb61 0303 	sbc.w	r3, r1, r3
 800f76e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800f772:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800f776:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800f77a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f77e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f782:	17da      	asrs	r2, r3, #31
 800f784:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800f788:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 800f78c:	a3a8      	add	r3, pc, #672	; (adr r3, 800fa30 <arm_softmax_s8+0xe28>)
 800f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f792:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 800f796:	fb02 f001 	mul.w	r0, r2, r1
 800f79a:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800f79e:	fb01 f103 	mul.w	r1, r1, r3
 800f7a2:	4401      	add	r1, r0
 800f7a4:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 800f7a8:	fba0 2302 	umull	r2, r3, r0, r2
 800f7ac:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800f7b6:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800f7ba:	18cb      	adds	r3, r1, r3
 800f7bc:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800f7c0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c8:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800f7cc:	1851      	adds	r1, r2, r1
 800f7ce:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800f7d2:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800f7d6:	414b      	adcs	r3, r1
 800f7d8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800f7dc:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800f7e0:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800f7e4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f7e8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	da0a      	bge.n	800f80a <arm_softmax_s8+0xc02>
 800f7f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f7f8:	1851      	adds	r1, r2, r1
 800f7fa:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800f7fe:	f143 0300 	adc.w	r3, r3, #0
 800f802:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800f806:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800f80a:	f04f 0000 	mov.w	r0, #0
 800f80e:	f04f 0100 	mov.w	r1, #0
 800f812:	0fd0      	lsrs	r0, r2, #31
 800f814:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f818:	17d9      	asrs	r1, r3, #31
 800f81a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f81e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f822:	4603      	mov	r3, r0
 800f824:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f826:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 800f82a:	4b7f      	ldr	r3, [pc, #508]	; (800fa28 <arm_softmax_s8+0xe20>)
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d10b      	bne.n	800f848 <arm_softmax_s8+0xc40>
 800f830:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f838:	d106      	bne.n	800f848 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 800f83a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f83e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f842:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f846:	6013      	str	r3, [r2, #0]
    return result;
 800f848:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f84c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f850:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800f852:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f856:	ea02 0103 	and.w	r1, r2, r3
 800f85a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f85e:	43da      	mvns	r2, r3
 800f860:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f864:	4013      	ands	r3, r2
 800f866:	404b      	eors	r3, r1
 800f868:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 800f86c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f870:	1c53      	adds	r3, r2, #1
 800f872:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f876:	2301      	movs	r3, #1
 800f878:	fa03 f202 	lsl.w	r2, r3, r2
 800f87c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f880:	4013      	ands	r3, r2
 800f882:	2b00      	cmp	r3, #0
 800f884:	d002      	beq.n	800f88c <arm_softmax_s8+0xc84>
 800f886:	f04f 33ff 	mov.w	r3, #4294967295
 800f88a:	e000      	b.n	800f88e <arm_softmax_s8+0xc86>
 800f88c:	2300      	movs	r3, #0
 800f88e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f892:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f896:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800f89a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f89e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f8a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8a4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f8ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f8b0:	f04f 0300 	mov.w	r3, #0
 800f8b4:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 800f8b8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f8bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	0fdb      	lsrs	r3, r3, #31
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	4053      	eors	r3, r2
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d012      	beq.n	800f8fa <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 800f8d4:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8dc:	2100      	movs	r1, #0
 800f8de:	f1d2 0001 	rsbs	r0, r2, #1
 800f8e2:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 800f8e6:	eb61 0303 	sbc.w	r3, r1, r3
 800f8ea:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800f8ee:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800f8f2:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800f8f6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f8fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	17da      	asrs	r2, r3, #31
 800f906:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800f90a:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 800f90e:	a344      	add	r3, pc, #272	; (adr r3, 800fa20 <arm_softmax_s8+0xe18>)
 800f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f914:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 800f918:	fb02 f001 	mul.w	r0, r2, r1
 800f91c:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 800f920:	fb01 f103 	mul.w	r1, r1, r3
 800f924:	4401      	add	r1, r0
 800f926:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 800f92a:	fba0 2302 	umull	r2, r3, r0, r2
 800f92e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800f932:	4613      	mov	r3, r2
 800f934:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800f938:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800f93c:	18cb      	adds	r3, r1, r3
 800f93e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800f942:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94a:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800f94e:	1851      	adds	r1, r2, r1
 800f950:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 800f954:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800f958:	414b      	adcs	r3, r1
 800f95a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800f95e:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800f962:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800f966:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f96a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f972:	2b00      	cmp	r3, #0
 800f974:	da0a      	bge.n	800f98c <arm_softmax_s8+0xd84>
 800f976:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f97a:	1851      	adds	r1, r2, r1
 800f97c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800f980:	f143 0300 	adc.w	r3, r3, #0
 800f984:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800f988:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800f98c:	f04f 0000 	mov.w	r0, #0
 800f990:	f04f 0100 	mov.w	r1, #0
 800f994:	0fd0      	lsrs	r0, r2, #31
 800f996:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f99a:	17d9      	asrs	r1, r3, #31
 800f99c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9a0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f9a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	4b1e      	ldr	r3, [pc, #120]	; (800fa2c <arm_softmax_s8+0xe24>)
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d10e      	bne.n	800f9d6 <arm_softmax_s8+0xdce>
 800f9b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9c6:	d106      	bne.n	800f9d6 <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 800f9c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9cc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f9d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f9d4:	6013      	str	r3, [r2, #0]
    return result;
 800f9d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f9de:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 800f9e0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f9e4:	ea02 0103 	and.w	r1, r2, r3
 800f9e8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f9ec:	43da      	mvns	r2, r3
 800f9ee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	404b      	eors	r3, r1
 800f9f6:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 800f9fa:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f9fe:	1c53      	adds	r3, r2, #1
 800fa00:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fa04:	2301      	movs	r3, #1
 800fa06:	fa03 f202 	lsl.w	r2, r3, r2
 800fa0a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fa0e:	4013      	ands	r3, r2
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d011      	beq.n	800fa38 <arm_softmax_s8+0xe30>
 800fa14:	f04f 33ff 	mov.w	r3, #4294967295
 800fa18:	e00f      	b.n	800fa3a <arm_softmax_s8+0xe32>
 800fa1a:	bf00      	nop
 800fa1c:	f3af 8000 	nop.w
 800fa20:	2f16ac6c 	.word	0x2f16ac6c
 800fa24:	00000000 	.word	0x00000000
 800fa28:	4da2cbf2 	.word	0x4da2cbf2
 800fa2c:	2f16ac6c 	.word	0x2f16ac6c
 800fa30:	4da2cbf2 	.word	0x4da2cbf2
 800fa34:	00000000 	.word	0x00000000
 800fa38:	2300      	movs	r3, #0
 800fa3a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fa3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa42:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800fa46:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fa4a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fa4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa50:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fa54:	2300      	movs	r3, #0
 800fa56:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fa58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fa5c:	f04f 0300 	mov.w	r3, #0
 800fa60:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 800fa64:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fa68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	0fdb      	lsrs	r3, r3, #31
 800fa74:	b2da      	uxtb	r2, r3
 800fa76:	2300      	movs	r3, #0
 800fa78:	4053      	eors	r3, r2
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d012      	beq.n	800faa6 <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 800fa80:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	2100      	movs	r1, #0
 800fa8a:	f1d2 0001 	rsbs	r0, r2, #1
 800fa8e:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 800fa92:	eb61 0303 	sbc.w	r3, r1, r3
 800fa96:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800fa9a:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800fa9e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800faa2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800faa6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	17da      	asrs	r2, r3, #31
 800fab2:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800fab6:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 800faba:	a3ab      	add	r3, pc, #684	; (adr r3, 800fd68 <arm_softmax_s8+0x1160>)
 800fabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac0:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 800fac4:	fb02 f001 	mul.w	r0, r2, r1
 800fac8:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 800facc:	fb01 f103 	mul.w	r1, r1, r3
 800fad0:	4401      	add	r1, r0
 800fad2:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 800fad6:	fba0 2302 	umull	r2, r3, r0, r2
 800fada:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800fade:	4613      	mov	r3, r2
 800fae0:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 800fae4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800fae8:	18cb      	adds	r3, r1, r3
 800faea:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800faee:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf6:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800fafa:	1851      	adds	r1, r2, r1
 800fafc:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800fb00:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 800fb04:	414b      	adcs	r3, r1
 800fb06:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800fb0a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800fb0e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800fb12:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fb16:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800fb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	da0a      	bge.n	800fb38 <arm_softmax_s8+0xf30>
 800fb22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb26:	1851      	adds	r1, r2, r1
 800fb28:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800fb2c:	f143 0300 	adc.w	r3, r3, #0
 800fb30:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800fb34:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800fb38:	f04f 0000 	mov.w	r0, #0
 800fb3c:	f04f 0100 	mov.w	r1, #0
 800fb40:	0fd0      	lsrs	r0, r2, #31
 800fb42:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fb46:	17d9      	asrs	r1, r3, #31
 800fb48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb4c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fb50:	4603      	mov	r3, r0
 800fb52:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fb54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fb5c:	681a      	ldr	r2, [r3, #0]
 800fb5e:	4b80      	ldr	r3, [pc, #512]	; (800fd60 <arm_softmax_s8+0x1158>)
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d10e      	bne.n	800fb82 <arm_softmax_s8+0xf7a>
 800fb64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb72:	d106      	bne.n	800fb82 <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 800fb74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb78:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fb7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fb80:	6013      	str	r3, [r2, #0]
    return result;
 800fb82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800fb8a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 800fb8c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fb90:	ea02 0103 	and.w	r1, r2, r3
 800fb94:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fb98:	43da      	mvns	r2, r3
 800fb9a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fb9e:	4013      	ands	r3, r2
 800fba0:	404b      	eors	r3, r1
 800fba2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 800fba6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800fbaa:	1c53      	adds	r3, r2, #1
 800fbac:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	fa03 f202 	lsl.w	r2, r3, r2
 800fbb6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fbba:	4013      	ands	r3, r2
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d002      	beq.n	800fbc6 <arm_softmax_s8+0xfbe>
 800fbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc4:	e000      	b.n	800fbc8 <arm_softmax_s8+0xfc0>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fbcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbd0:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800fbd4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fbd8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fbda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbde:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fbe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fbea:	f04f 0300 	mov.w	r3, #0
 800fbee:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 800fbf2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fbf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	0fdb      	lsrs	r3, r3, #31
 800fc02:	b2da      	uxtb	r2, r3
 800fc04:	2300      	movs	r3, #0
 800fc06:	4053      	eors	r3, r2
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d012      	beq.n	800fc34 <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 800fc0e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc16:	2100      	movs	r1, #0
 800fc18:	f1d2 0001 	rsbs	r0, r2, #1
 800fc1c:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 800fc20:	eb61 0303 	sbc.w	r3, r1, r3
 800fc24:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800fc28:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800fc2c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800fc30:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fc34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	17da      	asrs	r2, r3, #31
 800fc40:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800fc44:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 800fc48:	a343      	add	r3, pc, #268	; (adr r3, 800fd58 <arm_softmax_s8+0x1150>)
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 800fc52:	fb02 f001 	mul.w	r0, r2, r1
 800fc56:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 800fc5a:	fb01 f103 	mul.w	r1, r1, r3
 800fc5e:	4401      	add	r1, r0
 800fc60:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800fc64:	fba0 2302 	umull	r2, r3, r0, r2
 800fc68:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800fc72:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800fc76:	18cb      	adds	r3, r1, r3
 800fc78:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800fc7c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc84:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800fc88:	1851      	adds	r1, r2, r1
 800fc8a:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 800fc8e:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800fc92:	414b      	adcs	r3, r1
 800fc94:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800fc98:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800fc9c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800fca0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fca4:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	da0a      	bge.n	800fcc6 <arm_softmax_s8+0x10be>
 800fcb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fcb4:	1851      	adds	r1, r2, r1
 800fcb6:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 800fcba:	f143 0300 	adc.w	r3, r3, #0
 800fcbe:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800fcc2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800fcc6:	f04f 0000 	mov.w	r0, #0
 800fcca:	f04f 0100 	mov.w	r1, #0
 800fcce:	0fd0      	lsrs	r0, r2, #31
 800fcd0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fcd4:	17d9      	asrs	r1, r3, #31
 800fcd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcda:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fcde:	4603      	mov	r3, r0
 800fce0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fce2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fce6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	4b1d      	ldr	r3, [pc, #116]	; (800fd64 <arm_softmax_s8+0x115c>)
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d10e      	bne.n	800fd10 <arm_softmax_s8+0x1108>
 800fcf2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd00:	d106      	bne.n	800fd10 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 800fd02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd06:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fd0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fd0e:	6013      	str	r3, [r2, #0]
    return result;
 800fd10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd18:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 800fd1a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fd1e:	ea02 0103 	and.w	r1, r2, r3
 800fd22:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fd26:	43da      	mvns	r2, r3
 800fd28:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fd2c:	4013      	ands	r3, r2
 800fd2e:	404b      	eors	r3, r1
 800fd30:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 800fd34:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800fd38:	1c53      	adds	r3, r2, #1
 800fd3a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fd3e:	2301      	movs	r3, #1
 800fd40:	fa03 f202 	lsl.w	r2, r3, r2
 800fd44:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fd48:	4013      	ands	r3, r2
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d010      	beq.n	800fd70 <arm_softmax_s8+0x1168>
 800fd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd52:	e00e      	b.n	800fd72 <arm_softmax_s8+0x116a>
 800fd54:	f3af 8000 	nop.w
 800fd58:	02582ab7 	.word	0x02582ab7
 800fd5c:	00000000 	.word	0x00000000
 800fd60:	1152aaa4 	.word	0x1152aaa4
 800fd64:	02582ab7 	.word	0x02582ab7
 800fd68:	1152aaa4 	.word	0x1152aaa4
 800fd6c:	00000000 	.word	0x00000000
 800fd70:	2300      	movs	r3, #0
 800fd72:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fd76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd7a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800fd7e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fd82:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fd84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd88:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fd90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fd94:	f04f 0300 	mov.w	r3, #0
 800fd98:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 800fd9c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fda0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fda4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	0fdb      	lsrs	r3, r3, #31
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	2300      	movs	r3, #0
 800fdb0:	4053      	eors	r3, r2
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d012      	beq.n	800fdde <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 800fdb8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	f1d2 0001 	rsbs	r0, r2, #1
 800fdc6:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 800fdca:	eb61 0303 	sbc.w	r3, r1, r3
 800fdce:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800fdd2:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800fdd6:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800fdda:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fdde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fde2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	17da      	asrs	r2, r3, #31
 800fdea:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800fdee:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 800fdf2:	4ad3      	ldr	r2, [pc, #844]	; (8010140 <arm_softmax_s8+0x1538>)
 800fdf4:	f04f 0300 	mov.w	r3, #0
 800fdf8:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 800fdfc:	fb02 f001 	mul.w	r0, r2, r1
 800fe00:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 800fe04:	fb01 f103 	mul.w	r1, r1, r3
 800fe08:	4401      	add	r1, r0
 800fe0a:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800fe0e:	fba0 2302 	umull	r2, r3, r0, r2
 800fe12:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800fe16:	4613      	mov	r3, r2
 800fe18:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800fe1c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800fe20:	18cb      	adds	r3, r1, r3
 800fe22:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800fe26:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fe2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2e:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800fe32:	1851      	adds	r1, r2, r1
 800fe34:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800fe38:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800fe3c:	414b      	adcs	r3, r1
 800fe3e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800fe42:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800fe46:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800fe4a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fe4e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fe52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	da0a      	bge.n	800fe70 <arm_softmax_s8+0x1268>
 800fe5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe5e:	1851      	adds	r1, r2, r1
 800fe60:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 800fe64:	f143 0300 	adc.w	r3, r3, #0
 800fe68:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800fe6c:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800fe70:	f04f 0000 	mov.w	r0, #0
 800fe74:	f04f 0100 	mov.w	r1, #0
 800fe78:	0fd0      	lsrs	r0, r2, #31
 800fe7a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fe7e:	17d9      	asrs	r1, r3, #31
 800fe80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe84:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800fe88:	4603      	mov	r3, r0
 800fe8a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fe8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	4baa      	ldr	r3, [pc, #680]	; (8010140 <arm_softmax_s8+0x1538>)
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d10e      	bne.n	800feba <arm_softmax_s8+0x12b2>
 800fe9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fea0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800feaa:	d106      	bne.n	800feba <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 800feac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feb0:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800feb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800feb8:	6013      	str	r3, [r2, #0]
    return result;
 800feba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800febe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800fec2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 800fec4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fec8:	ea02 0103 	and.w	r1, r2, r3
 800fecc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fed0:	43da      	mvns	r2, r3
 800fed2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fed6:	4013      	ands	r3, r2
 800fed8:	404b      	eors	r3, r1
 800feda:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 800fede:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800fee2:	1c53      	adds	r3, r2, #1
 800fee4:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fee8:	2301      	movs	r3, #1
 800feea:	fa03 f202 	lsl.w	r2, r3, r2
 800feee:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fef2:	4013      	ands	r3, r2
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d002      	beq.n	800fefe <arm_softmax_s8+0x12f6>
 800fef8:	f04f 33ff 	mov.w	r3, #4294967295
 800fefc:	e000      	b.n	800ff00 <arm_softmax_s8+0x12f8>
 800fefe:	2300      	movs	r3, #0
 800ff00:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800ff04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff08:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800ff0c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ff10:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ff12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff16:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ff1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ff22:	f04f 0300 	mov.w	r3, #0
 800ff26:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 800ff2a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ff2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	0fdb      	lsrs	r3, r3, #31
 800ff3a:	b2da      	uxtb	r2, r3
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	4053      	eors	r3, r2
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d012      	beq.n	800ff6c <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 800ff46:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	2100      	movs	r1, #0
 800ff50:	f1d2 0001 	rsbs	r0, r2, #1
 800ff54:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 800ff58:	eb61 0303 	sbc.w	r3, r1, r3
 800ff5c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800ff60:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800ff64:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800ff68:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ff6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff70:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	17da      	asrs	r2, r3, #31
 800ff78:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800ff7c:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 800ff80:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 800ff84:	f04f 0300 	mov.w	r3, #0
 800ff88:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 800ff8c:	fb02 f001 	mul.w	r0, r2, r1
 800ff90:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 800ff94:	fb01 f103 	mul.w	r1, r1, r3
 800ff98:	4401      	add	r1, r0
 800ff9a:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 800ff9e:	fba0 2302 	umull	r2, r3, r0, r2
 800ffa2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800ffac:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800ffb0:	18cb      	adds	r3, r1, r3
 800ffb2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800ffb6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ffba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbe:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 800ffc2:	1851      	adds	r1, r2, r1
 800ffc4:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800ffc8:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 800ffcc:	414b      	adcs	r3, r1
 800ffce:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800ffd2:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800ffd6:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800ffda:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ffde:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	da0a      	bge.n	8010000 <arm_softmax_s8+0x13f8>
 800ffea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ffee:	1851      	adds	r1, r2, r1
 800fff0:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 800fff4:	f143 0300 	adc.w	r3, r3, #0
 800fff8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800fffc:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8010000:	f04f 0000 	mov.w	r0, #0
 8010004:	f04f 0100 	mov.w	r1, #0
 8010008:	0fd0      	lsrs	r0, r2, #31
 801000a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801000e:	17d9      	asrs	r1, r3, #31
 8010010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010014:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8010018:	4603      	mov	r3, r0
 801001a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801001c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010020:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2bf2      	cmp	r3, #242	; 0xf2
 8010028:	d10e      	bne.n	8010048 <arm_softmax_s8+0x1440>
 801002a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801002e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010038:	d106      	bne.n	8010048 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 801003a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801003e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8010042:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010046:	6013      	str	r3, [r2, #0]
    return result;
 8010048:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801004c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8010050:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8010052:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010056:	ea02 0103 	and.w	r1, r2, r3
 801005a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801005e:	43da      	mvns	r2, r3
 8010060:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010064:	4013      	ands	r3, r2
 8010066:	404b      	eors	r3, r1
 8010068:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 801006c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8010070:	2b00      	cmp	r3, #0
 8010072:	d102      	bne.n	801007a <arm_softmax_s8+0x1472>
 8010074:	f04f 33ff 	mov.w	r3, #4294967295
 8010078:	e000      	b.n	801007c <arm_softmax_s8+0x1474>
 801007a:	2300      	movs	r3, #0
 801007c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8010080:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010084:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010088:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801008c:	43da      	mvns	r2, r3
 801008e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010092:	4013      	ands	r3, r2
 8010094:	404b      	eors	r3, r1
 8010096:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 801009a:	2300      	movs	r3, #0
 801009c:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 80100a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100a4:	3b01      	subs	r3, #1
 80100a6:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 80100aa:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80100ae:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80100b2:	4013      	ands	r3, r2
 80100b4:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 80100b8:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 80100bc:	131b      	asrs	r3, r3, #12
 80100be:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 80100c2:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80100c6:	105b      	asrs	r3, r3, #1
 80100c8:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 80100cc:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	da04      	bge.n	80100de <arm_softmax_s8+0x14d6>
        threshold++;
 80100d4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80100d8:	3301      	adds	r3, #1
 80100da:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 80100de:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 80100e2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80100e6:	429a      	cmp	r2, r3
 80100e8:	dd04      	ble.n	80100f4 <arm_softmax_s8+0x14ec>
        result++;
 80100ea:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80100ee:	3301      	adds	r3, #1
 80100f0:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 80100f4:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 80100f8:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 80100fc:	4413      	add	r3, r2
 80100fe:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 8010102:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8010106:	3301      	adds	r3, #1
 8010108:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801010c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010110:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8010114:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	429a      	cmp	r2, r3
 801011c:	f6fe add2 	blt.w	800ecc4 <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8010120:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8010124:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010128:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801012c:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 801012e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010132:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d103      	bne.n	8010144 <arm_softmax_s8+0x153c>
    return 32U;
 801013c:	2320      	movs	r3, #32
 801013e:	e009      	b.n	8010154 <arm_softmax_s8+0x154c>
 8010140:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 8010144:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010148:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	fab3 f383 	clz	r3, r3
 8010152:	b2db      	uxtb	r3, r3
 8010154:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8010158:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 801015c:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8010160:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 8010164:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8010168:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 801016c:	fa02 f303 	lsl.w	r3, r2, r3
 8010170:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8010174:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010178:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801017c:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 801017e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010182:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	17da      	asrs	r2, r3, #31
 801018a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 801018e:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8010192:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010196:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 801019a:	4602      	mov	r2, r0
 801019c:	18d3      	adds	r3, r2, r3
 801019e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80101a2:	460b      	mov	r3, r1
 80101a4:	f143 0300 	adc.w	r3, r3, #0
 80101a8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80101ac:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 80101b0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80101b4:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 80101b8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	db04      	blt.n	80101ce <arm_softmax_s8+0x15c6>
 80101c4:	f04f 0001 	mov.w	r0, #1
 80101c8:	f04f 0100 	mov.w	r1, #0
 80101cc:	e003      	b.n	80101d6 <arm_softmax_s8+0x15ce>
 80101ce:	f04f 30ff 	mov.w	r0, #4294967295
 80101d2:	f04f 31ff 	mov.w	r1, #4294967295
 80101d6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80101da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101de:	1884      	adds	r4, r0, r2
 80101e0:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 80101e4:	eb41 0303 	adc.w	r3, r1, r3
 80101e8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80101ec:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80101f0:	460b      	mov	r3, r1
 80101f2:	0fdb      	lsrs	r3, r3, #31
 80101f4:	2200      	movs	r2, #0
 80101f6:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 80101fa:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 80101fe:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8010202:	4602      	mov	r2, r0
 8010204:	189b      	adds	r3, r3, r2
 8010206:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 801020a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801020e:	460a      	mov	r2, r1
 8010210:	4153      	adcs	r3, r2
 8010212:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8010216:	f04f 0200 	mov.w	r2, #0
 801021a:	f04f 0300 	mov.w	r3, #0
 801021e:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8010222:	084a      	lsrs	r2, r1, #1
 8010224:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8010228:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801022c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8010230:	104b      	asrs	r3, r1, #1
 8010232:	4610      	mov	r0, r2
 8010234:	4619      	mov	r1, r3
 8010236:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801023a:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 801023e:	4603      	mov	r3, r0
 8010240:	6013      	str	r3, [r2, #0]
 8010242:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010246:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801024a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801024e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010256:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801025a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801025e:	2300      	movs	r3, #0
 8010260:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010266:	f04f 0300 	mov.w	r3, #0
 801026a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 801026e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010272:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010276:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	0fdb      	lsrs	r3, r3, #31
 801027e:	b2da      	uxtb	r2, r3
 8010280:	2301      	movs	r3, #1
 8010282:	4053      	eors	r3, r2
 8010284:	b2db      	uxtb	r3, r3
 8010286:	2b00      	cmp	r3, #0
 8010288:	d012      	beq.n	80102b0 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 801028a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010292:	2100      	movs	r1, #0
 8010294:	f1d2 0001 	rsbs	r0, r2, #1
 8010298:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 801029c:	eb61 0303 	sbc.w	r3, r1, r3
 80102a0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80102a4:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80102a8:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80102ac:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80102b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	17da      	asrs	r2, r3, #31
 80102bc:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80102c0:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 80102c4:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 80102c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102cc:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 80102d0:	fb02 f001 	mul.w	r0, r2, r1
 80102d4:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80102d8:	fb01 f103 	mul.w	r1, r1, r3
 80102dc:	4401      	add	r1, r0
 80102de:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 80102e2:	fba0 2302 	umull	r2, r3, r0, r2
 80102e6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80102ea:	4613      	mov	r3, r2
 80102ec:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 80102f0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80102f4:	18cb      	adds	r3, r1, r3
 80102f6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80102fa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80102fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010302:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8010306:	1851      	adds	r1, r2, r1
 8010308:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 801030c:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8010310:	414b      	adcs	r3, r1
 8010312:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8010316:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 801031a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 801031e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010322:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8010326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032a:	2b00      	cmp	r3, #0
 801032c:	da0a      	bge.n	8010344 <arm_softmax_s8+0x173c>
 801032e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010332:	1851      	adds	r1, r2, r1
 8010334:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8010338:	f143 0300 	adc.w	r3, r3, #0
 801033c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8010340:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8010344:	f04f 0000 	mov.w	r0, #0
 8010348:	f04f 0100 	mov.w	r1, #0
 801034c:	0fd0      	lsrs	r0, r2, #31
 801034e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010352:	17d9      	asrs	r1, r3, #31
 8010354:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010358:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801035c:	4603      	mov	r3, r0
 801035e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010360:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010364:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 801036e:	d10e      	bne.n	801038e <arm_softmax_s8+0x1786>
 8010370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010374:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801037e:	d106      	bne.n	801038e <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8010380:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010384:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010388:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801038c:	6013      	str	r3, [r2, #0]
    return result;
 801038e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010392:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8010396:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8010398:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801039c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80103a0:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 80103a4:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 80103a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103aa:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80103ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80103b2:	6013      	str	r3, [r2, #0]
 80103b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103b8:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80103bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	6013      	str	r3, [r2, #0]
 80103c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103cc:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 80103d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80103dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103e0:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80103e4:	2300      	movs	r3, #0
 80103e6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80103e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80103ec:	f04f 0300 	mov.w	r3, #0
 80103f0:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80103f4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80103f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103fc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	0fdb      	lsrs	r3, r3, #31
 8010404:	b2da      	uxtb	r2, r3
 8010406:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801040a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	0fdb      	lsrs	r3, r3, #31
 8010412:	b2db      	uxtb	r3, r3
 8010414:	4053      	eors	r3, r2
 8010416:	b2db      	uxtb	r3, r3
 8010418:	2b00      	cmp	r3, #0
 801041a:	d012      	beq.n	8010442 <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 801041c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8010420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010424:	2100      	movs	r1, #0
 8010426:	f1d2 0001 	rsbs	r0, r2, #1
 801042a:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 801042e:	eb61 0303 	sbc.w	r3, r1, r3
 8010432:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8010436:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 801043a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 801043e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010442:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010446:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	17da      	asrs	r2, r3, #31
 801044e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8010452:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 8010456:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801045a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	17da      	asrs	r2, r3, #31
 8010462:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8010466:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 801046a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801046e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010472:	460b      	mov	r3, r1
 8010474:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8010478:	fb02 f203 	mul.w	r2, r2, r3
 801047c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8010480:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8010484:	e9c4 0100 	strd	r0, r1, [r4]
 8010488:	4601      	mov	r1, r0
 801048a:	fb01 f303 	mul.w	r3, r1, r3
 801048e:	4413      	add	r3, r2
 8010490:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8010494:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8010498:	fba2 1201 	umull	r1, r2, r2, r1
 801049c:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 80104a0:	460a      	mov	r2, r1
 80104a2:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80104a6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80104aa:	4413      	add	r3, r2
 80104ac:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80104b0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80104b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80104bc:	1851      	adds	r1, r2, r1
 80104be:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 80104c2:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 80104c6:	414b      	adcs	r3, r1
 80104c8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80104cc:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 80104d0:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80104d4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80104d8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	da0a      	bge.n	80104fa <arm_softmax_s8+0x18f2>
 80104e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104e8:	1851      	adds	r1, r2, r1
 80104ea:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80104ee:	f143 0300 	adc.w	r3, r3, #0
 80104f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80104f6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80104fa:	f04f 0000 	mov.w	r0, #0
 80104fe:	f04f 0100 	mov.w	r1, #0
 8010502:	0fd0      	lsrs	r0, r2, #31
 8010504:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010508:	17d9      	asrs	r1, r3, #31
 801050a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801050e:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8010512:	4603      	mov	r3, r0
 8010514:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010516:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801051a:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801051e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010522:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010526:	6812      	ldr	r2, [r2, #0]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	429a      	cmp	r2, r3
 801052c:	d10e      	bne.n	801054c <arm_softmax_s8+0x1944>
 801052e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010532:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801053c:	d106      	bne.n	801054c <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 801053e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010542:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8010546:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801054a:	6013      	str	r3, [r2, #0]
    return result;
 801054c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010550:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8010554:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010556:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801055a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	1a99      	subs	r1, r3, r2
 8010562:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010566:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 801056a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801056e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	6013      	str	r3, [r2, #0]
 8010576:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801057a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801057e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8010580:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010584:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8010588:	2300      	movs	r3, #0
 801058a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801058c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010590:	f04f 0300 	mov.w	r3, #0
 8010594:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8010598:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801059c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	0fdb      	lsrs	r3, r3, #31
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	0fdb      	lsrs	r3, r3, #31
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	4053      	eors	r3, r2
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d012      	beq.n	80105e6 <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 80105c0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	2100      	movs	r1, #0
 80105ca:	f1d2 0001 	rsbs	r0, r2, #1
 80105ce:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 80105d2:	eb61 0303 	sbc.w	r3, r1, r3
 80105d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80105da:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 80105de:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 80105e2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80105e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105ea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	17da      	asrs	r2, r3, #31
 80105f2:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80105f6:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 80105fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105fe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	17da      	asrs	r2, r3, #31
 8010606:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 801060a:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 801060e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8010612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010616:	460b      	mov	r3, r1
 8010618:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 801061c:	fb02 f203 	mul.w	r2, r2, r3
 8010620:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8010624:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8010628:	e9c4 0100 	strd	r0, r1, [r4]
 801062c:	4601      	mov	r1, r0
 801062e:	fb01 f303 	mul.w	r3, r1, r3
 8010632:	4413      	add	r3, r2
 8010634:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8010638:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 801063c:	fba2 1201 	umull	r1, r2, r2, r1
 8010640:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 8010644:	460a      	mov	r2, r1
 8010646:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 801064a:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 801064e:	4413      	add	r3, r2
 8010650:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8010654:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8010658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065c:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8010660:	1851      	adds	r1, r2, r1
 8010662:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8010666:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 801066a:	414b      	adcs	r3, r1
 801066c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010670:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8010674:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8010678:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801067c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8010680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010684:	2b00      	cmp	r3, #0
 8010686:	da0a      	bge.n	801069e <arm_softmax_s8+0x1a96>
 8010688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801068c:	1851      	adds	r1, r2, r1
 801068e:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8010692:	f143 0300 	adc.w	r3, r3, #0
 8010696:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 801069a:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 801069e:	f04f 0000 	mov.w	r0, #0
 80106a2:	f04f 0100 	mov.w	r1, #0
 80106a6:	0fd0      	lsrs	r0, r2, #31
 80106a8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80106ac:	17d9      	asrs	r1, r3, #31
 80106ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106b2:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80106b6:	4603      	mov	r3, r0
 80106b8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80106ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106be:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 80106c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106c6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80106ca:	6812      	ldr	r2, [r2, #0]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d10e      	bne.n	80106f0 <arm_softmax_s8+0x1ae8>
 80106d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106d6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80106e0:	d106      	bne.n	80106f0 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 80106e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106e6:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80106ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80106ee:	6013      	str	r3, [r2, #0]
    return result;
 80106f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106f4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8010702:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8010704:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010708:	4619      	mov	r1, r3
 801070a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801070e:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8010712:	1e4b      	subs	r3, r1, #1
 8010714:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8010716:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801071a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801071e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010722:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801072c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010730:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8010734:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010738:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	429a      	cmp	r2, r3
 8010742:	dd02      	ble.n	801074a <arm_softmax_s8+0x1b42>
 8010744:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010748:	e000      	b.n	801074c <arm_softmax_s8+0x1b44>
 801074a:	2000      	movs	r0, #0
 801074c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010750:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8010754:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010758:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801075c:	6812      	ldr	r2, [r2, #0]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	429a      	cmp	r2, r3
 8010762:	dd01      	ble.n	8010768 <arm_softmax_s8+0x1b60>
 8010764:	2200      	movs	r2, #0
 8010766:	e001      	b.n	801076c <arm_softmax_s8+0x1b64>
 8010768:	f04f 32ff 	mov.w	r2, #4294967295
 801076c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010770:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	ea02 0103 	and.w	r1, r2, r3
 801077a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801077e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8010782:	ea81 0300 	eor.w	r3, r1, r0
 8010786:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010788:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801078c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	425a      	negs	r2, r3
 8010794:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010798:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4293      	cmp	r3, r2
 80107a0:	da02      	bge.n	80107a8 <arm_softmax_s8+0x1ba0>
 80107a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80107a6:	e000      	b.n	80107aa <arm_softmax_s8+0x1ba2>
 80107a8:	2000      	movs	r0, #0
 80107aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107ae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	425a      	negs	r2, r3
 80107b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4293      	cmp	r3, r2
 80107c2:	da01      	bge.n	80107c8 <arm_softmax_s8+0x1bc0>
 80107c4:	2200      	movs	r2, #0
 80107c6:	e001      	b.n	80107cc <arm_softmax_s8+0x1bc4>
 80107c8:	f04f 32ff 	mov.w	r2, #4294967295
 80107cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	ea02 0103 	and.w	r1, r2, r3
 80107da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107de:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80107e2:	ea81 0300 	eor.w	r3, r1, r0
 80107e6:	6013      	str	r3, [r2, #0]
    return result;
 80107e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80107f0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80107f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107f6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80107fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107fe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	440b      	add	r3, r1
 8010806:	6013      	str	r3, [r2, #0]
 8010808:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801080c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8010810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010814:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	6013      	str	r3, [r2, #0]
 801081c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010820:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8010824:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010828:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010830:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010834:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8010838:	2300      	movs	r3, #0
 801083a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010840:	f04f 0300 	mov.w	r3, #0
 8010844:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8010848:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801084c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010850:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	0fdb      	lsrs	r3, r3, #31
 8010858:	b2da      	uxtb	r2, r3
 801085a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801085e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	0fdb      	lsrs	r3, r3, #31
 8010866:	b2db      	uxtb	r3, r3
 8010868:	4053      	eors	r3, r2
 801086a:	b2db      	uxtb	r3, r3
 801086c:	2b00      	cmp	r3, #0
 801086e:	d012      	beq.n	8010896 <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8010870:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8010874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010878:	2100      	movs	r1, #0
 801087a:	f1d2 0001 	rsbs	r0, r2, #1
 801087e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8010882:	eb61 0303 	sbc.w	r3, r1, r3
 8010886:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 801088a:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 801088e:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8010892:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010896:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801089a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	17da      	asrs	r2, r3, #31
 80108a2:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80108a6:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 80108aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108ae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	17da      	asrs	r2, r3, #31
 80108b6:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80108ba:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 80108be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80108c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108c6:	460b      	mov	r3, r1
 80108c8:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80108cc:	fb02 f203 	mul.w	r2, r2, r3
 80108d0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80108d4:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 80108d8:	e9c4 0100 	strd	r0, r1, [r4]
 80108dc:	4601      	mov	r1, r0
 80108de:	fb01 f303 	mul.w	r3, r1, r3
 80108e2:	4413      	add	r3, r2
 80108e4:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80108e8:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 80108ec:	fba2 1201 	umull	r1, r2, r2, r1
 80108f0:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 80108f4:	460a      	mov	r2, r1
 80108f6:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 80108fa:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80108fe:	4413      	add	r3, r2
 8010900:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8010904:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8010910:	1851      	adds	r1, r2, r1
 8010912:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8010916:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801091a:	414b      	adcs	r3, r1
 801091c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010920:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8010924:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8010928:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801092c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8010930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010934:	2b00      	cmp	r3, #0
 8010936:	da0a      	bge.n	801094e <arm_softmax_s8+0x1d46>
 8010938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801093c:	1851      	adds	r1, r2, r1
 801093e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8010942:	f143 0300 	adc.w	r3, r3, #0
 8010946:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 801094a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 801094e:	f04f 0000 	mov.w	r0, #0
 8010952:	f04f 0100 	mov.w	r1, #0
 8010956:	0fd0      	lsrs	r0, r2, #31
 8010958:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801095c:	17d9      	asrs	r1, r3, #31
 801095e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010962:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8010966:	4603      	mov	r3, r0
 8010968:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801096a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801096e:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8010972:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010976:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801097a:	6812      	ldr	r2, [r2, #0]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	429a      	cmp	r2, r3
 8010980:	d10e      	bne.n	80109a0 <arm_softmax_s8+0x1d98>
 8010982:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010986:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010990:	d106      	bne.n	80109a0 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 8010992:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010996:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801099a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801099e:	6013      	str	r3, [r2, #0]
    return result;
 80109a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80109a8:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80109aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ae:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	1a99      	subs	r1, r3, r2
 80109b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ba:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80109be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	6013      	str	r3, [r2, #0]
 80109ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80109d2:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80109d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109d8:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80109dc:	2300      	movs	r3, #0
 80109de:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80109e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80109e4:	f04f 0300 	mov.w	r3, #0
 80109e8:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80109ec:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80109f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109f4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	0fdb      	lsrs	r3, r3, #31
 80109fc:	b2da      	uxtb	r2, r3
 80109fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a02:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	0fdb      	lsrs	r3, r3, #31
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	4053      	eors	r3, r2
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d012      	beq.n	8010a3a <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 8010a14:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8010a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	f1d2 0001 	rsbs	r0, r2, #1
 8010a22:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8010a26:	eb61 0303 	sbc.w	r3, r1, r3
 8010a2a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8010a2e:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8010a32:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8010a36:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010a3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a3e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	17da      	asrs	r2, r3, #31
 8010a46:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8010a4a:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8010a4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	17da      	asrs	r2, r3, #31
 8010a5a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8010a5e:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8010a62:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8010a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8010a70:	fb02 f203 	mul.w	r2, r2, r3
 8010a74:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8010a78:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8010a7c:	e9c4 0100 	strd	r0, r1, [r4]
 8010a80:	4601      	mov	r1, r0
 8010a82:	fb01 f303 	mul.w	r3, r1, r3
 8010a86:	4413      	add	r3, r2
 8010a88:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8010a8c:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8010a90:	fba2 1201 	umull	r1, r2, r2, r1
 8010a94:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8010a98:	460a      	mov	r2, r1
 8010a9a:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8010a9e:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8010aa2:	4413      	add	r3, r2
 8010aa4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8010aa8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8010aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab0:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8010ab4:	1851      	adds	r1, r2, r1
 8010ab6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8010aba:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8010abe:	414b      	adcs	r3, r1
 8010ac0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8010ac4:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8010ac8:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8010acc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010ad0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8010ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	da0a      	bge.n	8010af2 <arm_softmax_s8+0x1eea>
 8010adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ae0:	1851      	adds	r1, r2, r1
 8010ae2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8010ae6:	f143 0300 	adc.w	r3, r3, #0
 8010aea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8010aee:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8010af2:	f04f 0000 	mov.w	r0, #0
 8010af6:	f04f 0100 	mov.w	r1, #0
 8010afa:	0fd0      	lsrs	r0, r2, #31
 8010afc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010b00:	17d9      	asrs	r1, r3, #31
 8010b02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b06:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010b0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b12:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8010b16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b1a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010b1e:	6812      	ldr	r2, [r2, #0]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d10e      	bne.n	8010b44 <arm_softmax_s8+0x1f3c>
 8010b26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b2a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010b34:	d106      	bne.n	8010b44 <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 8010b36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b3a:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8010b3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010b42:	6013      	str	r3, [r2, #0]
    return result;
 8010b44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8010b4c:	681a      	ldr	r2, [r3, #0]
 8010b4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b52:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b56:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8010b58:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b62:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8010b66:	1e4b      	subs	r3, r1, #1
 8010b68:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8010b6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b6e:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010b72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b76:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010b80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b84:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8010b88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b8c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010b90:	6812      	ldr	r2, [r2, #0]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	dd02      	ble.n	8010b9e <arm_softmax_s8+0x1f96>
 8010b98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010b9c:	e000      	b.n	8010ba0 <arm_softmax_s8+0x1f98>
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ba4:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8010ba8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bac:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	dd01      	ble.n	8010bbc <arm_softmax_s8+0x1fb4>
 8010bb8:	2200      	movs	r2, #0
 8010bba:	e001      	b.n	8010bc0 <arm_softmax_s8+0x1fb8>
 8010bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8010bc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bc4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	ea02 0103 	and.w	r1, r2, r3
 8010bce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bd2:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010bd6:	ea81 0300 	eor.w	r3, r1, r0
 8010bda:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010bdc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010be0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	425a      	negs	r2, r3
 8010be8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	da02      	bge.n	8010bfc <arm_softmax_s8+0x1ff4>
 8010bf6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010bfa:	e000      	b.n	8010bfe <arm_softmax_s8+0x1ff6>
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c02:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	425a      	negs	r2, r3
 8010c0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c0e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4293      	cmp	r3, r2
 8010c16:	da01      	bge.n	8010c1c <arm_softmax_s8+0x2014>
 8010c18:	2200      	movs	r2, #0
 8010c1a:	e001      	b.n	8010c20 <arm_softmax_s8+0x2018>
 8010c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c24:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	ea02 0103 	and.w	r1, r2, r3
 8010c2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c32:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010c36:	ea81 0300 	eor.w	r3, r1, r0
 8010c3a:	6013      	str	r3, [r2, #0]
    return result;
 8010c3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c40:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010c44:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010c46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c4a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8010c4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	440b      	add	r3, r1
 8010c5a:	6013      	str	r3, [r2, #0]
 8010c5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c60:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8010c64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	6013      	str	r3, [r2, #0]
 8010c70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c74:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8010c78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010c84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c88:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010c94:	f04f 0300 	mov.w	r3, #0
 8010c98:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8010c9c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010ca0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ca4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	0fdb      	lsrs	r3, r3, #31
 8010cac:	b2da      	uxtb	r2, r3
 8010cae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cb2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	0fdb      	lsrs	r3, r3, #31
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	4053      	eors	r3, r2
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d012      	beq.n	8010cea <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 8010cc4:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ccc:	2100      	movs	r1, #0
 8010cce:	f1d2 0001 	rsbs	r0, r2, #1
 8010cd2:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8010cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8010cda:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8010cde:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8010ce2:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8010ce6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010cea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cee:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	17da      	asrs	r2, r3, #31
 8010cf6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8010cfa:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 8010cfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d02:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	17da      	asrs	r2, r3, #31
 8010d0a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8010d0e:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8010d12:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8010d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8010d20:	fb02 f203 	mul.w	r2, r2, r3
 8010d24:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8010d28:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8010d2c:	e9c4 0100 	strd	r0, r1, [r4]
 8010d30:	4601      	mov	r1, r0
 8010d32:	fb01 f303 	mul.w	r3, r1, r3
 8010d36:	4413      	add	r3, r2
 8010d38:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8010d3c:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8010d40:	fba2 1201 	umull	r1, r2, r2, r1
 8010d44:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8010d48:	460a      	mov	r2, r1
 8010d4a:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 8010d4e:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8010d52:	4413      	add	r3, r2
 8010d54:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8010d58:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8010d64:	1851      	adds	r1, r2, r1
 8010d66:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8010d6a:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8010d6e:	414b      	adcs	r3, r1
 8010d70:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010d74:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8010d78:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8010d7c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010d80:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	da0a      	bge.n	8010da2 <arm_softmax_s8+0x219a>
 8010d8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d90:	1851      	adds	r1, r2, r1
 8010d92:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8010d96:	f143 0300 	adc.w	r3, r3, #0
 8010d9a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8010d9e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8010da2:	f04f 0000 	mov.w	r0, #0
 8010da6:	f04f 0100 	mov.w	r1, #0
 8010daa:	0fd0      	lsrs	r0, r2, #31
 8010dac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010db0:	17d9      	asrs	r1, r3, #31
 8010db2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010db6:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010dba:	4603      	mov	r3, r0
 8010dbc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010dbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dc2:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8010dc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dca:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010dce:	6812      	ldr	r2, [r2, #0]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d10e      	bne.n	8010df4 <arm_softmax_s8+0x21ec>
 8010dd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dda:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010de4:	d106      	bne.n	8010df4 <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 8010de6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dea:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010dee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010df2:	6013      	str	r3, [r2, #0]
    return result;
 8010df4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010df8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8010dfc:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010dfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e02:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	1a99      	subs	r1, r3, r2
 8010e0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e0e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8010e12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e16:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	6013      	str	r3, [r2, #0]
 8010e1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e22:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010e26:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8010e28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e2c:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010e30:	2300      	movs	r3, #0
 8010e32:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010e34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010e38:	f04f 0300 	mov.w	r3, #0
 8010e3c:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8010e40:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010e44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e48:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	0fdb      	lsrs	r3, r3, #31
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e56:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	0fdb      	lsrs	r3, r3, #31
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	4053      	eors	r3, r2
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d012      	beq.n	8010e8e <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8010e68:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e70:	2100      	movs	r1, #0
 8010e72:	f1d2 0001 	rsbs	r0, r2, #1
 8010e76:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8010e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8010e7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010e82:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8010e86:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8010e8a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010e8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e92:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	17da      	asrs	r2, r3, #31
 8010e9a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8010e9e:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8010ea2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ea6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	17da      	asrs	r2, r3, #31
 8010eae:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8010eb2:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8010eb6:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8010eba:	460b      	mov	r3, r1
 8010ebc:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8010ec0:	fb02 f203 	mul.w	r2, r2, r3
 8010ec4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8010ec8:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 8010ecc:	4601      	mov	r1, r0
 8010ece:	fb01 f303 	mul.w	r3, r1, r3
 8010ed2:	4413      	add	r3, r2
 8010ed4:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8010ed8:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 8010edc:	fba2 1201 	umull	r1, r2, r2, r1
 8010ee0:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 8010ee4:	460a      	mov	r2, r1
 8010ee6:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 8010eea:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8010eee:	4413      	add	r3, r2
 8010ef0:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8010ef4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efc:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8010f00:	1851      	adds	r1, r2, r1
 8010f02:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8010f06:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8010f0a:	414b      	adcs	r3, r1
 8010f0c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8010f10:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8010f14:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8010f18:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010f1c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	da0a      	bge.n	8010f3e <arm_softmax_s8+0x2336>
 8010f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f2c:	1851      	adds	r1, r2, r1
 8010f2e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8010f32:	f143 0300 	adc.w	r3, r3, #0
 8010f36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8010f3a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8010f3e:	f04f 0000 	mov.w	r0, #0
 8010f42:	f04f 0100 	mov.w	r1, #0
 8010f46:	0fd0      	lsrs	r0, r2, #31
 8010f48:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010f4c:	17d9      	asrs	r1, r3, #31
 8010f4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f52:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010f56:	4603      	mov	r3, r0
 8010f58:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010f5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f5e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8010f62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f66:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010f6a:	6812      	ldr	r2, [r2, #0]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d10e      	bne.n	8010f90 <arm_softmax_s8+0x2388>
 8010f72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f76:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f80:	d106      	bne.n	8010f90 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 8010f82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f86:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010f8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010f8e:	6013      	str	r3, [r2, #0]
    return result;
 8010f90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f94:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f9e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010fa2:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8010fa4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010fa8:	4619      	mov	r1, r3
 8010faa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fae:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8010fb2:	1e4b      	subs	r3, r1, #1
 8010fb4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8010fb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fba:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8010fbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fc2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010fcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fd0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8010fd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fd8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010fdc:	6812      	ldr	r2, [r2, #0]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	dd02      	ble.n	8010fea <arm_softmax_s8+0x23e2>
 8010fe4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010fe8:	e000      	b.n	8010fec <arm_softmax_s8+0x23e4>
 8010fea:	2000      	movs	r0, #0
 8010fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ff0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8010ff4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ff8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010ffc:	6812      	ldr	r2, [r2, #0]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	429a      	cmp	r2, r3
 8011002:	dd01      	ble.n	8011008 <arm_softmax_s8+0x2400>
 8011004:	2200      	movs	r2, #0
 8011006:	e001      	b.n	801100c <arm_softmax_s8+0x2404>
 8011008:	f04f 32ff 	mov.w	r2, #4294967295
 801100c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011010:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	ea02 0103 	and.w	r1, r2, r3
 801101a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801101e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8011022:	ea81 0300 	eor.w	r3, r1, r0
 8011026:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8011028:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801102c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	425a      	negs	r2, r3
 8011034:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011038:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	4293      	cmp	r3, r2
 8011040:	da02      	bge.n	8011048 <arm_softmax_s8+0x2440>
 8011042:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011046:	e000      	b.n	801104a <arm_softmax_s8+0x2442>
 8011048:	2000      	movs	r0, #0
 801104a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801104e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	425a      	negs	r2, r3
 8011056:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801105a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4293      	cmp	r3, r2
 8011062:	da05      	bge.n	8011070 <arm_softmax_s8+0x2468>
 8011064:	2200      	movs	r2, #0
 8011066:	e005      	b.n	8011074 <arm_softmax_s8+0x246c>
 8011068:	c3c3c3c4 	.word	0xc3c3c3c4
 801106c:	ffffffff 	.word	0xffffffff
 8011070:	f04f 32ff 	mov.w	r2, #4294967295
 8011074:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011078:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	ea02 0103 	and.w	r1, r2, r3
 8011082:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011086:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801108a:	ea81 0300 	eor.w	r3, r1, r0
 801108e:	6013      	str	r3, [r2, #0]
    return result;
 8011090:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011094:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011098:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801109a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801109e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80110a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	440b      	add	r3, r1
 80110ae:	6013      	str	r3, [r2, #0]
 80110b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110b4:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80110b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80110c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110c8:	4619      	mov	r1, r3
 80110ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110ce:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80110d2:	1e4b      	subs	r3, r1, #1
 80110d4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80110d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110da:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80110de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110e2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	005b      	lsls	r3, r3, #1
 80110ea:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80110ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110f0:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80110f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110f8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80110fc:	6812      	ldr	r2, [r2, #0]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	429a      	cmp	r2, r3
 8011102:	dd02      	ble.n	801110a <arm_softmax_s8+0x2502>
 8011104:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011108:	e000      	b.n	801110c <arm_softmax_s8+0x2504>
 801110a:	2000      	movs	r0, #0
 801110c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011110:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8011114:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011118:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801111c:	6812      	ldr	r2, [r2, #0]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	429a      	cmp	r2, r3
 8011122:	dd01      	ble.n	8011128 <arm_softmax_s8+0x2520>
 8011124:	2200      	movs	r2, #0
 8011126:	e001      	b.n	801112c <arm_softmax_s8+0x2524>
 8011128:	f04f 32ff 	mov.w	r2, #4294967295
 801112c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011130:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	ea02 0103 	and.w	r1, r2, r3
 801113a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801113e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8011142:	ea81 0300 	eor.w	r3, r1, r0
 8011146:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8011148:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801114c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	425a      	negs	r2, r3
 8011154:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011158:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4293      	cmp	r3, r2
 8011160:	da02      	bge.n	8011168 <arm_softmax_s8+0x2560>
 8011162:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011166:	e000      	b.n	801116a <arm_softmax_s8+0x2562>
 8011168:	2000      	movs	r0, #0
 801116a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801116e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	425a      	negs	r2, r3
 8011176:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801117a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4293      	cmp	r3, r2
 8011182:	da01      	bge.n	8011188 <arm_softmax_s8+0x2580>
 8011184:	2200      	movs	r2, #0
 8011186:	e001      	b.n	801118c <arm_softmax_s8+0x2584>
 8011188:	f04f 32ff 	mov.w	r2, #4294967295
 801118c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011190:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	ea02 0103 	and.w	r1, r2, r3
 801119a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801119e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80111a2:	ea81 0300 	eor.w	r3, r1, r0
 80111a6:	6013      	str	r3, [r2, #0]
    return result;
 80111a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80111b0:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 80111b2:	bf00      	nop
 80111b4:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 80111b8:	2300      	movs	r3, #0
 80111ba:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80111be:	f001 bd85 	b.w	8012ccc <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 80111c2:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80111c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111ca:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4413      	add	r3, r2
 80111d2:	f993 3000 	ldrsb.w	r3, [r3]
 80111d6:	461a      	mov	r2, r3
 80111d8:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80111dc:	1ad3      	subs	r3, r2, r3
 80111de:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 80111e2:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80111e6:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80111ea:	429a      	cmp	r2, r3
 80111ec:	f2c1 8562 	blt.w	8012cb4 <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80111f0:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80111f4:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80111f8:	fb03 f202 	mul.w	r2, r3, r2
 80111fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011200:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8011204:	601a      	str	r2, [r3, #0]
 8011206:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801120a:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 801120e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011212:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801121a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801121e:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8011222:	2300      	movs	r3, #0
 8011224:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801122a:	f04f 0300 	mov.w	r3, #0
 801122e:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8011232:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011236:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801123a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	0fdb      	lsrs	r3, r3, #31
 8011242:	b2da      	uxtb	r2, r3
 8011244:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011248:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	0fdb      	lsrs	r3, r3, #31
 8011250:	b2db      	uxtb	r3, r3
 8011252:	4053      	eors	r3, r2
 8011254:	b2db      	uxtb	r3, r3
 8011256:	2b00      	cmp	r3, #0
 8011258:	d012      	beq.n	8011280 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 801125a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011262:	2100      	movs	r1, #0
 8011264:	f1d2 0001 	rsbs	r0, r2, #1
 8011268:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 801126c:	eb61 0303 	sbc.w	r3, r1, r3
 8011270:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8011274:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8011278:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 801127c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011280:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011284:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	17da      	asrs	r2, r3, #31
 801128c:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8011290:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8011294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011298:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	17da      	asrs	r2, r3, #31
 80112a0:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80112a4:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 80112a8:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80112ac:	460b      	mov	r3, r1
 80112ae:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80112b2:	fb02 f203 	mul.w	r2, r2, r3
 80112b6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80112ba:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 80112be:	4601      	mov	r1, r0
 80112c0:	fb01 f303 	mul.w	r3, r1, r3
 80112c4:	4413      	add	r3, r2
 80112c6:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 80112ca:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 80112ce:	fba2 1201 	umull	r1, r2, r2, r1
 80112d2:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 80112d6:	460a      	mov	r2, r1
 80112d8:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 80112dc:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 80112e0:	4413      	add	r3, r2
 80112e2:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80112e6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80112f2:	1851      	adds	r1, r2, r1
 80112f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80112f8:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 80112fc:	414b      	adcs	r3, r1
 80112fe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8011302:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8011306:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 801130a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801130e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8011312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011316:	2b00      	cmp	r3, #0
 8011318:	da0a      	bge.n	8011330 <arm_softmax_s8+0x2728>
 801131a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801131e:	1851      	adds	r1, r2, r1
 8011320:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8011324:	f143 0300 	adc.w	r3, r3, #0
 8011328:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801132c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011330:	f04f 0000 	mov.w	r0, #0
 8011334:	f04f 0100 	mov.w	r1, #0
 8011338:	0fd0      	lsrs	r0, r2, #31
 801133a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801133e:	17d9      	asrs	r1, r3, #31
 8011340:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011344:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8011348:	4603      	mov	r3, r0
 801134a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801134c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011350:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8011354:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011358:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801135c:	6812      	ldr	r2, [r2, #0]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	429a      	cmp	r2, r3
 8011362:	d10e      	bne.n	8011382 <arm_softmax_s8+0x277a>
 8011364:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011368:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011372:	d106      	bne.n	8011382 <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 8011374:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011378:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 801137c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011380:	6013      	str	r3, [r2, #0]
    return result;
 8011382:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011386:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801138a:	681a      	ldr	r2, [r3, #0]
 801138c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011390:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011394:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8011396:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801139a:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801139e:	2300      	movs	r3, #0
 80113a0:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 80113a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113a6:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80113aa:	2318      	movs	r3, #24
 80113ac:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 80113ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113b2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80113b6:	2201      	movs	r2, #1
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	fa02 f303 	lsl.w	r3, r2, r3
 80113be:	1e5a      	subs	r2, r3, #1
 80113c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113c4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	ea02 0003 	and.w	r0, r2, r3
 80113ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113d2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80113d6:	2201      	movs	r2, #1
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	fa02 f103 	lsl.w	r1, r2, r3
 80113de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113e2:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80113e6:	1a43      	subs	r3, r0, r1
 80113e8:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 80113ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113ee:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 80113f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113f6:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80113fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113fe:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011402:	6812      	ldr	r2, [r2, #0]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 801140a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801140e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	0159      	lsls	r1, r3, #5
 8011416:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801141a:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 801141e:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 8011422:	6013      	str	r3, [r2, #0]
 8011424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011428:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801142c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011430:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	6013      	str	r3, [r2, #0]
 8011438:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801143c:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8011440:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011444:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801144c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011450:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8011454:	2300      	movs	r3, #0
 8011456:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801145c:	f04f 0300 	mov.w	r3, #0
 8011460:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8011464:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801146c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	0fdb      	lsrs	r3, r3, #31
 8011474:	b2da      	uxtb	r2, r3
 8011476:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801147a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	0fdb      	lsrs	r3, r3, #31
 8011482:	b2db      	uxtb	r3, r3
 8011484:	4053      	eors	r3, r2
 8011486:	b2db      	uxtb	r3, r3
 8011488:	2b00      	cmp	r3, #0
 801148a:	d012      	beq.n	80114b2 <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 801148c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8011490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011494:	2100      	movs	r1, #0
 8011496:	f1d2 0001 	rsbs	r0, r2, #1
 801149a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 801149e:	eb61 0303 	sbc.w	r3, r1, r3
 80114a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80114a6:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80114aa:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80114ae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80114b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114b6:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	17da      	asrs	r2, r3, #31
 80114be:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80114c2:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 80114c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114ca:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	17da      	asrs	r2, r3, #31
 80114d2:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80114d6:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 80114da:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 80114de:	460b      	mov	r3, r1
 80114e0:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80114e4:	fb02 f203 	mul.w	r2, r2, r3
 80114e8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80114ec:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 80114f0:	4601      	mov	r1, r0
 80114f2:	fb01 f303 	mul.w	r3, r1, r3
 80114f6:	4413      	add	r3, r2
 80114f8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80114fc:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8011500:	fba2 1201 	umull	r1, r2, r2, r1
 8011504:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8011508:	460a      	mov	r2, r1
 801150a:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 801150e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8011512:	4413      	add	r3, r2
 8011514:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8011518:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011520:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 8011524:	1851      	adds	r1, r2, r1
 8011526:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 801152a:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 801152e:	414b      	adcs	r3, r1
 8011530:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011534:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8011538:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 801153c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011540:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8011544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011548:	2b00      	cmp	r3, #0
 801154a:	da0a      	bge.n	8011562 <arm_softmax_s8+0x295a>
 801154c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011550:	1851      	adds	r1, r2, r1
 8011552:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8011556:	f143 0300 	adc.w	r3, r3, #0
 801155a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801155e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8011562:	f04f 0000 	mov.w	r0, #0
 8011566:	f04f 0100 	mov.w	r1, #0
 801156a:	0fd0      	lsrs	r0, r2, #31
 801156c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011570:	17d9      	asrs	r1, r3, #31
 8011572:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011576:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801157a:	4603      	mov	r3, r0
 801157c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801157e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011582:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8011586:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801158a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801158e:	6812      	ldr	r2, [r2, #0]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	429a      	cmp	r2, r3
 8011594:	d10e      	bne.n	80115b4 <arm_softmax_s8+0x29ac>
 8011596:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801159a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115a4:	d106      	bne.n	80115b4 <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 80115a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115aa:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 80115ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80115b2:	6013      	str	r3, [r2, #0]
    return result;
 80115b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115b8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80115bc:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 80115be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115c2:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80115c6:	601a      	str	r2, [r3, #0]
 80115c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115cc:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80115d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115d4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	6013      	str	r3, [r2, #0]
 80115dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115e0:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 80115e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115e8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80115f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115f4:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80115f8:	2300      	movs	r3, #0
 80115fa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80115fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011600:	f04f 0300 	mov.w	r3, #0
 8011604:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8011608:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801160c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011610:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	0fdb      	lsrs	r3, r3, #31
 8011618:	b2da      	uxtb	r2, r3
 801161a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801161e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	0fdb      	lsrs	r3, r3, #31
 8011626:	b2db      	uxtb	r3, r3
 8011628:	4053      	eors	r3, r2
 801162a:	b2db      	uxtb	r3, r3
 801162c:	2b00      	cmp	r3, #0
 801162e:	d012      	beq.n	8011656 <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8011630:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8011634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011638:	2100      	movs	r1, #0
 801163a:	f1d2 0001 	rsbs	r0, r2, #1
 801163e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8011642:	eb61 0303 	sbc.w	r3, r1, r3
 8011646:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801164a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 801164e:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8011652:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801165a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	17da      	asrs	r2, r3, #31
 8011662:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8011666:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 801166a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801166e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	17da      	asrs	r2, r3, #31
 8011676:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 801167a:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 801167e:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8011682:	460b      	mov	r3, r1
 8011684:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8011688:	fb02 f203 	mul.w	r2, r2, r3
 801168c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8011690:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8011694:	4601      	mov	r1, r0
 8011696:	fb01 f303 	mul.w	r3, r1, r3
 801169a:	4413      	add	r3, r2
 801169c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80116a0:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 80116a4:	fba2 1201 	umull	r1, r2, r2, r1
 80116a8:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 80116ac:	460a      	mov	r2, r1
 80116ae:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 80116b2:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 80116b6:	4413      	add	r3, r2
 80116b8:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80116bc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 80116c8:	1851      	adds	r1, r2, r1
 80116ca:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80116ce:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 80116d2:	414b      	adcs	r3, r1
 80116d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80116d8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80116dc:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80116e0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80116e4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80116e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	da0a      	bge.n	8011706 <arm_softmax_s8+0x2afe>
 80116f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80116f4:	1851      	adds	r1, r2, r1
 80116f6:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80116fa:	f143 0300 	adc.w	r3, r3, #0
 80116fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8011702:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8011706:	f04f 0000 	mov.w	r0, #0
 801170a:	f04f 0100 	mov.w	r1, #0
 801170e:	0fd0      	lsrs	r0, r2, #31
 8011710:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011714:	17d9      	asrs	r1, r3, #31
 8011716:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801171a:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801171e:	4603      	mov	r3, r0
 8011720:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011726:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 801172a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801172e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011732:	6812      	ldr	r2, [r2, #0]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	429a      	cmp	r2, r3
 8011738:	d10e      	bne.n	8011758 <arm_softmax_s8+0x2b50>
 801173a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801173e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011748:	d106      	bne.n	8011758 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 801174a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801174e:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8011752:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011756:	6013      	str	r3, [r2, #0]
    return result;
 8011758:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801175c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011766:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801176a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801176c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011770:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8011774:	2300      	movs	r3, #0
 8011776:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8011778:	2104      	movs	r1, #4
 801177a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801177e:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8011782:	1e4b      	subs	r3, r1, #1
 8011784:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8011786:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801178a:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 801178e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011792:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8011796:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801179a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801179e:	6812      	ldr	r2, [r2, #0]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	4013      	ands	r3, r2
 80117a4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80117a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117aa:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80117ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117b2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	109b      	asrs	r3, r3, #2
 80117ba:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80117bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117c0:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80117c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117c8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	105b      	asrs	r3, r3, #1
 80117d0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80117d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117d6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	da0a      	bge.n	80117f6 <arm_softmax_s8+0x2bee>
        threshold++;
 80117e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117e4:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80117e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117ec:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	3301      	adds	r3, #1
 80117f4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80117f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117fa:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 80117fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011802:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8011806:	6812      	ldr	r2, [r2, #0]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	429a      	cmp	r2, r3
 801180c:	dd0a      	ble.n	8011824 <arm_softmax_s8+0x2c1c>
        result++;
 801180e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011812:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8011816:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801181a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	3301      	adds	r3, #1
 8011822:	6013      	str	r3, [r2, #0]
    return result;
 8011824:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011828:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801182c:	681c      	ldr	r4, [r3, #0]
 801182e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011832:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8011836:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801183a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	6013      	str	r3, [r2, #0]
 8011842:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011846:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 801184a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801184e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011856:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801185a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801185e:	2300      	movs	r3, #0
 8011860:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011866:	f04f 0300 	mov.w	r3, #0
 801186a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801186e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011872:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011876:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	0fdb      	lsrs	r3, r3, #31
 801187e:	b2da      	uxtb	r2, r3
 8011880:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011884:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	0fdb      	lsrs	r3, r3, #31
 801188c:	b2db      	uxtb	r3, r3
 801188e:	4053      	eors	r3, r2
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b00      	cmp	r3, #0
 8011894:	d012      	beq.n	80118bc <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 8011896:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189e:	2100      	movs	r1, #0
 80118a0:	f1d2 0001 	rsbs	r0, r2, #1
 80118a4:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80118a8:	eb61 0303 	sbc.w	r3, r1, r3
 80118ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80118b0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80118b4:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80118b8:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80118bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118c0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	17da      	asrs	r2, r3, #31
 80118c8:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80118cc:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80118d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118d4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	17da      	asrs	r2, r3, #31
 80118dc:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80118e0:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 80118e4:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80118e8:	460b      	mov	r3, r1
 80118ea:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80118ee:	fb02 f203 	mul.w	r2, r2, r3
 80118f2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80118f6:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 80118fa:	4601      	mov	r1, r0
 80118fc:	fb01 f303 	mul.w	r3, r1, r3
 8011900:	4413      	add	r3, r2
 8011902:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8011906:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801190a:	fba2 1201 	umull	r1, r2, r2, r1
 801190e:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 8011912:	460a      	mov	r2, r1
 8011914:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8011918:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 801191c:	4413      	add	r3, r2
 801191e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8011922:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 801192e:	1851      	adds	r1, r2, r1
 8011930:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8011934:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8011938:	414b      	adcs	r3, r1
 801193a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801193e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8011942:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8011946:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 801194a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011952:	2b00      	cmp	r3, #0
 8011954:	da0a      	bge.n	801196c <arm_softmax_s8+0x2d64>
 8011956:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801195a:	1851      	adds	r1, r2, r1
 801195c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8011960:	f143 0300 	adc.w	r3, r3, #0
 8011964:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011968:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801196c:	f04f 0000 	mov.w	r0, #0
 8011970:	f04f 0100 	mov.w	r1, #0
 8011974:	0fd0      	lsrs	r0, r2, #31
 8011976:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801197a:	17d9      	asrs	r1, r3, #31
 801197c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011980:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8011984:	4603      	mov	r3, r0
 8011986:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011988:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801198c:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8011990:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011994:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011998:	6812      	ldr	r2, [r2, #0]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	429a      	cmp	r2, r3
 801199e:	d10e      	bne.n	80119be <arm_softmax_s8+0x2db6>
 80119a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119a4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119ae:	d106      	bne.n	80119be <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 80119b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119b4:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80119b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80119bc:	6013      	str	r3, [r2, #0]
    return result;
 80119be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119c2:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80119c6:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80119c8:	18e2      	adds	r2, r4, r3
 80119ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119ce:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80119d2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80119d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119d8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80119dc:	2300      	movs	r3, #0
 80119de:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80119e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80119e4:	f04f 0300 	mov.w	r3, #0
 80119e8:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80119ec:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80119f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119f4:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	0fdb      	lsrs	r3, r3, #31
 80119fc:	b2da      	uxtb	r2, r3
 80119fe:	2300      	movs	r3, #0
 8011a00:	4053      	eors	r3, r2
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d012      	beq.n	8011a2e <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8011a08:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8011a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a10:	2100      	movs	r1, #0
 8011a12:	f1d2 0001 	rsbs	r0, r2, #1
 8011a16:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8011a1a:	eb61 0303 	sbc.w	r3, r1, r3
 8011a1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011a22:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8011a26:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8011a2a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011a2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a32:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	17da      	asrs	r2, r3, #31
 8011a3a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8011a3e:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8011a42:	a3c9      	add	r3, pc, #804	; (adr r3, 8011d68 <arm_softmax_s8+0x3160>)
 8011a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a48:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8011a4c:	fb02 f001 	mul.w	r0, r2, r1
 8011a50:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8011a54:	fb01 f103 	mul.w	r1, r1, r3
 8011a58:	4401      	add	r1, r0
 8011a5a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8011a5e:	fba0 2302 	umull	r2, r3, r0, r2
 8011a62:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8011a66:	4613      	mov	r3, r2
 8011a68:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8011a6c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8011a70:	18cb      	adds	r3, r1, r3
 8011a72:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8011a76:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8011a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7e:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8011a82:	1851      	adds	r1, r2, r1
 8011a84:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8011a88:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8011a8c:	414b      	adcs	r3, r1
 8011a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011a92:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8011a96:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8011a9a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011a9e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8011aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	da0a      	bge.n	8011ac0 <arm_softmax_s8+0x2eb8>
 8011aaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011aae:	1851      	adds	r1, r2, r1
 8011ab0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8011ab4:	f143 0300 	adc.w	r3, r3, #0
 8011ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011abc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8011ac0:	f04f 0000 	mov.w	r0, #0
 8011ac4:	f04f 0100 	mov.w	r1, #0
 8011ac8:	0fd0      	lsrs	r0, r2, #31
 8011aca:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011ace:	17d9      	asrs	r1, r3, #31
 8011ad0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ad4:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8011ad8:	4603      	mov	r3, r0
 8011ada:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011adc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ae0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	4b9e      	ldr	r3, [pc, #632]	; (8011d60 <arm_softmax_s8+0x3158>)
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d10e      	bne.n	8011b0a <arm_softmax_s8+0x2f02>
 8011aec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011af0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011afa:	d106      	bne.n	8011b0a <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8011afc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b00:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8011b04:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011b08:	6013      	str	r3, [r2, #0]
    return result;
 8011b0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b0e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011b12:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8011b14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b18:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	441a      	add	r2, r3
 8011b20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b24:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011b28:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8011b2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b2e:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011b32:	2300      	movs	r3, #0
 8011b34:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8011b36:	2102      	movs	r1, #2
 8011b38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b3c:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8011b40:	1e4b      	subs	r3, r1, #1
 8011b42:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8011b44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b48:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8011b4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b50:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8011b54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b58:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b5c:	6812      	ldr	r2, [r2, #0]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	4013      	ands	r3, r2
 8011b62:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8011b64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b68:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011b6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b70:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	105b      	asrs	r3, r3, #1
 8011b78:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8011b7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b7e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011b82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b86:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	105b      	asrs	r3, r3, #1
 8011b8e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8011b90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b94:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	da0a      	bge.n	8011bb4 <arm_softmax_s8+0x2fac>
        threshold++;
 8011b9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ba2:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011ba6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011baa:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8011bb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bb8:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8011bbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bc0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011bc4:	6812      	ldr	r2, [r2, #0]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	dd0a      	ble.n	8011be2 <arm_softmax_s8+0x2fda>
        result++;
 8011bcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bd0:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011bd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bd8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	3301      	adds	r3, #1
 8011be0:	6013      	str	r3, [r2, #0]
    return result;
 8011be2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011be6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011bea:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8011bec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bf0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	441a      	add	r2, r3
 8011bf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bfc:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011c00:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8011c02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c06:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011c12:	f04f 0300 	mov.w	r3, #0
 8011c16:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8011c1a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011c1e:	2200      	movs	r2, #0
 8011c20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c24:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	0fdb      	lsrs	r3, r3, #31
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	4053      	eors	r3, r2
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d012      	beq.n	8011c5c <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 8011c36:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3e:	2100      	movs	r1, #0
 8011c40:	f1d2 0001 	rsbs	r0, r2, #1
 8011c44:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8011c48:	eb61 0303 	sbc.w	r3, r1, r3
 8011c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011c50:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8011c54:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8011c58:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011c5c:	a13e      	add	r1, pc, #248	; (adr r1, 8011d58 <arm_softmax_s8+0x3150>)
 8011c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c66:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	17da      	asrs	r2, r3, #31
 8011c6e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8011c72:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8011c76:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8011c7a:	fb03 f201 	mul.w	r2, r3, r1
 8011c7e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8011c82:	fb00 f303 	mul.w	r3, r0, r3
 8011c86:	4413      	add	r3, r2
 8011c88:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8011c8c:	fba0 1202 	umull	r1, r2, r0, r2
 8011c90:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8011c94:	460a      	mov	r2, r1
 8011c96:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8011c9a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8011c9e:	4413      	add	r3, r2
 8011ca0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8011ca4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cac:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8011cb0:	1851      	adds	r1, r2, r1
 8011cb2:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8011cb6:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 8011cba:	414b      	adcs	r3, r1
 8011cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011cc0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8011cc4:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8011cc8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011ccc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	da0a      	bge.n	8011cee <arm_softmax_s8+0x30e6>
 8011cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011cdc:	1851      	adds	r1, r2, r1
 8011cde:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8011ce2:	f143 0300 	adc.w	r3, r3, #0
 8011ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011cea:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8011cee:	f04f 0000 	mov.w	r0, #0
 8011cf2:	f04f 0100 	mov.w	r1, #0
 8011cf6:	0fd0      	lsrs	r0, r2, #31
 8011cf8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011cfc:	17d9      	asrs	r1, r3, #31
 8011cfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d02:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8011d06:	4603      	mov	r3, r0
 8011d08:	6013      	str	r3, [r2, #0]
    return result;
 8011d0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d0e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8011d12:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8011d14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d18:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011d1c:	4b11      	ldr	r3, [pc, #68]	; (8011d64 <arm_softmax_s8+0x315c>)
 8011d1e:	440b      	add	r3, r1
 8011d20:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8011d22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d26:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011d2a:	6819      	ldr	r1, [r3, #0]
 8011d2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d30:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011d34:	1c4b      	adds	r3, r1, #1
 8011d36:	6013      	str	r3, [r2, #0]
 8011d38:	2301      	movs	r3, #1
 8011d3a:	fa03 f201 	lsl.w	r2, r3, r1
 8011d3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d42:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4013      	ands	r3, r2
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d010      	beq.n	8011d70 <arm_softmax_s8+0x3168>
 8011d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d52:	e00e      	b.n	8011d72 <arm_softmax_s8+0x316a>
 8011d54:	f3af 8000 	nop.w
 8011d58:	70f5a894 	.word	0x70f5a894
 8011d5c:	00000000 	.word	0x00000000
 8011d60:	2aaaaaab 	.word	0x2aaaaaab
 8011d64:	70f5a894 	.word	0x70f5a894
 8011d68:	2aaaaaab 	.word	0x2aaaaaab
 8011d6c:	00000000 	.word	0x00000000
 8011d70:	2200      	movs	r2, #0
 8011d72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d76:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011d7a:	601a      	str	r2, [r3, #0]
 8011d7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d80:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8011d84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d88:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011d90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d94:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011d98:	2300      	movs	r3, #0
 8011d9a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011da0:	f04f 0300 	mov.w	r3, #0
 8011da4:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8011da8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011dac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011db0:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	0fdb      	lsrs	r3, r3, #31
 8011db8:	b2da      	uxtb	r2, r3
 8011dba:	2300      	movs	r3, #0
 8011dbc:	4053      	eors	r3, r2
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d012      	beq.n	8011dea <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8011dc4:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dcc:	2100      	movs	r1, #0
 8011dce:	f1d2 0001 	rsbs	r0, r2, #1
 8011dd2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8011dd6:	eb61 0303 	sbc.w	r3, r1, r3
 8011dda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011dde:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8011de2:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8011de6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011dea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011dee:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	17da      	asrs	r2, r3, #31
 8011df6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8011dfa:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8011dfe:	a3c4      	add	r3, pc, #784	; (adr r3, 8012110 <arm_softmax_s8+0x3508>)
 8011e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e04:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8011e08:	fb02 f001 	mul.w	r0, r2, r1
 8011e0c:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8011e10:	fb01 f103 	mul.w	r1, r1, r3
 8011e14:	4401      	add	r1, r0
 8011e16:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8011e1a:	fba0 2302 	umull	r2, r3, r0, r2
 8011e1e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8011e22:	4613      	mov	r3, r2
 8011e24:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8011e28:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8011e2c:	18cb      	adds	r3, r1, r3
 8011e2e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8011e32:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8011e3e:	1851      	adds	r1, r2, r1
 8011e40:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8011e44:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8011e48:	414b      	adcs	r3, r1
 8011e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011e4e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8011e52:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8011e56:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011e5a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	da0a      	bge.n	8011e7c <arm_softmax_s8+0x3274>
 8011e66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e6a:	1851      	adds	r1, r2, r1
 8011e6c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8011e70:	f143 0300 	adc.w	r3, r3, #0
 8011e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011e78:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011e7c:	f04f 0000 	mov.w	r0, #0
 8011e80:	f04f 0100 	mov.w	r1, #0
 8011e84:	0fd0      	lsrs	r0, r2, #31
 8011e86:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011e8a:	17d9      	asrs	r1, r3, #31
 8011e8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e90:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011e94:	4603      	mov	r3, r0
 8011e96:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011e98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e9c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	4b99      	ldr	r3, [pc, #612]	; (8012108 <arm_softmax_s8+0x3500>)
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d10e      	bne.n	8011ec6 <arm_softmax_s8+0x32be>
 8011ea8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eac:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011eb6:	d106      	bne.n	8011ec6 <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8011eb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ebc:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011ec0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011ec4:	6013      	str	r3, [r2, #0]
    return result;
 8011ec6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eca:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8011ece:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8011ed0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ed4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	ea02 0003 	and.w	r0, r2, r3
 8011ede:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ee2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	43da      	mvns	r2, r3
 8011eea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eee:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	ea02 0103 	and.w	r1, r2, r3
 8011ef8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011efc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011f00:	ea80 0301 	eor.w	r3, r0, r1
 8011f04:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8011f06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f0a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011f0e:	6819      	ldr	r1, [r3, #0]
 8011f10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f14:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011f18:	1c4b      	adds	r3, r1, #1
 8011f1a:	6013      	str	r3, [r2, #0]
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	fa03 f201 	lsl.w	r2, r3, r1
 8011f22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f26:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	4013      	ands	r3, r2
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d002      	beq.n	8011f38 <arm_softmax_s8+0x3330>
 8011f32:	f04f 32ff 	mov.w	r2, #4294967295
 8011f36:	e000      	b.n	8011f3a <arm_softmax_s8+0x3332>
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f3e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011f42:	601a      	str	r2, [r3, #0]
 8011f44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f48:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8011f4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f50:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011f58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f5c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8011f60:	2300      	movs	r3, #0
 8011f62:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011f68:	f04f 0300 	mov.w	r3, #0
 8011f6c:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8011f70:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011f74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f78:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	0fdb      	lsrs	r3, r3, #31
 8011f80:	b2da      	uxtb	r2, r3
 8011f82:	2300      	movs	r3, #0
 8011f84:	4053      	eors	r3, r2
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d012      	beq.n	8011fb2 <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 8011f8c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8011f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f94:	2100      	movs	r1, #0
 8011f96:	f1d2 0001 	rsbs	r0, r2, #1
 8011f9a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8011f9e:	eb61 0303 	sbc.w	r3, r1, r3
 8011fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011fa6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8011faa:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8011fae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011fb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011fb6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	17da      	asrs	r2, r3, #31
 8011fbe:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8011fc2:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8011fc6:	a34e      	add	r3, pc, #312	; (adr r3, 8012100 <arm_softmax_s8+0x34f8>)
 8011fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fcc:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8011fd0:	fb02 f001 	mul.w	r0, r2, r1
 8011fd4:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8011fd8:	fb01 f103 	mul.w	r1, r1, r3
 8011fdc:	4401      	add	r1, r0
 8011fde:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8011fe2:	fba0 2302 	umull	r2, r3, r0, r2
 8011fe6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8011fea:	4613      	mov	r3, r2
 8011fec:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8011ff0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8011ff4:	18cb      	adds	r3, r1, r3
 8011ff6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8011ffa:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8011ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012002:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 8012006:	1851      	adds	r1, r2, r1
 8012008:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801200c:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8012010:	414b      	adcs	r3, r1
 8012012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012016:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 801201a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 801201e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012022:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8012026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202a:	2b00      	cmp	r3, #0
 801202c:	da0a      	bge.n	8012044 <arm_softmax_s8+0x343c>
 801202e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012032:	1851      	adds	r1, r2, r1
 8012034:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8012038:	f143 0300 	adc.w	r3, r3, #0
 801203c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012040:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8012044:	f04f 0000 	mov.w	r0, #0
 8012048:	f04f 0100 	mov.w	r1, #0
 801204c:	0fd0      	lsrs	r0, r2, #31
 801204e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012052:	17d9      	asrs	r1, r3, #31
 8012054:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012058:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801205c:	4603      	mov	r3, r0
 801205e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012060:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012064:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	4b28      	ldr	r3, [pc, #160]	; (801210c <arm_softmax_s8+0x3504>)
 801206c:	429a      	cmp	r2, r3
 801206e:	d10e      	bne.n	801208e <arm_softmax_s8+0x3486>
 8012070:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012074:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801207e:	d106      	bne.n	801208e <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8012080:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012084:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8012088:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801208c:	6013      	str	r3, [r2, #0]
    return result;
 801208e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012092:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8012096:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8012098:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801209c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	ea02 0003 	and.w	r0, r2, r3
 80120a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120aa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	43da      	mvns	r2, r3
 80120b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120b6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	ea02 0103 	and.w	r1, r2, r3
 80120c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120c4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80120c8:	ea80 0301 	eor.w	r3, r0, r1
 80120cc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 80120ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120d2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80120d6:	6819      	ldr	r1, [r3, #0]
 80120d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120dc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80120e0:	1c4b      	adds	r3, r1, #1
 80120e2:	6013      	str	r3, [r2, #0]
 80120e4:	2301      	movs	r3, #1
 80120e6:	fa03 f201 	lsl.w	r2, r3, r1
 80120ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120ee:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	4013      	ands	r3, r2
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00e      	beq.n	8012118 <arm_softmax_s8+0x3510>
 80120fa:	f04f 32ff 	mov.w	r2, #4294967295
 80120fe:	e00c      	b.n	801211a <arm_softmax_s8+0x3512>
 8012100:	4da2cbf2 	.word	0x4da2cbf2
 8012104:	00000000 	.word	0x00000000
 8012108:	63afbe7b 	.word	0x63afbe7b
 801210c:	4da2cbf2 	.word	0x4da2cbf2
 8012110:	63afbe7b 	.word	0x63afbe7b
 8012114:	00000000 	.word	0x00000000
 8012118:	2200      	movs	r2, #0
 801211a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801211e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012128:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801212c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012130:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012138:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801213c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8012140:	2300      	movs	r3, #0
 8012142:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012148:	f04f 0300 	mov.w	r3, #0
 801214c:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8012150:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012154:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012158:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	0fdb      	lsrs	r3, r3, #31
 8012160:	b2da      	uxtb	r2, r3
 8012162:	2300      	movs	r3, #0
 8012164:	4053      	eors	r3, r2
 8012166:	b2db      	uxtb	r3, r3
 8012168:	2b00      	cmp	r3, #0
 801216a:	d012      	beq.n	8012192 <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 801216c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8012170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012174:	2100      	movs	r1, #0
 8012176:	f1d2 0001 	rsbs	r0, r2, #1
 801217a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 801217e:	eb61 0303 	sbc.w	r3, r1, r3
 8012182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012186:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 801218a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 801218e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012192:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012196:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	17da      	asrs	r2, r3, #31
 801219e:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80121a2:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 80121a6:	a3c0      	add	r3, pc, #768	; (adr r3, 80124a8 <arm_softmax_s8+0x38a0>)
 80121a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ac:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 80121b0:	fb02 f001 	mul.w	r0, r2, r1
 80121b4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80121b8:	fb01 f103 	mul.w	r1, r1, r3
 80121bc:	4401      	add	r1, r0
 80121be:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 80121c2:	fba0 2302 	umull	r2, r3, r0, r2
 80121c6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80121ca:	4613      	mov	r3, r2
 80121cc:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 80121d0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80121d4:	18cb      	adds	r3, r1, r3
 80121d6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80121da:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80121de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e2:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 80121e6:	1851      	adds	r1, r2, r1
 80121e8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80121ec:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 80121f0:	414b      	adcs	r3, r1
 80121f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80121f6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80121fa:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80121fe:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012202:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8012206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220a:	2b00      	cmp	r3, #0
 801220c:	da08      	bge.n	8012220 <arm_softmax_s8+0x3618>
 801220e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012212:	1851      	adds	r1, r2, r1
 8012214:	67b9      	str	r1, [r7, #120]	; 0x78
 8012216:	f143 0300 	adc.w	r3, r3, #0
 801221a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801221c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8012220:	f04f 0000 	mov.w	r0, #0
 8012224:	f04f 0100 	mov.w	r1, #0
 8012228:	0fd0      	lsrs	r0, r2, #31
 801222a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801222e:	17d9      	asrs	r1, r3, #31
 8012230:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012234:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8012238:	4603      	mov	r3, r0
 801223a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801223c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012240:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	4b96      	ldr	r3, [pc, #600]	; (80124a0 <arm_softmax_s8+0x3898>)
 8012248:	429a      	cmp	r2, r3
 801224a:	d10e      	bne.n	801226a <arm_softmax_s8+0x3662>
 801224c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012250:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801225a:	d106      	bne.n	801226a <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 801225c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012260:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8012264:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012268:	6013      	str	r3, [r2, #0]
    return result;
 801226a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801226e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8012272:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8012274:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012278:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	ea02 0003 	and.w	r0, r2, r3
 8012282:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012286:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	43da      	mvns	r2, r3
 801228e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012292:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	ea02 0103 	and.w	r1, r2, r3
 801229c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122a0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80122a4:	ea80 0301 	eor.w	r3, r0, r1
 80122a8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 80122aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122ae:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80122b2:	6819      	ldr	r1, [r3, #0]
 80122b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122b8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80122bc:	1c4b      	adds	r3, r1, #1
 80122be:	6013      	str	r3, [r2, #0]
 80122c0:	2301      	movs	r3, #1
 80122c2:	fa03 f201 	lsl.w	r2, r3, r1
 80122c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122ca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4013      	ands	r3, r2
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d002      	beq.n	80122dc <arm_softmax_s8+0x36d4>
 80122d6:	f04f 32ff 	mov.w	r2, #4294967295
 80122da:	e000      	b.n	80122de <arm_softmax_s8+0x36d6>
 80122dc:	2200      	movs	r2, #0
 80122de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122e2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80122e6:	601a      	str	r2, [r3, #0]
 80122e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122ec:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 80122f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122f4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80122fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012300:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8012304:	2300      	movs	r3, #0
 8012306:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801230c:	f04f 0300 	mov.w	r3, #0
 8012310:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8012314:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012318:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801231c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	0fdb      	lsrs	r3, r3, #31
 8012324:	b2da      	uxtb	r2, r3
 8012326:	2300      	movs	r3, #0
 8012328:	4053      	eors	r3, r2
 801232a:	b2db      	uxtb	r3, r3
 801232c:	2b00      	cmp	r3, #0
 801232e:	d010      	beq.n	8012352 <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8012330:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012338:	2100      	movs	r1, #0
 801233a:	f1d2 0001 	rsbs	r0, r2, #1
 801233e:	6738      	str	r0, [r7, #112]	; 0x70
 8012340:	eb61 0303 	sbc.w	r3, r1, r3
 8012344:	677b      	str	r3, [r7, #116]	; 0x74
 8012346:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 801234a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801234e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012352:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012356:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	17da      	asrs	r2, r3, #31
 801235e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8012362:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8012366:	a34c      	add	r3, pc, #304	; (adr r3, 8012498 <arm_softmax_s8+0x3890>)
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8012370:	fb02 f001 	mul.w	r0, r2, r1
 8012374:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8012378:	fb01 f103 	mul.w	r1, r1, r3
 801237c:	4401      	add	r1, r0
 801237e:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8012382:	fba0 2302 	umull	r2, r3, r0, r2
 8012386:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 801238a:	4613      	mov	r3, r2
 801238c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8012390:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8012394:	18cb      	adds	r3, r1, r3
 8012396:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 801239a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a2:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 80123a6:	1851      	adds	r1, r2, r1
 80123a8:	66b9      	str	r1, [r7, #104]	; 0x68
 80123aa:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 80123ae:	414b      	adcs	r3, r1
 80123b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80123b2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80123b6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80123ba:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80123be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	da08      	bge.n	80123dc <arm_softmax_s8+0x37d4>
 80123ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80123ce:	1851      	adds	r1, r2, r1
 80123d0:	6639      	str	r1, [r7, #96]	; 0x60
 80123d2:	f143 0300 	adc.w	r3, r3, #0
 80123d6:	667b      	str	r3, [r7, #100]	; 0x64
 80123d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80123dc:	f04f 0000 	mov.w	r0, #0
 80123e0:	f04f 0100 	mov.w	r1, #0
 80123e4:	0fd0      	lsrs	r0, r2, #31
 80123e6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80123ea:	17d9      	asrs	r1, r3, #31
 80123ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123f0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80123f4:	4603      	mov	r3, r0
 80123f6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80123f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123fc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	4b28      	ldr	r3, [pc, #160]	; (80124a4 <arm_softmax_s8+0x389c>)
 8012404:	429a      	cmp	r2, r3
 8012406:	d10e      	bne.n	8012426 <arm_softmax_s8+0x381e>
 8012408:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801240c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012416:	d106      	bne.n	8012426 <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8012418:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801241c:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8012420:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012424:	6013      	str	r3, [r2, #0]
    return result;
 8012426:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801242a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 801242e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8012430:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012434:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	ea02 0003 	and.w	r0, r2, r3
 801243e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012442:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	43da      	mvns	r2, r3
 801244a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801244e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	ea02 0103 	and.w	r1, r2, r3
 8012458:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801245c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012460:	ea80 0301 	eor.w	r3, r0, r1
 8012464:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8012466:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801246a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801246e:	6819      	ldr	r1, [r3, #0]
 8012470:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012474:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012478:	1c4b      	adds	r3, r1, #1
 801247a:	6013      	str	r3, [r2, #0]
 801247c:	2301      	movs	r3, #1
 801247e:	fa03 f201 	lsl.w	r2, r3, r1
 8012482:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012486:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4013      	ands	r3, r2
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00e      	beq.n	80124b0 <arm_softmax_s8+0x38a8>
 8012492:	f04f 32ff 	mov.w	r2, #4294967295
 8012496:	e00c      	b.n	80124b2 <arm_softmax_s8+0x38aa>
 8012498:	1152aaa4 	.word	0x1152aaa4
 801249c:	00000000 	.word	0x00000000
 80124a0:	2f16ac6c 	.word	0x2f16ac6c
 80124a4:	1152aaa4 	.word	0x1152aaa4
 80124a8:	2f16ac6c 	.word	0x2f16ac6c
 80124ac:	00000000 	.word	0x00000000
 80124b0:	2200      	movs	r2, #0
 80124b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124b6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80124ba:	601a      	str	r2, [r3, #0]
 80124bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124c0:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 80124c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124c8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80124d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124d4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80124d8:	2300      	movs	r3, #0
 80124da:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80124dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80124e0:	f04f 0300 	mov.w	r3, #0
 80124e4:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 80124e8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80124ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124f0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	0fdb      	lsrs	r3, r3, #31
 80124f8:	b2da      	uxtb	r2, r3
 80124fa:	2300      	movs	r3, #0
 80124fc:	4053      	eors	r3, r2
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	2b00      	cmp	r3, #0
 8012502:	d010      	beq.n	8012526 <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 8012504:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8012508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250c:	2100      	movs	r1, #0
 801250e:	f1d2 0001 	rsbs	r0, r2, #1
 8012512:	65b8      	str	r0, [r7, #88]	; 0x58
 8012514:	eb61 0303 	sbc.w	r3, r1, r3
 8012518:	65fb      	str	r3, [r7, #92]	; 0x5c
 801251a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 801251e:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8012522:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012526:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801252a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	17da      	asrs	r2, r3, #31
 8012532:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8012536:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 801253a:	a3bd      	add	r3, pc, #756	; (adr r3, 8012830 <arm_softmax_s8+0x3c28>)
 801253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012540:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8012544:	fb02 f001 	mul.w	r0, r2, r1
 8012548:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 801254c:	fb01 f103 	mul.w	r1, r1, r3
 8012550:	4401      	add	r1, r0
 8012552:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8012556:	fba0 2302 	umull	r2, r3, r0, r2
 801255a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 801255e:	4613      	mov	r3, r2
 8012560:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8012564:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8012568:	18cb      	adds	r3, r1, r3
 801256a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 801256e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 801257a:	1851      	adds	r1, r2, r1
 801257c:	6539      	str	r1, [r7, #80]	; 0x50
 801257e:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8012582:	414b      	adcs	r3, r1
 8012584:	657b      	str	r3, [r7, #84]	; 0x54
 8012586:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 801258a:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 801258e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012592:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8012596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259a:	2b00      	cmp	r3, #0
 801259c:	da08      	bge.n	80125b0 <arm_softmax_s8+0x39a8>
 801259e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125a2:	1851      	adds	r1, r2, r1
 80125a4:	64b9      	str	r1, [r7, #72]	; 0x48
 80125a6:	f143 0300 	adc.w	r3, r3, #0
 80125aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80125b0:	f04f 0000 	mov.w	r0, #0
 80125b4:	f04f 0100 	mov.w	r1, #0
 80125b8:	0fd0      	lsrs	r0, r2, #31
 80125ba:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80125be:	17d9      	asrs	r1, r3, #31
 80125c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125c4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80125c8:	4603      	mov	r3, r0
 80125ca:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80125cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125d0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	4b94      	ldr	r3, [pc, #592]	; (8012828 <arm_softmax_s8+0x3c20>)
 80125d8:	429a      	cmp	r2, r3
 80125da:	d10e      	bne.n	80125fa <arm_softmax_s8+0x39f2>
 80125dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125e0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80125ea:	d106      	bne.n	80125fa <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 80125ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125f0:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80125f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80125f8:	6013      	str	r3, [r2, #0]
    return result;
 80125fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125fe:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012602:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8012604:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012608:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	ea02 0003 	and.w	r0, r2, r3
 8012612:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012616:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	43da      	mvns	r2, r3
 801261e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012622:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	ea02 0103 	and.w	r1, r2, r3
 801262c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012630:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012634:	ea80 0301 	eor.w	r3, r0, r1
 8012638:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 801263a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801263e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012642:	6819      	ldr	r1, [r3, #0]
 8012644:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012648:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801264c:	1c4b      	adds	r3, r1, #1
 801264e:	6013      	str	r3, [r2, #0]
 8012650:	2301      	movs	r3, #1
 8012652:	fa03 f201 	lsl.w	r2, r3, r1
 8012656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801265a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4013      	ands	r3, r2
 8012662:	2b00      	cmp	r3, #0
 8012664:	d002      	beq.n	801266c <arm_softmax_s8+0x3a64>
 8012666:	f04f 32ff 	mov.w	r2, #4294967295
 801266a:	e000      	b.n	801266e <arm_softmax_s8+0x3a66>
 801266c:	2200      	movs	r2, #0
 801266e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012672:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012676:	601a      	str	r2, [r3, #0]
 8012678:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801267c:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8012680:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012684:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801268c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012690:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8012694:	2300      	movs	r3, #0
 8012696:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801269c:	f04f 0300 	mov.w	r3, #0
 80126a0:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 80126a4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80126a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80126ac:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	0fdb      	lsrs	r3, r3, #31
 80126b4:	b2da      	uxtb	r2, r3
 80126b6:	2300      	movs	r3, #0
 80126b8:	4053      	eors	r3, r2
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d010      	beq.n	80126e2 <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 80126c0:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80126c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c8:	2100      	movs	r1, #0
 80126ca:	f1d2 0001 	rsbs	r0, r2, #1
 80126ce:	6438      	str	r0, [r7, #64]	; 0x40
 80126d0:	eb61 0303 	sbc.w	r3, r1, r3
 80126d4:	647b      	str	r3, [r7, #68]	; 0x44
 80126d6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80126da:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 80126de:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80126e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80126e6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	17da      	asrs	r2, r3, #31
 80126ee:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80126f2:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 80126f6:	4a4d      	ldr	r2, [pc, #308]	; (801282c <arm_softmax_s8+0x3c24>)
 80126f8:	f04f 0300 	mov.w	r3, #0
 80126fc:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8012700:	fb02 f001 	mul.w	r0, r2, r1
 8012704:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8012708:	fb01 f103 	mul.w	r1, r1, r3
 801270c:	4401      	add	r1, r0
 801270e:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8012712:	fba0 2302 	umull	r2, r3, r0, r2
 8012716:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801271a:	4613      	mov	r3, r2
 801271c:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8012720:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8012724:	18cb      	adds	r3, r1, r3
 8012726:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801272a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012732:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8012736:	1851      	adds	r1, r2, r1
 8012738:	63b9      	str	r1, [r7, #56]	; 0x38
 801273a:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 801273e:	414b      	adcs	r3, r1
 8012740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012742:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8012746:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 801274a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801274e:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8012752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012756:	2b00      	cmp	r3, #0
 8012758:	da08      	bge.n	801276c <arm_softmax_s8+0x3b64>
 801275a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801275e:	1851      	adds	r1, r2, r1
 8012760:	6339      	str	r1, [r7, #48]	; 0x30
 8012762:	f143 0300 	adc.w	r3, r3, #0
 8012766:	637b      	str	r3, [r7, #52]	; 0x34
 8012768:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801276c:	f04f 0000 	mov.w	r0, #0
 8012770:	f04f 0100 	mov.w	r1, #0
 8012774:	0fd0      	lsrs	r0, r2, #31
 8012776:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801277a:	17d9      	asrs	r1, r3, #31
 801277c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012780:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8012784:	4603      	mov	r3, r0
 8012786:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012788:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801278c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	4b26      	ldr	r3, [pc, #152]	; (801282c <arm_softmax_s8+0x3c24>)
 8012794:	429a      	cmp	r2, r3
 8012796:	d10e      	bne.n	80127b6 <arm_softmax_s8+0x3bae>
 8012798:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801279c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127a6:	d106      	bne.n	80127b6 <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 80127a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127ac:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80127b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80127b4:	6013      	str	r3, [r2, #0]
    return result;
 80127b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127ba:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80127be:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80127c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127c4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	ea02 0003 	and.w	r0, r2, r3
 80127ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127d2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	43da      	mvns	r2, r3
 80127da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127de:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	ea02 0103 	and.w	r1, r2, r3
 80127e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127ec:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80127f0:	ea80 0301 	eor.w	r3, r0, r1
 80127f4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80127f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127fa:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80127fe:	6819      	ldr	r1, [r3, #0]
 8012800:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012804:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012808:	1c4b      	adds	r3, r1, #1
 801280a:	6013      	str	r3, [r2, #0]
 801280c:	2301      	movs	r3, #1
 801280e:	fa03 f201 	lsl.w	r2, r3, r1
 8012812:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012816:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	4013      	ands	r3, r2
 801281e:	2b00      	cmp	r3, #0
 8012820:	d00a      	beq.n	8012838 <arm_softmax_s8+0x3c30>
 8012822:	f04f 32ff 	mov.w	r2, #4294967295
 8012826:	e008      	b.n	801283a <arm_softmax_s8+0x3c32>
 8012828:	02582ab7 	.word	0x02582ab7
 801282c:	000afe11 	.word	0x000afe11
 8012830:	02582ab7 	.word	0x02582ab7
 8012834:	00000000 	.word	0x00000000
 8012838:	2200      	movs	r2, #0
 801283a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801283e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012842:	601a      	str	r2, [r3, #0]
 8012844:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012848:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 801284c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012850:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012858:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801285c:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8012860:	2300      	movs	r3, #0
 8012862:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012868:	f04f 0300 	mov.w	r3, #0
 801286c:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8012870:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012878:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	0fdb      	lsrs	r3, r3, #31
 8012880:	b2da      	uxtb	r2, r3
 8012882:	2300      	movs	r3, #0
 8012884:	4053      	eors	r3, r2
 8012886:	b2db      	uxtb	r3, r3
 8012888:	2b00      	cmp	r3, #0
 801288a:	d010      	beq.n	80128ae <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 801288c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8012890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012894:	2100      	movs	r1, #0
 8012896:	f1d2 0001 	rsbs	r0, r2, #1
 801289a:	62b8      	str	r0, [r7, #40]	; 0x28
 801289c:	eb61 0303 	sbc.w	r3, r1, r3
 80128a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128a2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80128a6:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80128aa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80128ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128b2:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	17da      	asrs	r2, r3, #31
 80128ba:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80128be:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80128c2:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80128c6:	f04f 0300 	mov.w	r3, #0
 80128ca:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 80128ce:	fb02 f001 	mul.w	r0, r2, r1
 80128d2:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 80128d6:	fb01 f103 	mul.w	r1, r1, r3
 80128da:	4401      	add	r1, r0
 80128dc:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80128e0:	fba0 2302 	umull	r2, r3, r0, r2
 80128e4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80128e8:	4613      	mov	r3, r2
 80128ea:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80128ee:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80128f2:	18cb      	adds	r3, r1, r3
 80128f4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80128f8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80128fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012900:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8012904:	1851      	adds	r1, r2, r1
 8012906:	6239      	str	r1, [r7, #32]
 8012908:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 801290c:	414b      	adcs	r3, r1
 801290e:	627b      	str	r3, [r7, #36]	; 0x24
 8012910:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012914:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8012918:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801291c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8012920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012924:	2b00      	cmp	r3, #0
 8012926:	da08      	bge.n	801293a <arm_softmax_s8+0x3d32>
 8012928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801292c:	1851      	adds	r1, r2, r1
 801292e:	61b9      	str	r1, [r7, #24]
 8012930:	f143 0300 	adc.w	r3, r3, #0
 8012934:	61fb      	str	r3, [r7, #28]
 8012936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801293a:	f04f 0000 	mov.w	r0, #0
 801293e:	f04f 0100 	mov.w	r1, #0
 8012942:	0fd0      	lsrs	r0, r2, #31
 8012944:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012948:	17d9      	asrs	r1, r3, #31
 801294a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801294e:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8012952:	4603      	mov	r3, r0
 8012954:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012956:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801295a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2bf2      	cmp	r3, #242	; 0xf2
 8012962:	d10e      	bne.n	8012982 <arm_softmax_s8+0x3d7a>
 8012964:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012968:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012972:	d106      	bne.n	8012982 <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 8012974:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012978:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801297c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012980:	6013      	str	r3, [r2, #0]
    return result;
 8012982:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012986:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 801298a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 801298c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012990:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	ea02 0003 	and.w	r0, r2, r3
 801299a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801299e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	43da      	mvns	r2, r3
 80129a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129aa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	ea02 0103 	and.w	r1, r2, r3
 80129b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129b8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80129bc:	ea80 0301 	eor.w	r3, r0, r1
 80129c0:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80129c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129c6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d102      	bne.n	80129d6 <arm_softmax_s8+0x3dce>
 80129d0:	f04f 32ff 	mov.w	r2, #4294967295
 80129d4:	e000      	b.n	80129d8 <arm_softmax_s8+0x3dd0>
 80129d6:	2200      	movs	r2, #0
 80129d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129dc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129e0:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80129e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129e6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80129f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129f4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	43da      	mvns	r2, r3
 80129fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a00:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	4013      	ands	r3, r2
 8012a08:	4059      	eors	r1, r3
 8012a0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a0e:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8012a12:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8012a16:	6013      	str	r3, [r2, #0]
 8012a18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a1c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012a20:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8012a22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a26:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012a32:	f04f 0300 	mov.w	r3, #0
 8012a36:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8012a3a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012a3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a42:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	0fdb      	lsrs	r3, r3, #31
 8012a4a:	b2da      	uxtb	r2, r3
 8012a4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a50:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	0fdb      	lsrs	r3, r3, #31
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	4053      	eors	r3, r2
 8012a5c:	b2db      	uxtb	r3, r3
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d010      	beq.n	8012a84 <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8012a62:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6a:	2100      	movs	r1, #0
 8012a6c:	f1d2 0001 	rsbs	r0, r2, #1
 8012a70:	6138      	str	r0, [r7, #16]
 8012a72:	eb61 0303 	sbc.w	r3, r1, r3
 8012a76:	617b      	str	r3, [r7, #20]
 8012a78:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012a7c:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8012a80:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012a84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a88:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	17da      	asrs	r2, r3, #31
 8012a90:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8012a94:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8012a98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a9c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	17da      	asrs	r2, r3, #31
 8012aa4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8012aa8:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8012aac:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8012ab6:	fb02 f203 	mul.w	r2, r2, r3
 8012aba:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8012abe:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8012ac2:	4601      	mov	r1, r0
 8012ac4:	fb01 f303 	mul.w	r3, r1, r3
 8012ac8:	4413      	add	r3, r2
 8012aca:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8012ace:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8012ad2:	fba2 1201 	umull	r1, r2, r2, r1
 8012ad6:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8012ada:	460a      	mov	r2, r1
 8012adc:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8012ae0:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8012ae4:	4413      	add	r3, r2
 8012ae6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8012aea:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af2:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8012af6:	1851      	adds	r1, r2, r1
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8012afe:	414b      	adcs	r3, r1
 8012b00:	60fb      	str	r3, [r7, #12]
 8012b02:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8012b06:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8012b0a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012b0e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	da08      	bge.n	8012b2c <arm_softmax_s8+0x3f24>
 8012b1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b1e:	1851      	adds	r1, r2, r1
 8012b20:	6039      	str	r1, [r7, #0]
 8012b22:	f143 0300 	adc.w	r3, r3, #0
 8012b26:	607b      	str	r3, [r7, #4]
 8012b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b2c:	f04f 0000 	mov.w	r0, #0
 8012b30:	f04f 0100 	mov.w	r1, #0
 8012b34:	0fd0      	lsrs	r0, r2, #31
 8012b36:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012b3a:	17d9      	asrs	r1, r3, #31
 8012b3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b40:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8012b44:	4603      	mov	r3, r0
 8012b46:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012b48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b4c:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8012b50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b54:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012b58:	6812      	ldr	r2, [r2, #0]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d10e      	bne.n	8012b7e <arm_softmax_s8+0x3f76>
 8012b60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b64:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b6e:	d106      	bne.n	8012b7e <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8012b70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b74:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8012b78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012b7c:	6013      	str	r3, [r2, #0]
    return result;
 8012b7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b82:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012b86:	681a      	ldr	r2, [r3, #0]
 8012b88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b8c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8012b90:	601a      	str	r2, [r3, #0]
 8012b92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b96:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8012b9a:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8012b9e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ba4:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8012ba8:	2300      	movs	r3, #0
 8012baa:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012bac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bb0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012bb4:	2201      	movs	r2, #1
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	fa02 f103 	lsl.w	r1, r2, r3
 8012bbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bc0:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012bc4:	1e4b      	subs	r3, r1, #1
 8012bc6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012bc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bcc:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8012bd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bd4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8012bd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bdc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012be0:	6812      	ldr	r2, [r2, #0]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	4013      	ands	r3, r2
 8012be6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012be8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bec:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8012bf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bf4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8012bf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bfc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012c00:	6812      	ldr	r2, [r2, #0]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	fa42 f303 	asr.w	r3, r2, r3
 8012c08:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8012c0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c0e:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8012c12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c16:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	105b      	asrs	r3, r3, #1
 8012c1e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012c20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c24:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	da0a      	bge.n	8012c44 <arm_softmax_s8+0x403c>
        threshold++;
 8012c2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c32:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8012c36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c3a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	3301      	adds	r3, #1
 8012c42:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012c44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c48:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8012c4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c50:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8012c54:	6812      	ldr	r2, [r2, #0]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	dd0a      	ble.n	8012c72 <arm_softmax_s8+0x406a>
        result++;
 8012c5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c60:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8012c64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c68:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	6013      	str	r3, [r2, #0]
    return result;
 8012c72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c76:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012c7a:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8012c7c:	3b80      	subs	r3, #128	; 0x80
 8012c7e:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8012c82:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c86:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8012c8a:	db09      	blt.n	8012ca0 <arm_softmax_s8+0x4098>
 8012c8c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c90:	2b7e      	cmp	r3, #126	; 0x7e
 8012c92:	dc03      	bgt.n	8012c9c <arm_softmax_s8+0x4094>
 8012c94:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c98:	b259      	sxtb	r1, r3
 8012c9a:	e003      	b.n	8012ca4 <arm_softmax_s8+0x409c>
 8012c9c:	217f      	movs	r1, #127	; 0x7f
 8012c9e:	e001      	b.n	8012ca4 <arm_softmax_s8+0x409c>
 8012ca0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8012ca4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012ca8:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012cac:	441a      	add	r2, r3
 8012cae:	460b      	mov	r3, r1
 8012cb0:	7013      	strb	r3, [r2, #0]
 8012cb2:	e006      	b.n	8012cc2 <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8012cb4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012cb8:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012cbc:	441a      	add	r2, r3
 8012cbe:	2380      	movs	r3, #128	; 0x80
 8012cc0:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8012cc2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8012ccc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cd0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012cd4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	f6fe aa71 	blt.w	80111c2 <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8012ce0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ce4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012ce8:	6819      	ldr	r1, [r3, #0]
 8012cea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cee:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8012cf2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cf6:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	440b      	add	r3, r1
 8012cfe:	6013      	str	r3, [r2, #0]
        output += row_size;
 8012d00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012d04:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012d0e:	4413      	add	r3, r2
 8012d10:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8012d14:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8012d18:	3301      	adds	r3, #1
 8012d1a:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8012d1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012d22:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8012d26:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	f6fb af93 	blt.w	800ec58 <arm_softmax_s8+0x50>
    }

#endif
}
 8012d32:	bf00      	nop
 8012d34:	bf00      	nop
 8012d36:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012d40:	4770      	bx	lr
 8012d42:	bf00      	nop

08012d44 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b082      	sub	sp, #8
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8012d4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8012d52:	f006 f9fd 	bl	8019150 <log10f>
 8012d56:	eef0 7a40 	vmov.f32	s15, s0
 8012d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8012d5e:	3708      	adds	r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8012d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	ed87 0b00 	vstr	d0, [r7]
 8012d6e:	683c      	ldr	r4, [r7, #0]
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8012d76:	2301      	movs	r3, #1
 8012d78:	461e      	mov	r6, r3
 8012d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d7e:	4b10      	ldr	r3, [pc, #64]	; (8012dc0 <_ZSt5isinfd+0x5c>)
 8012d80:	4620      	mov	r0, r4
 8012d82:	4629      	mov	r1, r5
 8012d84:	f7ed fedc 	bl	8000b40 <__aeabi_dcmpun>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d10b      	bne.n	8012da6 <_ZSt5isinfd+0x42>
 8012d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d92:	4b0b      	ldr	r3, [pc, #44]	; (8012dc0 <_ZSt5isinfd+0x5c>)
 8012d94:	4620      	mov	r0, r4
 8012d96:	4629      	mov	r1, r5
 8012d98:	f7ed feb4 	bl	8000b04 <__aeabi_dcmple>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d101      	bne.n	8012da6 <_ZSt5isinfd+0x42>
 8012da2:	2300      	movs	r3, #0
 8012da4:	461e      	mov	r6, r3
 8012da6:	b2f3      	uxtb	r3, r6
 8012da8:	f083 0301 	eor.w	r3, r3, #1
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	bf14      	ite	ne
 8012db2:	2301      	movne	r3, #1
 8012db4:	2300      	moveq	r3, #0
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	4618      	mov	r0, r3
 8012dba:	370c      	adds	r7, #12
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc0:	7fefffff 	.word	0x7fefffff

08012dc4 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8012dc4:	b480      	push	{r7}
 8012dc6:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8012dc8:	2300      	movs	r3, #0
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr

08012dd4 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8012dd4:	b5b0      	push	{r4, r5, r7, lr}
 8012dd6:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8012dd8:	f7f2 fb88 	bl	80054ec <HAL_GetTick>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012de2:	fb02 f303 	mul.w	r3, r2, r3
 8012de6:	2200      	movs	r2, #0
 8012de8:	461c      	mov	r4, r3
 8012dea:	4615      	mov	r5, r2
 8012dec:	4622      	mov	r2, r4
 8012dee:	462b      	mov	r3, r5
}
 8012df0:	4610      	mov	r0, r2
 8012df2:	4619      	mov	r1, r3
 8012df4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012df8 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8012df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dfc:	b08c      	sub	sp, #48	; 0x30
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8012e04:	466b      	mov	r3, sp
 8012e06:	4698      	mov	r8, r3
    float n = f;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8012e0c:	4b7e      	ldr	r3, [pc, #504]	; (8013008 <_Z15ei_printf_floatf+0x210>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	1e5e      	subs	r6, r3, #1
 8012e12:	623e      	str	r6, [r7, #32]
 8012e14:	4633      	mov	r3, r6
 8012e16:	3301      	adds	r3, #1
 8012e18:	2200      	movs	r2, #0
 8012e1a:	461c      	mov	r4, r3
 8012e1c:	4615      	mov	r5, r2
 8012e1e:	f04f 0200 	mov.w	r2, #0
 8012e22:	f04f 0300 	mov.w	r3, #0
 8012e26:	00eb      	lsls	r3, r5, #3
 8012e28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012e2c:	00e2      	lsls	r2, r4, #3
 8012e2e:	4633      	mov	r3, r6
 8012e30:	3301      	adds	r3, #1
 8012e32:	2200      	movs	r2, #0
 8012e34:	4618      	mov	r0, r3
 8012e36:	4611      	mov	r1, r2
 8012e38:	f04f 0200 	mov.w	r2, #0
 8012e3c:	f04f 0300 	mov.w	r3, #0
 8012e40:	00cb      	lsls	r3, r1, #3
 8012e42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8012e46:	00c2      	lsls	r2, r0, #3
 8012e48:	4633      	mov	r3, r6
 8012e4a:	3301      	adds	r3, #1
 8012e4c:	3307      	adds	r3, #7
 8012e4e:	08db      	lsrs	r3, r3, #3
 8012e50:	00db      	lsls	r3, r3, #3
 8012e52:	ebad 0d03 	sub.w	sp, sp, r3
 8012e56:	466b      	mov	r3, sp
 8012e58:	3300      	adds	r3, #0
 8012e5a:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8012e5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e68:	d106      	bne.n	8012e78 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8012e6a:	69fb      	ldr	r3, [r7, #28]
 8012e6c:	4967      	ldr	r1, [pc, #412]	; (801300c <_Z15ei_printf_floatf+0x214>)
 8012e6e:	461a      	mov	r2, r3
 8012e70:	460b      	mov	r3, r1
 8012e72:	881b      	ldrh	r3, [r3, #0]
 8012e74:	8013      	strh	r3, [r2, #0]
 8012e76:	e0b6      	b.n	8012fe6 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8012e7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e88:	bf4c      	ite	mi
 8012e8a:	2301      	movmi	r3, #1
 8012e8c:	2300      	movpl	r3, #0
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8012e92:	69bb      	ldr	r3, [r7, #24]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d005      	beq.n	8012ea4 <_Z15ei_printf_floatf+0xac>
            n = -n;
 8012e98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e9c:	eef1 7a67 	vneg.f32	s15, s15
 8012ea0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8012ea4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8012ea8:	f7ff ff4c 	bl	8012d44 <_ZSt5log10f>
 8012eac:	eef0 7a40 	vmov.f32	s15, s0
 8012eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012eb4:	ee17 3a90 	vmov	r3, s15
 8012eb8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8012eba:	69bb      	ldr	r3, [r7, #24]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d004      	beq.n	8012eca <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8012ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec2:	1c5a      	adds	r2, r3, #1
 8012ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012ec6:	222d      	movs	r2, #45	; 0x2d
 8012ec8:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8012eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	dc01      	bgt.n	8012ed4 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8012ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ed6:	f7ed fb41 	bl	800055c <__aeabi_f2d>
 8012eda:	4b4d      	ldr	r3, [pc, #308]	; (8013010 <_Z15ei_printf_floatf+0x218>)
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	2401      	movs	r4, #1
 8012ee2:	f7ed fe23 	bl	8000b2c <__aeabi_dcmpgt>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d101      	bne.n	8012ef0 <_Z15ei_printf_floatf+0xf8>
 8012eec:	2300      	movs	r3, #0
 8012eee:	461c      	mov	r4, r3
 8012ef0:	b2e3      	uxtb	r3, r4
 8012ef2:	f083 0301 	eor.w	r3, r3, #1
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d002      	beq.n	8012f02 <_Z15ei_printf_floatf+0x10a>
 8012efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	db6e      	blt.n	8012fe0 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8012f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f04:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8013000 <_Z15ei_printf_floatf+0x208>
 8012f08:	f000 f89f 	bl	801304a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8012f0c:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8012f10:	f04f 0200 	mov.w	r2, #0
 8012f14:	f04f 0300 	mov.w	r3, #0
 8012f18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012f1c:	f7ed fe06 	bl	8000b2c <__aeabi_dcmpgt>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d00b      	beq.n	8012f3e <_Z15ei_printf_floatf+0x146>
 8012f26:	ed97 0b04 	vldr	d0, [r7, #16]
 8012f2a:	f7ff ff1b 	bl	8012d64 <_ZSt5isinfd>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	f083 0301 	eor.w	r3, r3, #1
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d001      	beq.n	8012f3e <_Z15ei_printf_floatf+0x146>
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	e000      	b.n	8012f40 <_Z15ei_printf_floatf+0x148>
 8012f3e:	2300      	movs	r3, #0
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d03a      	beq.n	8012fba <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8012f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f46:	f7ed fb09 	bl	800055c <__aeabi_f2d>
 8012f4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012f4e:	f7ed fc87 	bl	8000860 <__aeabi_ddiv>
 8012f52:	4602      	mov	r2, r0
 8012f54:	460b      	mov	r3, r1
 8012f56:	ec43 2b17 	vmov	d7, r2, r3
 8012f5a:	eeb0 0a47 	vmov.f32	s0, s14
 8012f5e:	eef0 0a67 	vmov.f32	s1, s15
 8012f62:	f005 ff2d 	bl	8018dc0 <floor>
 8012f66:	ec53 2b10 	vmov	r2, r3, d0
 8012f6a:	4610      	mov	r0, r2
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	f7ed fdfd 	bl	8000b6c <__aeabi_d2iz>
 8012f72:	4603      	mov	r3, r0
 8012f74:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8012f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f78:	f7ed faf0 	bl	800055c <__aeabi_f2d>
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	460d      	mov	r5, r1
 8012f80:	68f8      	ldr	r0, [r7, #12]
 8012f82:	f7ed fad9 	bl	8000538 <__aeabi_i2d>
 8012f86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012f8a:	f7ed fb3f 	bl	800060c <__aeabi_dmul>
 8012f8e:	4602      	mov	r2, r0
 8012f90:	460b      	mov	r3, r1
 8012f92:	4620      	mov	r0, r4
 8012f94:	4629      	mov	r1, r5
 8012f96:	f7ed f981 	bl	800029c <__aeabi_dsub>
 8012f9a:	4602      	mov	r2, r0
 8012f9c:	460b      	mov	r3, r1
 8012f9e:	4610      	mov	r0, r2
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	f7ed fe2b 	bl	8000bfc <__aeabi_d2f>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	b2da      	uxtb	r2, r3
 8012fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb0:	1c59      	adds	r1, r3, #1
 8012fb2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012fb4:	3230      	adds	r2, #48	; 0x30
 8012fb6:	b2d2      	uxtb	r2, r2
 8012fb8:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8012fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10b      	bne.n	8012fd8 <_Z15ei_printf_floatf+0x1e0>
 8012fc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012fc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fcc:	dd04      	ble.n	8012fd8 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8012fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd0:	1c5a      	adds	r2, r3, #1
 8012fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012fd4:	222e      	movs	r2, #46	; 0x2e
 8012fd6:	701a      	strb	r2, [r3, #0]
            m--;
 8012fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fda:	3b01      	subs	r3, #1
 8012fdc:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8012fde:	e779      	b.n	8012ed4 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8012fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8012fe6:	69f9      	ldr	r1, [r7, #28]
 8012fe8:	480a      	ldr	r0, [pc, #40]	; (8013014 <_Z15ei_printf_floatf+0x21c>)
 8012fea:	f7f0 ff1f 	bl	8003e2c <_Z9ei_printfPKcz>
 8012fee:	46c5      	mov	sp, r8
}
 8012ff0:	bf00      	nop
 8012ff2:	3730      	adds	r7, #48	; 0x30
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ffa:	bf00      	nop
 8012ffc:	f3af 8000 	nop.w
 8013000:	00000000 	.word	0x00000000
 8013004:	40240000 	.word	0x40240000
 8013008:	20002758 	.word	0x20002758
 801300c:	0801dd58 	.word	0x0801dd58
 8013010:	20002750 	.word	0x20002750
 8013014:	0801dd5c 	.word	0x0801dd5c

08013018 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8013022:	6839      	ldr	r1, [r7, #0]
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f007 f9ff 	bl	801a428 <calloc>
 801302a:	4603      	mov	r3, r0
}
 801302c:	4618      	mov	r0, r3
 801302e:	3708      	adds	r7, #8
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
    free(ptr);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f007 fa43 	bl	801a4c8 <free>
}
 8013042:	bf00      	nop
 8013044:	3708      	adds	r7, #8
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}

0801304a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 801304a:	b580      	push	{r7, lr}
 801304c:	b084      	sub	sp, #16
 801304e:	af00      	add	r7, sp, #0
 8013050:	ed87 0b02 	vstr	d0, [r7, #8]
 8013054:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f7ed fa6e 	bl	8000538 <__aeabi_i2d>
 801305c:	4602      	mov	r2, r0
 801305e:	460b      	mov	r3, r1
 8013060:	ec43 2b11 	vmov	d1, r2, r3
 8013064:	ed97 0b02 	vldr	d0, [r7, #8]
 8013068:	f005 ffcc 	bl	8019004 <pow>
 801306c:	eeb0 7a40 	vmov.f32	s14, s0
 8013070:	eef0 7a60 	vmov.f32	s15, s1
    }
 8013074:	eeb0 0a47 	vmov.f32	s0, s14
 8013078:	eef0 0a67 	vmov.f32	s1, s15
 801307c:	3710      	adds	r7, #16
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
	...

08013084 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 801308e:	79fb      	ldrb	r3, [r7, #7]
 8013090:	2b10      	cmp	r3, #16
 8013092:	d847      	bhi.n	8013124 <TfLiteTypeGetName+0xa0>
 8013094:	a201      	add	r2, pc, #4	; (adr r2, 801309c <TfLiteTypeGetName+0x18>)
 8013096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801309a:	bf00      	nop
 801309c:	080130e1 	.word	0x080130e1
 80130a0:	080130e5 	.word	0x080130e5
 80130a4:	080130ed 	.word	0x080130ed
 80130a8:	080130f5 	.word	0x080130f5
 80130ac:	080130fd 	.word	0x080130fd
 80130b0:	08013111 	.word	0x08013111
 80130b4:	08013105 	.word	0x08013105
 80130b8:	080130e9 	.word	0x080130e9
 80130bc:	08013109 	.word	0x08013109
 80130c0:	080130f9 	.word	0x080130f9
 80130c4:	08013115 	.word	0x08013115
 80130c8:	08013119 	.word	0x08013119
 80130cc:	0801310d 	.word	0x0801310d
 80130d0:	08013101 	.word	0x08013101
 80130d4:	0801311d 	.word	0x0801311d
 80130d8:	08013121 	.word	0x08013121
 80130dc:	080130f1 	.word	0x080130f1
    case kTfLiteNoType:
      return "NOTYPE";
 80130e0:	4b14      	ldr	r3, [pc, #80]	; (8013134 <TfLiteTypeGetName+0xb0>)
 80130e2:	e020      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 80130e4:	4b14      	ldr	r3, [pc, #80]	; (8013138 <TfLiteTypeGetName+0xb4>)
 80130e6:	e01e      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 80130e8:	4b14      	ldr	r3, [pc, #80]	; (801313c <TfLiteTypeGetName+0xb8>)
 80130ea:	e01c      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 80130ec:	4b14      	ldr	r3, [pc, #80]	; (8013140 <TfLiteTypeGetName+0xbc>)
 80130ee:	e01a      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 80130f0:	4b14      	ldr	r3, [pc, #80]	; (8013144 <TfLiteTypeGetName+0xc0>)
 80130f2:	e018      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 80130f4:	4b14      	ldr	r3, [pc, #80]	; (8013148 <TfLiteTypeGetName+0xc4>)
 80130f6:	e016      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 80130f8:	4b14      	ldr	r3, [pc, #80]	; (801314c <TfLiteTypeGetName+0xc8>)
 80130fa:	e014      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 80130fc:	4b14      	ldr	r3, [pc, #80]	; (8013150 <TfLiteTypeGetName+0xcc>)
 80130fe:	e012      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8013100:	4b14      	ldr	r3, [pc, #80]	; (8013154 <TfLiteTypeGetName+0xd0>)
 8013102:	e010      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8013104:	4b14      	ldr	r3, [pc, #80]	; (8013158 <TfLiteTypeGetName+0xd4>)
 8013106:	e00e      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8013108:	4b14      	ldr	r3, [pc, #80]	; (801315c <TfLiteTypeGetName+0xd8>)
 801310a:	e00c      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801310c:	4b14      	ldr	r3, [pc, #80]	; (8013160 <TfLiteTypeGetName+0xdc>)
 801310e:	e00a      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8013110:	4b14      	ldr	r3, [pc, #80]	; (8013164 <TfLiteTypeGetName+0xe0>)
 8013112:	e008      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8013114:	4b14      	ldr	r3, [pc, #80]	; (8013168 <TfLiteTypeGetName+0xe4>)
 8013116:	e006      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8013118:	4b14      	ldr	r3, [pc, #80]	; (801316c <TfLiteTypeGetName+0xe8>)
 801311a:	e004      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801311c:	4b14      	ldr	r3, [pc, #80]	; (8013170 <TfLiteTypeGetName+0xec>)
 801311e:	e002      	b.n	8013126 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8013120:	4b14      	ldr	r3, [pc, #80]	; (8013174 <TfLiteTypeGetName+0xf0>)
 8013122:	e000      	b.n	8013126 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8013124:	4b14      	ldr	r3, [pc, #80]	; (8013178 <TfLiteTypeGetName+0xf4>)
}
 8013126:	4618      	mov	r0, r3
 8013128:	370c      	adds	r7, #12
 801312a:	46bd      	mov	sp, r7
 801312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop
 8013134:	0801dd60 	.word	0x0801dd60
 8013138:	0801dd68 	.word	0x0801dd68
 801313c:	0801dd70 	.word	0x0801dd70
 8013140:	0801dd78 	.word	0x0801dd78
 8013144:	0801dd80 	.word	0x0801dd80
 8013148:	0801dd88 	.word	0x0801dd88
 801314c:	0801dd90 	.word	0x0801dd90
 8013150:	0801dd98 	.word	0x0801dd98
 8013154:	0801dda0 	.word	0x0801dda0
 8013158:	0801dda8 	.word	0x0801dda8
 801315c:	0801ddb0 	.word	0x0801ddb0
 8013160:	0801ddbc 	.word	0x0801ddbc
 8013164:	0801ddc8 	.word	0x0801ddc8
 8013168:	0801ddd0 	.word	0x0801ddd0
 801316c:	0801ddd8 	.word	0x0801ddd8
 8013170:	0801dde0 	.word	0x0801dde0
 8013174:	0801ddec 	.word	0x0801ddec
 8013178:	0801ddf4 	.word	0x0801ddf4

0801317c <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801317c:	b480      	push	{r7}
 801317e:	af00      	add	r7, sp, #0
 8013180:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013184:	4618      	mov	r0, r3
 8013186:	46bd      	mov	sp, r7
 8013188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318c:	4770      	bx	lr
	...

08013190 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8013190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013194:	b088      	sub	sp, #32
 8013196:	af00      	add	r7, sp, #0
 8013198:	ed87 0b02 	vstr	d0, [r7, #8]
 801319c:	6078      	str	r0, [r7, #4]
 801319e:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 80131a0:	f04f 0200 	mov.w	r2, #0
 80131a4:	f04f 0300 	mov.w	r3, #0
 80131a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80131ac:	f7ed fc96 	bl	8000adc <__aeabi_dcmpeq>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d006      	beq.n	80131c4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2200      	movs	r2, #0
 80131ba:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	2200      	movs	r2, #0
 80131c0:	601a      	str	r2, [r3, #0]
    return;
 80131c2:	e068      	b.n	8013296 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80131c4:	6838      	ldr	r0, [r7, #0]
 80131c6:	ed97 0b02 	vldr	d0, [r7, #8]
 80131ca:	f005 fe79 	bl	8018ec0 <frexp>
 80131ce:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 80131d2:	f04f 0200 	mov.w	r2, #0
 80131d6:	4b32      	ldr	r3, [pc, #200]	; (80132a0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80131d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80131dc:	f7ed fa16 	bl	800060c <__aeabi_dmul>
 80131e0:	4602      	mov	r2, r0
 80131e2:	460b      	mov	r3, r1
 80131e4:	ec43 2b17 	vmov	d7, r2, r3
 80131e8:	eeb0 0a47 	vmov.f32	s0, s14
 80131ec:	eef0 0a67 	vmov.f32	s1, s15
 80131f0:	f000 f962 	bl	80134b8 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80131f4:	ec53 2b10 	vmov	r2, r3, d0
 80131f8:	4610      	mov	r0, r2
 80131fa:	4619      	mov	r1, r3
 80131fc:	f7ed fdb6 	bl	8000d6c <__aeabi_d2lz>
 8013200:	4602      	mov	r2, r0
 8013202:	460b      	mov	r3, r1
 8013204:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8013208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801320c:	4925      	ldr	r1, [pc, #148]	; (80132a4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801320e:	428a      	cmp	r2, r1
 8013210:	f173 0300 	sbcs.w	r3, r3, #0
 8013214:	db01      	blt.n	801321a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8013216:	f007 f8e1 	bl	801a3dc <abort>
  if (q_fixed == (1ll << 31)) {
 801321a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801321e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8013222:	430b      	orrs	r3, r1
 8013224:	d118      	bne.n	8013258 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8013226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801322a:	0fd9      	lsrs	r1, r3, #31
 801322c:	2000      	movs	r0, #0
 801322e:	468a      	mov	sl, r1
 8013230:	4683      	mov	fp, r0
 8013232:	eb1a 0402 	adds.w	r4, sl, r2
 8013236:	eb4b 0503 	adc.w	r5, fp, r3
 801323a:	f04f 0200 	mov.w	r2, #0
 801323e:	f04f 0300 	mov.w	r3, #0
 8013242:	0862      	lsrs	r2, r4, #1
 8013244:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8013248:	106b      	asrs	r3, r5, #1
 801324a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	1c5a      	adds	r2, r3, #1
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8013258:	f7ff ff90 	bl	801317c <_ZNSt14numeric_limitsIlE3maxEv>
 801325c:	4603      	mov	r3, r0
 801325e:	17da      	asrs	r2, r3, #31
 8013260:	4698      	mov	r8, r3
 8013262:	4691      	mov	r9, r2
 8013264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013268:	4590      	cmp	r8, r2
 801326a:	eb79 0303 	sbcs.w	r3, r9, r3
 801326e:	da01      	bge.n	8013274 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8013270:	f007 f8b4 	bl	801a3dc <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	f113 0f1f 	cmn.w	r3, #31
 801327c:	da08      	bge.n	8013290 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	2200      	movs	r2, #0
 8013282:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8013284:	f04f 0200 	mov.w	r2, #0
 8013288:	f04f 0300 	mov.w	r3, #0
 801328c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8013290:	69ba      	ldr	r2, [r7, #24]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	601a      	str	r2, [r3, #0]
}
 8013296:	3720      	adds	r7, #32
 8013298:	46bd      	mov	sp, r7
 801329a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801329e:	bf00      	nop
 80132a0:	41e00000 	.word	0x41e00000
 80132a4:	80000001 	.word	0x80000001

080132a8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b084      	sub	sp, #16
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 80132b6:	f04f 0200 	mov.w	r2, #0
 80132ba:	4b0d      	ldr	r3, [pc, #52]	; (80132f0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 80132bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80132c0:	f7ed fc34 	bl	8000b2c <__aeabi_dcmpgt>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d101      	bne.n	80132ce <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 80132ca:	f007 f887 	bl	801a3dc <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 80132ce:	6839      	ldr	r1, [r7, #0]
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	ed97 0b02 	vldr	d0, [r7, #8]
 80132d6:	f7ff ff5b 	bl	8013190 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	da01      	bge.n	80132e6 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 80132e2:	f007 f87b 	bl	801a3dc <abort>
}
 80132e6:	bf00      	nop
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	3ff00000 	.word	0x3ff00000

080132f4 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b082      	sub	sp, #8
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330a:	f7ed fbf1 	bl	8000af0 <__aeabi_dcmplt>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d001      	beq.n	8013318 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	e000      	b.n	801331a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8013318:	687b      	ldr	r3, [r7, #4]
    }
 801331a:	4618      	mov	r0, r3
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	0000      	movs	r0, r0
 8013324:	0000      	movs	r0, r0
	...

08013328 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8013328:	b5b0      	push	{r4, r5, r7, lr}
 801332a:	b08e      	sub	sp, #56	; 0x38
 801332c:	af00      	add	r7, sp, #0
 801332e:	ed87 0b06 	vstr	d0, [r7, #24]
 8013332:	ed87 1b04 	vstr	d1, [r7, #16]
 8013336:	60f8      	str	r0, [r7, #12]
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801333c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013340:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013344:	f7ed f962 	bl	800060c <__aeabi_dmul>
 8013348:	4602      	mov	r2, r0
 801334a:	460b      	mov	r3, r1
 801334c:	4614      	mov	r4, r2
 801334e:	461d      	mov	r5, r3
 8013350:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	fa22 f303 	lsr.w	r3, r2, r3
 801335a:	4618      	mov	r0, r3
 801335c:	f7ed f8ec 	bl	8000538 <__aeabi_i2d>
 8013360:	4602      	mov	r2, r0
 8013362:	460b      	mov	r3, r1
 8013364:	4620      	mov	r0, r4
 8013366:	4629      	mov	r1, r5
 8013368:	f7ed f950 	bl	800060c <__aeabi_dmul>
 801336c:	4602      	mov	r2, r0
 801336e:	460b      	mov	r3, r1
 8013370:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8013374:	a30e      	add	r3, pc, #56	; (adr r3, 80133b0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8013376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801337e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013382:	f107 0320 	add.w	r3, r7, #32
 8013386:	4611      	mov	r1, r2
 8013388:	4618      	mov	r0, r3
 801338a:	f7ff ffb3 	bl	80132f4 <_ZSt3minIdERKT_S2_S2_>
 801338e:	4603      	mov	r3, r0
 8013390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013394:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8013398:	6879      	ldr	r1, [r7, #4]
 801339a:	68b8      	ldr	r0, [r7, #8]
 801339c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80133a0:	f7ff ff82 	bl	80132a8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 80133a4:	bf00      	nop
 80133a6:	3738      	adds	r7, #56	; 0x38
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bdb0      	pop	{r4, r5, r7, pc}
 80133ac:	f3af 8000 	nop.w
 80133b0:	ffc00000 	.word	0xffc00000
 80133b4:	41dfffff 	.word	0x41dfffff

080133b8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 80133b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133bc:	b087      	sub	sp, #28
 80133be:	af00      	add	r7, sp, #0
 80133c0:	60f8      	str	r0, [r7, #12]
 80133c2:	60b9      	str	r1, [r7, #8]
 80133c4:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 80133c6:	2201      	movs	r2, #1
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	fa02 f303 	lsl.w	r3, r2, r3
 80133ce:	3b01      	subs	r3, #1
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7ed f8b1 	bl	8000538 <__aeabi_i2d>
 80133d6:	4682      	mov	sl, r0
 80133d8:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 80133da:	687a      	ldr	r2, [r7, #4]
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	1ad1      	subs	r1, r2, r3
 80133e0:	f04f 0201 	mov.w	r2, #1
 80133e4:	f04f 0300 	mov.w	r3, #0
 80133e8:	f1a1 0620 	sub.w	r6, r1, #32
 80133ec:	f1c1 0020 	rsb	r0, r1, #32
 80133f0:	fa03 f901 	lsl.w	r9, r3, r1
 80133f4:	fa02 f606 	lsl.w	r6, r2, r6
 80133f8:	ea49 0906 	orr.w	r9, r9, r6
 80133fc:	fa22 f000 	lsr.w	r0, r2, r0
 8013400:	ea49 0900 	orr.w	r9, r9, r0
 8013404:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8013408:	4640      	mov	r0, r8
 801340a:	4649      	mov	r1, r9
 801340c:	f7ed f8d0 	bl	80005b0 <__aeabi_l2d>
 8013410:	4602      	mov	r2, r0
 8013412:	460b      	mov	r3, r1
 8013414:	4650      	mov	r0, sl
 8013416:	4659      	mov	r1, fp
 8013418:	f7ed f8f8 	bl	800060c <__aeabi_dmul>
 801341c:	4602      	mov	r2, r0
 801341e:	460b      	mov	r3, r1
 8013420:	4690      	mov	r8, r2
 8013422:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8013424:	f04f 0201 	mov.w	r2, #1
 8013428:	f04f 0300 	mov.w	r3, #0
 801342c:	68b9      	ldr	r1, [r7, #8]
 801342e:	f1a1 0620 	sub.w	r6, r1, #32
 8013432:	f1c1 0020 	rsb	r0, r1, #32
 8013436:	fa03 f501 	lsl.w	r5, r3, r1
 801343a:	fa02 f606 	lsl.w	r6, r2, r6
 801343e:	4335      	orrs	r5, r6
 8013440:	fa22 f000 	lsr.w	r0, r2, r0
 8013444:	4305      	orrs	r5, r0
 8013446:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801344a:	4620      	mov	r0, r4
 801344c:	4629      	mov	r1, r5
 801344e:	f7ed f8af 	bl	80005b0 <__aeabi_l2d>
 8013452:	4602      	mov	r2, r0
 8013454:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8013456:	4640      	mov	r0, r8
 8013458:	4649      	mov	r1, r9
 801345a:	f7ed fa01 	bl	8000860 <__aeabi_ddiv>
 801345e:	4602      	mov	r2, r0
 8013460:	460b      	mov	r3, r1
 8013462:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8013466:	ed97 0b04 	vldr	d0, [r7, #16]
 801346a:	f005 fca9 	bl	8018dc0 <floor>
 801346e:	ec53 2b10 	vmov	r2, r3, d0
 8013472:	4610      	mov	r0, r2
 8013474:	4619      	mov	r1, r3
 8013476:	f7ed fb79 	bl	8000b6c <__aeabi_d2iz>
 801347a:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801347c:	4618      	mov	r0, r3
 801347e:	371c      	adds	r7, #28
 8013480:	46bd      	mov	sp, r7
 8013482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013486 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8013486:	b480      	push	{r7}
 8013488:	b083      	sub	sp, #12
 801348a:	af00      	add	r7, sp, #0
 801348c:	6078      	str	r0, [r7, #4]
 801348e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	ed93 7a00 	vldr	s14, [r3]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	edd3 7a00 	vldr	s15, [r3]
 801349c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a4:	d501      	bpl.n	80134aa <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	e000      	b.n	80134ac <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80134aa:	687b      	ldr	r3, [r7, #4]
    }
 80134ac:	4618      	mov	r0, r3
 80134ae:	370c      	adds	r7, #12
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr

080134b8 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	ed87 0b00 	vstr	d0, [r7]
 80134c2:	ed97 0b00 	vldr	d0, [r7]
 80134c6:	f005 fd33 	bl	8018f30 <round>
 80134ca:	eeb0 7a40 	vmov.f32	s14, s0
 80134ce:	eef0 7a60 	vmov.f32	s15, s1
 80134d2:	eeb0 0a47 	vmov.f32	s0, s14
 80134d6:	eef0 0a67 	vmov.f32	s1, s15
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80134ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80134ee:	f7ee f9a9 	bl	8001844 <_ZSt5roundf>
 80134f2:	eef0 7a40 	vmov.f32	s15, s0
 80134f6:	eeb0 0a67 	vmov.f32	s0, s15
 80134fa:	3708      	adds	r7, #8
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}

08013500 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8013500:	b480      	push	{r7}
 8013502:	af00      	add	r7, sp, #0
 8013504:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8013508:	4618      	mov	r0, r3
 801350a:	46bd      	mov	sp, r7
 801350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013510:	4770      	bx	lr

08013512 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8013512:	b480      	push	{r7}
 8013514:	af00      	add	r7, sp, #0
 8013516:	237f      	movs	r3, #127	; 0x7f
 8013518:	4618      	mov	r0, r3
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr

08013522 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8013522:	b480      	push	{r7}
 8013524:	af00      	add	r7, sp, #0
 8013526:	2300      	movs	r3, #0
 8013528:	4618      	mov	r0, r3
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr

08013532 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8013532:	b480      	push	{r7}
 8013534:	af00      	add	r7, sp, #0
 8013536:	23ff      	movs	r3, #255	; 0xff
 8013538:	4618      	mov	r0, r3
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr
	...

08013544 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8013544:	b480      	push	{r7}
 8013546:	af00      	add	r7, sp, #0
 8013548:	4b02      	ldr	r3, [pc, #8]	; (8013554 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801354a:	4618      	mov	r0, r3
 801354c:	46bd      	mov	sp, r7
 801354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013552:	4770      	bx	lr
 8013554:	ffff8000 	.word	0xffff8000

08013558 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8013558:	b480      	push	{r7}
 801355a:	af00      	add	r7, sp, #0
 801355c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013560:	4618      	mov	r0, r3
 8013562:	46bd      	mov	sp, r7
 8013564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013568:	4770      	bx	lr

0801356a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801356a:	b480      	push	{r7}
 801356c:	b083      	sub	sp, #12
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	689b      	ldr	r3, [r3, #8]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	4618      	mov	r0, r3
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr

08013584 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8013584:	b480      	push	{r7}
 8013586:	b083      	sub	sp, #12
 8013588:	af00      	add	r7, sp, #0
 801358a:	ed87 0b00 	vstr	d0, [r7]
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	6879      	ldr	r1, [r7, #4]
 8013592:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013596:	ec43 2b17 	vmov	d7, r2, r3
 801359a:	eeb0 0a47 	vmov.f32	s0, s14
 801359e:	eef0 0a67 	vmov.f32	s1, s15
 80135a2:	370c      	adds	r7, #12
 80135a4:	46bd      	mov	sp, r7
 80135a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135aa:	4770      	bx	lr

080135ac <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d005      	beq.n	80135ca <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	689a      	ldr	r2, [r3, #8]
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	019b      	lsls	r3, r3, #6
 80135c6:	4413      	add	r3, r2
 80135c8:	e006      	b.n	80135d8 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ce:	6839      	ldr	r1, [r7, #0]
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	4798      	blx	r3
 80135d4:	4603      	mov	r3, r0
 80135d6:	bf00      	nop
  }
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 80135e0:	b480      	push	{r7}
 80135e2:	b087      	sub	sp, #28
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	607a      	str	r2, [r7, #4]
 80135ec:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	db0f      	blt.n	8013614 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 80135f4:	68ba      	ldr	r2, [r7, #8]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	da0b      	bge.n	8013614 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	683a      	ldr	r2, [r7, #0]
 8013602:	4413      	add	r3, r2
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801360e:	d001      	beq.n	8013614 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	e001      	b.n	8013618 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8013614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013618:	4618      	mov	r0, r3
 801361a:	371c      	adds	r7, #28
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr

08013624 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8013624:	b580      	push	{r7, lr}
 8013626:	b086      	sub	sp, #24
 8013628:	af00      	add	r7, sp, #0
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8013634:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801363c:	6879      	ldr	r1, [r7, #4]
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	f7ff ffce 	bl	80135e0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8013644:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	2b00      	cmp	r3, #0
 801364a:	da01      	bge.n	8013650 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801364c:	2300      	movs	r3, #0
 801364e:	e005      	b.n	801365c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8013650:	6979      	ldr	r1, [r7, #20]
 8013652:	68f8      	ldr	r0, [r7, #12]
 8013654:	f7ff ffaa 	bl	80135ac <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8013658:	4603      	mov	r3, r0
 801365a:	bf00      	nop
}
 801365c:	4618      	mov	r0, r3
 801365e:	3718      	adds	r7, #24
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}

08013664 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8013664:	b580      	push	{r7, lr}
 8013666:	b084      	sub	sp, #16
 8013668:	af00      	add	r7, sp, #0
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8013670:	687a      	ldr	r2, [r7, #4]
 8013672:	68b9      	ldr	r1, [r7, #8]
 8013674:	68f8      	ldr	r0, [r7, #12]
 8013676:	f7ff ffd5 	bl	8013624 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801367a:	4603      	mov	r3, r0
}
 801367c:	4618      	mov	r0, r3
 801367e:	3710      	adds	r7, #16
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8013684:	b580      	push	{r7, lr}
 8013686:	b086      	sub	sp, #24
 8013688:	af00      	add	r7, sp, #0
 801368a:	60f8      	str	r0, [r7, #12]
 801368c:	60b9      	str	r1, [r7, #8]
 801368e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8013694:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801369c:	6879      	ldr	r1, [r7, #4]
 801369e:	68f8      	ldr	r0, [r7, #12]
 80136a0:	f7ff ff9e 	bl	80135e0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80136a4:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	da01      	bge.n	80136b0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80136ac:	2300      	movs	r3, #0
 80136ae:	e005      	b.n	80136bc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80136b0:	6979      	ldr	r1, [r7, #20]
 80136b2:	68f8      	ldr	r0, [r7, #12]
 80136b4:	f7ff ff7a 	bl	80135ac <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80136b8:	4603      	mov	r3, r0
 80136ba:	bf00      	nop
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3718      	adds	r7, #24
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	60b9      	str	r1, [r7, #8]
 80136ce:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 80136d0:	687a      	ldr	r2, [r7, #4]
 80136d2:	68b9      	ldr	r1, [r7, #8]
 80136d4:	68f8      	ldr	r0, [r7, #12]
 80136d6:	f7ff ffc5 	bl	8013664 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80136da:	4603      	mov	r3, r0
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}
 80136e4:	0000      	movs	r0, r0
	...

080136e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80136e8:	b5b0      	push	{r4, r5, r7, lr}
 80136ea:	b08e      	sub	sp, #56	; 0x38
 80136ec:	af02      	add	r7, sp, #8
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	60b9      	str	r1, [r7, #8]
 80136f2:	607a      	str	r2, [r7, #4]
 80136f4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7ec ff2e 	bl	800055c <__aeabi_f2d>
 8013700:	4604      	mov	r4, r0
 8013702:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	4618      	mov	r0, r3
 801370a:	f7ec ff27 	bl	800055c <__aeabi_f2d>
 801370e:	4602      	mov	r2, r0
 8013710:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8013712:	4620      	mov	r0, r4
 8013714:	4629      	mov	r1, r5
 8013716:	f7ec ff79 	bl	800060c <__aeabi_dmul>
 801371a:	4602      	mov	r2, r0
 801371c:	460b      	mov	r3, r1
 801371e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d04b      	beq.n	80137c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	4618      	mov	r0, r3
 801372e:	f7ec ff15 	bl	800055c <__aeabi_f2d>
 8013732:	4602      	mov	r2, r0
 8013734:	460b      	mov	r3, r1
 8013736:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801373a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801373e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8013742:	f7ec fdab 	bl	800029c <__aeabi_dsub>
 8013746:	4602      	mov	r2, r0
 8013748:	460b      	mov	r3, r1
 801374a:	ec43 2b17 	vmov	d7, r2, r3
 801374e:	eeb0 0a47 	vmov.f32	s0, s14
 8013752:	eef0 0a67 	vmov.f32	s1, s15
 8013756:	f7ff ff15 	bl	8013584 <_ZSt3absd>
 801375a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801375e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	4618      	mov	r0, r3
 8013764:	f7ec fefa 	bl	800055c <__aeabi_f2d>
 8013768:	4602      	mov	r2, r0
 801376a:	460b      	mov	r3, r1
 801376c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8013770:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013774:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013778:	f7ed f872 	bl	8000860 <__aeabi_ddiv>
 801377c:	4602      	mov	r2, r0
 801377e:	460b      	mov	r3, r1
 8013780:	4610      	mov	r0, r2
 8013782:	4619      	mov	r1, r3
 8013784:	2301      	movs	r3, #1
 8013786:	461c      	mov	r4, r3
 8013788:	a318      	add	r3, pc, #96	; (adr r3, 80137ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378e:	f7ed f9b9 	bl	8000b04 <__aeabi_dcmple>
 8013792:	4603      	mov	r3, r0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d101      	bne.n	801379c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8013798:	2300      	movs	r3, #0
 801379a:	461c      	mov	r4, r3
 801379c:	b2e3      	uxtb	r3, r4
 801379e:	f083 0301 	eor.w	r3, r3, #1
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d00b      	beq.n	80137c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	695c      	ldr	r4, [r3, #20]
 80137ac:	4b0c      	ldr	r3, [pc, #48]	; (80137e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80137ae:	9300      	str	r3, [sp, #0]
 80137b0:	f44f 73a2 	mov.w	r3, #324	; 0x144
 80137b4:	4a0b      	ldr	r2, [pc, #44]	; (80137e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80137b6:	490c      	ldr	r1, [pc, #48]	; (80137e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80137b8:	68f8      	ldr	r0, [r7, #12]
 80137ba:	47a0      	blx	r4
 80137bc:	2301      	movs	r3, #1
 80137be:	e009      	b.n	80137d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 80137c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137c6:	687a      	ldr	r2, [r7, #4]
 80137c8:	68b9      	ldr	r1, [r7, #8]
 80137ca:	68f8      	ldr	r0, [r7, #12]
 80137cc:	f000 f812 	bl	80137f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 80137d0:	4603      	mov	r3, r0
                                          multiplier);
 80137d2:	bf00      	nop
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3730      	adds	r7, #48	; 0x30
 80137d8:	46bd      	mov	sp, r7
 80137da:	bdb0      	pop	{r4, r5, r7, pc}
 80137dc:	f3af 8000 	nop.w
 80137e0:	0801e074 	.word	0x0801e074
 80137e4:	0801de64 	.word	0x0801de64
 80137e8:	0801df60 	.word	0x0801df60
 80137ec:	47ae147b 	.word	0x47ae147b
 80137f0:	3f947ae1 	.word	0x3f947ae1

080137f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80137f4:	b590      	push	{r4, r7, lr}
 80137f6:	b089      	sub	sp, #36	; 0x24
 80137f8:	af02      	add	r7, sp, #8
 80137fa:	60f8      	str	r0, [r7, #12]
 80137fc:	60b9      	str	r1, [r7, #8]
 80137fe:	607a      	str	r2, [r7, #4]
 8013800:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	ed93 7a03 	vldr	s14, [r3, #12]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	edd3 7a03 	vldr	s15, [r3, #12]
 801380e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8013812:	ee17 0a90 	vmov	r0, s15
 8013816:	f7ec fea1 	bl	800055c <__aeabi_f2d>
 801381a:	4602      	mov	r2, r0
 801381c:	460b      	mov	r3, r1
 801381e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8013822:	2301      	movs	r3, #1
 8013824:	461c      	mov	r4, r3
 8013826:	f04f 0200 	mov.w	r2, #0
 801382a:	f04f 0300 	mov.w	r3, #0
 801382e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013832:	f7ed f971 	bl	8000b18 <__aeabi_dcmpge>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d101      	bne.n	8013840 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801383c:	2300      	movs	r3, #0
 801383e:	461c      	mov	r4, r3
 8013840:	b2e3      	uxtb	r3, r4
 8013842:	f083 0301 	eor.w	r3, r3, #1
 8013846:	b2db      	uxtb	r3, r3
 8013848:	2b00      	cmp	r3, #0
 801384a:	d00b      	beq.n	8013864 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	695c      	ldr	r4, [r3, #20]
 8013850:	4b0f      	ldr	r3, [pc, #60]	; (8013890 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	f240 1351 	movw	r3, #337	; 0x151
 8013858:	4a0e      	ldr	r2, [pc, #56]	; (8013894 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801385a:	490f      	ldr	r1, [pc, #60]	; (8013898 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801385c:	68f8      	ldr	r0, [r7, #12]
 801385e:	47a0      	blx	r4
 8013860:	2301      	movs	r3, #1
 8013862:	e010      	b.n	8013886 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	68db      	ldr	r3, [r3, #12]
 8013868:	4618      	mov	r0, r3
 801386a:	f7ec fe77 	bl	800055c <__aeabi_f2d>
 801386e:	4602      	mov	r2, r0
 8013870:	460b      	mov	r3, r1
 8013872:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013876:	f7ec fff3 	bl	8000860 <__aeabi_ddiv>
 801387a:	4602      	mov	r2, r0
 801387c:	460b      	mov	r3, r1
 801387e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013880:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8013884:	2300      	movs	r3, #0
}
 8013886:	4618      	mov	r0, r3
 8013888:	371c      	adds	r7, #28
 801388a:	46bd      	mov	sp, r7
 801388c:	bd90      	pop	{r4, r7, pc}
 801388e:	bf00      	nop
 8013890:	0801e098 	.word	0x0801e098
 8013894:	0801de64 	.word	0x0801de64
 8013898:	0801df60 	.word	0x0801df60

0801389c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	ed87 0a00 	vstr	s0, [r7]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80138ae:	ed97 7a00 	vldr	s14, [r7]
 80138b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80138b6:	eeb0 0a66 	vmov.f32	s0, s13
 80138ba:	f7ff fe11 	bl	80134e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80138be:	eef0 7a40 	vmov.f32	s15, s0
 80138c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138c6:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80138ce:	4413      	add	r3, r2
  };
 80138d0:	4618      	mov	r0, r3
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 80138d8:	b580      	push	{r7, lr}
 80138da:	b08e      	sub	sp, #56	; 0x38
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60b9      	str	r1, [r7, #8]
 80138e0:	607a      	str	r2, [r7, #4]
 80138e2:	603b      	str	r3, [r7, #0]
 80138e4:	4603      	mov	r3, r0
 80138e6:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	691b      	ldr	r3, [r3, #16]
 80138f2:	633b      	str	r3, [r7, #48]	; 0x30
  };
 80138f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138f6:	617b      	str	r3, [r7, #20]
 80138f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fa:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 80138fc:	7bfb      	ldrb	r3, [r7, #15]
 80138fe:	2b01      	cmp	r3, #1
 8013900:	d118      	bne.n	8013934 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8013902:	f107 0314 	add.w	r3, r7, #20
 8013906:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80139fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801390a:	4618      	mov	r0, r3
 801390c:	f7ff ffc6 	bl	801389c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8013910:	4603      	mov	r3, r0
 8013912:	61fb      	str	r3, [r7, #28]
 8013914:	f107 021c 	add.w	r2, r7, #28
 8013918:	f107 0308 	add.w	r3, r7, #8
 801391c:	4611      	mov	r1, r2
 801391e:	4618      	mov	r0, r3
 8013920:	f000 f8d6 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 8013924:	4603      	mov	r3, r0
 8013926:	681a      	ldr	r2, [r3, #0]
 8013928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801392a:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013930:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8013932:	e05f      	b.n	80139f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8013934:	7bfb      	ldrb	r3, [r7, #15]
 8013936:	2b03      	cmp	r3, #3
 8013938:	d129      	bne.n	801398e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801393a:	f107 0314 	add.w	r3, r7, #20
 801393e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80139fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8013942:	4618      	mov	r0, r3
 8013944:	f7ff ffaa 	bl	801389c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8013948:	4603      	mov	r3, r0
 801394a:	623b      	str	r3, [r7, #32]
 801394c:	f107 0220 	add.w	r2, r7, #32
 8013950:	f107 0308 	add.w	r3, r7, #8
 8013954:	4611      	mov	r1, r2
 8013956:	4618      	mov	r0, r3
 8013958:	f000 f8ba 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 801395c:	4603      	mov	r3, r0
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013962:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8013964:	f107 0314 	add.w	r3, r7, #20
 8013968:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801396c:	4618      	mov	r0, r3
 801396e:	f7ff ff95 	bl	801389c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8013972:	4603      	mov	r3, r0
 8013974:	627b      	str	r3, [r7, #36]	; 0x24
 8013976:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801397a:	1d3b      	adds	r3, r7, #4
 801397c:	4611      	mov	r1, r2
 801397e:	4618      	mov	r0, r3
 8013980:	f000 f892 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 8013984:	4603      	mov	r3, r0
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801398a:	601a      	str	r2, [r3, #0]
}
 801398c:	e032      	b.n	80139f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 801398e:	7bfb      	ldrb	r3, [r7, #15]
 8013990:	2b02      	cmp	r3, #2
 8013992:	d129      	bne.n	80139e8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8013994:	f107 0314 	add.w	r3, r7, #20
 8013998:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801399c:	4618      	mov	r0, r3
 801399e:	f7ff ff7d 	bl	801389c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80139a2:	4603      	mov	r3, r0
 80139a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80139a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80139aa:	f107 0308 	add.w	r3, r7, #8
 80139ae:	4611      	mov	r1, r2
 80139b0:	4618      	mov	r0, r3
 80139b2:	f000 f88d 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 80139b6:	4603      	mov	r3, r0
 80139b8:	681a      	ldr	r2, [r3, #0]
 80139ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139bc:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 80139be:	f107 0314 	add.w	r3, r7, #20
 80139c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7ff ff68 	bl	801389c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80139cc:	4603      	mov	r3, r0
 80139ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139d0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80139d4:	1d3b      	adds	r3, r7, #4
 80139d6:	4611      	mov	r1, r2
 80139d8:	4618      	mov	r0, r3
 80139da:	f000 f865 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 80139de:	4603      	mov	r3, r0
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139e4:	601a      	str	r2, [r3, #0]
}
 80139e6:	e005      	b.n	80139f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 80139e8:	68ba      	ldr	r2, [r7, #8]
 80139ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139ec:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139f2:	601a      	str	r2, [r3, #0]
}
 80139f4:	bf00      	nop
 80139f6:	3738      	adds	r7, #56	; 0x38
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	00000000 	.word	0x00000000

08013a00 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8013a00:	b590      	push	{r4, r7, lr}
 8013a02:	b089      	sub	sp, #36	; 0x24
 8013a04:	af02      	add	r7, sp, #8
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	607a      	str	r2, [r7, #4]
 8013a0a:	603b      	str	r3, [r7, #0]
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8013a10:	2300      	movs	r3, #0
 8013a12:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8013a14:	2300      	movs	r3, #0
 8013a16:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	2b03      	cmp	r3, #3
 8013a1e:	d108      	bne.n	8013a32 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8013a20:	f7ff fd7f 	bl	8013522 <_ZNSt14numeric_limitsIhE3minEv>
 8013a24:	4603      	mov	r3, r0
 8013a26:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8013a28:	f7ff fd83 	bl	8013532 <_ZNSt14numeric_limitsIhE3maxEv>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	613b      	str	r3, [r7, #16]
 8013a30:	e025      	b.n	8013a7e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	2b09      	cmp	r3, #9
 8013a38:	d108      	bne.n	8013a4c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8013a3a:	f7ff fd61 	bl	8013500 <_ZNSt14numeric_limitsIaE3minEv>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8013a42:	f7ff fd66 	bl	8013512 <_ZNSt14numeric_limitsIaE3maxEv>
 8013a46:	4603      	mov	r3, r0
 8013a48:	613b      	str	r3, [r7, #16]
 8013a4a:	e018      	b.n	8013a7e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	2b07      	cmp	r3, #7
 8013a52:	d108      	bne.n	8013a66 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8013a54:	f7ff fd76 	bl	8013544 <_ZNSt14numeric_limitsIsE3minEv>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8013a5c:	f7ff fd7c 	bl	8013558 <_ZNSt14numeric_limitsIsE3maxEv>
 8013a60:	4603      	mov	r3, r0
 8013a62:	613b      	str	r3, [r7, #16]
 8013a64:	e00b      	b.n	8013a7e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	695c      	ldr	r4, [r3, #20]
 8013a6a:	4b0c      	ldr	r3, [pc, #48]	; (8013a9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8013a72:	4a0b      	ldr	r2, [pc, #44]	; (8013aa0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8013a74:	490b      	ldr	r1, [pc, #44]	; (8013aa4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8013a76:	68f8      	ldr	r0, [r7, #12]
 8013a78:	47a0      	blx	r4
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	e00a      	b.n	8013a94 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8013a7e:	7af8      	ldrb	r0, [r7, #11]
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	9301      	str	r3, [sp, #4]
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	9300      	str	r3, [sp, #0]
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	693a      	ldr	r2, [r7, #16]
 8013a8c:	6979      	ldr	r1, [r7, #20]
 8013a8e:	f7ff ff23 	bl	80138d8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8013a92:	2300      	movs	r3, #0
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	371c      	adds	r7, #28
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd90      	pop	{r4, r7, pc}
 8013a9c:	0801e0b4 	.word	0x0801e0b4
 8013aa0:	0801de64 	.word	0x0801de64
 8013aa4:	0801df60 	.word	0x0801df60

08013aa8 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8013aa8:	b480      	push	{r7}
 8013aaa:	b083      	sub	sp, #12
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
 8013ab0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	681a      	ldr	r2, [r3, #0]
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	da01      	bge.n	8013ac2 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	e000      	b.n	8013ac4 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8013ac2:	687b      	ldr	r3, [r7, #4]
    }
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8013ad0:	b480      	push	{r7}
 8013ad2:	b083      	sub	sp, #12
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681a      	ldr	r2, [r3, #0]
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	da01      	bge.n	8013aea <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8013ae6:	683b      	ldr	r3, [r7, #0]
 8013ae8:	e000      	b.n	8013aec <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8013aea:	687b      	ldr	r3, [r7, #4]
    }
 8013aec:	4618      	mov	r0, r3
 8013aee:	370c      	adds	r7, #12
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr

08013af8 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8013af8:	b480      	push	{r7}
 8013afa:	b083      	sub	sp, #12
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	601a      	str	r2, [r3, #0]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	370c      	adds	r7, #12
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b12:	4770      	bx	lr

08013b14 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b084      	sub	sp, #16
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2200      	movs	r2, #0
 8013b24:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	68b9      	ldr	r1, [r7, #8]
 8013b2a:	68f8      	ldr	r0, [r7, #12]
 8013b2c:	f000 f866 	bl	8013bfc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	4618      	mov	r0, r3
 8013b34:	3710      	adds	r7, #16
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b082      	sub	sp, #8
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b05      	cmp	r3, #5
 8013b48:	dd08      	ble.n	8013b5c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d004      	beq.n	8013b5c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	685b      	ldr	r3, [r3, #4]
 8013b56:	4618      	mov	r0, r3
 8013b58:	f005 f910 	bl	8018d7c <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	4618      	mov	r0, r3
 8013b60:	3708      	adds	r7, #8
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}

08013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8013b66:	b480      	push	{r7}
 8013b68:	b083      	sub	sp, #12
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4618      	mov	r0, r3
 8013b74:	370c      	adds	r7, #12
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr

08013b7e <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8013b7e:	b480      	push	{r7}
 8013b80:	b083      	sub	sp, #12
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	2b05      	cmp	r3, #5
 8013b8c:	dd02      	ble.n	8013b94 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	685b      	ldr	r3, [r3, #4]
 8013b92:	e001      	b.n	8013b98 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	3304      	adds	r3, #4
  }
 8013b98:	4618      	mov	r0, r3
 8013b9a:	370c      	adds	r7, #12
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr

08013ba4 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	2b05      	cmp	r3, #5
 8013bb4:	dd08      	ble.n	8013bc8 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d004      	beq.n	8013bc8 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f005 f8da 	bl	8018d7c <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	683a      	ldr	r2, [r7, #0]
 8013bcc:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	2b05      	cmp	r3, #5
 8013bd2:	dd0f      	ble.n	8013bf4 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	d201      	bcs.n	8013be2 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	e001      	b.n	8013be6 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8013be2:	f04f 33ff 	mov.w	r3, #4294967295
 8013be6:	4618      	mov	r0, r3
 8013be8:	f005 f8db 	bl	8018da2 <_Znaj>
 8013bec:	4603      	mov	r3, r0
 8013bee:	461a      	mov	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8013bf4:	bf00      	nop
 8013bf6:	3708      	adds	r7, #8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b086      	sub	sp, #24
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	60f8      	str	r0, [r7, #12]
 8013c04:	60b9      	str	r1, [r7, #8]
 8013c06:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8013c08:	68b9      	ldr	r1, [r7, #8]
 8013c0a:	68f8      	ldr	r0, [r7, #12]
 8013c0c:	f7ff ffca 	bl	8013ba4 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8013c10:	68f8      	ldr	r0, [r7, #12]
 8013c12:	f7ff ffb4 	bl	8013b7e <_ZN6tflite12RuntimeShape8DimsDataEv>
 8013c16:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	6879      	ldr	r1, [r7, #4]
 8013c20:	6978      	ldr	r0, [r7, #20]
 8013c22:	f006 fc59 	bl	801a4d8 <memcpy>
  }
 8013c26:	bf00      	nop
 8013c28:	3718      	adds	r7, #24
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}

08013c2e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8013c2e:	b580      	push	{r7, lr}
 8013c30:	b086      	sub	sp, #24
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
 8013c36:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d103      	bne.n	8013c46 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f7ff ff5a 	bl	8013af8 <_ZN6tflite12RuntimeShapeC1Ev>
 8013c44:	e00d      	b.n	8013c62 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	689b      	ldr	r3, [r3, #8]
 8013c4a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	3304      	adds	r3, #4
 8013c56:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8013c58:	68fa      	ldr	r2, [r7, #12]
 8013c5a:	6939      	ldr	r1, [r7, #16]
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f7ff ff59 	bl	8013b14 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	3718      	adds	r7, #24
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}

08013c6a <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8013c6a:	b480      	push	{r7}
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c72:	4618      	mov	r0, r3
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8013c7c:	b480      	push	{r7}
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8013c84:	ee07 3a90 	vmov	s15, r3
 8013c88:	eeb0 0a67 	vmov.f32	s0, s15
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr

08013c94 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8013c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c98:	b092      	sub	sp, #72	; 0x48
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	61f8      	str	r0, [r7, #28]
 8013c9e:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8013ca0:	69fa      	ldr	r2, [r7, #28]
 8013ca2:	69bb      	ldr	r3, [r7, #24]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d107      	bne.n	8013cb8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8013ca8:	f7ff ffdf 	bl	8013c6a <_ZNSt14numeric_limitsIlE3minEv>
 8013cac:	4602      	mov	r2, r0
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	d101      	bne.n	8013cb8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	e000      	b.n	8013cba <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	17da      	asrs	r2, r3, #31
 8013cc2:	60bb      	str	r3, [r7, #8]
 8013cc4:	60fa      	str	r2, [r7, #12]
 8013cc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013cca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	17da      	asrs	r2, r3, #31
 8013cd2:	603b      	str	r3, [r7, #0]
 8013cd4:	607a      	str	r2, [r7, #4]
 8013cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cda:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8013cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ce2:	fb03 f202 	mul.w	r2, r3, r2
 8013ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ce8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013cea:	fb01 f303 	mul.w	r3, r1, r3
 8013cee:	4413      	add	r3, r2
 8013cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cf4:	fba1 4502 	umull	r4, r5, r1, r2
 8013cf8:	442b      	add	r3, r5
 8013cfa:	461d      	mov	r5, r3
 8013cfc:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8013d00:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8013d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	db02      	blt.n	8013d12 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8013d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d10:	e000      	b.n	8013d14 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8013d12:	4b1a      	ldr	r3, [pc, #104]	; (8013d7c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8013d14:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8013d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d18:	17da      	asrs	r2, r3, #31
 8013d1a:	4698      	mov	r8, r3
 8013d1c:	4691      	mov	r9, r2
 8013d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013d22:	eb18 0102 	adds.w	r1, r8, r2
 8013d26:	6139      	str	r1, [r7, #16]
 8013d28:	eb49 0303 	adc.w	r3, r9, r3
 8013d2c:	617b      	str	r3, [r7, #20]
 8013d2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	da07      	bge.n	8013d46 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8013d36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013d3a:	eb12 0a01 	adds.w	sl, r2, r1
 8013d3e:	f143 0b00 	adc.w	fp, r3, #0
 8013d42:	4652      	mov	r2, sl
 8013d44:	465b      	mov	r3, fp
 8013d46:	f04f 0000 	mov.w	r0, #0
 8013d4a:	f04f 0100 	mov.w	r1, #0
 8013d4e:	0fd0      	lsrs	r0, r2, #31
 8013d50:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013d54:	17d9      	asrs	r1, r3, #31
 8013d56:	4602      	mov	r2, r0
 8013d58:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8013d5a:	4613      	mov	r3, r2
 8013d5c:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8013d5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d003      	beq.n	8013d6e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8013d66:	f7ff fa09 	bl	801317c <_ZNSt14numeric_limitsIlE3maxEv>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	e000      	b.n	8013d70 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8013d6e:	6a3b      	ldr	r3, [r7, #32]
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3748      	adds	r7, #72	; 0x48
 8013d74:	46bd      	mov	sp, r7
 8013d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013d7a:	bf00      	nop
 8013d7c:	c0000001 	.word	0xc0000001

08013d80 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	da01      	bge.n	8013d94 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8013d90:	f006 fb24 	bl	801a3dc <abort>
    TFLITE_DCHECK_LT(i, size_);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	683a      	ldr	r2, [r7, #0]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	db01      	blt.n	8013da2 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8013d9e:	f006 fb1d 	bl	801a3dc <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	2b05      	cmp	r3, #5
 8013da8:	dd06      	ble.n	8013db8 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	685a      	ldr	r2, [r3, #4]
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	009b      	lsls	r3, r3, #2
 8013db2:	4413      	add	r3, r2
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	e004      	b.n	8013dc2 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	009b      	lsls	r3, r3, #2
 8013dbe:	4413      	add	r3, r2
 8013dc0:	685b      	ldr	r3, [r3, #4]
  }
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8013dca:	b480      	push	{r7}
 8013dcc:	b083      	sub	sp, #12
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2b05      	cmp	r3, #5
 8013dd8:	dd02      	ble.n	8013de0 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	e001      	b.n	8013de4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	3304      	adds	r3, #4
  }
 8013de4:	4618      	mov	r0, r3
 8013de6:	370c      	adds	r7, #12
 8013de8:	46bd      	mov	sp, r7
 8013dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dee:	4770      	bx	lr

08013df0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b086      	sub	sp, #24
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f7ff ffe4 	bl	8013dca <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8013e02:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8013e04:	2300      	movs	r3, #0
 8013e06:	613b      	str	r3, [r7, #16]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	693a      	ldr	r2, [r7, #16]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	da0c      	bge.n	8013e2c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	009b      	lsls	r3, r3, #2
 8013e16:	68fa      	ldr	r2, [r7, #12]
 8013e18:	4413      	add	r3, r2
 8013e1a:	681a      	ldr	r2, [r3, #0]
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	fb02 f303 	mul.w	r3, r2, r3
 8013e22:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	3301      	adds	r3, #1
 8013e28:	613b      	str	r3, [r7, #16]
 8013e2a:	e7ed      	b.n	8013e08 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8013e2c:	697b      	ldr	r3, [r7, #20]
  }
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3718      	adds	r7, #24
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}

08013e36 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8013e36:	b590      	push	{r4, r7, lr}
 8013e38:	b085      	sub	sp, #20
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
 8013e3e:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	f7ff fe90 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e46:	4604      	mov	r4, r0
 8013e48:	6838      	ldr	r0, [r7, #0]
 8013e4a:	f7ff fe8c 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	429c      	cmp	r4, r3
 8013e52:	d001      	beq.n	8013e58 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8013e54:	f006 fac2 	bl	801a3dc <abort>
  const int dims_count = shape.DimensionsCount();
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7ff fe84 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e5e:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8013e60:	2300      	movs	r3, #0
 8013e62:	60fb      	str	r3, [r7, #12]
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	da11      	bge.n	8013e90 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8013e6c:	68f9      	ldr	r1, [r7, #12]
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f7ff ff86 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e74:	4604      	mov	r4, r0
 8013e76:	68f9      	ldr	r1, [r7, #12]
 8013e78:	6838      	ldr	r0, [r7, #0]
 8013e7a:	f7ff ff81 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	429c      	cmp	r4, r3
 8013e82:	d001      	beq.n	8013e88 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8013e84:	f006 faaa 	bl	801a3dc <abort>
  for (int i = 0; i < dims_count; ++i) {
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	60fb      	str	r3, [r7, #12]
 8013e8e:	e7e9      	b.n	8013e64 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7ff ffad 	bl	8013df0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8013e96:	4603      	mov	r3, r0
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3714      	adds	r7, #20
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd90      	pop	{r4, r7, pc}

08013ea0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b086      	sub	sp, #24
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013eb2:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	dc02      	bgt.n	8013ec0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	425b      	negs	r3, r3
 8013ebe:	e000      	b.n	8013ec2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8013ec4:	68fa      	ldr	r2, [r7, #12]
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8013ecc:	68b9      	ldr	r1, [r7, #8]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7ff fee0 	bl	8013c94 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	6939      	ldr	r1, [r7, #16]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f000 fb4b 	bl	8014574 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013ede:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3718      	adds	r7, #24
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}

08013ee8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d101      	bne.n	8013efe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8013efa:	f006 fa6f 	bl	801a3dc <abort>
  TFLITE_DCHECK(node != nullptr);
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d101      	bne.n	8013f08 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8013f04:	f006 fa6a 	bl	801a3dc <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	6819      	ldr	r1, [r3, #0]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	009b      	lsls	r3, r3, #2
 8013f14:	440b      	add	r3, r1
 8013f16:	685b      	ldr	r3, [r3, #4]
 8013f18:	4619      	mov	r1, r3
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	4790      	blx	r2
 8013f1e:	4603      	mov	r3, r0
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	3710      	adds	r7, #16
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	68b9      	ldr	r1, [r7, #8]
 8013f38:	68f8      	ldr	r0, [r7, #12]
 8013f3a:	f7ff ffd5 	bl	8013ee8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013f3e:	4603      	mov	r3, r0
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3710      	adds	r7, #16
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}

08013f48 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	60f8      	str	r0, [r7, #12]
 8013f50:	60b9      	str	r1, [r7, #8]
 8013f52:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d101      	bne.n	8013f5e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8013f5a:	f006 fa3f 	bl	801a3dc <abort>
  TFLITE_DCHECK(node != nullptr);
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d101      	bne.n	8013f68 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8013f64:	f006 fa3a 	bl	801a3dc <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	6859      	ldr	r1, [r3, #4]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	009b      	lsls	r3, r3, #2
 8013f74:	440b      	add	r3, r1
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	4619      	mov	r1, r3
 8013f7a:	68f8      	ldr	r0, [r7, #12]
 8013f7c:	4790      	blx	r2
 8013f7e:	4603      	mov	r3, r0
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3710      	adds	r7, #16
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b08a      	sub	sp, #40	; 0x28
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	607a      	str	r2, [r7, #4]
 8013f94:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013f96:	6879      	ldr	r1, [r7, #4]
 8013f98:	68f8      	ldr	r0, [r7, #12]
 8013f9a:	f7ff ff4c 	bl	8013e36 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013f9e:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8013fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fa6:	6a3b      	ldr	r3, [r7, #32]
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	da1d      	bge.n	8013fe8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8013fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fae:	009b      	lsls	r3, r3, #2
 8013fb0:	68ba      	ldr	r2, [r7, #8]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8013fb8:	f04f 0300 	mov.w	r3, #0
 8013fbc:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8013fbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8013fc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fca:	d501      	bpl.n	8013fd0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8013fcc:	69bb      	ldr	r3, [r7, #24]
 8013fce:	e000      	b.n	8013fd2 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8013fd0:	69fb      	ldr	r3, [r7, #28]
 8013fd2:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	683a      	ldr	r2, [r7, #0]
 8013fda:	4413      	add	r3, r2
 8013fdc:	697a      	ldr	r2, [r7, #20]
 8013fde:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8013fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8013fe6:	e7dd      	b.n	8013fa4 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8013fe8:	bf00      	nop
 8013fea:	3728      	adds	r7, #40	; 0x28
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}

08013ff0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b08a      	sub	sp, #40	; 0x28
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	607a      	str	r2, [r7, #4]
 8013ffc:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013ffe:	6879      	ldr	r1, [r7, #4]
 8014000:	68f8      	ldr	r0, [r7, #12]
 8014002:	f7ff ff18 	bl	8013e36 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014006:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8014008:	2300      	movs	r3, #0
 801400a:	627b      	str	r3, [r7, #36]	; 0x24
 801400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801400e:	6a3b      	ldr	r3, [r7, #32]
 8014010:	429a      	cmp	r2, r3
 8014012:	da2a      	bge.n	801406a <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8014014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014016:	009b      	lsls	r3, r3, #2
 8014018:	68ba      	ldr	r2, [r7, #8]
 801401a:	4413      	add	r3, r2
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8014020:	4b14      	ldr	r3, [pc, #80]	; (8014074 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8014022:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8014024:	f04f 0300 	mov.w	r3, #0
 8014028:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801402a:	edd7 7a07 	vldr	s15, [r7, #28]
 801402e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8014032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801403a:	dd01      	ble.n	8014040 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	e009      	b.n	8014054 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8014040:	edd7 7a07 	vldr	s15, [r7, #28]
 8014044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404c:	d501      	bpl.n	8014052 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	e000      	b.n	8014054 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8014056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	683a      	ldr	r2, [r7, #0]
 801405c:	4413      	add	r3, r2
 801405e:	693a      	ldr	r2, [r7, #16]
 8014060:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	3301      	adds	r3, #1
 8014066:	627b      	str	r3, [r7, #36]	; 0x24
 8014068:	e7d0      	b.n	801400c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801406a:	bf00      	nop
 801406c:	3728      	adds	r7, #40	; 0x28
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	40c00000 	.word	0x40c00000

08014078 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014088:	2b00      	cmp	r3, #0
 801408a:	d101      	bne.n	8014090 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 801408c:	f006 f9a6 	bl	801a3dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014094:	211c      	movs	r1, #28
 8014096:	68f8      	ldr	r0, [r7, #12]
 8014098:	4798      	blx	r3
 801409a:	4603      	mov	r3, r0
}
 801409c:	4618      	mov	r0, r3
 801409e:	3710      	adds	r7, #16
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 80140a4:	b590      	push	{r4, r7, lr}
 80140a6:	b089      	sub	sp, #36	; 0x24
 80140a8:	af02      	add	r7, sp, #8
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	691b      	ldr	r3, [r3, #16]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d101      	bne.n	80140ba <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80140b6:	f006 f991 	bl	801a3dc <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	691b      	ldr	r3, [r3, #16]
 80140be:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80140c0:	2200      	movs	r2, #0
 80140c2:	6839      	ldr	r1, [r7, #0]
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f7ff facd 	bl	8013664 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80140ca:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d10a      	bne.n	80140e8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	695c      	ldr	r4, [r3, #20]
 80140d6:	4b1a      	ldr	r3, [pc, #104]	; (8014140 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 80140d8:	9300      	str	r3, [sp, #0]
 80140da:	238e      	movs	r3, #142	; 0x8e
 80140dc:	4a19      	ldr	r2, [pc, #100]	; (8014144 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80140de:	491a      	ldr	r1, [pc, #104]	; (8014148 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	47a0      	blx	r4
 80140e4:	2301      	movs	r3, #1
 80140e6:	e027      	b.n	8014138 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80140e8:	2200      	movs	r2, #0
 80140ea:	6839      	ldr	r1, [r7, #0]
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f7ff fac9 	bl	8013684 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80140f2:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d10a      	bne.n	8014110 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	695c      	ldr	r4, [r3, #20]
 80140fe:	4b13      	ldr	r3, [pc, #76]	; (801414c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	2390      	movs	r3, #144	; 0x90
 8014104:	4a0f      	ldr	r2, [pc, #60]	; (8014144 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8014106:	4910      	ldr	r1, [pc, #64]	; (8014148 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	47a0      	blx	r4
 801410c:	2301      	movs	r3, #1
 801410e:	e013      	b.n	8014138 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	2b09      	cmp	r3, #9
 8014116:	d105      	bne.n	8014124 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8014118:	697a      	ldr	r2, [r7, #20]
 801411a:	68f9      	ldr	r1, [r7, #12]
 801411c:	6938      	ldr	r0, [r7, #16]
 801411e:	f000 fa9d 	bl	801465c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8014122:	e008      	b.n	8014136 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	2b03      	cmp	r3, #3
 801412a:	d104      	bne.n	8014136 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801412c:	697a      	ldr	r2, [r7, #20]
 801412e:	68f9      	ldr	r1, [r7, #12]
 8014130:	6938      	ldr	r0, [r7, #16]
 8014132:	f000 fb35 	bl	80147a0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8014136:	2300      	movs	r3, #0
}
 8014138:	4618      	mov	r0, r3
 801413a:	371c      	adds	r7, #28
 801413c:	46bd      	mov	sp, r7
 801413e:	bd90      	pop	{r4, r7, pc}
 8014140:	0801e1d8 	.word	0x0801e1d8
 8014144:	0801e134 	.word	0x0801e134
 8014148:	0801e1c0 	.word	0x0801e1c0
 801414c:	0801e1ec 	.word	0x0801e1ec

08014150 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8014150:	b590      	push	{r4, r7, lr}
 8014152:	b0ad      	sub	sp, #180	; 0xb4
 8014154:	af02      	add	r7, sp, #8
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	691b      	ldr	r3, [r3, #16]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d101      	bne.n	8014166 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8014162:	f006 f93b 	bl	801a3dc <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	691b      	ldr	r3, [r3, #16]
 801416a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801416e:	2200      	movs	r2, #0
 8014170:	6839      	ldr	r1, [r7, #0]
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f7ff fed8 	bl	8013f28 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014178:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801417c:	2200      	movs	r2, #0
 801417e:	6839      	ldr	r1, [r7, #0]
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f7ff fee1 	bl	8013f48 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8014186:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801418a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801418e:	7a1b      	ldrb	r3, [r3, #8]
 8014190:	2b09      	cmp	r3, #9
 8014192:	d032      	beq.n	80141fa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8014194:	2b09      	cmp	r3, #9
 8014196:	f300 808c 	bgt.w	80142b2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801419a:	2b01      	cmp	r3, #1
 801419c:	d002      	beq.n	80141a4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801419e:	2b03      	cmp	r3, #3
 80141a0:	d059      	beq.n	8014256 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 80141a2:	e086      	b.n	80142b2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 80141a4:	f107 030c 	add.w	r3, r7, #12
 80141a8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80141ac:	4618      	mov	r0, r3
 80141ae:	f001 fe2f 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80141b2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80141b6:	f000 fb95 	bl	80148e4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80141ba:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 80141bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80141c0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80141c4:	4618      	mov	r0, r3
 80141c6:	f001 fe23 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80141ca:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80141ce:	f000 fb98 	bl	8014902 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80141d2:	4603      	mov	r3, r0
 80141d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80141d8:	f107 000c 	add.w	r0, r7, #12
 80141dc:	4621      	mov	r1, r4
 80141de:	f7ff fed3 	bl	8013f88 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 80141e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7ff fca7 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80141ec:	f107 030c 	add.w	r3, r7, #12
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7ff fca2 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80141f6:	2300      	movs	r3, #0
 80141f8:	e069      	b.n	80142ce <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80141fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80141fe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014202:	4618      	mov	r0, r3
 8014204:	f001 fe04 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8014208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801420c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8014210:	4618      	mov	r0, r3
 8014212:	f001 fdfd 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8014216:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801421a:	f000 fb83 	bl	8014924 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801421e:	4604      	mov	r4, r0
 8014220:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014224:	f000 fb8d 	bl	8014942 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8014228:	4603      	mov	r3, r0
 801422a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801422e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8014232:	9300      	str	r3, [sp, #0]
 8014234:	4623      	mov	r3, r4
 8014236:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801423a:	f000 fb93 	bl	8014964 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801423e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014242:	4618      	mov	r0, r3
 8014244:	f7ff fc79 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8014248:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801424c:	4618      	mov	r0, r3
 801424e:	f7ff fc74 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8014252:	2300      	movs	r3, #0
 8014254:	e03b      	b.n	80142ce <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8014256:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801425a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801425e:	4618      	mov	r0, r3
 8014260:	f001 fdd6 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8014264:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014268:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801426c:	4618      	mov	r0, r3
 801426e:	f001 fdcf 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8014272:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014276:	f000 fbc1 	bl	80149fc <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801427a:	4604      	mov	r4, r0
 801427c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014280:	f000 fbcb 	bl	8014a1a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8014284:	4603      	mov	r3, r0
 8014286:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801428a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801428e:	9300      	str	r3, [sp, #0]
 8014290:	4623      	mov	r3, r4
 8014292:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014296:	f000 fbd1 	bl	8014a3c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801429a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801429e:	4618      	mov	r0, r3
 80142a0:	f7ff fc4b 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80142a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7ff fc46 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80142ae:	2300      	movs	r3, #0
 80142b0:	e00d      	b.n	80142ce <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	695c      	ldr	r4, [r3, #20]
 80142b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80142ba:	7a1b      	ldrb	r3, [r3, #8]
 80142bc:	4618      	mov	r0, r3
 80142be:	f7fe fee1 	bl	8013084 <TfLiteTypeGetName>
 80142c2:	4603      	mov	r3, r0
 80142c4:	461a      	mov	r2, r3
 80142c6:	4904      	ldr	r1, [pc, #16]	; (80142d8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80142cc:	2301      	movs	r3, #1
    }
  }
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	37ac      	adds	r7, #172	; 0xac
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd90      	pop	{r4, r7, pc}
 80142d6:	bf00      	nop
 80142d8:	0801e200 	.word	0x0801e200

080142dc <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	60f8      	str	r0, [r7, #12]
 80142e4:	60b9      	str	r1, [r7, #8]
 80142e6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d101      	bne.n	80142f4 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 80142f0:	f006 f874 	bl	801a3dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142f8:	2104      	movs	r1, #4
 80142fa:	68f8      	ldr	r0, [r7, #12]
 80142fc:	4798      	blx	r3
 80142fe:	4603      	mov	r3, r0
}
 8014300:	4618      	mov	r0, r3
 8014302:	3710      	adds	r7, #16
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014308:	b590      	push	{r4, r7, lr}
 801430a:	b087      	sub	sp, #28
 801430c:	af02      	add	r7, sp, #8
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	691b      	ldr	r3, [r3, #16]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801431a:	f006 f85f 	bl	801a3dc <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8014324:	2200      	movs	r2, #0
 8014326:	6839      	ldr	r1, [r7, #0]
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7ff f99b 	bl	8013664 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801432e:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d10a      	bne.n	801434c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	695c      	ldr	r4, [r3, #20]
 801433a:	4b20      	ldr	r3, [pc, #128]	; (80143bc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801433c:	9300      	str	r3, [sp, #0]
 801433e:	23cd      	movs	r3, #205	; 0xcd
 8014340:	4a1f      	ldr	r2, [pc, #124]	; (80143c0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8014342:	4920      	ldr	r1, [pc, #128]	; (80143c4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	47a0      	blx	r4
 8014348:	2301      	movs	r3, #1
 801434a:	e033      	b.n	80143b4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	2b09      	cmp	r3, #9
 8014352:	d115      	bne.n	8014380 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801435e:	4618      	mov	r0, r3
 8014360:	eef0 0a67 	vmov.f32	s1, s15
 8014364:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8014368:	f000 fbb3 	bl	8014ad2 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 801436c:	4603      	mov	r3, r0
 801436e:	461a      	mov	r2, r3
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	691b      	ldr	r3, [r3, #16]
 8014378:	b25a      	sxtb	r2, r3
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	705a      	strb	r2, [r3, #1]
 801437e:	e018      	b.n	80143b2 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	2b03      	cmp	r3, #3
 8014386:	d114      	bne.n	80143b2 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8014392:	4618      	mov	r0, r3
 8014394:	eef0 0a67 	vmov.f32	s1, s15
 8014398:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801439c:	f000 fbe8 	bl	8014b70 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 80143a0:	4603      	mov	r3, r0
 80143a2:	461a      	mov	r2, r3
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	691b      	ldr	r3, [r3, #16]
 80143ac:	b2da      	uxtb	r2, r3
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 80143b2:	2300      	movs	r3, #0
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	3714      	adds	r7, #20
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd90      	pop	{r4, r7, pc}
 80143bc:	0801e1d8 	.word	0x0801e1d8
 80143c0:	0801e134 	.word	0x0801e134
 80143c4:	0801e1c0 	.word	0x0801e1c0

080143c8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 80143c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143ca:	b0ad      	sub	sp, #180	; 0xb4
 80143cc:	af02      	add	r7, sp, #8
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	691b      	ldr	r3, [r3, #16]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d101      	bne.n	80143de <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80143da:	f005 ffff 	bl	801a3dc <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	691b      	ldr	r3, [r3, #16]
 80143e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80143e6:	2200      	movs	r2, #0
 80143e8:	6839      	ldr	r1, [r7, #0]
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f7ff fd9c 	bl	8013f28 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80143f0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80143f4:	2200      	movs	r2, #0
 80143f6:	6839      	ldr	r1, [r7, #0]
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f7ff fda5 	bl	8013f48 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80143fe:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8014402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014406:	7a1b      	ldrb	r3, [r3, #8]
 8014408:	2b09      	cmp	r3, #9
 801440a:	d032      	beq.n	8014472 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801440c:	2b09      	cmp	r3, #9
 801440e:	f300 809c 	bgt.w	801454a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 8014412:	2b01      	cmp	r3, #1
 8014414:	d002      	beq.n	801441c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 8014416:	2b03      	cmp	r3, #3
 8014418:	d062      	beq.n	80144e0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801441a:	e096      	b.n	801454a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801441c:	f107 030c 	add.w	r3, r7, #12
 8014420:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014424:	4618      	mov	r0, r3
 8014426:	f001 fcf3 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801442a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801442e:	f000 fa59 	bl	80148e4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8014432:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8014434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014438:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801443c:	4618      	mov	r0, r3
 801443e:	f001 fce7 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8014442:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014446:	f000 fa5c 	bl	8014902 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801444a:	4603      	mov	r3, r0
 801444c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014450:	f107 000c 	add.w	r0, r7, #12
 8014454:	4621      	mov	r1, r4
 8014456:	f7ff fdcb 	bl	8013ff0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801445a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801445e:	4618      	mov	r0, r3
 8014460:	f7ff fb6b 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8014464:	f107 030c 	add.w	r3, r7, #12
 8014468:	4618      	mov	r0, r3
 801446a:	f7ff fb66 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801446e:	2300      	movs	r3, #0
 8014470:	e079      	b.n	8014566 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8014472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014476:	f993 4001 	ldrsb.w	r4, [r3, #1]
 801447a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801447e:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 8014482:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014486:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801448a:	4618      	mov	r0, r3
 801448c:	f001 fcc0 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8014490:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014494:	f000 fa46 	bl	8014924 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014498:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 801449a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801449e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80144a2:	4618      	mov	r0, r3
 80144a4:	f001 fcb4 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80144a8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80144ac:	f000 fa49 	bl	8014942 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80144b0:	4603      	mov	r3, r0
 80144b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80144b6:	9301      	str	r3, [sp, #4]
 80144b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80144bc:	9300      	str	r3, [sp, #0]
 80144be:	4633      	mov	r3, r6
 80144c0:	4629      	mov	r1, r5
 80144c2:	4620      	mov	r0, r4
 80144c4:	f000 fba3 	bl	8014c0e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 80144c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7ff fb34 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 80144d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7ff fb2f 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 80144dc:	2300      	movs	r3, #0
 80144de:	e042      	b.n	8014566 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80144e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144e4:	78dc      	ldrb	r4, [r3, #3]
 80144e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144ea:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 80144ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80144f0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80144f4:	4618      	mov	r0, r3
 80144f6:	f001 fc8b 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80144fa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80144fe:	f000 fa7d 	bl	80149fc <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8014502:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 8014504:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014508:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801450c:	4618      	mov	r0, r3
 801450e:	f001 fc7f 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8014512:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014516:	f000 fa80 	bl	8014a1a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801451a:	4603      	mov	r3, r0
 801451c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8014520:	9301      	str	r3, [sp, #4]
 8014522:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	4633      	mov	r3, r6
 801452a:	4629      	mov	r1, r5
 801452c:	4620      	mov	r0, r4
 801452e:	f000 fbad 	bl	8014c8c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 8014532:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014536:	4618      	mov	r0, r3
 8014538:	f7ff faff 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801453c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014540:	4618      	mov	r0, r3
 8014542:	f7ff fafa 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8014546:	2300      	movs	r3, #0
 8014548:	e00d      	b.n	8014566 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	695c      	ldr	r4, [r3, #20]
 801454e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014552:	7a1b      	ldrb	r3, [r3, #8]
 8014554:	4618      	mov	r0, r3
 8014556:	f7fe fd95 	bl	8013084 <TfLiteTypeGetName>
 801455a:	4603      	mov	r3, r0
 801455c:	461a      	mov	r2, r3
 801455e:	4904      	ldr	r1, [pc, #16]	; (8014570 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8014564:	2301      	movs	r3, #1
    }
  }
}
 8014566:	4618      	mov	r0, r3
 8014568:	37ac      	adds	r7, #172	; 0xac
 801456a:	46bd      	mov	sp, r7
 801456c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801456e:	bf00      	nop
 8014570:	0801e200 	.word	0x0801e200

08014574 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8014574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014576:	b089      	sub	sp, #36	; 0x24
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 801457e:	6839      	ldr	r1, [r7, #0]
 8014580:	2900      	cmp	r1, #0
 8014582:	da06      	bge.n	8014592 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8014584:	4b31      	ldr	r3, [pc, #196]	; (801464c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8014586:	4a32      	ldr	r2, [pc, #200]	; (8014650 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8014588:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801458c:	4831      	ldr	r0, [pc, #196]	; (8014654 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801458e:	f005 ff2d 	bl	801a3ec <__assert_func>
  assert(exponent <= 31);
 8014592:	6839      	ldr	r1, [r7, #0]
 8014594:	291f      	cmp	r1, #31
 8014596:	dd06      	ble.n	80145a6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8014598:	4b2f      	ldr	r3, [pc, #188]	; (8014658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801459a:	4a2d      	ldr	r2, [pc, #180]	; (8014650 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801459c:	f240 1167 	movw	r1, #359	; 0x167
 80145a0:	482c      	ldr	r0, [pc, #176]	; (8014654 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80145a2:	f005 ff23 	bl	801a3ec <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 80145a6:	f04f 0001 	mov.w	r0, #1
 80145aa:	f04f 0100 	mov.w	r1, #0
 80145ae:	683c      	ldr	r4, [r7, #0]
 80145b0:	f1a4 0620 	sub.w	r6, r4, #32
 80145b4:	f1c4 0520 	rsb	r5, r4, #32
 80145b8:	fa01 f304 	lsl.w	r3, r1, r4
 80145bc:	fa00 f606 	lsl.w	r6, r0, r6
 80145c0:	4333      	orrs	r3, r6
 80145c2:	fa20 f505 	lsr.w	r5, r0, r5
 80145c6:	432b      	orrs	r3, r5
 80145c8:	fa00 f204 	lsl.w	r2, r0, r4
 80145cc:	4613      	mov	r3, r2
 80145ce:	3b01      	subs	r3, #1
 80145d0:	4618      	mov	r0, r3
 80145d2:	f000 fb93 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80145d6:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 80145d8:	2000      	movs	r0, #0
 80145da:	f000 fb8f 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80145de:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 80145e0:	2001      	movs	r0, #1
 80145e2:	f000 fb8b 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80145e6:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80145e8:	69f9      	ldr	r1, [r7, #28]
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 fb91 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80145f0:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80145f2:	2101      	movs	r1, #1
 80145f4:	69f8      	ldr	r0, [r7, #28]
 80145f6:	f000 fb9a 	bl	8014d2e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80145fa:	4604      	mov	r4, r0
 80145fc:	69b9      	ldr	r1, [r7, #24]
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f000 fba4 	bl	8014d4c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8014604:	4603      	mov	r3, r0
 8014606:	6979      	ldr	r1, [r7, #20]
 8014608:	4618      	mov	r0, r3
 801460a:	f000 fb82 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801460e:	4603      	mov	r3, r0
 8014610:	4619      	mov	r1, r3
 8014612:	4620      	mov	r0, r4
 8014614:	f000 fbae 	bl	8014d74 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014618:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f000 fb86 	bl	8014d2e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8014622:	4604      	mov	r4, r0
 8014624:	68f9      	ldr	r1, [r7, #12]
 8014626:	6938      	ldr	r0, [r7, #16]
 8014628:	f000 fbb2 	bl	8014d90 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801462c:	4603      	mov	r3, r0
 801462e:	6979      	ldr	r1, [r7, #20]
 8014630:	4618      	mov	r0, r3
 8014632:	f000 fb6e 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014636:	4603      	mov	r3, r0
 8014638:	4619      	mov	r1, r3
 801463a:	4620      	mov	r0, r4
 801463c:	f000 fb9a 	bl	8014d74 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014640:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8014642:	4618      	mov	r0, r3
 8014644:	3724      	adds	r7, #36	; 0x24
 8014646:	46bd      	mov	sp, r7
 8014648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801464a:	bf00      	nop
 801464c:	0801e26c 	.word	0x0801e26c
 8014650:	0801e27c 	.word	0x0801e27c
 8014654:	0801e2d8 	.word	0x0801e2d8
 8014658:	0801e364 	.word	0x0801e364

0801465c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801465c:	b590      	push	{r4, r7, lr}
 801465e:	b099      	sub	sp, #100	; 0x64
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8014668:	f04f 0300 	mov.w	r3, #0
 801466c:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801466e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8014672:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	ed93 7a03 	vldr	s14, [r3, #12]
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	edd3 7a03 	vldr	s15, [r3, #12]
 8014680:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8014684:	ee16 0a90 	vmov	r0, s13
 8014688:	f7eb ff68 	bl	800055c <__aeabi_f2d>
 801468c:	4602      	mov	r2, r0
 801468e:	460b      	mov	r3, r1
 8014690:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8014694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014698:	68f9      	ldr	r1, [r7, #12]
 801469a:	4618      	mov	r0, r3
 801469c:	f7ff fac7 	bl	8013c2e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80146a0:	f107 0310 	add.w	r3, r7, #16
 80146a4:	68b9      	ldr	r1, [r7, #8]
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7ff fac1 	bl	8013c2e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f103 0214 	add.w	r2, r3, #20
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	3318      	adds	r3, #24
 80146b6:	4619      	mov	r1, r3
 80146b8:	4610      	mov	r0, r2
 80146ba:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80146be:	f7fe fd67 	bl	8013190 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80146c2:	f7fe ff1d 	bl	8013500 <_ZNSt14numeric_limitsIaE3minEv>
 80146c6:	4603      	mov	r3, r0
 80146c8:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80146d4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80146d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80146dc:	eeb0 0a66 	vmov.f32	s0, s13
 80146e0:	f004 fc6c 	bl	8018fbc <roundf>
 80146e4:	eef0 7a40 	vmov.f32	s15, s0
 80146e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146ec:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 80146f0:	4423      	add	r3, r4
 80146f2:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80146f4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80146f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80146fc:	4611      	mov	r1, r2
 80146fe:	4618      	mov	r0, r3
 8014700:	f7ff f9e6 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 8014704:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801470c:	f7ff fab6 	bl	8013c7c <_ZNSt14numeric_limitsIfE8infinityEv>
 8014710:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8014714:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014718:	eef4 7a47 	vcmp.f32	s15, s14
 801471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014720:	d103      	bne.n	801472a <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 8014722:	f7fe fef6 	bl	8013512 <_ZNSt14numeric_limitsIaE3maxEv>
 8014726:	4603      	mov	r3, r0
 8014728:	e022      	b.n	8014770 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801472a:	f7fe fef2 	bl	8013512 <_ZNSt14numeric_limitsIaE3maxEv>
 801472e:	4603      	mov	r3, r0
 8014730:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	edd3 7a03 	vldr	s15, [r3, #12]
 801473c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014740:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014744:	eeb0 0a66 	vmov.f32	s0, s13
 8014748:	f004 fc38 	bl	8018fbc <roundf>
 801474c:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8014750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014754:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8014758:	4423      	add	r3, r4
 801475a:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801475c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014760:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014764:	4611      	mov	r1, r2
 8014766:	4618      	mov	r0, r3
 8014768:	f7ff f99e 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 801476c:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801476e:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	691a      	ldr	r2, [r3, #16]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	691a      	ldr	r2, [r3, #16]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8014784:	f107 0310 	add.w	r3, r7, #16
 8014788:	4618      	mov	r0, r3
 801478a:	f7ff f9d6 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801478e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014792:	4618      	mov	r0, r3
 8014794:	f7ff f9d1 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014798:	bf00      	nop
 801479a:	3764      	adds	r7, #100	; 0x64
 801479c:	46bd      	mov	sp, r7
 801479e:	bd90      	pop	{r4, r7, pc}

080147a0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 80147a0:	b590      	push	{r4, r7, lr}
 80147a2:	b099      	sub	sp, #100	; 0x64
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	60b9      	str	r1, [r7, #8]
 80147aa:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80147ac:	f04f 0300 	mov.w	r3, #0
 80147b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80147b2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80147b6:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80147c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80147c8:	ee16 0a90 	vmov	r0, s13
 80147cc:	f7eb fec6 	bl	800055c <__aeabi_f2d>
 80147d0:	4602      	mov	r2, r0
 80147d2:	460b      	mov	r3, r1
 80147d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80147d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80147dc:	68f9      	ldr	r1, [r7, #12]
 80147de:	4618      	mov	r0, r3
 80147e0:	f7ff fa25 	bl	8013c2e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80147e4:	f107 0310 	add.w	r3, r7, #16
 80147e8:	68b9      	ldr	r1, [r7, #8]
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7ff fa1f 	bl	8013c2e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f103 0214 	add.w	r2, r3, #20
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	3318      	adds	r3, #24
 80147fa:	4619      	mov	r1, r3
 80147fc:	4610      	mov	r0, r2
 80147fe:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8014802:	f7fe fcc5 	bl	8013190 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8014806:	f7fe fe8c 	bl	8013522 <_ZNSt14numeric_limitsIhE3minEv>
 801480a:	4603      	mov	r3, r0
 801480c:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	edd3 7a03 	vldr	s15, [r3, #12]
 8014818:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801481c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014820:	eeb0 0a66 	vmov.f32	s0, s13
 8014824:	f004 fbca 	bl	8018fbc <roundf>
 8014828:	eef0 7a40 	vmov.f32	s15, s0
 801482c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014830:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8014834:	4423      	add	r3, r4
 8014836:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8014838:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801483c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014840:	4611      	mov	r1, r2
 8014842:	4618      	mov	r0, r3
 8014844:	f7ff f944 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 8014848:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8014850:	f7ff fa14 	bl	8013c7c <_ZNSt14numeric_limitsIfE8infinityEv>
 8014854:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8014858:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801485c:	eef4 7a47 	vcmp.f32	s15, s14
 8014860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014864:	d103      	bne.n	801486e <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 8014866:	f7fe fe64 	bl	8013532 <_ZNSt14numeric_limitsIhE3maxEv>
 801486a:	4603      	mov	r3, r0
 801486c:	e022      	b.n	80148b4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801486e:	f7fe fe60 	bl	8013532 <_ZNSt14numeric_limitsIhE3maxEv>
 8014872:	4603      	mov	r3, r0
 8014874:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	edd3 7a03 	vldr	s15, [r3, #12]
 8014880:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014884:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014888:	eeb0 0a66 	vmov.f32	s0, s13
 801488c:	f004 fb96 	bl	8018fbc <roundf>
 8014890:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8014894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014898:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801489c:	4423      	add	r3, r4
 801489e:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 80148a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80148a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80148a8:	4611      	mov	r1, r2
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7ff f8fc 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 80148b0:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80148b2:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	691a      	ldr	r2, [r3, #16]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	691a      	ldr	r2, [r3, #16]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80148c8:	f107 0310 	add.w	r3, r7, #16
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7ff f934 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80148d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7ff f92f 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80148dc:	bf00      	nop
 80148de:	3764      	adds	r7, #100	; 0x64
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd90      	pop	{r4, r7, pc}

080148e4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d101      	bne.n	80148f6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80148f2:	f005 fd73 	bl	801a3dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3708      	adds	r7, #8
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}

08014902 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8014902:	b480      	push	{r7}
 8014904:	b083      	sub	sp, #12
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d002      	beq.n	8014916 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	e000      	b.n	8014918 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8014916:	2300      	movs	r3, #0
}
 8014918:	4618      	mov	r0, r3
 801491a:	370c      	adds	r7, #12
 801491c:	46bd      	mov	sp, r7
 801491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014922:	4770      	bx	lr

08014924 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d101      	bne.n	8014936 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8014932:	f005 fd53 	bl	801a3dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
}
 801493a:	4618      	mov	r0, r3
 801493c:	3708      	adds	r7, #8
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}

08014942 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8014942:	b480      	push	{r7}
 8014944:	b083      	sub	sp, #12
 8014946:	af00      	add	r7, sp, #0
 8014948:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d002      	beq.n	8014956 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	e000      	b.n	8014958 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8014956:	2300      	movs	r3, #0
}
 8014958:	4618      	mov	r0, r3
 801495a:	370c      	adds	r7, #12
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8014964:	b590      	push	{r4, r7, lr}
 8014966:	b089      	sub	sp, #36	; 0x24
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	607a      	str	r2, [r7, #4]
 8014970:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014972:	6879      	ldr	r1, [r7, #4]
 8014974:	68b8      	ldr	r0, [r7, #8]
 8014976:	f7ff fa5e 	bl	8013e36 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801497a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801497c:	2300      	movs	r3, #0
 801497e:	61fb      	str	r3, [r7, #28]
 8014980:	69fa      	ldr	r2, [r7, #28]
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	429a      	cmp	r2, r3
 8014986:	da35      	bge.n	80149f4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	683a      	ldr	r2, [r7, #0]
 801498c:	4413      	add	r3, r2
 801498e:	f993 3000 	ldrsb.w	r3, [r3]
 8014992:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	697a      	ldr	r2, [r7, #20]
 801499e:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80149a8:	461a      	mov	r2, r3
 80149aa:	f7ff fa79 	bl	8013ea0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80149ae:	4603      	mov	r3, r0
        data.params.output_offset +
 80149b0:	4423      	add	r3, r4
    int32_t clamped =
 80149b2:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	3304      	adds	r3, #4
 80149b8:	f107 0210 	add.w	r2, r7, #16
 80149bc:	4611      	mov	r1, r2
 80149be:	4618      	mov	r0, r3
 80149c0:	f7ff f886 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 80149c4:	4603      	mov	r3, r0
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	3308      	adds	r3, #8
 80149ce:	f107 0210 	add.w	r2, r7, #16
 80149d2:	4611      	mov	r1, r2
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7ff f867 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 80149da:	4603      	mov	r3, r0
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 80149e0:	6939      	ldr	r1, [r7, #16]
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149e6:	4413      	add	r3, r2
 80149e8:	b24a      	sxtb	r2, r1
 80149ea:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80149ec:	69fb      	ldr	r3, [r7, #28]
 80149ee:	3301      	adds	r3, #1
 80149f0:	61fb      	str	r3, [r7, #28]
 80149f2:	e7c5      	b.n	8014980 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 80149f4:	bf00      	nop
 80149f6:	3724      	adds	r7, #36	; 0x24
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd90      	pop	{r4, r7, pc}

080149fc <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d101      	bne.n	8014a0e <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8014a0a:	f005 fce7 	bl	801a3dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3708      	adds	r7, #8
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd80      	pop	{r7, pc}

08014a1a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8014a1a:	b480      	push	{r7}
 8014a1c:	b083      	sub	sp, #12
 8014a1e:	af00      	add	r7, sp, #0
 8014a20:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d002      	beq.n	8014a2e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	e000      	b.n	8014a30 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8014a2e:	2300      	movs	r3, #0
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	370c      	adds	r7, #12
 8014a34:	46bd      	mov	sp, r7
 8014a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3a:	4770      	bx	lr

08014a3c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8014a3c:	b590      	push	{r4, r7, lr}
 8014a3e:	b089      	sub	sp, #36	; 0x24
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	607a      	str	r2, [r7, #4]
 8014a48:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014a4a:	6879      	ldr	r1, [r7, #4]
 8014a4c:	68b8      	ldr	r0, [r7, #8]
 8014a4e:	f7ff f9f2 	bl	8013e36 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014a52:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014a54:	2300      	movs	r3, #0
 8014a56:	61fb      	str	r3, [r7, #28]
 8014a58:	69fa      	ldr	r2, [r7, #28]
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	da34      	bge.n	8014aca <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	683a      	ldr	r2, [r7, #0]
 8014a64:	4413      	add	r3, r2
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	697a      	ldr	r2, [r7, #20]
 8014a74:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014a7e:	461a      	mov	r2, r3
 8014a80:	f7ff fa0e 	bl	8013ea0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014a84:	4603      	mov	r3, r0
        data.params.output_offset +
 8014a86:	4423      	add	r3, r4
    int32_t clamped =
 8014a88:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	3304      	adds	r3, #4
 8014a8e:	f107 0210 	add.w	r2, r7, #16
 8014a92:	4611      	mov	r1, r2
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7ff f81b 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	3308      	adds	r3, #8
 8014aa4:	f107 0210 	add.w	r2, r7, #16
 8014aa8:	4611      	mov	r1, r2
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7fe fffc 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8014ab6:	6939      	ldr	r1, [r7, #16]
 8014ab8:	69fb      	ldr	r3, [r7, #28]
 8014aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014abc:	4413      	add	r3, r2
 8014abe:	b2ca      	uxtb	r2, r1
 8014ac0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	3301      	adds	r3, #1
 8014ac6:	61fb      	str	r3, [r7, #28]
 8014ac8:	e7c6      	b.n	8014a58 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8014aca:	bf00      	nop
 8014acc:	3724      	adds	r7, #36	; 0x24
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd90      	pop	{r4, r7, pc}

08014ad2 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8014ad2:	b5b0      	push	{r4, r5, r7, lr}
 8014ad4:	b088      	sub	sp, #32
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	ed87 0a03 	vstr	s0, [r7, #12]
 8014adc:	edc7 0a02 	vstr	s1, [r7, #8]
 8014ae0:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8014ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8014ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8014aea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014aee:	ee16 0a90 	vmov	r0, s13
 8014af2:	f7eb fd33 	bl	800055c <__aeabi_f2d>
 8014af6:	4602      	mov	r2, r0
 8014af8:	460b      	mov	r3, r1
 8014afa:	ec43 2b10 	vmov	d0, r2, r3
 8014afe:	f004 fa17 	bl	8018f30 <round>
 8014b02:	ec55 4b10 	vmov	r4, r5, d0
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f7eb fd16 	bl	8000538 <__aeabi_i2d>
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	460b      	mov	r3, r1
 8014b10:	4620      	mov	r0, r4
 8014b12:	4629      	mov	r1, r5
 8014b14:	f7eb fbc4 	bl	80002a0 <__adddf3>
 8014b18:	4602      	mov	r2, r0
 8014b1a:	460b      	mov	r3, r1
 8014b1c:	4610      	mov	r0, r2
 8014b1e:	4619      	mov	r1, r3
 8014b20:	f7ec f824 	bl	8000b6c <__aeabi_d2iz>
 8014b24:	4603      	mov	r3, r0
 8014b26:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8014b28:	f7fe fcea 	bl	8013500 <_ZNSt14numeric_limitsIaE3minEv>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	61bb      	str	r3, [r7, #24]
 8014b30:	f107 0214 	add.w	r2, r7, #20
 8014b34:	f107 0318 	add.w	r3, r7, #24
 8014b38:	4611      	mov	r1, r2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fe ffc8 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 8014b40:	4603      	mov	r3, r0
  result =
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8014b46:	f7fe fce4 	bl	8013512 <_ZNSt14numeric_limitsIaE3maxEv>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	61fb      	str	r3, [r7, #28]
 8014b4e:	f107 0214 	add.w	r2, r7, #20
 8014b52:	f107 031c 	add.w	r3, r7, #28
 8014b56:	4611      	mov	r1, r2
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7fe ffa5 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 8014b5e:	4603      	mov	r3, r0
  result =
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	617b      	str	r3, [r7, #20]
  return result;
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	b25b      	sxtb	r3, r3
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	3720      	adds	r7, #32
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bdb0      	pop	{r4, r5, r7, pc}

08014b70 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8014b70:	b5b0      	push	{r4, r5, r7, lr}
 8014b72:	b088      	sub	sp, #32
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	ed87 0a03 	vstr	s0, [r7, #12]
 8014b7a:	edc7 0a02 	vstr	s1, [r7, #8]
 8014b7e:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8014b80:	ed97 7a03 	vldr	s14, [r7, #12]
 8014b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8014b88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014b8c:	ee16 0a90 	vmov	r0, s13
 8014b90:	f7eb fce4 	bl	800055c <__aeabi_f2d>
 8014b94:	4602      	mov	r2, r0
 8014b96:	460b      	mov	r3, r1
 8014b98:	ec43 2b10 	vmov	d0, r2, r3
 8014b9c:	f004 f9c8 	bl	8018f30 <round>
 8014ba0:	ec55 4b10 	vmov	r4, r5, d0
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f7eb fcc7 	bl	8000538 <__aeabi_i2d>
 8014baa:	4602      	mov	r2, r0
 8014bac:	460b      	mov	r3, r1
 8014bae:	4620      	mov	r0, r4
 8014bb0:	4629      	mov	r1, r5
 8014bb2:	f7eb fb75 	bl	80002a0 <__adddf3>
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	460b      	mov	r3, r1
 8014bba:	4610      	mov	r0, r2
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	f7eb ffd5 	bl	8000b6c <__aeabi_d2iz>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8014bc6:	f7fe fcac 	bl	8013522 <_ZNSt14numeric_limitsIhE3minEv>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	61bb      	str	r3, [r7, #24]
 8014bce:	f107 0214 	add.w	r2, r7, #20
 8014bd2:	f107 0318 	add.w	r3, r7, #24
 8014bd6:	4611      	mov	r1, r2
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7fe ff79 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 8014bde:	4603      	mov	r3, r0
  result =
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8014be4:	f7fe fca5 	bl	8013532 <_ZNSt14numeric_limitsIhE3maxEv>
 8014be8:	4603      	mov	r3, r0
 8014bea:	61fb      	str	r3, [r7, #28]
 8014bec:	f107 0214 	add.w	r2, r7, #20
 8014bf0:	f107 031c 	add.w	r3, r7, #28
 8014bf4:	4611      	mov	r1, r2
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7fe ff56 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 8014bfc:	4603      	mov	r3, r0
  result =
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	617b      	str	r3, [r7, #20]
  return result;
 8014c02:	697b      	ldr	r3, [r7, #20]
 8014c04:	b2db      	uxtb	r3, r3
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3720      	adds	r7, #32
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bdb0      	pop	{r4, r5, r7, pc}

08014c0e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8014c0e:	b580      	push	{r7, lr}
 8014c10:	b088      	sub	sp, #32
 8014c12:	af00      	add	r7, sp, #0
 8014c14:	60ba      	str	r2, [r7, #8]
 8014c16:	607b      	str	r3, [r7, #4]
 8014c18:	4603      	mov	r3, r0
 8014c1a:	73fb      	strb	r3, [r7, #15]
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c22:	68b8      	ldr	r0, [r7, #8]
 8014c24:	f7ff f907 	bl	8013e36 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014c28:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	61fb      	str	r3, [r7, #28]
 8014c2e:	69fa      	ldr	r2, [r7, #28]
 8014c30:	69bb      	ldr	r3, [r7, #24]
 8014c32:	429a      	cmp	r2, r3
 8014c34:	da26      	bge.n	8014c84 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8014c36:	69fb      	ldr	r3, [r7, #28]
 8014c38:	687a      	ldr	r2, [r7, #4]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	781b      	ldrb	r3, [r3, #0]
 8014c3e:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8014c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c44:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	dd04      	ble.n	8014c56 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8014c4c:	f107 030e 	add.w	r3, r7, #14
 8014c50:	f993 3000 	ldrsb.w	r3, [r3]
 8014c54:	e00c      	b.n	8014c70 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8014c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c5a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	da04      	bge.n	8014c6c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8014c62:	f107 030f 	add.w	r3, r7, #15
 8014c66:	f993 3000 	ldrsb.w	r3, [r3]
 8014c6a:	e001      	b.n	8014c70 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8014c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c70:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c76:	4413      	add	r3, r2
 8014c78:	7dba      	ldrb	r2, [r7, #22]
 8014c7a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014c7c:	69fb      	ldr	r3, [r7, #28]
 8014c7e:	3301      	adds	r3, #1
 8014c80:	61fb      	str	r3, [r7, #28]
 8014c82:	e7d4      	b.n	8014c2e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8014c84:	bf00      	nop
 8014c86:	3720      	adds	r7, #32
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}

08014c8c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b088      	sub	sp, #32
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	60ba      	str	r2, [r7, #8]
 8014c94:	607b      	str	r3, [r7, #4]
 8014c96:	4603      	mov	r3, r0
 8014c98:	73fb      	strb	r3, [r7, #15]
 8014c9a:	460b      	mov	r3, r1
 8014c9c:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ca0:	68b8      	ldr	r0, [r7, #8]
 8014ca2:	f7ff f8c8 	bl	8013e36 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014ca6:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014ca8:	2300      	movs	r3, #0
 8014caa:	61fb      	str	r3, [r7, #28]
 8014cac:	69fa      	ldr	r2, [r7, #28]
 8014cae:	69bb      	ldr	r3, [r7, #24]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	da1f      	bge.n	8014cf4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	687a      	ldr	r2, [r7, #4]
 8014cb8:	4413      	add	r3, r2
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8014cbe:	7bbb      	ldrb	r3, [r7, #14]
 8014cc0:	7dfa      	ldrb	r2, [r7, #23]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d903      	bls.n	8014cce <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8014cc6:	f107 030e 	add.w	r3, r7, #14
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	e008      	b.n	8014ce0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8014cce:	7bfb      	ldrb	r3, [r7, #15]
 8014cd0:	7dfa      	ldrb	r2, [r7, #23]
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d203      	bcs.n	8014cde <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8014cd6:	f107 030f 	add.w	r3, r7, #15
 8014cda:	781b      	ldrb	r3, [r3, #0]
 8014cdc:	e000      	b.n	8014ce0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8014cde:	7dfb      	ldrb	r3, [r7, #23]
 8014ce0:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ce6:	4413      	add	r3, r2
 8014ce8:	7dba      	ldrb	r2, [r7, #22]
 8014cea:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	3301      	adds	r3, #1
 8014cf0:	61fb      	str	r3, [r7, #28]
 8014cf2:	e7db      	b.n	8014cac <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8014cf4:	bf00      	nop
 8014cf6:	3720      	adds	r7, #32
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  return x;
 8014d04:	687b      	ldr	r3, [r7, #4]
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	370c      	adds	r7, #12
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d10:	4770      	bx	lr

08014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8014d12:	b480      	push	{r7}
 8014d14:	b083      	sub	sp, #12
 8014d16:	af00      	add	r7, sp, #0
 8014d18:	6078      	str	r0, [r7, #4]
 8014d1a:	6039      	str	r1, [r7, #0]
  return a & b;
 8014d1c:	687a      	ldr	r2, [r7, #4]
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	4013      	ands	r3, r2
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	370c      	adds	r7, #12
 8014d26:	46bd      	mov	sp, r7
 8014d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2c:	4770      	bx	lr

08014d2e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8014d2e:	b480      	push	{r7}
 8014d30:	b083      	sub	sp, #12
 8014d32:	af00      	add	r7, sp, #0
 8014d34:	6078      	str	r0, [r7, #4]
 8014d36:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8014d38:	687a      	ldr	r2, [r7, #4]
 8014d3a:	683b      	ldr	r3, [r7, #0]
 8014d3c:	fa42 f303 	asr.w	r3, r2, r3
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	370c      	adds	r7, #12
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr

08014d4c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b082      	sub	sp, #8
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8014d56:	687a      	ldr	r2, [r7, #4]
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	bfb4      	ite	lt
 8014d5e:	2301      	movlt	r3, #1
 8014d60:	2300      	movge	r3, #0
 8014d62:	b2db      	uxtb	r3, r3
 8014d64:	4618      	mov	r0, r3
 8014d66:	f000 f827 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014d6a:	4603      	mov	r3, r0
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3708      	adds	r7, #8
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8014d74:	b480      	push	{r7}
 8014d76:	b083      	sub	sp, #12
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	6039      	str	r1, [r7, #0]
  return a + b;
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	4413      	add	r3, r2
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	370c      	adds	r7, #12
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr

08014d90 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8014d9a:	687a      	ldr	r2, [r7, #4]
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	bfcc      	ite	gt
 8014da2:	2301      	movgt	r3, #1
 8014da4:	2300      	movle	r3, #0
 8014da6:	b2db      	uxtb	r3, r3
 8014da8:	4618      	mov	r0, r3
 8014daa:	f000 f805 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014dae:	4603      	mov	r3, r0
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3708      	adds	r7, #8
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}

08014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d004      	beq.n	8014dd0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8014dc6:	2000      	movs	r0, #0
 8014dc8:	f000 f807 	bl	8014dda <_ZN8gemmlowp6BitNotIlEET_S1_>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	e000      	b.n	8014dd2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8014dd0:	2300      	movs	r3, #0
}
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	3708      	adds	r7, #8
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	bd80      	pop	{r7, pc}

08014dda <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8014dda:	b480      	push	{r7}
 8014ddc:	b083      	sub	sp, #12
 8014dde:	af00      	add	r7, sp, #0
 8014de0:	6078      	str	r0, [r7, #4]
  return ~a;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	43db      	mvns	r3, r3
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	370c      	adds	r7, #12
 8014dea:	46bd      	mov	sp, r7
 8014dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df0:	4770      	bx	lr

08014df2 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8014df2:	b480      	push	{r7}
 8014df4:	b083      	sub	sp, #12
 8014df6:	af00      	add	r7, sp, #0
 8014df8:	6078      	str	r0, [r7, #4]
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4618      	mov	r0, r3
 8014e02:	370c      	adds	r7, #12
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr

08014e0c <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	685b      	ldr	r3, [r3, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	370c      	adds	r7, #12
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e24:	4770      	bx	lr

08014e26 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b082      	sub	sp, #8
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d101      	bne.n	8014e38 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8014e34:	f005 fad2 	bl	801a3dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3708      	adds	r7, #8
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}

08014e44 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8014e44:	b590      	push	{r4, r7, lr}
 8014e46:	b087      	sub	sp, #28
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	60f8      	str	r0, [r7, #12]
 8014e4c:	60b9      	str	r1, [r7, #8]
 8014e4e:	607a      	str	r2, [r7, #4]
 8014e50:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8014e52:	68b9      	ldr	r1, [r7, #8]
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f7fe ff93 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	6839      	ldr	r1, [r7, #0]
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f7fe ff8e 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e64:	4603      	mov	r3, r0
 8014e66:	429c      	cmp	r4, r3
 8014e68:	d001      	beq.n	8014e6e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8014e6a:	f005 fab7 	bl	801a3dc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8014e6e:	68b9      	ldr	r1, [r7, #8]
 8014e70:	68f8      	ldr	r0, [r7, #12]
 8014e72:	f7fe ff85 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e76:	4603      	mov	r3, r0
 8014e78:	613b      	str	r3, [r7, #16]
 8014e7a:	6839      	ldr	r1, [r7, #0]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7fe ff7f 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e82:	4603      	mov	r3, r0
 8014e84:	617b      	str	r3, [r7, #20]
 8014e86:	f107 0214 	add.w	r2, r7, #20
 8014e8a:	f107 0310 	add.w	r3, r7, #16
 8014e8e:	4611      	mov	r1, r2
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7fe fe09 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 8014e96:	4603      	mov	r3, r0
 8014e98:	681b      	ldr	r3, [r3, #0]
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	371c      	adds	r7, #28
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd90      	pop	{r4, r7, pc}

08014ea2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8014ea2:	b580      	push	{r7, lr}
 8014ea4:	b082      	sub	sp, #8
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d101      	bne.n	8014eb4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8014eb0:	f005 fa94 	bl	801a3dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
}
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3708      	adds	r7, #8
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}

08014ec0 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8014ec0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014ec4:	b090      	sub	sp, #64	; 0x40
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	61f8      	str	r0, [r7, #28]
 8014eca:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 8014ecc:	69fb      	ldr	r3, [r7, #28]
 8014ece:	17da      	asrs	r2, r3, #31
 8014ed0:	613b      	str	r3, [r7, #16]
 8014ed2:	617a      	str	r2, [r7, #20]
 8014ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014ed8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 8014edc:	69bb      	ldr	r3, [r7, #24]
 8014ede:	17da      	asrs	r2, r3, #31
 8014ee0:	60bb      	str	r3, [r7, #8]
 8014ee2:	60fa      	str	r2, [r7, #12]
 8014ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014ee8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 8014eec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8014ef0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014ef4:	1886      	adds	r6, r0, r2
 8014ef6:	603e      	str	r6, [r7, #0]
 8014ef8:	eb41 0303 	adc.w	r3, r1, r3
 8014efc:	607b      	str	r3, [r7, #4]
 8014efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8014f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	db04      	blt.n	8014f18 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 8014f0e:	f04f 0201 	mov.w	r2, #1
 8014f12:	f04f 0300 	mov.w	r3, #0
 8014f16:	e003      	b.n	8014f20 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 8014f18:	f04f 32ff 	mov.w	r2, #4294967295
 8014f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f20:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8014f24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8014f28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014f2c:	eb10 0802 	adds.w	r8, r0, r2
 8014f30:	eb41 0903 	adc.w	r9, r1, r3
 8014f34:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8014f38:	2200      	movs	r2, #0
 8014f3a:	469a      	mov	sl, r3
 8014f3c:	4693      	mov	fp, r2
 8014f3e:	eb1a 0408 	adds.w	r4, sl, r8
 8014f42:	eb4b 0509 	adc.w	r5, fp, r9
 8014f46:	f04f 0200 	mov.w	r2, #0
 8014f4a:	f04f 0300 	mov.w	r3, #0
 8014f4e:	0862      	lsrs	r2, r4, #1
 8014f50:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8014f54:	106b      	asrs	r3, r5, #1
 8014f56:	4613      	mov	r3, r2
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3740      	adds	r7, #64	; 0x40
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014f62:	4770      	bx	lr

08014f64 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8014f70:	68fa      	ldr	r2, [r7, #12]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	fa02 f303 	lsl.w	r3, r2, r3
 8014f78:	68b9      	ldr	r1, [r7, #8]
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7fe fe8a 	bl	8013c94 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014f80:	4603      	mov	r3, r0
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	3710      	adds	r7, #16
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}

08014f8a <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8014f8a:	b580      	push	{r7, lr}
 8014f8c:	b088      	sub	sp, #32
 8014f8e:	af00      	add	r7, sp, #0
 8014f90:	60f8      	str	r0, [r7, #12]
 8014f92:	60b9      	str	r1, [r7, #8]
 8014f94:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f000 f821 	bl	8014fe0 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8014f9e:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8014fa0:	68ba      	ldr	r2, [r7, #8]
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	1ad2      	subs	r2, r2, r3
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	69fb      	ldr	r3, [r7, #28]
 8014fae:	fa02 f303 	lsl.w	r3, r2, r3
 8014fb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8014fb6:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 8014fb8:	69b8      	ldr	r0, [r7, #24]
 8014fba:	f000 f823 	bl	8015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f000 f831 	bl	8015028 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8014fca:	f107 0314 	add.w	r3, r7, #20
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f000 f88a 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	681b      	ldr	r3, [r3, #0]
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3720      	adds	r7, #32
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d003      	beq.n	8014ff6 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8014ff4:	e000      	b.n	8014ff8 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8014ff6:	2320      	movs	r3, #32
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	370c      	adds	r7, #12
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr

08015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 801500c:	f107 030c 	add.w	r3, r7, #12
 8015010:	4618      	mov	r0, r3
 8015012:	f000 f869 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015016:	4602      	mov	r2, r0
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	6013      	str	r3, [r2, #0]
    return retval;
 801501c:	68fb      	ldr	r3, [r7, #12]
  }
 801501e:	4618      	mov	r0, r3
 8015020:	3710      	adds	r7, #16
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
	...

08015028 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8015028:	b580      	push	{r7, lr}
 801502a:	b08a      	sub	sp, #40	; 0x28
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8015030:	f000 f879 	bl	8015126 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8015034:	4603      	mov	r3, r0
 8015036:	4619      	mov	r1, r3
 8015038:	6878      	ldr	r0, [r7, #4]
 801503a:	f000 f87f 	bl	801513c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801503e:	4603      	mov	r3, r0
 8015040:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8015042:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8015046:	f000 f8ab 	bl	80151a0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801504a:	4603      	mov	r3, r0
 801504c:	4618      	mov	r0, r3
 801504e:	f000 f893 	bl	8015178 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8015052:	4603      	mov	r3, r0
 8015054:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8015056:	4823      	ldr	r0, [pc, #140]	; (80150e4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8015058:	f000 f8a2 	bl	80151a0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801505c:	4603      	mov	r3, r0
 801505e:	4618      	mov	r0, r3
 8015060:	f000 f88a 	bl	8015178 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8015064:	4603      	mov	r3, r0
 8015066:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8015068:	69b9      	ldr	r1, [r7, #24]
 801506a:	6a38      	ldr	r0, [r7, #32]
 801506c:	f000 f8a5 	bl	80151ba <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015070:	4603      	mov	r3, r0
 8015072:	4619      	mov	r1, r3
 8015074:	69f8      	ldr	r0, [r7, #28]
 8015076:	f000 f8c2 	bl	80151fe <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801507a:	4603      	mov	r3, r0
 801507c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801507e:	2300      	movs	r3, #0
 8015080:	627b      	str	r3, [r7, #36]	; 0x24
 8015082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015084:	2b02      	cmp	r3, #2
 8015086:	dc21      	bgt.n	80150cc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8015088:	6979      	ldr	r1, [r7, #20]
 801508a:	6a38      	ldr	r0, [r7, #32]
 801508c:	f000 f895 	bl	80151ba <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015090:	4603      	mov	r3, r0
 8015092:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8015094:	f000 f8d1 	bl	801523a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8015098:	4603      	mov	r3, r0
 801509a:	6939      	ldr	r1, [r7, #16]
 801509c:	4618      	mov	r0, r3
 801509e:	f000 f8d5 	bl	801524c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80150a2:	4603      	mov	r3, r0
 80150a4:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 80150a6:	68f9      	ldr	r1, [r7, #12]
 80150a8:	6978      	ldr	r0, [r7, #20]
 80150aa:	f000 f8ed 	bl	8015288 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80150ae:	4603      	mov	r3, r0
 80150b0:	4618      	mov	r0, r3
 80150b2:	f000 f90b 	bl	80152cc <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80150b6:	4603      	mov	r3, r0
 80150b8:	4619      	mov	r1, r3
 80150ba:	6978      	ldr	r0, [r7, #20]
 80150bc:	f000 f89f 	bl	80151fe <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80150c0:	4603      	mov	r3, r0
 80150c2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 80150c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c6:	3301      	adds	r3, #1
 80150c8:	627b      	str	r3, [r7, #36]	; 0x24
 80150ca:	e7da      	b.n	8015082 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 80150cc:	6978      	ldr	r0, [r7, #20]
 80150ce:	f000 f917 	bl	8015300 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 80150d2:	4603      	mov	r3, r0
 80150d4:	4618      	mov	r0, r3
 80150d6:	f000 f929 	bl	801532c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80150da:	4603      	mov	r3, r0
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3728      	adds	r7, #40	; 0x28
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}
 80150e4:	c3c3c3c4 	.word	0xc3c3c3c4

080150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 80150e8:	b480      	push	{r7}
 80150ea:	b083      	sub	sp, #12
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	4618      	mov	r0, r3
 80150f4:	370c      	adds	r7, #12
 80150f6:	46bd      	mov	sp, r7
 80150f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fc:	4770      	bx	lr

080150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80150fe:	b590      	push	{r4, r7, lr}
 8015100:	b085      	sub	sp, #20
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015106:	f107 030c 	add.w	r3, r7, #12
 801510a:	4618      	mov	r0, r3
 801510c:	f7ff ffec 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015110:	4604      	mov	r4, r0
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f7ff fdf2 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015118:	4603      	mov	r3, r0
 801511a:	6023      	str	r3, [r4, #0]
    return retval;
 801511c:	68fb      	ldr	r3, [r7, #12]
  }
 801511e:	4618      	mov	r0, r3
 8015120:	3714      	adds	r7, #20
 8015122:	46bd      	mov	sp, r7
 8015124:	bd90      	pop	{r4, r7, pc}

08015126 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8015126:	b580      	push	{r7, lr}
 8015128:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801512a:	f000 f927 	bl	801537c <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801512e:	4603      	mov	r3, r0
 8015130:	4618      	mov	r0, r3
 8015132:	f7ff ffe4 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015136:	4603      	mov	r3, r0
  }
 8015138:	4618      	mov	r0, r3
 801513a:	bd80      	pop	{r7, pc}

0801513c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801513c:	b590      	push	{r4, r7, lr}
 801513e:	b083      	sub	sp, #12
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
 8015146:	1d3b      	adds	r3, r7, #4
 8015148:	4618      	mov	r0, r3
 801514a:	f7ff ffcd 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801514e:	4603      	mov	r3, r0
 8015150:	681c      	ldr	r4, [r3, #0]
 8015152:	463b      	mov	r3, r7
 8015154:	4618      	mov	r0, r3
 8015156:	f7ff ffc7 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801515a:	4603      	mov	r3, r0
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	4619      	mov	r1, r3
 8015160:	4620      	mov	r0, r4
 8015162:	f7ff fead 	bl	8014ec0 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8015166:	4603      	mov	r3, r0
 8015168:	4618      	mov	r0, r3
 801516a:	f7ff ff4b 	bl	8015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801516e:	4603      	mov	r3, r0
 8015170:	4618      	mov	r0, r3
 8015172:	370c      	adds	r7, #12
 8015174:	46bd      	mov	sp, r7
 8015176:	bd90      	pop	{r4, r7, pc}

08015178 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015178:	b590      	push	{r4, r7, lr}
 801517a:	b085      	sub	sp, #20
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015180:	f107 030c 	add.w	r3, r7, #12
 8015184:	4618      	mov	r0, r3
 8015186:	f000 f900 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801518a:	4604      	mov	r4, r0
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f7ff fdb5 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015192:	4603      	mov	r3, r0
 8015194:	6023      	str	r3, [r4, #0]
    return retval;
 8015196:	68fb      	ldr	r3, [r7, #12]
  }
 8015198:	4618      	mov	r0, r3
 801519a:	3714      	adds	r7, #20
 801519c:	46bd      	mov	sp, r7
 801519e:	bd90      	pop	{r4, r7, pc}

080151a0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80151a8:	2100      	movs	r1, #0
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f7ff f9e2 	bl	8014574 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80151b0:	4603      	mov	r3, r0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3708      	adds	r7, #8
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}

080151ba <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80151ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151bc:	b085      	sub	sp, #20
 80151be:	af00      	add	r7, sp, #0
 80151c0:	6078      	str	r0, [r7, #4]
 80151c2:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80151c4:	1d3b      	adds	r3, r7, #4
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7ff ff8e 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80151cc:	4603      	mov	r3, r0
 80151ce:	681d      	ldr	r5, [r3, #0]
 80151d0:	463b      	mov	r3, r7
 80151d2:	4618      	mov	r0, r3
 80151d4:	f000 f8d9 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80151d8:	4603      	mov	r3, r0
 80151da:	681e      	ldr	r6, [r3, #0]
 80151dc:	f107 030c 	add.w	r3, r7, #12
 80151e0:	4618      	mov	r0, r3
 80151e2:	f000 f8d2 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80151e6:	4604      	mov	r4, r0
 80151e8:	4631      	mov	r1, r6
 80151ea:	4628      	mov	r0, r5
 80151ec:	f7fe fd52 	bl	8013c94 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80151f0:	4603      	mov	r3, r0
 80151f2:	6023      	str	r3, [r4, #0]
  return c;
 80151f4:	68fb      	ldr	r3, [r7, #12]
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3714      	adds	r7, #20
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151fe <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80151fe:	b590      	push	{r4, r7, lr}
 8015200:	b083      	sub	sp, #12
 8015202:	af00      	add	r7, sp, #0
 8015204:	6078      	str	r0, [r7, #4]
 8015206:	6039      	str	r1, [r7, #0]
 8015208:	1d3b      	adds	r3, r7, #4
 801520a:	4618      	mov	r0, r3
 801520c:	f000 f8bd 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015210:	4603      	mov	r3, r0
 8015212:	681c      	ldr	r4, [r3, #0]
 8015214:	463b      	mov	r3, r7
 8015216:	4618      	mov	r0, r3
 8015218:	f000 f8b7 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801521c:	4603      	mov	r3, r0
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	4619      	mov	r1, r3
 8015222:	4620      	mov	r0, r4
 8015224:	f7ff fda6 	bl	8014d74 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015228:	4603      	mov	r3, r0
 801522a:	4618      	mov	r0, r3
 801522c:	f000 f8b8 	bl	80153a0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8015230:	4603      	mov	r3, r0
 8015232:	4618      	mov	r0, r3
 8015234:	370c      	adds	r7, #12
 8015236:	46bd      	mov	sp, r7
 8015238:	bd90      	pop	{r4, r7, pc}

0801523a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801523a:	b580      	push	{r7, lr}
 801523c:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801523e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8015242:	f7ff ff99 	bl	8015178 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8015246:	4603      	mov	r3, r0
  }
 8015248:	4618      	mov	r0, r3
 801524a:	bd80      	pop	{r7, pc}

0801524c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801524c:	b590      	push	{r4, r7, lr}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	6039      	str	r1, [r7, #0]
 8015256:	1d3b      	adds	r3, r7, #4
 8015258:	4618      	mov	r0, r3
 801525a:	f000 f896 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801525e:	4603      	mov	r3, r0
 8015260:	681c      	ldr	r4, [r3, #0]
 8015262:	463b      	mov	r3, r7
 8015264:	4618      	mov	r0, r3
 8015266:	f000 f890 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801526a:	4603      	mov	r3, r0
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	4619      	mov	r1, r3
 8015270:	4620      	mov	r0, r4
 8015272:	f000 f875 	bl	8015360 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8015276:	4603      	mov	r3, r0
 8015278:	4618      	mov	r0, r3
 801527a:	f000 f891 	bl	80153a0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801527e:	4603      	mov	r3, r0
 8015280:	4618      	mov	r0, r3
 8015282:	370c      	adds	r7, #12
 8015284:	46bd      	mov	sp, r7
 8015286:	bd90      	pop	{r4, r7, pc}

08015288 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8015288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801528a:	b085      	sub	sp, #20
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8015292:	1d3b      	adds	r3, r7, #4
 8015294:	4618      	mov	r0, r3
 8015296:	f000 f878 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801529a:	4603      	mov	r3, r0
 801529c:	681d      	ldr	r5, [r3, #0]
 801529e:	463b      	mov	r3, r7
 80152a0:	4618      	mov	r0, r3
 80152a2:	f000 f872 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80152a6:	4603      	mov	r3, r0
 80152a8:	681e      	ldr	r6, [r3, #0]
 80152aa:	f107 030c 	add.w	r3, r7, #12
 80152ae:	4618      	mov	r0, r3
 80152b0:	f000 f887 	bl	80153c2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80152b4:	4604      	mov	r4, r0
 80152b6:	4631      	mov	r1, r6
 80152b8:	4628      	mov	r0, r5
 80152ba:	f7fe fceb 	bl	8013c94 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80152be:	4603      	mov	r3, r0
 80152c0:	6023      	str	r3, [r4, #0]
  return c;
 80152c2:	68fb      	ldr	r3, [r7, #12]
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3714      	adds	r7, #20
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080152cc <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80152cc:	b5b0      	push	{r4, r5, r7, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80152d4:	1d3b      	adds	r3, r7, #4
 80152d6:	4618      	mov	r0, r3
 80152d8:	f000 f873 	bl	80153c2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80152dc:	4603      	mov	r3, r0
 80152de:	681d      	ldr	r5, [r3, #0]
 80152e0:	f107 030c 	add.w	r3, r7, #12
 80152e4:	4618      	mov	r0, r3
 80152e6:	f000 f850 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80152ea:	4604      	mov	r4, r0
 80152ec:	4628      	mov	r0, r5
 80152ee:	f000 f873 	bl	80153d8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 80152f2:	4603      	mov	r3, r0
 80152f4:	6023      	str	r3, [r4, #0]
  return result;
 80152f6:	68fb      	ldr	r3, [r7, #12]
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	3710      	adds	r7, #16
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bdb0      	pop	{r4, r5, r7, pc}

08015300 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8015300:	b590      	push	{r4, r7, lr}
 8015302:	b085      	sub	sp, #20
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8015308:	1d3b      	adds	r3, r7, #4
 801530a:	4618      	mov	r0, r3
 801530c:	f000 f83d 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015310:	4604      	mov	r4, r0
 8015312:	f107 030c 	add.w	r3, r7, #12
 8015316:	4618      	mov	r0, r3
 8015318:	f000 f86a 	bl	80153f0 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801531c:	4602      	mov	r2, r0
 801531e:	6823      	ldr	r3, [r4, #0]
 8015320:	6013      	str	r3, [r2, #0]
  return c;
 8015322:	68fb      	ldr	r3, [r7, #12]
}
 8015324:	4618      	mov	r0, r3
 8015326:	3714      	adds	r7, #20
 8015328:	46bd      	mov	sp, r7
 801532a:	bd90      	pop	{r4, r7, pc}

0801532c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801532c:	b5b0      	push	{r4, r5, r7, lr}
 801532e:	b084      	sub	sp, #16
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015334:	1d3b      	adds	r3, r7, #4
 8015336:	4618      	mov	r0, r3
 8015338:	f000 f85a 	bl	80153f0 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801533c:	4603      	mov	r3, r0
 801533e:	681d      	ldr	r5, [r3, #0]
 8015340:	f107 030c 	add.w	r3, r7, #12
 8015344:	4618      	mov	r0, r3
 8015346:	f7ff fecf 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801534a:	4604      	mov	r4, r0
 801534c:	4628      	mov	r0, r5
 801534e:	f000 f85a 	bl	8015406 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8015352:	4603      	mov	r3, r0
 8015354:	6023      	str	r3, [r4, #0]
  return result;
 8015356:	68fb      	ldr	r3, [r7, #12]
}
 8015358:	4618      	mov	r0, r3
 801535a:	3710      	adds	r7, #16
 801535c:	46bd      	mov	sp, r7
 801535e:	bdb0      	pop	{r4, r5, r7, pc}

08015360 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8015360:	b480      	push	{r7}
 8015362:	b083      	sub	sp, #12
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
 8015368:	6039      	str	r1, [r7, #0]
  return a - b;
 801536a:	687a      	ldr	r2, [r7, #4]
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	1ad3      	subs	r3, r2, r3
}
 8015370:	4618      	mov	r0, r3
 8015372:	370c      	adds	r7, #12
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr

0801537c <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801537c:	b580      	push	{r7, lr}
 801537e:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8015380:	f7fd fefc 	bl	801317c <_ZNSt14numeric_limitsIlE3maxEv>
 8015384:	4603      	mov	r3, r0
  }
 8015386:	4618      	mov	r0, r3
 8015388:	bd80      	pop	{r7, pc}

0801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 801538a:	b480      	push	{r7}
 801538c:	b083      	sub	sp, #12
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	4618      	mov	r0, r3
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr

080153a0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80153a8:	f107 030c 	add.w	r3, r7, #12
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7ff ffec 	bl	801538a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80153b2:	4602      	mov	r2, r0
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6013      	str	r3, [r2, #0]
    return retval;
 80153b8:	68fb      	ldr	r3, [r7, #12]
  }
 80153ba:	4618      	mov	r0, r3
 80153bc:	3710      	adds	r7, #16
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 80153c2:	b480      	push	{r7}
 80153c4:	b083      	sub	sp, #12
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	4618      	mov	r0, r3
 80153ce:	370c      	adds	r7, #12
 80153d0:	46bd      	mov	sp, r7
 80153d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d6:	4770      	bx	lr

080153d8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f000 f81d 	bl	8015420 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 80153e6:	4603      	mov	r3, r0
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 80153f0:	b480      	push	{r7}
 80153f2:	b083      	sub	sp, #12
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	4618      	mov	r0, r3
 80153fc:	370c      	adds	r7, #12
 80153fe:	46bd      	mov	sp, r7
 8015400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015404:	4770      	bx	lr

08015406 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015406:	b580      	push	{r7, lr}
 8015408:	b082      	sub	sp, #8
 801540a:	af00      	add	r7, sp, #0
 801540c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f000 f848 	bl	80154a4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8015414:	4603      	mov	r3, r0
}
 8015416:	4618      	mov	r0, r3
 8015418:	3708      	adds	r7, #8
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
	...

08015420 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015420:	b580      	push	{r7, lr}
 8015422:	b08a      	sub	sp, #40	; 0x28
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8015428:	f7fe fc1f 	bl	8013c6a <_ZNSt14numeric_limitsIlE3minEv>
 801542c:	4603      	mov	r3, r0
 801542e:	4618      	mov	r0, r3
 8015430:	f7ff fc64 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015434:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8015436:	f7fd fea1 	bl	801317c <_ZNSt14numeric_limitsIlE3maxEv>
 801543a:	4603      	mov	r3, r0
 801543c:	4618      	mov	r0, r3
 801543e:	f7ff fc5d 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015442:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8015444:	2320      	movs	r3, #32
 8015446:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8015448:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801544c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801544e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8015452:	f7ff fc53 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015456:	4603      	mov	r3, r0
 8015458:	4619      	mov	r1, r3
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	f7ff fc98 	bl	8014d90 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8015460:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8015462:	480f      	ldr	r0, [pc, #60]	; (80154a0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8015464:	f7ff fc4a 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015468:	4603      	mov	r3, r0
 801546a:	4619      	mov	r1, r3
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f7ff fc6d 	bl	8014d4c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8015472:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8015474:	2102      	movs	r1, #2
 8015476:	6878      	ldr	r0, [r7, #4]
 8015478:	f000 f856 	bl	8015528 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801547c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801547e:	68fa      	ldr	r2, [r7, #12]
 8015480:	6a39      	ldr	r1, [r7, #32]
 8015482:	6978      	ldr	r0, [r7, #20]
 8015484:	f000 f894 	bl	80155b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015488:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801548a:	68fa      	ldr	r2, [r7, #12]
 801548c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801548e:	6938      	ldr	r0, [r7, #16]
 8015490:	f000 f88e 	bl	80155b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015494:	60f8      	str	r0, [r7, #12]
    return result;
 8015496:	68fb      	ldr	r3, [r7, #12]
  }
 8015498:	4618      	mov	r0, r3
 801549a:	3728      	adds	r7, #40	; 0x28
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	e0000001 	.word	0xe0000001

080154a4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b08a      	sub	sp, #40	; 0x28
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80154ac:	f7fe fbdd 	bl	8013c6a <_ZNSt14numeric_limitsIlE3minEv>
 80154b0:	4603      	mov	r3, r0
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7ff fc22 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154b8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80154ba:	f7fd fe5f 	bl	801317c <_ZNSt14numeric_limitsIlE3maxEv>
 80154be:	4603      	mov	r3, r0
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7ff fc1b 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154c6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80154c8:	2320      	movs	r3, #32
 80154ca:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80154cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80154d0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80154d2:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80154d6:	f7ff fc11 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154da:	4603      	mov	r3, r0
 80154dc:	4619      	mov	r1, r3
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f7ff fc56 	bl	8014d90 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80154e4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80154e6:	480f      	ldr	r0, [pc, #60]	; (8015524 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 80154e8:	f7ff fc08 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154ec:	4603      	mov	r3, r0
 80154ee:	4619      	mov	r1, r3
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f7ff fc2b 	bl	8014d4c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80154f6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80154f8:	2101      	movs	r1, #1
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f000 f814 	bl	8015528 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8015500:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8015502:	68fa      	ldr	r2, [r7, #12]
 8015504:	6a39      	ldr	r1, [r7, #32]
 8015506:	6978      	ldr	r0, [r7, #20]
 8015508:	f000 f852 	bl	80155b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801550c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801550e:	68fa      	ldr	r2, [r7, #12]
 8015510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015512:	6938      	ldr	r0, [r7, #16]
 8015514:	f000 f84c 	bl	80155b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015518:	60f8      	str	r0, [r7, #12]
    return result;
 801551a:	68fb      	ldr	r3, [r7, #12]
  }
 801551c:	4618      	mov	r0, r3
 801551e:	3728      	adds	r7, #40	; 0x28
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	c0000001 	.word	0xc0000001

08015528 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8015528:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801552c:	b089      	sub	sp, #36	; 0x24
 801552e:	af00      	add	r7, sp, #0
 8015530:	6078      	str	r0, [r7, #4]
 8015532:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8015534:	6879      	ldr	r1, [r7, #4]
 8015536:	17c8      	asrs	r0, r1, #31
 8015538:	4688      	mov	r8, r1
 801553a:	4681      	mov	r9, r0
 801553c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8015540:	2001      	movs	r0, #1
 8015542:	6839      	ldr	r1, [r7, #0]
 8015544:	fa00 f101 	lsl.w	r1, r0, r1
 8015548:	17c8      	asrs	r0, r1, #31
 801554a:	460c      	mov	r4, r1
 801554c:	4605      	mov	r5, r0
 801554e:	69f9      	ldr	r1, [r7, #28]
 8015550:	fb04 f001 	mul.w	r0, r4, r1
 8015554:	69b9      	ldr	r1, [r7, #24]
 8015556:	fb05 f101 	mul.w	r1, r5, r1
 801555a:	4401      	add	r1, r0
 801555c:	69b8      	ldr	r0, [r7, #24]
 801555e:	fba0 2304 	umull	r2, r3, r0, r4
 8015562:	4419      	add	r1, r3
 8015564:	460b      	mov	r3, r1
 8015566:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801556a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801556e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015572:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8015574:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015578:	60bb      	str	r3, [r7, #8]
             ? min
 801557a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801557e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8015582:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8015586:	db0b      	blt.n	80155a0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 8015588:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801558c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8015590:	f173 0300 	sbcs.w	r3, r3, #0
 8015594:	da01      	bge.n	801559a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 8015596:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8015598:	e004      	b.n	80155a4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 801559a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801559e:	e001      	b.n	80155a4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 80155a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3724      	adds	r7, #36	; 0x24
 80155a8:	46bd      	mov	sp, r7
 80155aa:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80155ae:	4770      	bx	lr

080155b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 80155b0:	b590      	push	{r4, r7, lr}
 80155b2:	b085      	sub	sp, #20
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 80155bc:	68b9      	ldr	r1, [r7, #8]
 80155be:	68f8      	ldr	r0, [r7, #12]
 80155c0:	f7ff fba7 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80155c4:	4604      	mov	r4, r0
 80155c6:	68f8      	ldr	r0, [r7, #12]
 80155c8:	f7ff fc07 	bl	8014dda <_ZN8gemmlowp6BitNotIlEET_S1_>
 80155cc:	4603      	mov	r3, r0
 80155ce:	6879      	ldr	r1, [r7, #4]
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7ff fb9e 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80155d6:	4603      	mov	r3, r0
 80155d8:	4619      	mov	r1, r3
 80155da:	4620      	mov	r0, r4
 80155dc:	f000 f805 	bl	80155ea <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 80155e0:	4603      	mov	r3, r0
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3714      	adds	r7, #20
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd90      	pop	{r4, r7, pc}

080155ea <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 80155ea:	b480      	push	{r7}
 80155ec:	b083      	sub	sp, #12
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
 80155f2:	6039      	str	r1, [r7, #0]
  return a ^ b;
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	4053      	eors	r3, r2
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	370c      	adds	r7, #12
 80155fe:	46bd      	mov	sp, r7
 8015600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015604:	4770      	bx	lr

08015606 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8015606:	b580      	push	{r7, lr}
 8015608:	b084      	sub	sp, #16
 801560a:	af00      	add	r7, sp, #0
 801560c:	60f8      	str	r0, [r7, #12]
 801560e:	60b9      	str	r1, [r7, #8]
 8015610:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015616:	2b00      	cmp	r3, #0
 8015618:	d101      	bne.n	801561e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801561a:	f004 fedf 	bl	801a3dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015622:	2124      	movs	r1, #36	; 0x24
 8015624:	68f8      	ldr	r0, [r7, #12]
 8015626:	4798      	blx	r3
 8015628:	4603      	mov	r3, r0
}
 801562a:	4618      	mov	r0, r3
 801562c:	3710      	adds	r7, #16
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
	...

08015634 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8015634:	b5b0      	push	{r4, r5, r7, lr}
 8015636:	b0a0      	sub	sp, #128	; 0x80
 8015638:	af04      	add	r7, sp, #16
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	6039      	str	r1, [r7, #0]
 801563e:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	691b      	ldr	r3, [r3, #16]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d101      	bne.n	801564c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8015648:	f004 fec8 	bl	801a3dc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	695b      	ldr	r3, [r3, #20]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d101      	bne.n	8015658 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8015654:	f004 fec2 	bl	801a3dc <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	691b      	ldr	r3, [r3, #16]
 801565c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	695b      	ldr	r3, [r3, #20]
 8015662:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 8015664:	4b81      	ldr	r3, [pc, #516]	; (801586c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	461a      	mov	r2, r3
 801566a:	6839      	ldr	r1, [r7, #0]
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f7fd fff9 	bl	8013664 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015672:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 8015674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015676:	2b00      	cmp	r3, #0
 8015678:	d10a      	bne.n	8015690 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	695c      	ldr	r4, [r3, #20]
 801567e:	4b7c      	ldr	r3, [pc, #496]	; (8015870 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	2340      	movs	r3, #64	; 0x40
 8015684:	4a7b      	ldr	r2, [pc, #492]	; (8015874 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8015686:	497c      	ldr	r1, [pc, #496]	; (8015878 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	47a0      	blx	r4
 801568c:	2401      	movs	r4, #1
 801568e:	e0e7      	b.n	8015860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8015690:	4b7a      	ldr	r3, [pc, #488]	; (801587c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	461a      	mov	r2, r3
 8015696:	6839      	ldr	r1, [r7, #0]
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f7fd ffe3 	bl	8013664 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801569e:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 80156a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d10a      	bne.n	80156bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	695c      	ldr	r4, [r3, #20]
 80156aa:	4b75      	ldr	r3, [pc, #468]	; (8015880 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	2343      	movs	r3, #67	; 0x43
 80156b0:	4a70      	ldr	r2, [pc, #448]	; (8015874 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80156b2:	4971      	ldr	r1, [pc, #452]	; (8015878 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	47a0      	blx	r4
 80156b8:	2401      	movs	r4, #1
 80156ba:	e0d1      	b.n	8015860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 80156bc:	4b71      	ldr	r3, [pc, #452]	; (8015884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	461a      	mov	r2, r3
 80156c2:	6839      	ldr	r1, [r7, #0]
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f7fd fffd 	bl	80136c4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 80156ca:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 80156cc:	4b6e      	ldr	r3, [pc, #440]	; (8015888 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	461a      	mov	r2, r3
 80156d2:	6839      	ldr	r1, [r7, #0]
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f7fd ffd5 	bl	8013684 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80156da:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 80156dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d10a      	bne.n	80156f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	695c      	ldr	r4, [r3, #20]
 80156e6:	4b69      	ldr	r3, [pc, #420]	; (801588c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	2347      	movs	r3, #71	; 0x47
 80156ec:	4a61      	ldr	r2, [pc, #388]	; (8015874 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80156ee:	4962      	ldr	r1, [pc, #392]	; (8015878 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	47a0      	blx	r4
 80156f4:	2401      	movs	r4, #1
 80156f6:	e0b3      	b.n	8015860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80156f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156fa:	781a      	ldrb	r2, [r3, #0]
 80156fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	429a      	cmp	r2, r3
 8015702:	d01a      	beq.n	801573a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	695c      	ldr	r4, [r3, #20]
 8015708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801570a:	781b      	ldrb	r3, [r3, #0]
 801570c:	4618      	mov	r0, r3
 801570e:	f7fd fcb9 	bl	8013084 <TfLiteTypeGetName>
 8015712:	4605      	mov	r5, r0
 8015714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	4618      	mov	r0, r3
 801571a:	f7fd fcb3 	bl	8013084 <TfLiteTypeGetName>
 801571e:	4603      	mov	r3, r0
 8015720:	9303      	str	r3, [sp, #12]
 8015722:	9502      	str	r5, [sp, #8]
 8015724:	4b5a      	ldr	r3, [pc, #360]	; (8015890 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8015726:	9301      	str	r3, [sp, #4]
 8015728:	4b5a      	ldr	r3, [pc, #360]	; (8015894 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801572a:	9300      	str	r3, [sp, #0]
 801572c:	2349      	movs	r3, #73	; 0x49
 801572e:	4a51      	ldr	r2, [pc, #324]	; (8015874 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8015730:	4959      	ldr	r1, [pc, #356]	; (8015898 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	47a0      	blx	r4
 8015736:	2401      	movs	r4, #1
 8015738:	e092      	b.n	8015860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801573a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801573c:	781a      	ldrb	r2, [r3, #0]
 801573e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	429a      	cmp	r2, r3
 8015744:	d006      	beq.n	8015754 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	695b      	ldr	r3, [r3, #20]
 801574a:	4954      	ldr	r1, [pc, #336]	; (801589c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801574c:	6878      	ldr	r0, [r7, #4]
 801574e:	4798      	blx	r3
 8015750:	2401      	movs	r4, #1
 8015752:	e085      	b.n	8015860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8015754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015756:	f04f 32ff 	mov.w	r2, #4294967295
 801575a:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801575c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801575e:	7819      	ldrb	r1, [r3, #0]
 8015760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015762:	781a      	ldrb	r2, [r3, #0]
 8015764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015766:	9303      	str	r3, [sp, #12]
 8015768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801576a:	9302      	str	r3, [sp, #8]
 801576c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801576e:	9301      	str	r3, [sp, #4]
 8015770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f000 fae4 	bl	8015d44 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 801577c:	4603      	mov	r3, r0
 801577e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8015782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015786:	2b00      	cmp	r3, #0
 8015788:	d002      	beq.n	8015790 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 801578a:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 801578e:	e067      	b.n	8015860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 8015790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	2b09      	cmp	r3, #9
 8015796:	d162      	bne.n	801585e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8015798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801579c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801579e:	4618      	mov	r0, r3
 80157a0:	f7fe fa45 	bl	8013c2e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 80157a4:	f107 0318 	add.w	r3, r7, #24
 80157a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7fe fa3f 	bl	8013c2e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80157b0:	f107 0318 	add.w	r3, r7, #24
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7fe f9d6 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80157ba:	4603      	mov	r3, r0
 80157bc:	2b02      	cmp	r3, #2
 80157be:	d001      	beq.n	80157c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 80157c0:	f004 fe0c 	bl	801a3dc <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 80157c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7fe f9cc 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80157ce:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 80157d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157d2:	1e5a      	subs	r2, r3, #1
 80157d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80157d8:	4611      	mov	r1, r2
 80157da:	4618      	mov	r0, r3
 80157dc:	f7fe fad0 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157e0:	4603      	mov	r3, r0
 80157e2:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 80157e4:	2301      	movs	r3, #1
 80157e6:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 80157e8:	2301      	movs	r3, #1
 80157ea:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 80157ec:	f107 0318 	add.w	r3, r7, #24
 80157f0:	2101      	movs	r1, #1
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7fe fac4 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157f8:	4603      	mov	r3, r0
 80157fa:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 80157fc:	f107 0308 	add.w	r3, r7, #8
 8015800:	4618      	mov	r0, r3
 8015802:	f7f6 fc08 	bl	800c016 <arm_fully_connected_s8_get_buffer_size>
 8015806:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 8015808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801580a:	2b00      	cmp	r3, #0
 801580c:	dd11      	ble.n	8015832 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015812:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015814:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015816:	3220      	adds	r2, #32
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	4798      	blx	r3
 801581c:	4603      	mov	r3, r0
 801581e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8015822:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8015826:	2b00      	cmp	r3, #0
 8015828:	d007      	beq.n	801583a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801582a:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801582e:	2500      	movs	r5, #0
 8015830:	e004      	b.n	801583c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8015832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015834:	f04f 32ff 	mov.w	r2, #4294967295
 8015838:	621a      	str	r2, [r3, #32]
 801583a:	2501      	movs	r5, #1
 801583c:	f107 0318 	add.w	r3, r7, #24
 8015840:	4618      	mov	r0, r3
 8015842:	f7fe f97a 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
 8015846:	2d01      	cmp	r5, #1
 8015848:	d001      	beq.n	801584e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801584a:	2500      	movs	r5, #0
 801584c:	e000      	b.n	8015850 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801584e:	2501      	movs	r5, #1
 8015850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015854:	4618      	mov	r0, r3
 8015856:	f7fe f970 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
 801585a:	2d01      	cmp	r5, #1
 801585c:	d100      	bne.n	8015860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801585e:	2400      	movs	r4, #0
}
 8015860:	4623      	mov	r3, r4
 8015862:	4618      	mov	r0, r3
 8015864:	3770      	adds	r7, #112	; 0x70
 8015866:	46bd      	mov	sp, r7
 8015868:	bdb0      	pop	{r4, r5, r7, pc}
 801586a:	bf00      	nop
 801586c:	0801ede4 	.word	0x0801ede4
 8015870:	0801e41c 	.word	0x0801e41c
 8015874:	0801e374 	.word	0x0801e374
 8015878:	0801e404 	.word	0x0801e404
 801587c:	0801ede8 	.word	0x0801ede8
 8015880:	0801e430 	.word	0x0801e430
 8015884:	0801edec 	.word	0x0801edec
 8015888:	0801edf0 	.word	0x0801edf0
 801588c:	0801e444 	.word	0x0801e444
 8015890:	0801e474 	.word	0x0801e474
 8015894:	0801e484 	.word	0x0801e484
 8015898:	0801e458 	.word	0x0801e458
 801589c:	0801e490 	.word	0x0801e490

080158a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 80158a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158a2:	b0bf      	sub	sp, #252	; 0xfc
 80158a4:	af08      	add	r7, sp, #32
 80158a6:	6178      	str	r0, [r7, #20]
 80158a8:	6139      	str	r1, [r7, #16]
 80158aa:	60fa      	str	r2, [r7, #12]
 80158ac:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80158ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158b2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80158b6:	4618      	mov	r0, r3
 80158b8:	f000 faaa 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80158bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7fe f950 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80158c6:	4603      	mov	r3, r0
 80158c8:	2b02      	cmp	r3, #2
 80158ca:	d001      	beq.n	80158d0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 80158cc:	f004 fd86 	bl	801a3dc <abort>
  const int batches = output_shape.Dims(0);
 80158d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158d4:	2100      	movs	r1, #0
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7fe fa52 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158dc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 80158e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158e4:	2101      	movs	r1, #1
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7fe fa4a 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80158f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80158f4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80158f8:	4618      	mov	r0, r3
 80158fa:	f000 fa89 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 80158fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015902:	4618      	mov	r0, r3
 8015904:	f7fe f92f 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015908:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801590c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015910:	1e5a      	subs	r2, r3, #1
 8015912:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015916:	4611      	mov	r1, r2
 8015918:	4618      	mov	r0, r3
 801591a:	f7fe fa31 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 801591e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8015922:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015926:	68b9      	ldr	r1, [r7, #8]
 8015928:	4618      	mov	r0, r3
 801592a:	f000 fa71 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	695b      	ldr	r3, [r3, #20]
 8015932:	425b      	negs	r3, r3
 8015934:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	69db      	ldr	r3, [r3, #28]
 801593a:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	699b      	ldr	r3, [r3, #24]
 8015940:	425b      	negs	r3, r3
 8015942:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	689b      	ldr	r3, [r3, #8]
 8015948:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	68db      	ldr	r3, [r3, #12]
 801594e:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801595c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015960:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 8015962:	2301      	movs	r3, #1
 8015964:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 8015966:	2301      	movs	r3, #1
 8015968:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 801596a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801596e:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 8015970:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015974:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 8015976:	2301      	movs	r3, #1
 8015978:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 801597a:	2301      	movs	r3, #1
 801597c:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 801597e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015982:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 8015984:	2301      	movs	r3, #1
 8015986:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 8015988:	2301      	movs	r3, #1
 801598a:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 801598c:	2301      	movs	r3, #1
 801598e:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 8015990:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015994:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 8015996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801599a:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 801599c:	2301      	movs	r3, #1
 801599e:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 80159a0:	2301      	movs	r3, #1
 80159a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 80159a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80159a8:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 80159aa:	2300      	movs	r3, #0
 80159ac:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 80159ae:	2300      	movs	r3, #0
 80159b0:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	6a1b      	ldr	r3, [r3, #32]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	db08      	blt.n	80159cc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80159ba:	697b      	ldr	r3, [r7, #20]
 80159bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159be:	68fa      	ldr	r2, [r7, #12]
 80159c0:	6a12      	ldr	r2, [r2, #32]
 80159c2:	4611      	mov	r1, r2
 80159c4:	6978      	ldr	r0, [r7, #20]
 80159c6:	4798      	blx	r3
 80159c8:	4603      	mov	r3, r0
 80159ca:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 80159cc:	68b8      	ldr	r0, [r7, #8]
 80159ce:	f7fe ffa9 	bl	8014924 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80159d2:	4605      	mov	r5, r0
 80159d4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80159d8:	f7fe ffa4 	bl	8014924 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80159dc:	4606      	mov	r6, r0
 80159de:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80159e2:	f7ff fa20 	bl	8014e26 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80159e6:	6078      	str	r0, [r7, #4]
 80159e8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80159ec:	f7fe ffa9 	bl	8014942 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80159f0:	4603      	mov	r3, r0
 80159f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80159f6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80159fa:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80159fe:	f107 001c 	add.w	r0, r7, #28
 8015a02:	9306      	str	r3, [sp, #24]
 8015a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a08:	9305      	str	r3, [sp, #20]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	9304      	str	r3, [sp, #16]
 8015a0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015a12:	9303      	str	r3, [sp, #12]
 8015a14:	9602      	str	r6, [sp, #8]
 8015a16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a1a:	9301      	str	r3, [sp, #4]
 8015a1c:	9500      	str	r5, [sp, #0]
 8015a1e:	4623      	mov	r3, r4
 8015a20:	f7f6 fab2 	bl	800bf88 <arm_fully_connected_s8>
 8015a24:	4603      	mov	r3, r0
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	bf14      	ite	ne
 8015a2a:	2301      	movne	r3, #1
 8015a2c:	2300      	moveq	r3, #0
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d03e      	beq.n	8015ab2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	695c      	ldr	r4, [r3, #20]
 8015a38:	68b8      	ldr	r0, [r7, #8]
 8015a3a:	f7fe ff73 	bl	8014924 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015a3e:	4606      	mov	r6, r0
 8015a40:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8015a44:	f7fe ff6e 	bl	8014924 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015a48:	6078      	str	r0, [r7, #4]
 8015a4a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8015a4e:	f7ff f9ea 	bl	8014e26 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8015a52:	6038      	str	r0, [r7, #0]
 8015a54:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8015a58:	f7fe ff73 	bl	8014942 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8015a62:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015a66:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8015a6a:	f107 001c 	add.w	r0, r7, #28
 8015a6e:	9306      	str	r3, [sp, #24]
 8015a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a74:	9305      	str	r3, [sp, #20]
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	9304      	str	r3, [sp, #16]
 8015a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015a7e:	9303      	str	r3, [sp, #12]
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	9302      	str	r3, [sp, #8]
 8015a84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a88:	9301      	str	r3, [sp, #4]
 8015a8a:	9600      	str	r6, [sp, #0]
 8015a8c:	462b      	mov	r3, r5
 8015a8e:	f7f6 fa7b 	bl	800bf88 <arm_fully_connected_s8>
 8015a92:	4603      	mov	r3, r0
 8015a94:	461a      	mov	r2, r3
 8015a96:	2300      	movs	r3, #0
 8015a98:	9303      	str	r3, [sp, #12]
 8015a9a:	9202      	str	r2, [sp, #8]
 8015a9c:	4b0f      	ldr	r3, [pc, #60]	; (8015adc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 8015a9e:	9301      	str	r3, [sp, #4]
 8015aa0:	4b0f      	ldr	r3, [pc, #60]	; (8015ae0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	23a6      	movs	r3, #166	; 0xa6
 8015aa6:	4a0f      	ldr	r2, [pc, #60]	; (8015ae4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 8015aa8:	490f      	ldr	r1, [pc, #60]	; (8015ae8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 8015aaa:	6978      	ldr	r0, [r7, #20]
 8015aac:	47a0      	blx	r4
 8015aae:	2401      	movs	r4, #1
 8015ab0:	e000      	b.n	8015ab4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8015ab2:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8015ab4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7fe f83e 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8015abe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7fe f839 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015ac8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7fe f834 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015ad2:	4623      	mov	r3, r4
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	37dc      	adds	r7, #220	; 0xdc
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015adc:	0801e56c 	.word	0x0801e56c
 8015ae0:	0801e580 	.word	0x0801e580
 8015ae4:	0801e374 	.word	0x0801e374
 8015ae8:	0801e550 	.word	0x0801e550

08015aec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015aec:	b590      	push	{r4, r7, lr}
 8015aee:	b0d1      	sub	sp, #324	; 0x144
 8015af0:	af04      	add	r7, sp, #16
 8015af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015afa:	6018      	str	r0, [r3, #0]
 8015afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b04:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	695b      	ldr	r3, [r3, #20]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d101      	bne.n	8015b1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8015b16:	f004 fc61 	bl	801a3dc <abort>
  const auto* params =
 8015b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	695b      	ldr	r3, [r3, #20]
 8015b26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8015b2a:	4b67      	ldr	r3, [pc, #412]	; (8015cc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b32:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b3e:	6809      	ldr	r1, [r1, #0]
 8015b40:	6818      	ldr	r0, [r3, #0]
 8015b42:	f7fe f9f1 	bl	8013f28 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015b46:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8015b4a:	4b60      	ldr	r3, [pc, #384]	; (8015ccc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 8015b4c:	681a      	ldr	r2, [r3, #0]
 8015b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b52:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b5e:	6809      	ldr	r1, [r1, #0]
 8015b60:	6818      	ldr	r0, [r3, #0]
 8015b62:	f7fe f9e1 	bl	8013f28 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015b66:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8015b6a:	4b59      	ldr	r3, [pc, #356]	; (8015cd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b72:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b7e:	6809      	ldr	r1, [r1, #0]
 8015b80:	6818      	ldr	r0, [r3, #0]
 8015b82:	f7fe f9d1 	bl	8013f28 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015b86:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8015b8a:	4b52      	ldr	r3, [pc, #328]	; (8015cd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 8015b8c:	681a      	ldr	r2, [r3, #0]
 8015b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b92:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b9e:	6809      	ldr	r1, [r1, #0]
 8015ba0:	6818      	ldr	r0, [r3, #0]
 8015ba2:	f7fe f9d1 	bl	8013f48 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8015ba6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 8015baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	691b      	ldr	r3, [r3, #16]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d101      	bne.n	8015bbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 8015bba:	f004 fc0f 	bl	801a3dc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8015bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	691b      	ldr	r3, [r3, #16]
 8015bca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8015bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bd2:	7a1b      	ldrb	r3, [r3, #8]
 8015bd4:	2b09      	cmp	r3, #9
 8015bd6:	d021      	beq.n	8015c1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 8015bd8:	2b09      	cmp	r3, #9
 8015bda:	dc55      	bgt.n	8015c88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 8015bdc:	2b01      	cmp	r3, #1
 8015bde:	d002      	beq.n	8015be6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 8015be0:	2b03      	cmp	r3, #3
 8015be2:	d036      	beq.n	8015c52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 8015be4:	e050      	b.n	8015c88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	695c      	ldr	r4, [r3, #20]
 8015bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bf6:	7a1b      	ldrb	r3, [r3, #8]
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7fd fa43 	bl	8013084 <TfLiteTypeGetName>
 8015bfe:	4602      	mov	r2, r0
 8015c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c04:	7a1b      	ldrb	r3, [r3, #8]
 8015c06:	4619      	mov	r1, r3
 8015c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c0c:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015c10:	460b      	mov	r3, r1
 8015c12:	4931      	ldr	r1, [pc, #196]	; (8015cd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015c14:	6800      	ldr	r0, [r0, #0]
 8015c16:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015c18:	2301      	movs	r3, #1
 8015c1a:	e04f      	b.n	8015cbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8015c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c20:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c28:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015c30:	9302      	str	r3, [sp, #8]
 8015c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015c36:	9301      	str	r3, [sp, #4]
 8015c38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8015c3c:	9300      	str	r3, [sp, #0]
 8015c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8015c46:	6809      	ldr	r1, [r1, #0]
 8015c48:	6800      	ldr	r0, [r0, #0]
 8015c4a:	f7ff fe29 	bl	80158a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8015c4e:	4603      	mov	r3, r0
                               output);
 8015c50:	e034      	b.n	8015cbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	695c      	ldr	r4, [r3, #20]
 8015c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c62:	7a1b      	ldrb	r3, [r3, #8]
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7fd fa0d 	bl	8013084 <TfLiteTypeGetName>
 8015c6a:	4602      	mov	r2, r0
 8015c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c70:	7a1b      	ldrb	r3, [r3, #8]
 8015c72:	4619      	mov	r1, r3
 8015c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c78:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015c7c:	460b      	mov	r3, r1
 8015c7e:	4916      	ldr	r1, [pc, #88]	; (8015cd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015c80:	6800      	ldr	r0, [r0, #0]
 8015c82:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015c84:	2301      	movs	r3, #1
 8015c86:	e019      	b.n	8015cbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	695c      	ldr	r4, [r3, #20]
 8015c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c98:	7a1b      	ldrb	r3, [r3, #8]
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7fd f9f2 	bl	8013084 <TfLiteTypeGetName>
 8015ca0:	4602      	mov	r2, r0
 8015ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015ca6:	7a1b      	ldrb	r3, [r3, #8]
 8015ca8:	4619      	mov	r1, r3
 8015caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015cae:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	4908      	ldr	r1, [pc, #32]	; (8015cd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015cb6:	6800      	ldr	r0, [r0, #0]
 8015cb8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015cba:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd90      	pop	{r4, r7, pc}
 8015cc6:	bf00      	nop
 8015cc8:	0801ede4 	.word	0x0801ede4
 8015ccc:	0801ede8 	.word	0x0801ede8
 8015cd0:	0801edec 	.word	0x0801edec
 8015cd4:	0801edf0 	.word	0x0801edf0
 8015cd8:	0801e6a4 	.word	0x0801e6a4

08015cdc <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8015cdc:	b4b0      	push	{r4, r5, r7}
 8015cde:	b083      	sub	sp, #12
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 8015ce4:	4b13      	ldr	r3, [pc, #76]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015ce6:	4a14      	ldr	r2, [pc, #80]	; (8015d38 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 8015ce8:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 8015cea:	4b12      	ldr	r3, [pc, #72]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cec:	2200      	movs	r2, #0
 8015cee:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 8015cf0:	4b10      	ldr	r3, [pc, #64]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cf2:	4a12      	ldr	r2, [pc, #72]	; (8015d3c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 8015cf4:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 8015cf6:	4b0f      	ldr	r3, [pc, #60]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cf8:	4a11      	ldr	r2, [pc, #68]	; (8015d40 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 8015cfa:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 8015cfc:	4b0d      	ldr	r3, [pc, #52]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cfe:	2200      	movs	r2, #0
 8015d00:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 8015d02:	4b0c      	ldr	r3, [pc, #48]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015d04:	2200      	movs	r2, #0
 8015d06:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 8015d08:	4b0a      	ldr	r3, [pc, #40]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 8015d0e:	4b09      	ldr	r3, [pc, #36]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015d10:	2200      	movs	r2, #0
 8015d12:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	4a07      	ldr	r2, [pc, #28]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015d18:	461c      	mov	r4, r3
 8015d1a:	4615      	mov	r5, r2
 8015d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	370c      	adds	r7, #12
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bcb0      	pop	{r4, r5, r7}
 8015d30:	4770      	bx	lr
 8015d32:	bf00      	nop
 8015d34:	20002b98 	.word	0x20002b98
 8015d38:	08015607 	.word	0x08015607
 8015d3c:	08015635 	.word	0x08015635
 8015d40:	08015aed 	.word	0x08015aed

08015d44 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b08a      	sub	sp, #40	; 0x28
 8015d48:	af02      	add	r7, sp, #8
 8015d4a:	60f8      	str	r0, [r7, #12]
 8015d4c:	607b      	str	r3, [r7, #4]
 8015d4e:	460b      	mov	r3, r1
 8015d50:	72fb      	strb	r3, [r7, #11]
 8015d52:	4613      	mov	r3, r2
 8015d54:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8015d56:	7abb      	ldrb	r3, [r7, #10]
 8015d58:	2b01      	cmp	r3, #1
 8015d5a:	d03e      	beq.n	8015dda <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8015d5c:	f04f 0200 	mov.w	r2, #0
 8015d60:	f04f 0300 	mov.w	r3, #0
 8015d64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8015d68:	f107 0310 	add.w	r3, r7, #16
 8015d6c:	9301      	str	r3, [sp, #4]
 8015d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d70:	9300      	str	r3, [sp, #0]
 8015d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d76:	6879      	ldr	r1, [r7, #4]
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f7fd fcb5 	bl	80136e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	77fb      	strb	r3, [r7, #31]
 8015d82:	7ffb      	ldrb	r3, [r7, #31]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d001      	beq.n	8015d8c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8015d88:	7ffb      	ldrb	r3, [r7, #31]
 8015d8a:	e027      	b.n	8015ddc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8015d8c:	ed97 7b04 	vldr	d7, [r7, #16]
 8015d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d94:	3304      	adds	r3, #4
 8015d96:	4619      	mov	r1, r3
 8015d98:	4610      	mov	r0, r2
 8015d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8015d9e:	eef0 0a67 	vmov.f32	s1, s15
 8015da2:	f7fd f9f5 	bl	8013190 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	691a      	ldr	r2, [r3, #16]
 8015daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dac:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 8015dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db0:	691a      	ldr	r2, [r3, #16]
 8015db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015db4:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8015db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db8:	691a      	ldr	r2, [r3, #16]
 8015dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dbc:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8015dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dc0:	f103 0208 	add.w	r2, r3, #8
 8015dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dc6:	330c      	adds	r3, #12
 8015dc8:	7af9      	ldrb	r1, [r7, #11]
 8015dca:	9300      	str	r3, [sp, #0]
 8015dcc:	4613      	mov	r3, r2
 8015dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dd0:	68f8      	ldr	r0, [r7, #12]
 8015dd2:	f7fd fe15 	bl	8013a00 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8015dd6:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8015dd8:	e000      	b.n	8015ddc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8015dda:	2300      	movs	r3, #0
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3720      	adds	r7, #32
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	da01      	bge.n	8015e02 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	e000      	b.n	8015e04 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8015e02:	687b      	ldr	r3, [r7, #4]
    }
 8015e04:	4618      	mov	r0, r3
 8015e06:	370c      	adds	r7, #12
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr

08015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b086      	sub	sp, #24
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d003      	beq.n	8015e28 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d103      	bne.n	8015e30 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f7fd fe65 	bl	8013af8 <_ZN6tflite12RuntimeShapeC1Ev>
 8015e2e:	e00d      	b.n	8015e4c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	685b      	ldr	r3, [r3, #4]
 8015e34:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8015e36:	697b      	ldr	r3, [r7, #20]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8015e3c:	697b      	ldr	r3, [r7, #20]
 8015e3e:	3304      	adds	r3, #4
 8015e40:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8015e42:	68fa      	ldr	r2, [r7, #12]
 8015e44:	6939      	ldr	r1, [r7, #16]
 8015e46:	6878      	ldr	r0, [r7, #4]
 8015e48:	f7fd fe64 	bl	8013b14 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	3718      	adds	r7, #24
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}

08015e54 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b086      	sub	sp, #24
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f7fd fe81 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015e64:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	db03      	blt.n	8015e74 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8015e6c:	683a      	ldr	r2, [r7, #0]
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	429a      	cmp	r2, r3
 8015e72:	db01      	blt.n	8015e78 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8015e74:	f004 fab2 	bl	801a3dc <abort>
  const auto* dims_data = shape.DimsData();
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f7fd ffa6 	bl	8013dca <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8015e7e:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8015e80:	2301      	movs	r3, #1
 8015e82:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8015e84:	2300      	movs	r3, #0
 8015e86:	613b      	str	r3, [r7, #16]
 8015e88:	693a      	ldr	r2, [r7, #16]
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	da12      	bge.n	8015eb6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8015e90:	693a      	ldr	r2, [r7, #16]
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d005      	beq.n	8015ea4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	009b      	lsls	r3, r3, #2
 8015e9c:	68ba      	ldr	r2, [r7, #8]
 8015e9e:	4413      	add	r3, r2
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	e000      	b.n	8015ea6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8015ea4:	2301      	movs	r3, #1
 8015ea6:	697a      	ldr	r2, [r7, #20]
 8015ea8:	fb02 f303 	mul.w	r3, r2, r3
 8015eac:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	613b      	str	r3, [r7, #16]
 8015eb4:	e7e8      	b.n	8015e88 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8015eb6:	697b      	ldr	r3, [r7, #20]
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3718      	adds	r7, #24
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}

08015ec0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8015ec0:	b590      	push	{r4, r7, lr}
 8015ec2:	b087      	sub	sp, #28
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f7fd fe4a 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015ed2:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	617b      	str	r3, [r7, #20]
 8015ed8:	697a      	ldr	r2, [r7, #20]
 8015eda:	693b      	ldr	r3, [r7, #16]
 8015edc:	429a      	cmp	r2, r3
 8015ede:	da15      	bge.n	8015f0c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 8015ee0:	697a      	ldr	r2, [r7, #20]
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d00d      	beq.n	8015f04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8015ee8:	6979      	ldr	r1, [r7, #20]
 8015eea:	68f8      	ldr	r0, [r7, #12]
 8015eec:	f7fd ff48 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015ef0:	4604      	mov	r4, r0
 8015ef2:	6979      	ldr	r1, [r7, #20]
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f7fd ff43 	bl	8013d80 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015efa:	4603      	mov	r3, r0
 8015efc:	429c      	cmp	r4, r3
 8015efe:	d001      	beq.n	8015f04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 8015f00:	f004 fa6c 	bl	801a3dc <abort>
  for (int i = 0; i < dims_count; ++i) {
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	3301      	adds	r3, #1
 8015f08:	617b      	str	r3, [r7, #20]
 8015f0a:	e7e5      	b.n	8015ed8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8015f0c:	68b9      	ldr	r1, [r7, #8]
 8015f0e:	68f8      	ldr	r0, [r7, #12]
 8015f10:	f7ff ffa0 	bl	8015e54 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8015f14:	4603      	mov	r3, r0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	371c      	adds	r7, #28
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd90      	pop	{r4, r7, pc}

08015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8015f1e:	b580      	push	{r7, lr}
 8015f20:	b082      	sub	sp, #8
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8015f26:	2100      	movs	r1, #0
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f7fe fb23 	bl	8014574 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015f2e:	4603      	mov	r3, r0
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3708      	adds	r7, #8
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}

08015f38 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b082      	sub	sp, #8
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f000 f805 	bl	8015f50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8015f46:	4603      	mov	r3, r0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3708      	adds	r7, #8
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8015f58:	2101      	movs	r1, #1
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7fe fb0a 	bl	8014574 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015f60:	4603      	mov	r3, r0
  }
 8015f62:	4618      	mov	r0, r3
 8015f64:	3708      	adds	r7, #8
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}

08015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8015f6a:	b590      	push	{r4, r7, lr}
 8015f6c:	b085      	sub	sp, #20
 8015f6e:	af00      	add	r7, sp, #0
 8015f70:	60f8      	str	r0, [r7, #12]
 8015f72:	60b9      	str	r1, [r7, #8]
 8015f74:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8015f76:	f107 0308 	add.w	r3, r7, #8
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f7ff f8b4 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f80:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8015f82:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8015f84:	1d3b      	adds	r3, r7, #4
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7ff f8ae 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f8c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	461a      	mov	r2, r3
 8015f92:	4621      	mov	r1, r4
 8015f94:	68f8      	ldr	r0, [r7, #12]
 8015f96:	f7ff fb0b 	bl	80155b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7ff f831 	bl	8015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015fa2:	4603      	mov	r3, r0
}
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	3714      	adds	r7, #20
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd90      	pop	{r4, r7, pc}

08015fac <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	bf0c      	ite	eq
 8015fba:	2301      	moveq	r3, #1
 8015fbc:	2300      	movne	r3, #0
 8015fbe:	b2db      	uxtb	r3, r3
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f7fe fef9 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015fc6:	4603      	mov	r3, r0
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3708      	adds	r7, #8
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b08a      	sub	sp, #40	; 0x28
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8015fd8:	482c      	ldr	r0, [pc, #176]	; (801608c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8015fda:	f7ff ffa0 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7ff f88c 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8015fea:	4829      	ldr	r0, [pc, #164]	; (8016090 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8015fec:	f7ff ff97 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7ff f883 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8015ffc:	f000 f86c 	bl	80160d8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8016000:	4603      	mov	r3, r0
 8016002:	4619      	mov	r1, r3
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f000 f870 	bl	80160ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801600a:	4603      	mov	r3, r0
 801600c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801600e:	69f9      	ldr	r1, [r7, #28]
 8016010:	69f8      	ldr	r0, [r7, #28]
 8016012:	f000 f83f 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016016:	4603      	mov	r3, r0
 8016018:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801601a:	69f9      	ldr	r1, [r7, #28]
 801601c:	69b8      	ldr	r0, [r7, #24]
 801601e:	f000 f839 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016022:	4603      	mov	r3, r0
 8016024:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8016026:	69b9      	ldr	r1, [r7, #24]
 8016028:	69b8      	ldr	r0, [r7, #24]
 801602a:	f000 f833 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801602e:	4603      	mov	r3, r0
 8016030:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8016032:	6938      	ldr	r0, [r7, #16]
 8016034:	f000 f877 	bl	8016126 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8016038:	4603      	mov	r3, r0
 801603a:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801603c:	6979      	ldr	r1, [r7, #20]
 801603e:	68f8      	ldr	r0, [r7, #12]
 8016040:	f000 f853 	bl	80160ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016044:	4603      	mov	r3, r0
 8016046:	6a39      	ldr	r1, [r7, #32]
 8016048:	4618      	mov	r0, r3
 801604a:	f000 f823 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801604e:	4603      	mov	r3, r0
 8016050:	69b9      	ldr	r1, [r7, #24]
 8016052:	4618      	mov	r0, r3
 8016054:	f000 f849 	bl	80160ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016058:	4603      	mov	r3, r0
 801605a:	4618      	mov	r0, r3
 801605c:	f000 f879 	bl	8016152 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8016060:	4603      	mov	r3, r0
 8016062:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8016064:	68b9      	ldr	r1, [r7, #8]
 8016066:	69f8      	ldr	r0, [r7, #28]
 8016068:	f000 f83f 	bl	80160ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801606c:	4603      	mov	r3, r0
 801606e:	4619      	mov	r1, r3
 8016070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016072:	f000 f80f 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016076:	4603      	mov	r3, r0
 8016078:	4619      	mov	r1, r3
 801607a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801607c:	f000 f87f 	bl	801617e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016080:	4603      	mov	r3, r0
}
 8016082:	4618      	mov	r0, r3
 8016084:	3728      	adds	r7, #40	; 0x28
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}
 801608a:	bf00      	nop
 801608c:	70f5a894 	.word	0x70f5a894
 8016090:	2aaaaaab 	.word	0x2aaaaaab

08016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8016094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016096:	b085      	sub	sp, #20
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
 801609c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801609e:	1d3b      	adds	r3, r7, #4
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7ff f821 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160a6:	4603      	mov	r3, r0
 80160a8:	681d      	ldr	r5, [r3, #0]
 80160aa:	463b      	mov	r3, r7
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7ff f81b 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160b2:	4603      	mov	r3, r0
 80160b4:	681e      	ldr	r6, [r3, #0]
 80160b6:	f107 030c 	add.w	r3, r7, #12
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7ff f814 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160c0:	4604      	mov	r4, r0
 80160c2:	4631      	mov	r1, r6
 80160c4:	4628      	mov	r0, r5
 80160c6:	f7fd fde5 	bl	8013c94 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80160ca:	4603      	mov	r3, r0
 80160cc:	6023      	str	r3, [r4, #0]
  return c;
 80160ce:	68fb      	ldr	r3, [r7, #12]
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3714      	adds	r7, #20
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080160d8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 80160d8:	b580      	push	{r7, lr}
 80160da:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80160dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80160e0:	f7ff f80d 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80160e4:	4603      	mov	r3, r0
  }
 80160e6:	4618      	mov	r0, r3
 80160e8:	bd80      	pop	{r7, pc}

080160ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80160ea:	b590      	push	{r4, r7, lr}
 80160ec:	b083      	sub	sp, #12
 80160ee:	af00      	add	r7, sp, #0
 80160f0:	6078      	str	r0, [r7, #4]
 80160f2:	6039      	str	r1, [r7, #0]
 80160f4:	1d3b      	adds	r3, r7, #4
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7fe fff6 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160fc:	4603      	mov	r3, r0
 80160fe:	681c      	ldr	r4, [r3, #0]
 8016100:	463b      	mov	r3, r7
 8016102:	4618      	mov	r0, r3
 8016104:	f7fe fff0 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016108:	4603      	mov	r3, r0
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	4619      	mov	r1, r3
 801610e:	4620      	mov	r0, r4
 8016110:	f7fe fe30 	bl	8014d74 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8016114:	4603      	mov	r3, r0
 8016116:	4618      	mov	r0, r3
 8016118:	f7fe ff74 	bl	8015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801611c:	4603      	mov	r3, r0
 801611e:	4618      	mov	r0, r3
 8016120:	370c      	adds	r7, #12
 8016122:	46bd      	mov	sp, r7
 8016124:	bd90      	pop	{r4, r7, pc}

08016126 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8016126:	b580      	push	{r7, lr}
 8016128:	b082      	sub	sp, #8
 801612a:	af00      	add	r7, sp, #0
 801612c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801612e:	1d3b      	adds	r3, r7, #4
 8016130:	4618      	mov	r0, r3
 8016132:	f7fe ffd9 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016136:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	4618      	mov	r0, r3
 801613c:	f000 f83d 	bl	80161ba <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8016140:	4603      	mov	r3, r0
 8016142:	4618      	mov	r0, r3
 8016144:	f7fe ff5e 	bl	8015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016148:	4603      	mov	r3, r0
}
 801614a:	4618      	mov	r0, r3
 801614c:	3708      	adds	r7, #8
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}

08016152 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8016152:	b580      	push	{r7, lr}
 8016154:	b082      	sub	sp, #8
 8016156:	af00      	add	r7, sp, #0
 8016158:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801615a:	1d3b      	adds	r3, r7, #4
 801615c:	4618      	mov	r0, r3
 801615e:	f7fe ffc3 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016162:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	4618      	mov	r0, r3
 8016168:	f7ff fee6 	bl	8015f38 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801616c:	4603      	mov	r3, r0
 801616e:	4618      	mov	r0, r3
 8016170:	f7fe ff48 	bl	8015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016174:	4603      	mov	r3, r0
}
 8016176:	4618      	mov	r0, r3
 8016178:	3708      	adds	r7, #8
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}

0801617e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801617e:	b590      	push	{r4, r7, lr}
 8016180:	b083      	sub	sp, #12
 8016182:	af00      	add	r7, sp, #0
 8016184:	6078      	str	r0, [r7, #4]
 8016186:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8016188:	1d3b      	adds	r3, r7, #4
 801618a:	4618      	mov	r0, r3
 801618c:	f7fe ffac 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016190:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8016192:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8016194:	463b      	mov	r3, r7
 8016196:	4618      	mov	r0, r3
 8016198:	f7fe ffa6 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801619c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	4619      	mov	r1, r3
 80161a2:	4620      	mov	r0, r4
 80161a4:	f000 f815 	bl	80161d2 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 80161a8:	4603      	mov	r3, r0
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7fe ff2a 	bl	8015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80161b0:	4603      	mov	r3, r0
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	370c      	adds	r7, #12
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd90      	pop	{r4, r7, pc}

080161ba <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80161ba:	b580      	push	{r7, lr}
 80161bc:	b082      	sub	sp, #8
 80161be:	af00      	add	r7, sp, #0
 80161c0:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	f000 f813 	bl	80161ee <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 80161c8:	4603      	mov	r3, r0
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	3708      	adds	r7, #8
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}

080161d2 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 80161d2:	b580      	push	{r7, lr}
 80161d4:	b082      	sub	sp, #8
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	6078      	str	r0, [r7, #4]
 80161da:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 80161dc:	6839      	ldr	r1, [r7, #0]
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f000 f812 	bl	8016208 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 80161e4:	4603      	mov	r3, r0
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	3708      	adds	r7, #8
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}

080161ee <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80161ee:	b580      	push	{r7, lr}
 80161f0:	b082      	sub	sp, #8
 80161f2:	af00      	add	r7, sp, #0
 80161f4:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80161f6:	2102      	movs	r1, #2
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f7fe f9bb 	bl	8014574 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80161fe:	4603      	mov	r3, r0
  }
 8016200:	4618      	mov	r0, r3
 8016202:	3708      	adds	r7, #8
 8016204:	46bd      	mov	sp, r7
 8016206:	bd80      	pop	{r7, pc}

08016208 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8016208:	b580      	push	{r7, lr}
 801620a:	b082      	sub	sp, #8
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	6039      	str	r1, [r7, #0]
 8016212:	6839      	ldr	r1, [r7, #0]
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f7fe fdad 	bl	8014d74 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801621a:	4603      	mov	r3, r0
 801621c:	4618      	mov	r0, r3
 801621e:	3708      	adds	r7, #8
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}

08016224 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8016224:	b480      	push	{r7}
 8016226:	b083      	sub	sp, #12
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	781a      	ldrb	r2, [r3, #0]
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	429a      	cmp	r2, r3
 8016238:	d201      	bcs.n	801623e <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801623a:	683b      	ldr	r3, [r7, #0]
 801623c:	e000      	b.n	8016240 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801623e:	687b      	ldr	r3, [r7, #4]
    }
 8016240:	4618      	mov	r0, r3
 8016242:	370c      	adds	r7, #12
 8016244:	46bd      	mov	sp, r7
 8016246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624a:	4770      	bx	lr

0801624c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801624c:	b480      	push	{r7}
 801624e:	b083      	sub	sp, #12
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d002      	beq.n	8016260 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	e000      	b.n	8016262 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 8016260:	2300      	movs	r3, #0
}
 8016262:	4618      	mov	r0, r3
 8016264:	370c      	adds	r7, #12
 8016266:	46bd      	mov	sp, r7
 8016268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626c:	4770      	bx	lr
	...

08016270 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 8016270:	b580      	push	{r7, lr}
 8016272:	b086      	sub	sp, #24
 8016274:	af00      	add	r7, sp, #0
 8016276:	4603      	mov	r3, r0
 8016278:	6039      	str	r1, [r7, #0]
 801627a:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801627c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016280:	11db      	asrs	r3, r3, #7
 8016282:	b21b      	sxth	r3, r3
 8016284:	b29b      	uxth	r3, r3
 8016286:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801628a:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801628c:	8afb      	ldrh	r3, [r7, #22]
 801628e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016292:	d306      	bcc.n	80162a2 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 8016294:	4b1a      	ldr	r3, [pc, #104]	; (8016300 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 8016296:	4a1b      	ldr	r2, [pc, #108]	; (8016304 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 8016298:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801629c:	481a      	ldr	r0, [pc, #104]	; (8016308 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801629e:	f004 f8a5 	bl	801a3ec <__assert_func>
  int16_t offset = value & 0x7f;
 80162a2:	88fb      	ldrh	r3, [r7, #6]
 80162a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80162a8:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 80162aa:	8afb      	ldrh	r3, [r7, #22]
 80162ac:	005b      	lsls	r3, r3, #1
 80162ae:	683a      	ldr	r2, [r7, #0]
 80162b0:	4413      	add	r3, r2
 80162b2:	881b      	ldrh	r3, [r3, #0]
 80162b4:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 80162b6:	8afb      	ldrh	r3, [r7, #22]
 80162b8:	3301      	adds	r3, #1
 80162ba:	005b      	lsls	r3, r3, #1
 80162bc:	683a      	ldr	r2, [r7, #0]
 80162be:	4413      	add	r3, r2
 80162c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162c4:	b29a      	uxth	r2, r3
 80162c6:	8afb      	ldrh	r3, [r7, #22]
 80162c8:	005b      	lsls	r3, r3, #1
 80162ca:	6839      	ldr	r1, [r7, #0]
 80162cc:	440b      	add	r3, r1
 80162ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	b29b      	uxth	r3, r3
 80162d8:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 80162da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80162de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80162e2:	fb02 f303 	mul.w	r3, r2, r3
 80162e6:	3340      	adds	r3, #64	; 0x40
 80162e8:	11db      	asrs	r3, r3, #7
 80162ea:	60fb      	str	r3, [r7, #12]
  return base + delta;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	8a7b      	ldrh	r3, [r7, #18]
 80162f2:	4413      	add	r3, r2
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	b21b      	sxth	r3, r3
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3718      	adds	r7, #24
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	0801e6c0 	.word	0x0801e6c0
 8016304:	0801e6ec 	.word	0x0801e6ec
 8016308:	0801e730 	.word	0x0801e730

0801630c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801630c:	b580      	push	{r7, lr}
 801630e:	b08a      	sub	sp, #40	; 0x28
 8016310:	af00      	add	r7, sp, #0
 8016312:	60f8      	str	r0, [r7, #12]
 8016314:	60b9      	str	r1, [r7, #8]
 8016316:	607a      	str	r2, [r7, #4]
 8016318:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631c:	687a      	ldr	r2, [r7, #4]
 801631e:	fb03 f202 	mul.w	r2, r3, r2
 8016322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016324:	4413      	add	r3, r2
 8016326:	005b      	lsls	r3, r3, #1
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	4413      	add	r3, r2
 801632c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016330:	461a      	mov	r2, r3
 8016332:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016336:	1ad3      	subs	r3, r2, r3
 8016338:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	6899      	ldr	r1, [r3, #8]
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 8016342:	461a      	mov	r2, r3
 8016344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016346:	f7fd fdab 	bl	8013ea0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801634a:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801634c:	6a3b      	ldr	r3, [r7, #32]
 801634e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8016352:	337f      	adds	r3, #127	; 0x7f
 8016354:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8016356:	4b12      	ldr	r3, [pc, #72]	; (80163a0 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8016358:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801635a:	f107 0214 	add.w	r2, r7, #20
 801635e:	f107 0310 	add.w	r3, r7, #16
 8016362:	4611      	mov	r1, r2
 8016364:	4618      	mov	r0, r3
 8016366:	f7fd fbb3 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 801636a:	4602      	mov	r2, r0
 801636c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016370:	61bb      	str	r3, [r7, #24]
 8016372:	f107 0318 	add.w	r3, r7, #24
 8016376:	4619      	mov	r1, r3
 8016378:	4610      	mov	r0, r2
 801637a:	f7fd fb95 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 801637e:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8016380:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 8016382:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016388:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801638c:	4611      	mov	r1, r2
 801638e:	4618      	mov	r0, r3
 8016390:	f7ff ff6e 	bl	8016270 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8016394:	4603      	mov	r3, r0
}
 8016396:	4618      	mov	r0, r3
 8016398:	3728      	adds	r7, #40	; 0x28
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}
 801639e:	bf00      	nop
 80163a0:	ffff8000 	.word	0xffff8000

080163a4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 80163a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a8:	b0ab      	sub	sp, #172	; 0xac
 80163aa:	af02      	add	r7, sp, #8
 80163ac:	63f8      	str	r0, [r7, #60]	; 0x3c
 80163ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80163b0:	637a      	str	r2, [r7, #52]	; 0x34
 80163b2:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80163b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163b6:	f7fd fbd6 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80163ba:	4603      	mov	r3, r0
 80163bc:	3b01      	subs	r3, #1
 80163be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80163c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163c4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80163c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163ca:	f7ff fd79 	bl	8015ec0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80163ce:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80163d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163d8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80163dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163de:	f7fe fd31 	bl	8014e44 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80163e2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 80163e6:	2300      	movs	r3, #0
 80163e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80163ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80163f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80163f4:	429a      	cmp	r2, r3
 80163f6:	f280 8157 	bge.w	80166a8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 80163fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80163fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 8016402:	2300      	movs	r3, #0
 8016404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016408:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801640c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016410:	429a      	cmp	r2, r3
 8016412:	da1c      	bge.n	801644e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8016414:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801641c:	fb03 f202 	mul.w	r2, r3, r2
 8016420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016424:	4413      	add	r3, r2
 8016426:	005a      	lsls	r2, r3, #1
 8016428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801642a:	441a      	add	r2, r3
 801642c:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8016430:	4611      	mov	r1, r2
 8016432:	4618      	mov	r0, r3
 8016434:	f7ff fcd6 	bl	8015de4 <_ZSt3maxIsERKT_S2_S2_>
 8016438:	4603      	mov	r3, r0
 801643a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801643e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 8016442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016446:	3301      	adds	r3, #1
 8016448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801644c:	e7dc      	b.n	8016408 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801644e:	2300      	movs	r3, #0
 8016450:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 8016454:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801645c:	fb02 f303 	mul.w	r3, r2, r3
 8016460:	005a      	lsls	r2, r3, #1
 8016462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016466:	4413      	add	r3, r2
 8016468:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 801646a:	2300      	movs	r3, #0
 801646c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016470:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016474:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016478:	429a      	cmp	r2, r3
 801647a:	da28      	bge.n	80164ce <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801647c:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 8016480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016484:	005a      	lsls	r2, r3, #1
 8016486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016488:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801648a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801648e:	9301      	str	r3, [sp, #4]
 8016490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016494:	9300      	str	r3, [sp, #0]
 8016496:	460b      	mov	r3, r1
 8016498:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801649c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801649e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80164a0:	f7ff ff34 	bl	801630c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 80164a4:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 80164a6:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 80164a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80164ac:	005a      	lsls	r2, r3, #1
 80164ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80164b0:	4413      	add	r3, r2
 80164b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164b6:	461a      	mov	r2, r3
 80164b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80164bc:	4413      	add	r3, r2
 80164be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 80164c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80164c6:	3301      	adds	r3, #1
 80164c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80164cc:	e7d0      	b.n	8016470 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 80164ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80164d2:	4618      	mov	r0, r3
 80164d4:	f7fe fd84 	bl	8014fe0 <_ZN6tflite17CountLeadingZerosImEEiT_>
 80164d8:	4603      	mov	r3, r0
 80164da:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80164de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80164e2:	17da      	asrs	r2, r3, #31
 80164e4:	623b      	str	r3, [r7, #32]
 80164e6:	627a      	str	r2, [r7, #36]	; 0x24
 80164e8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80164ec:	1e59      	subs	r1, r3, #1
 80164ee:	f1a1 0320 	sub.w	r3, r1, #32
 80164f2:	f1c1 0220 	rsb	r2, r1, #32
 80164f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164f8:	fa00 f901 	lsl.w	r9, r0, r1
 80164fc:	6a38      	ldr	r0, [r7, #32]
 80164fe:	fa00 f303 	lsl.w	r3, r0, r3
 8016502:	ea49 0903 	orr.w	r9, r9, r3
 8016506:	6a3b      	ldr	r3, [r7, #32]
 8016508:	fa23 f202 	lsr.w	r2, r3, r2
 801650c:	ea49 0902 	orr.w	r9, r9, r2
 8016510:	6a3b      	ldr	r3, [r7, #32]
 8016512:	fa03 f801 	lsl.w	r8, r3, r1
 8016516:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801651a:	61bb      	str	r3, [r7, #24]
 801651c:	f149 0300 	adc.w	r3, r9, #0
 8016520:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 8016522:	f04f 0200 	mov.w	r2, #0
 8016526:	f04f 0300 	mov.w	r3, #0
 801652a:	69b9      	ldr	r1, [r7, #24]
 801652c:	0b8a      	lsrs	r2, r1, #14
 801652e:	69f9      	ldr	r1, [r7, #28]
 8016530:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8016534:	69f9      	ldr	r1, [r7, #28]
 8016536:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8016538:	4613      	mov	r3, r2
 801653a:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801653c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801653e:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 8016542:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8016544:	4b5b      	ldr	r3, [pc, #364]	; (80166b4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 8016546:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 8016548:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801654c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016550:	4611      	mov	r1, r2
 8016552:	4618      	mov	r0, r3
 8016554:	f7fd fabc 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 8016558:	4602      	mov	r2, r0
 801655a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801655e:	657b      	str	r3, [r7, #84]	; 0x54
 8016560:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016564:	4619      	mov	r1, r3
 8016566:	4610      	mov	r0, r2
 8016568:	f7fd fa9e 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 801656c:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801656e:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8016570:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 8016574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8016578:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801657c:	4611      	mov	r1, r2
 801657e:	4618      	mov	r0, r3
 8016580:	f7ff fe76 	bl	8016270 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8016584:	4603      	mov	r3, r0
 8016586:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801658a:	2300      	movs	r3, #0
 801658c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016590:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016598:	429a      	cmp	r2, r3
 801659a:	da7f      	bge.n	801669c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 801659c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80165a0:	f1c3 031f 	rsb	r3, r3, #31
 80165a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 80165a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80165ac:	1e5a      	subs	r2, r3, #1
 80165ae:	2301      	movs	r3, #1
 80165b0:	4093      	lsls	r3, r2
 80165b2:	17da      	asrs	r2, r3, #31
 80165b4:	603b      	str	r3, [r7, #0]
 80165b6:	607a      	str	r2, [r7, #4]
 80165b8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80165bc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80165c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80165c4:	005a      	lsls	r2, r3, #1
 80165c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80165c8:	4413      	add	r3, r2
 80165ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165ce:	b21b      	sxth	r3, r3
 80165d0:	17da      	asrs	r2, r3, #31
 80165d2:	613b      	str	r3, [r7, #16]
 80165d4:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80165d6:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80165da:	17da      	asrs	r2, r3, #31
 80165dc:	60bb      	str	r3, [r7, #8]
 80165de:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80165e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80165e4:	460b      	mov	r3, r1
 80165e6:	68ba      	ldr	r2, [r7, #8]
 80165e8:	fb02 f203 	mul.w	r2, r2, r3
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80165f2:	4601      	mov	r1, r0
 80165f4:	fb01 f303 	mul.w	r3, r1, r3
 80165f8:	4413      	add	r3, r2
 80165fa:	693a      	ldr	r2, [r7, #16]
 80165fc:	68b9      	ldr	r1, [r7, #8]
 80165fe:	fba2 ab01 	umull	sl, fp, r2, r1
 8016602:	445b      	add	r3, fp
 8016604:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8016606:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801660a:	eb1a 0502 	adds.w	r5, sl, r2
 801660e:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 8016612:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 8016616:	f1c1 0320 	rsb	r3, r1, #32
 801661a:	f1b1 0220 	subs.w	r2, r1, #32
 801661e:	fa25 f001 	lsr.w	r0, r5, r1
 8016622:	62b8      	str	r0, [r7, #40]	; 0x28
 8016624:	fa06 f303 	lsl.w	r3, r6, r3
 8016628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801662a:	ea40 0003 	orr.w	r0, r0, r3
 801662e:	62b8      	str	r0, [r7, #40]	; 0x28
 8016630:	d404      	bmi.n	801663c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 8016632:	fa46 f202 	asr.w	r2, r6, r2
 8016636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016638:	4313      	orrs	r3, r2
 801663a:	62bb      	str	r3, [r7, #40]	; 0x28
 801663c:	fa46 f301 	asr.w	r3, r6, r1
 8016640:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8016642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016644:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 8016646:	2300      	movs	r3, #0
 8016648:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801664a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801664e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016652:	4611      	mov	r1, r2
 8016654:	4618      	mov	r0, r3
 8016656:	f7fd fa3b 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 801665a:	4602      	mov	r2, r0
 801665c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016662:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016666:	4619      	mov	r1, r3
 8016668:	4610      	mov	r0, r2
 801666a:	f7fd fa1d 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 801666e:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8016670:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 8016672:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016676:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801667a:	fb03 f202 	mul.w	r2, r3, r2
 801667e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016682:	4413      	add	r3, r2
 8016684:	005a      	lsls	r2, r3, #1
 8016686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801668a:	441a      	add	r2, r3
 801668c:	b20b      	sxth	r3, r1
 801668e:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 8016690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016694:	3301      	adds	r3, #1
 8016696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801669a:	e779      	b.n	8016590 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 801669c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80166a0:	3301      	adds	r3, #1
 80166a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80166a6:	e6a1      	b.n	80163ec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 80166a8:	bf00      	nop
 80166aa:	37a4      	adds	r7, #164	; 0xa4
 80166ac:	46bd      	mov	sp, r7
 80166ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166b2:	bf00      	nop
 80166b4:	ffff8000 	.word	0xffff8000

080166b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 80166b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166bc:	b0bc      	sub	sp, #240	; 0xf0
 80166be:	af04      	add	r7, sp, #16
 80166c0:	60f8      	str	r0, [r7, #12]
 80166c2:	60b9      	str	r1, [r7, #8]
 80166c4:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	7a1b      	ldrb	r3, [r3, #8]
 80166ca:	2b03      	cmp	r3, #3
 80166cc:	d127      	bne.n	801671e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 80166ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80166d2:	68f9      	ldr	r1, [r7, #12]
 80166d4:	4618      	mov	r0, r3
 80166d6:	f7ff fb9b 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 80166da:	68f8      	ldr	r0, [r7, #12]
 80166dc:	f7fe f98e 	bl	80149fc <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80166e0:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 80166e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80166e6:	68b9      	ldr	r1, [r7, #8]
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7ff fb91 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 80166ee:	68b8      	ldr	r0, [r7, #8]
 80166f0:	f7fe f993 	bl	8014a1a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80166f4:	4602      	mov	r2, r0
 80166f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80166fa:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80166fe:	9200      	str	r2, [sp, #0]
 8016700:	4622      	mov	r2, r4
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f000 f930 	bl	8016968 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 8016708:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801670c:	4618      	mov	r0, r3
 801670e:	f7fd fa14 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8016712:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016716:	4618      	mov	r0, r3
 8016718:	f7fd fa0f 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
 801671c:	e080      	b.n	8016820 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	7a1b      	ldrb	r3, [r3, #8]
 8016722:	2b09      	cmp	r3, #9
 8016724:	d153      	bne.n	80167ce <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	7a1b      	ldrb	r3, [r3, #8]
 801672a:	2b07      	cmp	r3, #7
 801672c:	d077      	beq.n	801681e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801672e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016732:	68f9      	ldr	r1, [r7, #12]
 8016734:	4618      	mov	r0, r3
 8016736:	f7ff fb6b 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801673a:	f107 0314 	add.w	r3, r7, #20
 801673e:	68b9      	ldr	r1, [r7, #8]
 8016740:	4618      	mov	r0, r3
 8016742:	f7ff fb65 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 8016746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801674a:	4618      	mov	r0, r3
 801674c:	f7fd fa0b 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016750:	4603      	mov	r3, r0
 8016752:	3b01      	subs	r3, #1
 8016754:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8016758:	f107 0214 	add.w	r2, r7, #20
 801675c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016760:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8016764:	4618      	mov	r0, r3
 8016766:	f7ff fbab 	bl	8015ec0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801676a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801676e:	f107 0214 	add.w	r2, r7, #20
 8016772:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801677a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801677e:	f7fe fb61 	bl	8014e44 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016782:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8016786:	68f8      	ldr	r0, [r7, #12]
 8016788:	f7fe f8cc 	bl	8014924 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801678c:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	689e      	ldr	r6, [r3, #8]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801679a:	68b8      	ldr	r0, [r7, #8]
 801679c:	f7fe f8d1 	bl	8014942 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80167a0:	4603      	mov	r3, r0
 80167a2:	9302      	str	r3, [sp, #8]
 80167a4:	9501      	str	r5, [sp, #4]
 80167a6:	9400      	str	r4, [sp, #0]
 80167a8:	4633      	mov	r3, r6
 80167aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80167ae:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80167b2:	4640      	mov	r0, r8
 80167b4:	f7f8 fa28 	bl	800ec08 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 80167b8:	f107 0314 	add.w	r3, r7, #20
 80167bc:	4618      	mov	r0, r3
 80167be:	f7fd f9bc 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 80167c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80167c6:	4618      	mov	r0, r3
 80167c8:	f7fd f9b7 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
 80167cc:	e028      	b.n	8016820 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 80167ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80167d2:	68f9      	ldr	r1, [r7, #12]
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7ff fb1b 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80167da:	68f8      	ldr	r0, [r7, #12]
 80167dc:	f7fe fb61 	bl	8014ea2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 80167e0:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 80167e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80167e6:	68b9      	ldr	r1, [r7, #8]
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7ff fb11 	bl	8015e10 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80167ee:	68b8      	ldr	r0, [r7, #8]
 80167f0:	f7ff fd2c 	bl	801624c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80167f4:	4602      	mov	r2, r0
 80167f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80167fa:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80167fe:	9200      	str	r2, [sp, #0]
 8016800:	4622      	mov	r2, r4
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	f7ff fdce 	bl	80163a4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8016808:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801680c:	4618      	mov	r0, r3
 801680e:	f7fd f994 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8016812:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8016816:	4618      	mov	r0, r3
 8016818:	f7fd f98f 	bl	8013b3a <_ZN6tflite12RuntimeShapeD1Ev>
 801681c:	e000      	b.n	8016820 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 801681e:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8016820:	37e0      	adds	r7, #224	; 0xe0
 8016822:	46bd      	mov	sp, r7
 8016824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016828 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8016828:	b5b0      	push	{r4, r5, r7, lr}
 801682a:	b09e      	sub	sp, #120	; 0x78
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
 8016830:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8016832:	2200      	movs	r2, #0
 8016834:	6839      	ldr	r1, [r7, #0]
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f7fd fb76 	bl	8013f28 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801683c:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801683e:	2200      	movs	r2, #0
 8016840:	6839      	ldr	r1, [r7, #0]
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7fd fb80 	bl	8013f48 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8016848:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	691b      	ldr	r3, [r3, #16]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d101      	bne.n	8016856 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8016852:	f003 fdc3 	bl	801a3dc <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801685a:	f107 0408 	add.w	r4, r7, #8
 801685e:	461d      	mov	r5, r3
 8016860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801686a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801686c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016870:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8016874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016876:	7a1b      	ldrb	r3, [r3, #8]
 8016878:	3b01      	subs	r3, #1
 801687a:	2b08      	cmp	r3, #8
 801687c:	d84a      	bhi.n	8016914 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 801687e:	a201      	add	r2, pc, #4	; (adr r2, 8016884 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 8016880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016884:	080168a9 	.word	0x080168a9
 8016888:	08016915 	.word	0x08016915
 801688c:	080168d9 	.word	0x080168d9
 8016890:	08016915 	.word	0x08016915
 8016894:	08016915 	.word	0x08016915
 8016898:	08016915 	.word	0x08016915
 801689c:	080168f7 	.word	0x080168f7
 80168a0:	08016915 	.word	0x08016915
 80168a4:	080168c7 	.word	0x080168c7
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	695c      	ldr	r4, [r3, #20]
 80168ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168ae:	7a1b      	ldrb	r3, [r3, #8]
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7fc fbe7 	bl	8013084 <TfLiteTypeGetName>
 80168b6:	4602      	mov	r2, r0
 80168b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168ba:	7a1b      	ldrb	r3, [r3, #8]
 80168bc:	491e      	ldr	r1, [pc, #120]	; (8016938 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80168c2:	2301      	movs	r3, #1
 80168c4:	e034      	b.n	8016930 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 80168c6:	f107 0308 	add.w	r3, r7, #8
 80168ca:	461a      	mov	r2, r3
 80168cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80168ce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80168d0:	f7ff fef2 	bl	80166b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 80168d4:	2300      	movs	r3, #0
 80168d6:	e02b      	b.n	8016930 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	695c      	ldr	r4, [r3, #20]
 80168dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168de:	7a1b      	ldrb	r3, [r3, #8]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7fc fbcf 	bl	8013084 <TfLiteTypeGetName>
 80168e6:	4602      	mov	r2, r0
 80168e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168ea:	7a1b      	ldrb	r3, [r3, #8]
 80168ec:	4912      	ldr	r1, [pc, #72]	; (8016938 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80168f2:	2301      	movs	r3, #1
 80168f4:	e01c      	b.n	8016930 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	695c      	ldr	r4, [r3, #20]
 80168fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168fc:	7a1b      	ldrb	r3, [r3, #8]
 80168fe:	4618      	mov	r0, r3
 8016900:	f7fc fbc0 	bl	8013084 <TfLiteTypeGetName>
 8016904:	4602      	mov	r2, r0
 8016906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016908:	7a1b      	ldrb	r3, [r3, #8]
 801690a:	490b      	ldr	r1, [pc, #44]	; (8016938 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8016910:	2301      	movs	r3, #1
 8016912:	e00d      	b.n	8016930 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	695c      	ldr	r4, [r3, #20]
 8016918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801691a:	7a1b      	ldrb	r3, [r3, #8]
 801691c:	4618      	mov	r0, r3
 801691e:	f7fc fbb1 	bl	8013084 <TfLiteTypeGetName>
 8016922:	4602      	mov	r2, r0
 8016924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016926:	7a1b      	ldrb	r3, [r3, #8]
 8016928:	4903      	ldr	r1, [pc, #12]	; (8016938 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801692e:	2301      	movs	r3, #1
  }
}
 8016930:	4618      	mov	r0, r3
 8016932:	3778      	adds	r7, #120	; 0x78
 8016934:	46bd      	mov	sp, r7
 8016936:	bdb0      	pop	{r4, r5, r7, pc}
 8016938:	0801e7b8 	.word	0x0801e7b8

0801693c <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801693c:	b4b0      	push	{r4, r5, r7}
 801693e:	b083      	sub	sp, #12
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	4a07      	ldr	r2, [pc, #28]	; (8016964 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8016948:	461c      	mov	r4, r3
 801694a:	4615      	mov	r5, r2
 801694c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801694e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016950:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	370c      	adds	r7, #12
 801695c:	46bd      	mov	sp, r7
 801695e:	bcb0      	pop	{r4, r5, r7}
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop
 8016964:	0801e7d4 	.word	0x0801e7d4

08016968 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8016968:	b590      	push	{r4, r7, lr}
 801696a:	b09f      	sub	sp, #124	; 0x7c
 801696c:	af00      	add	r7, sp, #0
 801696e:	60f8      	str	r0, [r7, #12]
 8016970:	60b9      	str	r1, [r7, #8]
 8016972:	607a      	str	r2, [r7, #4]
 8016974:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	689b      	ldr	r3, [r3, #8]
 801697a:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	699b      	ldr	r3, [r3, #24]
 8016986:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8016988:	68b8      	ldr	r0, [r7, #8]
 801698a:	f7fd f8ec 	bl	8013b66 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801698e:	4603      	mov	r3, r0
 8016990:	3b01      	subs	r3, #1
 8016992:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8016994:	683a      	ldr	r2, [r7, #0]
 8016996:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016998:	68b8      	ldr	r0, [r7, #8]
 801699a:	f7ff fa91 	bl	8015ec0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801699e:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80169a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80169a2:	683a      	ldr	r2, [r7, #0]
 80169a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80169a6:	68b8      	ldr	r0, [r7, #8]
 80169a8:	f7fe fa4c 	bl	8014e44 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80169ac:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80169ae:	2300      	movs	r3, #0
 80169b0:	677b      	str	r3, [r7, #116]	; 0x74
 80169b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80169b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169b6:	429a      	cmp	r2, r3
 80169b8:	f280 80ed 	bge.w	8016b96 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80169bc:	2300      	movs	r3, #0
 80169be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80169c2:	2300      	movs	r3, #0
 80169c4:	673b      	str	r3, [r7, #112]	; 0x70
 80169c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80169c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169ca:	429a      	cmp	r2, r3
 80169cc:	da16      	bge.n	80169fc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80169ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80169d2:	fb03 f202 	mul.w	r2, r3, r2
 80169d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169d8:	4413      	add	r3, r2
 80169da:	461a      	mov	r2, r3
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	441a      	add	r2, r3
 80169e0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80169e4:	4611      	mov	r1, r2
 80169e6:	4618      	mov	r0, r3
 80169e8:	f7ff fc1c 	bl	8016224 <_ZSt3maxIhERKT_S2_S2_>
 80169ec:	4603      	mov	r3, r0
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80169f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169f6:	3301      	adds	r3, #1
 80169f8:	673b      	str	r3, [r7, #112]	; 0x70
 80169fa:	e7e4      	b.n	80169c6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80169fc:	f000 f8cf 	bl	8016b9e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8016a00:	4603      	mov	r3, r0
 8016a02:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8016a04:	2300      	movs	r3, #0
 8016a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	da2f      	bge.n	8016a70 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8016a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a14:	fb03 f202 	mul.w	r2, r3, r2
 8016a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a1a:	4413      	add	r3, r2
 8016a1c:	461a      	mov	r2, r3
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	4413      	add	r3, r2
 8016a22:	781b      	ldrb	r3, [r3, #0]
 8016a24:	461a      	mov	r2, r3
 8016a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8016a2a:	1ad3      	subs	r3, r2, r3
 8016a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8016a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a32:	429a      	cmp	r2, r3
 8016a34:	db18      	blt.n	8016a68 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8016a36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016a38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016a3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016a3c:	f7fe fa92 	bl	8014f64 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8016a40:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8016a42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8016a44:	f000 f8b3 	bl	8016bae <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8016a4c:	69f8      	ldr	r0, [r7, #28]
 8016a4e:	f000 f8dd 	bl	8016c0c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016a52:	4603      	mov	r3, r0
 8016a54:	4618      	mov	r0, r3
 8016a56:	f000 fa21 	bl	8016e9c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	4619      	mov	r1, r3
 8016a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a60:	f000 f8b6 	bl	8016bd0 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016a64:	4603      	mov	r3, r0
 8016a66:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8016a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a6a:	3301      	adds	r3, #1
 8016a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016a6e:	e7cb      	b.n	8016a08 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8016a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a74:	4618      	mov	r0, r3
 8016a76:	f000 fa2b 	bl	8016ed0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016a7a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016a82:	210c      	movs	r1, #12
 8016a84:	4618      	mov	r0, r3
 8016a86:	f7fe fa80 	bl	8014f8a <_ZN6tflite13GetReciprocalEliPi>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	f7fe fab9 	bl	8015004 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016a92:	4603      	mov	r3, r0
 8016a94:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8016a96:	2300      	movs	r3, #0
 8016a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8016a9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	da75      	bge.n	8016b8e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8016aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016aa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016aa6:	fb03 f202 	mul.w	r2, r3, r2
 8016aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016aac:	4413      	add	r3, r2
 8016aae:	461a      	mov	r2, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	4413      	add	r3, r2
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	461a      	mov	r2, r3
 8016ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8016abc:	1ad3      	subs	r3, r2, r3
 8016abe:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8016ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	db50      	blt.n	8016b6a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8016ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016aca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016acc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016ace:	f7fe fa49 	bl	8014f64 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8016ad2:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8016ad4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016ad6:	f000 f86a 	bl	8016bae <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016ada:	4603      	mov	r3, r0
 8016adc:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8016ade:	69b8      	ldr	r0, [r7, #24]
 8016ae0:	f000 f894 	bl	8016c0c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8016ae8:	6979      	ldr	r1, [r7, #20]
 8016aea:	6a38      	ldr	r0, [r7, #32]
 8016aec:	f7ff fad2 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016af0:	4603      	mov	r3, r0
 8016af2:	633b      	str	r3, [r7, #48]	; 0x30
 8016af4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7fe faf5 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016afe:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8016b00:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8016b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b04:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8016b06:	4611      	mov	r1, r2
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f7fd fd33 	bl	8014574 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8016b0e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8016b10:	f7fc fd07 	bl	8013522 <_ZNSt14numeric_limitsIhE3minEv>
 8016b14:	4603      	mov	r3, r0
 8016b16:	461a      	mov	r2, r3
            unsat_output +
 8016b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b1a:	4413      	add	r3, r2
        const int32_t shifted_output =
 8016b1c:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8016b1e:	f7fc fd08 	bl	8013532 <_ZNSt14numeric_limitsIhE3maxEv>
 8016b22:	4603      	mov	r3, r0
 8016b24:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8016b26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8016b2a:	f107 0310 	add.w	r3, r7, #16
 8016b2e:	4611      	mov	r1, r2
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7fc ffb9 	bl	8013aa8 <_ZSt3minIlERKT_S2_S2_>
 8016b36:	4604      	mov	r4, r0
 8016b38:	f7fc fcf3 	bl	8013522 <_ZNSt14numeric_limitsIhE3minEv>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016b40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016b44:	4619      	mov	r1, r3
 8016b46:	4620      	mov	r0, r4
 8016b48:	f7fc ffc2 	bl	8013ad0 <_ZSt3maxIlERKT_S2_S2_>
 8016b4c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8016b4e:	6819      	ldr	r1, [r3, #0]
 8016b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b54:	fb03 f202 	mul.w	r2, r3, r2
 8016b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b5a:	4413      	add	r3, r2
 8016b5c:	461a      	mov	r2, r3
 8016b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b62:	4413      	add	r3, r2
 8016b64:	b2ca      	uxtb	r2, r1
 8016b66:	701a      	strb	r2, [r3, #0]
 8016b68:	e00d      	b.n	8016b86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8016b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b6e:	fb03 f202 	mul.w	r2, r3, r2
 8016b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b74:	4413      	add	r3, r2
 8016b76:	461a      	mov	r2, r3
 8016b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b7c:	189c      	adds	r4, r3, r2
 8016b7e:	f7fc fcd0 	bl	8013522 <_ZNSt14numeric_limitsIhE3minEv>
 8016b82:	4603      	mov	r3, r0
 8016b84:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8016b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b88:	3301      	adds	r3, #1
 8016b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8016b8c:	e785      	b.n	8016a9a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 8016b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b90:	3301      	adds	r3, #1
 8016b92:	677b      	str	r3, [r7, #116]	; 0x74
 8016b94:	e70d      	b.n	80169b2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8016b96:	bf00      	nop
 8016b98:	377c      	adds	r7, #124	; 0x7c
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd90      	pop	{r4, r7, pc}

08016b9e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8016b9e:	b580      	push	{r7, lr}
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	2000      	movs	r0, #0
 8016ba4:	f000 f99f 	bl	8016ee6 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	4618      	mov	r0, r3
 8016bac:	bd80      	pop	{r7, pc}

08016bae <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8016bae:	b580      	push	{r7, lr}
 8016bb0:	b084      	sub	sp, #16
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8016bb6:	f107 030c 	add.w	r3, r7, #12
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f000 f9a7 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6013      	str	r3, [r2, #0]
    return retval;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
  }
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3710      	adds	r7, #16
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}

08016bd0 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8016bd0:	b590      	push	{r4, r7, lr}
 8016bd2:	b083      	sub	sp, #12
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	6078      	str	r0, [r7, #4]
 8016bd8:	6039      	str	r1, [r7, #0]
 8016bda:	1d3b      	adds	r3, r7, #4
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f000 f977 	bl	8016ed0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016be2:	4603      	mov	r3, r0
 8016be4:	681c      	ldr	r4, [r3, #0]
 8016be6:	463b      	mov	r3, r7
 8016be8:	4618      	mov	r0, r3
 8016bea:	f000 f971 	bl	8016ed0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f7fe f8bd 	bl	8014d74 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f000 f991 	bl	8016f24 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8016c02:	4603      	mov	r3, r0
 8016c04:	4618      	mov	r0, r3
 8016c06:	370c      	adds	r7, #12
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd90      	pop	{r4, r7, pc}

08016c0c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8016c0c:	b590      	push	{r4, r7, lr}
 8016c0e:	b091      	sub	sp, #68	; 0x44
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8016c14:	f000 f997 	bl	8016f46 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8016c1c:	2001      	movs	r0, #1
 8016c1e:	f000 f99b 	bl	8016f58 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8016c22:	4603      	mov	r3, r0
 8016c24:	4619      	mov	r1, r3
 8016c26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016c28:	f000 f9aa 	bl	8016f80 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8016c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f000 f9c2 	bl	8016fbc <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f000 f99f 	bl	8016f80 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c42:	4603      	mov	r3, r0
 8016c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8016c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c48:	f000 f9d6 	bl	8016ff8 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7ff f9be 	bl	8015fd0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8016c54:	4603      	mov	r3, r0
 8016c56:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8016c58:	6879      	ldr	r1, [r7, #4]
 8016c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c5c:	f000 f990 	bl	8016f80 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c60:	4603      	mov	r3, r0
 8016c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8016c64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f000 f950 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8016c74:	4883      	ldr	r0, [pc, #524]	; (8016e84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8016c76:	f7ff f952 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7fe fa3e 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016c82:	4603      	mov	r3, r0
 8016c84:	627b      	str	r3, [r7, #36]	; 0x24
 8016c86:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8016c8a:	f7fe f837 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	4619      	mov	r1, r3
 8016c92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016c94:	f7fe f83d 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7fe f88c 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ca6:	f7ff f9f5 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016caa:	4603      	mov	r3, r0
 8016cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cae:	4619      	mov	r1, r3
 8016cb0:	4620      	mov	r0, r4
 8016cb2:	f7ff f95a 	bl	8015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8016cba:	4873      	ldr	r0, [pc, #460]	; (8016e88 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8016cbc:	f7ff f92f 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7fe fa1b 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	623b      	str	r3, [r7, #32]
 8016ccc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8016cd0:	f7fe f814 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	4619      	mov	r1, r3
 8016cd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016cda:	f7fe f81a 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f7fe f869 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	6a39      	ldr	r1, [r7, #32]
 8016cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cec:	f7ff f9d2 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cf4:	4619      	mov	r1, r3
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	f7ff f937 	bl	8015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8016d00:	4862      	ldr	r0, [pc, #392]	; (8016e8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8016d02:	f7ff f90c 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016d06:	4603      	mov	r3, r0
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f7fe f9f8 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	61fb      	str	r3, [r7, #28]
 8016d12:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8016d16:	f7fd fff1 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	4619      	mov	r1, r3
 8016d1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d20:	f7fd fff7 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016d24:	4603      	mov	r3, r0
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7fe f846 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	69f9      	ldr	r1, [r7, #28]
 8016d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d32:	f7ff f9af 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016d36:	4603      	mov	r3, r0
 8016d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f7ff f914 	bl	8015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016d42:	4603      	mov	r3, r0
 8016d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8016d46:	4852      	ldr	r0, [pc, #328]	; (8016e90 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8016d48:	f7ff f8e9 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	4618      	mov	r0, r3
 8016d50:	f7fe f9d5 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d54:	4603      	mov	r3, r0
 8016d56:	61bb      	str	r3, [r7, #24]
 8016d58:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8016d5c:	f7fd ffce 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016d60:	4603      	mov	r3, r0
 8016d62:	4619      	mov	r1, r3
 8016d64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d66:	f7fd ffd4 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7fe f823 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016d72:	4604      	mov	r4, r0
 8016d74:	69b9      	ldr	r1, [r7, #24]
 8016d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d78:	f7ff f98c 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d80:	4619      	mov	r1, r3
 8016d82:	4620      	mov	r0, r4
 8016d84:	f7ff f8f1 	bl	8015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8016d8c:	4841      	ldr	r0, [pc, #260]	; (8016e94 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8016d8e:	f7ff f8c6 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016d92:	4603      	mov	r3, r0
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7fe f9b2 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	617b      	str	r3, [r7, #20]
 8016d9e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8016da2:	f7fd ffab 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016da6:	4603      	mov	r3, r0
 8016da8:	4619      	mov	r1, r3
 8016daa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016dac:	f7fd ffb1 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016db0:	4603      	mov	r3, r0
 8016db2:	4618      	mov	r0, r3
 8016db4:	f7fe f800 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016db8:	4604      	mov	r4, r0
 8016dba:	6979      	ldr	r1, [r7, #20]
 8016dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016dbe:	f7ff f969 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	4620      	mov	r0, r4
 8016dca:	f7ff f8ce 	bl	8015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8016dd2:	4831      	ldr	r0, [pc, #196]	; (8016e98 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8016dd4:	f7ff f8a3 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7fe f98f 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016de0:	4603      	mov	r3, r0
 8016de2:	613b      	str	r3, [r7, #16]
 8016de4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8016de8:	f7fd ff88 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016dec:	4603      	mov	r3, r0
 8016dee:	4619      	mov	r1, r3
 8016df0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016df2:	f7fd ff8e 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016df6:	4603      	mov	r3, r0
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7fd ffdd 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016dfe:	4604      	mov	r4, r0
 8016e00:	6939      	ldr	r1, [r7, #16]
 8016e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e04:	f7ff f946 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e0c:	4619      	mov	r1, r3
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f7ff f8ab 	bl	8015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016e14:	4603      	mov	r3, r0
 8016e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8016e18:	20f2      	movs	r0, #242	; 0xf2
 8016e1a:	f7ff f880 	bl	8015f1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7fe f96c 	bl	80150fe <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016e26:	4603      	mov	r3, r0
 8016e28:	60fb      	str	r3, [r7, #12]
 8016e2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8016e2e:	f7fd ff65 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016e32:	4603      	mov	r3, r0
 8016e34:	4619      	mov	r1, r3
 8016e36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016e38:	f7fd ff6b 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7fd ffba 	bl	8014db8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016e44:	4604      	mov	r4, r0
 8016e46:	68f9      	ldr	r1, [r7, #12]
 8016e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e4a:	f7ff f923 	bl	8016094 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e52:	4619      	mov	r1, r3
 8016e54:	4620      	mov	r0, r4
 8016e56:	f7ff f888 	bl	8015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8016e5e:	6878      	ldr	r0, [r7, #4]
 8016e60:	f000 f8e4 	bl	801702c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8016e64:	4604      	mov	r4, r0
 8016e66:	f7fe f95e 	bl	8015126 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e6e:	4619      	mov	r1, r3
 8016e70:	4620      	mov	r0, r4
 8016e72:	f7ff f87a 	bl	8015f6a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016e76:	4603      	mov	r3, r0
 8016e78:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8016e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3744      	adds	r7, #68	; 0x44
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd90      	pop	{r4, r7, pc}
 8016e84:	63afbe7b 	.word	0x63afbe7b
 8016e88:	4da2cbf2 	.word	0x4da2cbf2
 8016e8c:	2f16ac6c 	.word	0x2f16ac6c
 8016e90:	1152aaa4 	.word	0x1152aaa4
 8016e94:	02582ab7 	.word	0x02582ab7
 8016e98:	000afe11 	.word	0x000afe11

08016e9c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016e9c:	b5b0      	push	{r4, r5, r7, lr}
 8016e9e:	b084      	sub	sp, #16
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016ea4:	1d3b      	adds	r3, r7, #4
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7fe f91e 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016eac:	4603      	mov	r3, r0
 8016eae:	681d      	ldr	r5, [r3, #0]
 8016eb0:	f107 030c 	add.w	r3, r7, #12
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f000 f80b 	bl	8016ed0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016eba:	4604      	mov	r4, r0
 8016ebc:	4628      	mov	r0, r5
 8016ebe:	f000 f8c7 	bl	8017050 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	6023      	str	r3, [r4, #0]
  return result;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3710      	adds	r7, #16
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bdb0      	pop	{r4, r5, r7, pc}

08016ed0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8016ed0:	b480      	push	{r7}
 8016ed2:	b083      	sub	sp, #12
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	4618      	mov	r0, r3
 8016edc:	370c      	adds	r7, #12
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee4:	4770      	bx	lr

08016ee6 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8016ee6:	b590      	push	{r4, r7, lr}
 8016ee8:	b085      	sub	sp, #20
 8016eea:	af00      	add	r7, sp, #0
 8016eec:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8016eee:	f107 030c 	add.w	r3, r7, #12
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f7ff ffec 	bl	8016ed0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016ef8:	4604      	mov	r4, r0
 8016efa:	6878      	ldr	r0, [r7, #4]
 8016efc:	f7fd fefe 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016f00:	4603      	mov	r3, r0
 8016f02:	6023      	str	r3, [r4, #0]
    return retval;
 8016f04:	68fb      	ldr	r3, [r7, #12]
  }
 8016f06:	4618      	mov	r0, r3
 8016f08:	3714      	adds	r7, #20
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd90      	pop	{r4, r7, pc}

08016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8016f0e:	b480      	push	{r7}
 8016f10:	b083      	sub	sp, #12
 8016f12:	af00      	add	r7, sp, #0
 8016f14:	6078      	str	r0, [r7, #4]
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	370c      	adds	r7, #12
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f22:	4770      	bx	lr

08016f24 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b084      	sub	sp, #16
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8016f2c:	f107 030c 	add.w	r3, r7, #12
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7ff ffcd 	bl	8016ed0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016f36:	4602      	mov	r2, r0
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	6013      	str	r3, [r2, #0]
    return retval;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
  }
 8016f3e:	4618      	mov	r0, r3
 8016f40:	3710      	adds	r7, #16
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bd80      	pop	{r7, pc}

08016f46 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8016f46:	b580      	push	{r7, lr}
 8016f48:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8016f4a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8016f4e:	f000 f803 	bl	8016f58 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8016f52:	4603      	mov	r3, r0
  }
 8016f54:	4618      	mov	r0, r3
 8016f56:	bd80      	pop	{r7, pc}

08016f58 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8016f58:	b590      	push	{r4, r7, lr}
 8016f5a:	b085      	sub	sp, #20
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8016f60:	f107 030c 	add.w	r3, r7, #12
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7ff ffd2 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f6a:	4604      	mov	r4, r0
 8016f6c:	6878      	ldr	r0, [r7, #4]
 8016f6e:	f7fd fec5 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016f72:	4603      	mov	r3, r0
 8016f74:	6023      	str	r3, [r4, #0]
    return retval;
 8016f76:	68fb      	ldr	r3, [r7, #12]
  }
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3714      	adds	r7, #20
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd90      	pop	{r4, r7, pc}

08016f80 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8016f80:	b590      	push	{r4, r7, lr}
 8016f82:	b083      	sub	sp, #12
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
 8016f88:	6039      	str	r1, [r7, #0]
 8016f8a:	1d3b      	adds	r3, r7, #4
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f7ff ffbe 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f92:	4603      	mov	r3, r0
 8016f94:	681c      	ldr	r4, [r3, #0]
 8016f96:	463b      	mov	r3, r7
 8016f98:	4618      	mov	r0, r3
 8016f9a:	f7ff ffb8 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	4619      	mov	r1, r3
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	f7fe f9db 	bl	8015360 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8016faa:	4603      	mov	r3, r0
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7ff fdfe 	bl	8016bae <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	370c      	adds	r7, #12
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd90      	pop	{r4, r7, pc}

08016fbc <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8016fbc:	b590      	push	{r4, r7, lr}
 8016fbe:	b083      	sub	sp, #12
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
 8016fc4:	6039      	str	r1, [r7, #0]
 8016fc6:	1d3b      	adds	r3, r7, #4
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7ff ffa0 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	681c      	ldr	r4, [r3, #0]
 8016fd2:	463b      	mov	r3, r7
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	f7ff ff9a 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	4619      	mov	r1, r3
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	f7fd fe96 	bl	8014d12 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7ff fde0 	bl	8016bae <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	370c      	adds	r7, #12
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd90      	pop	{r4, r7, pc}

08016ff8 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016ff8:	b5b0      	push	{r4, r5, r7, lr}
 8016ffa:	b084      	sub	sp, #16
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8017000:	1d3b      	adds	r3, r7, #4
 8017002:	4618      	mov	r0, r3
 8017004:	f7ff ff83 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8017008:	4603      	mov	r3, r0
 801700a:	681d      	ldr	r5, [r3, #0]
 801700c:	f107 030c 	add.w	r3, r7, #12
 8017010:	4618      	mov	r0, r3
 8017012:	f7fe f869 	bl	80150e8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017016:	4604      	mov	r4, r0
 8017018:	4628      	mov	r0, r5
 801701a:	f000 f825 	bl	8017068 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801701e:	4603      	mov	r3, r0
 8017020:	6023      	str	r3, [r4, #0]
  return result;
 8017022:	68fb      	ldr	r3, [r7, #12]
}
 8017024:	4618      	mov	r0, r3
 8017026:	3710      	adds	r7, #16
 8017028:	46bd      	mov	sp, r7
 801702a:	bdb0      	pop	{r4, r5, r7, pc}

0801702c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801702c:	b580      	push	{r7, lr}
 801702e:	b082      	sub	sp, #8
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
 8017034:	1d3b      	adds	r3, r7, #4
 8017036:	4618      	mov	r0, r3
 8017038:	f7ff ff69 	bl	8016f0e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801703c:	4603      	mov	r3, r0
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	4618      	mov	r0, r3
 8017042:	f7fe ffb3 	bl	8015fac <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8017046:	4603      	mov	r3, r0
 8017048:	4618      	mov	r0, r3
 801704a:	3708      	adds	r7, #8
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8017050:	b580      	push	{r7, lr}
 8017052:	b082      	sub	sp, #8
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f000 f811 	bl	8017080 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801705e:	4603      	mov	r3, r0
}
 8017060:	4618      	mov	r0, r3
 8017062:	3708      	adds	r7, #8
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}

08017068 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8017068:	b580      	push	{r7, lr}
 801706a:	b082      	sub	sp, #8
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f000 f813 	bl	801709c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8017076:	4603      	mov	r3, r0
}
 8017078:	4618      	mov	r0, r3
 801707a:	3708      	adds	r7, #8
 801707c:	46bd      	mov	sp, r7
 801707e:	bd80      	pop	{r7, pc}

08017080 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8017080:	b580      	push	{r7, lr}
 8017082:	b082      	sub	sp, #8
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8017088:	210c      	movs	r1, #12
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f7fd fa72 	bl	8014574 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8017090:	4603      	mov	r3, r0
  }
 8017092:	4618      	mov	r0, r3
 8017094:	3708      	adds	r7, #8
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}
	...

0801709c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801709c:	b580      	push	{r7, lr}
 801709e:	b08a      	sub	sp, #40	; 0x28
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80170a4:	f7fc fde1 	bl	8013c6a <_ZNSt14numeric_limitsIlE3minEv>
 80170a8:	4603      	mov	r3, r0
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7fd fe26 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80170b0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80170b2:	f7fc f863 	bl	801317c <_ZNSt14numeric_limitsIlE3maxEv>
 80170b6:	4603      	mov	r3, r0
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7fd fe1f 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80170be:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80170c0:	2320      	movs	r3, #32
 80170c2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80170c4:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80170c8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80170ca:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 80170ce:	f7fd fe15 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80170d2:	4603      	mov	r3, r0
 80170d4:	4619      	mov	r1, r3
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f7fd fe5a 	bl	8014d90 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80170dc:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80170de:	480f      	ldr	r0, [pc, #60]	; (801711c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 80170e0:	f7fd fe0c 	bl	8014cfc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80170e4:	4603      	mov	r3, r0
 80170e6:	4619      	mov	r1, r3
 80170e8:	6878      	ldr	r0, [r7, #4]
 80170ea:	f7fd fe2f 	bl	8014d4c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80170ee:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80170f0:	2105      	movs	r1, #5
 80170f2:	6878      	ldr	r0, [r7, #4]
 80170f4:	f7fe fa18 	bl	8015528 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80170f8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80170fa:	68fa      	ldr	r2, [r7, #12]
 80170fc:	6a39      	ldr	r1, [r7, #32]
 80170fe:	6978      	ldr	r0, [r7, #20]
 8017100:	f7fe fa56 	bl	80155b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8017104:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8017106:	68fa      	ldr	r2, [r7, #12]
 8017108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801710a:	6938      	ldr	r0, [r7, #16]
 801710c:	f7fe fa50 	bl	80155b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8017110:	60f8      	str	r0, [r7, #12]
    return result;
 8017112:	68fb      	ldr	r3, [r7, #12]
  }
 8017114:	4618      	mov	r0, r3
 8017116:	3728      	adds	r7, #40	; 0x28
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}
 801711c:	fc000001 	.word	0xfc000001

08017120 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 8017120:	b580      	push	{r7, lr}
 8017122:	ed2d 8b02 	vpush	{d8}
 8017126:	b094      	sub	sp, #80	; 0x50
 8017128:	af00      	add	r7, sp, #0
 801712a:	6178      	str	r0, [r7, #20]
 801712c:	ed87 0a04 	vstr	s0, [r7, #16]
 8017130:	edc7 0a03 	vstr	s1, [r7, #12]
 8017134:	60b9      	str	r1, [r7, #8]
 8017136:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 8017138:	ed97 7a03 	vldr	s14, [r7, #12]
 801713c:	edd7 7a04 	vldr	s15, [r7, #16]
 8017140:	ee77 6a67 	vsub.f32	s13, s14, s15
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	3b01      	subs	r3, #1
 8017148:	ee07 3a90 	vmov	s15, r3
 801714c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017154:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8017158:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801715c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017164:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8017168:	2300      	movs	r3, #0
 801716a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	3b01      	subs	r3, #1
 8017170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017172:	429a      	cmp	r2, r3
 8017174:	f280 80c0 	bge.w	80172f8 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8017178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801717a:	ee07 3a90 	vmov	s15, r3
 801717e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017182:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8017186:	ee27 7a27 	vmul.f32	s14, s14, s15
 801718a:	edd7 7a04 	vldr	s15, [r7, #16]
 801718e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017192:	697b      	ldr	r3, [r7, #20]
 8017194:	eeb0 0a67 	vmov.f32	s0, s15
 8017198:	4798      	blx	r3
 801719a:	eef0 7a40 	vmov.f32	s15, s0
 801719e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8017370 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80171a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80171a6:	eeb0 0a67 	vmov.f32	s0, s15
 80171aa:	f7fc f999 	bl	80134e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80171ae:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 80171b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171b4:	3301      	adds	r3, #1
 80171b6:	ee07 3a90 	vmov	s15, r3
 80171ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80171be:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80171c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80171ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	eeb0 0a67 	vmov.f32	s0, s15
 80171d4:	4798      	blx	r3
 80171d6:	eef0 7a40 	vmov.f32	s15, s0
 80171da:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8017370 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80171de:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 80171e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171e4:	ee07 3a90 	vmov	s15, r3
 80171e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80171ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80171f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80171f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171fc:	697b      	ldr	r3, [r7, #20]
 80171fe:	eeb0 0a67 	vmov.f32	s0, s15
 8017202:	4798      	blx	r3
 8017204:	eef0 7a40 	vmov.f32	s15, s0
 8017208:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8017370 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801720c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017210:	eeb0 0a67 	vmov.f32	s0, s15
 8017214:	f7fc f964 	bl	80134e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017218:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801721c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017220:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017224:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017228:	eeb0 0a47 	vmov.f32	s0, s14
 801722c:	f7fc f958 	bl	80134e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017230:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 8017234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017236:	ee07 3a90 	vmov	s15, r3
 801723a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801723e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8017242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017246:	edd7 7a04 	vldr	s15, [r7, #16]
 801724a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801724e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8017252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017256:	697b      	ldr	r3, [r7, #20]
 8017258:	eeb0 0a67 	vmov.f32	s0, s15
 801725c:	4798      	blx	r3
 801725e:	eef0 7a40 	vmov.f32	s15, s0
 8017262:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8017370 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8017266:	ee67 7a87 	vmul.f32	s15, s15, s14
 801726a:	eeb0 0a67 	vmov.f32	s0, s15
 801726e:	f7fc f937 	bl	80134e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017272:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 8017276:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801727a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801727e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017282:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 8017286:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801728a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801728e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017292:	eeb0 0a47 	vmov.f32	s0, s14
 8017296:	f7fc f923 	bl	80134e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801729a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801729e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80172a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80172a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80172aa:	edc7 7a06 	vstr	s15, [r7, #24]
 80172ae:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80172b2:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 80172b4:	f107 021c 	add.w	r2, r7, #28
 80172b8:	f107 0318 	add.w	r3, r7, #24
 80172bc:	4611      	mov	r1, r2
 80172be:	4618      	mov	r0, r3
 80172c0:	f7ed f8ce 	bl	8004460 <_ZSt3maxIfERKT_S2_S2_>
 80172c4:	4602      	mov	r2, r0
 80172c6:	4b2b      	ldr	r3, [pc, #172]	; (8017374 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 80172c8:	623b      	str	r3, [r7, #32]
 80172ca:	f107 0320 	add.w	r3, r7, #32
 80172ce:	4619      	mov	r1, r3
 80172d0:	4610      	mov	r0, r2
 80172d2:	f7fc f8d8 	bl	8013486 <_ZSt3minIfERKT_S2_S2_>
 80172d6:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 80172d8:	edd3 7a00 	vldr	s15, [r3]
 80172dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172de:	005b      	lsls	r3, r3, #1
 80172e0:	68ba      	ldr	r2, [r7, #8]
 80172e2:	4413      	add	r3, r2
 80172e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172e8:	ee17 2a90 	vmov	r2, s15
 80172ec:	b212      	sxth	r2, r2
 80172ee:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 80172f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172f2:	3301      	adds	r3, #1
 80172f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80172f6:	e739      	b.n	801716c <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 80172f8:	697b      	ldr	r3, [r7, #20]
 80172fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80172fe:	4798      	blx	r3
 8017300:	eef0 7a40 	vmov.f32	s15, s0
 8017304:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8017370 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8017308:	ee67 7a87 	vmul.f32	s15, s15, s14
 801730c:	eeb0 0a67 	vmov.f32	s0, s15
 8017310:	f7fc f8e6 	bl	80134e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017314:	eef0 7a40 	vmov.f32	s15, s0
 8017318:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801731c:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8017320:	62bb      	str	r3, [r7, #40]	; 0x28
 8017322:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801732a:	4611      	mov	r1, r2
 801732c:	4618      	mov	r0, r3
 801732e:	f7ed f897 	bl	8004460 <_ZSt3maxIfERKT_S2_S2_>
 8017332:	4602      	mov	r2, r0
 8017334:	4b0f      	ldr	r3, [pc, #60]	; (8017374 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8017336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801733c:	4619      	mov	r1, r3
 801733e:	4610      	mov	r0, r2
 8017340:	f7fc f8a1 	bl	8013486 <_ZSt3minIfERKT_S2_S2_>
 8017344:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8017346:	edd3 7a00 	vldr	s15, [r3]
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017350:	3b01      	subs	r3, #1
 8017352:	005b      	lsls	r3, r3, #1
 8017354:	68ba      	ldr	r2, [r7, #8]
 8017356:	4413      	add	r3, r2
 8017358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801735c:	ee17 2a90 	vmov	r2, s15
 8017360:	b212      	sxth	r2, r2
 8017362:	801a      	strh	r2, [r3, #0]
}
 8017364:	bf00      	nop
 8017366:	3750      	adds	r7, #80	; 0x50
 8017368:	46bd      	mov	sp, r7
 801736a:	ecbd 8b02 	vpop	{d8}
 801736e:	bd80      	pop	{r7, pc}
 8017370:	47000000 	.word	0x47000000
 8017374:	46fffe00 	.word	0x46fffe00

08017378 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8017378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801737c:	b090      	sub	sp, #64	; 0x40
 801737e:	af06      	add	r7, sp, #24
 8017380:	60f8      	str	r0, [r7, #12]
 8017382:	60b9      	str	r1, [r7, #8]
 8017384:	607a      	str	r2, [r7, #4]
 8017386:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	2b09      	cmp	r3, #9
 801738e:	d004      	beq.n	801739a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	781b      	ldrb	r3, [r3, #0]
 8017394:	2b07      	cmp	r3, #7
 8017396:	f040 81b6 	bne.w	8017706 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801739a:	68bb      	ldr	r3, [r7, #8]
 801739c:	781b      	ldrb	r3, [r3, #0]
 801739e:	2b07      	cmp	r3, #7
 80173a0:	d156      	bne.n	8017450 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	691b      	ldr	r3, [r3, #16]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d011      	beq.n	80173ce <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	695c      	ldr	r4, [r3, #20]
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	691b      	ldr	r3, [r3, #16]
 80173b2:	2200      	movs	r2, #0
 80173b4:	9203      	str	r2, [sp, #12]
 80173b6:	9302      	str	r3, [sp, #8]
 80173b8:	4ba1      	ldr	r3, [pc, #644]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 80173ba:	9301      	str	r3, [sp, #4]
 80173bc:	4ba1      	ldr	r3, [pc, #644]	; (8017644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80173be:	9300      	str	r3, [sp, #0]
 80173c0:	2325      	movs	r3, #37	; 0x25
 80173c2:	4aa1      	ldr	r2, [pc, #644]	; (8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80173c4:	49a1      	ldr	r1, [pc, #644]	; (801764c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 80173c6:	68f8      	ldr	r0, [r7, #12]
 80173c8:	47a0      	blx	r4
 80173ca:	2301      	movs	r3, #1
 80173cc:	e1e0      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80173d4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8017650 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80173d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80173dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e0:	dd07      	ble.n	80173f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80173e8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8017650 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80173ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173f0:	e006      	b.n	8017400 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80173f8:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8017650 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80173fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017400:	edc7 7a08 	vstr	s15, [r7, #32]
 8017404:	edd7 7a08 	vldr	s15, [r7, #32]
 8017408:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8017654 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801740c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017414:	f340 80dd 	ble.w	80175d2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	695c      	ldr	r4, [r3, #20]
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	68db      	ldr	r3, [r3, #12]
 8017420:	4618      	mov	r0, r3
 8017422:	f7e9 f89b 	bl	800055c <__aeabi_f2d>
 8017426:	4602      	mov	r2, r0
 8017428:	460b      	mov	r3, r1
 801742a:	f04f 0000 	mov.w	r0, #0
 801742e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801743a:	4b87      	ldr	r3, [pc, #540]	; (8017658 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801743c:	9301      	str	r3, [sp, #4]
 801743e:	4b87      	ldr	r3, [pc, #540]	; (801765c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8017440:	9300      	str	r3, [sp, #0]
 8017442:	2326      	movs	r3, #38	; 0x26
 8017444:	4a80      	ldr	r2, [pc, #512]	; (8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017446:	4986      	ldr	r1, [pc, #536]	; (8017660 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8017448:	68f8      	ldr	r0, [r7, #12]
 801744a:	47a0      	blx	r4
 801744c:	2301      	movs	r3, #1
 801744e:	e19f      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	2b09      	cmp	r3, #9
 8017456:	d018      	beq.n	801748a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	695c      	ldr	r4, [r3, #20]
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	4618      	mov	r0, r3
 8017462:	f7fb fe0f 	bl	8013084 <TfLiteTypeGetName>
 8017466:	4605      	mov	r5, r0
 8017468:	2009      	movs	r0, #9
 801746a:	f7fb fe0b 	bl	8013084 <TfLiteTypeGetName>
 801746e:	4603      	mov	r3, r0
 8017470:	9303      	str	r3, [sp, #12]
 8017472:	9502      	str	r5, [sp, #8]
 8017474:	4b7b      	ldr	r3, [pc, #492]	; (8017664 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8017476:	9301      	str	r3, [sp, #4]
 8017478:	4b7b      	ldr	r3, [pc, #492]	; (8017668 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801747a:	9300      	str	r3, [sp, #0]
 801747c:	2329      	movs	r3, #41	; 0x29
 801747e:	4a72      	ldr	r2, [pc, #456]	; (8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017480:	497a      	ldr	r1, [pc, #488]	; (801766c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8017482:	68f8      	ldr	r0, [r7, #12]
 8017484:	47a0      	blx	r4
 8017486:	2301      	movs	r3, #1
 8017488:	e182      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	781b      	ldrb	r3, [r3, #0]
 801748e:	2b07      	cmp	r3, #7
 8017490:	d155      	bne.n	801753e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	691b      	ldr	r3, [r3, #16]
 8017496:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801749a:	d011      	beq.n	80174c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	695c      	ldr	r4, [r3, #20]
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	691b      	ldr	r3, [r3, #16]
 80174a4:	4a72      	ldr	r2, [pc, #456]	; (8017670 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80174a6:	9203      	str	r2, [sp, #12]
 80174a8:	9302      	str	r3, [sp, #8]
 80174aa:	4b72      	ldr	r3, [pc, #456]	; (8017674 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 80174ac:	9301      	str	r3, [sp, #4]
 80174ae:	4b65      	ldr	r3, [pc, #404]	; (8017644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80174b0:	9300      	str	r3, [sp, #0]
 80174b2:	232b      	movs	r3, #43	; 0x2b
 80174b4:	4a64      	ldr	r2, [pc, #400]	; (8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80174b6:	4965      	ldr	r1, [pc, #404]	; (801764c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 80174b8:	68f8      	ldr	r0, [r7, #12]
 80174ba:	47a0      	blx	r4
 80174bc:	2301      	movs	r3, #1
 80174be:	e167      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80174c6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8017678 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 80174ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80174ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174d2:	dd07      	ble.n	80174e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80174da:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8017678 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 80174de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174e2:	e006      	b.n	80174f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80174ea:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8017678 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 80174ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80174f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80174fa:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801767c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 80174fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017506:	dd64      	ble.n	80175d2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	695c      	ldr	r4, [r3, #20]
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	68db      	ldr	r3, [r3, #12]
 8017510:	4618      	mov	r0, r3
 8017512:	f7e9 f823 	bl	800055c <__aeabi_f2d>
 8017516:	4602      	mov	r2, r0
 8017518:	460b      	mov	r3, r1
 801751a:	f04f 0000 	mov.w	r0, #0
 801751e:	4958      	ldr	r1, [pc, #352]	; (8017680 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8017520:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017528:	4b56      	ldr	r3, [pc, #344]	; (8017684 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801752a:	9301      	str	r3, [sp, #4]
 801752c:	4b4b      	ldr	r3, [pc, #300]	; (801765c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801752e:	9300      	str	r3, [sp, #0]
 8017530:	232c      	movs	r3, #44	; 0x2c
 8017532:	4a45      	ldr	r2, [pc, #276]	; (8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017534:	494a      	ldr	r1, [pc, #296]	; (8017660 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8017536:	68f8      	ldr	r0, [r7, #12]
 8017538:	47a0      	blx	r4
 801753a:	2301      	movs	r3, #1
 801753c:	e128      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	781b      	ldrb	r3, [r3, #0]
 8017542:	2b09      	cmp	r3, #9
 8017544:	d018      	beq.n	8017578 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	695c      	ldr	r4, [r3, #20]
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	781b      	ldrb	r3, [r3, #0]
 801754e:	4618      	mov	r0, r3
 8017550:	f7fb fd98 	bl	8013084 <TfLiteTypeGetName>
 8017554:	4605      	mov	r5, r0
 8017556:	2009      	movs	r0, #9
 8017558:	f7fb fd94 	bl	8013084 <TfLiteTypeGetName>
 801755c:	4603      	mov	r3, r0
 801755e:	9303      	str	r3, [sp, #12]
 8017560:	9502      	str	r5, [sp, #8]
 8017562:	4b40      	ldr	r3, [pc, #256]	; (8017664 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8017564:	9301      	str	r3, [sp, #4]
 8017566:	4b48      	ldr	r3, [pc, #288]	; (8017688 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8017568:	9300      	str	r3, [sp, #0]
 801756a:	232f      	movs	r3, #47	; 0x2f
 801756c:	4a36      	ldr	r2, [pc, #216]	; (8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801756e:	493f      	ldr	r1, [pc, #252]	; (801766c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8017570:	68f8      	ldr	r0, [r7, #12]
 8017572:	47a0      	blx	r4
 8017574:	2301      	movs	r3, #1
 8017576:	e10b      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	691b      	ldr	r3, [r3, #16]
 801757c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8017580:	d012      	beq.n	80175a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	695c      	ldr	r4, [r3, #20]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	691b      	ldr	r3, [r3, #16]
 801758a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801758e:	9203      	str	r2, [sp, #12]
 8017590:	9302      	str	r3, [sp, #8]
 8017592:	4b3e      	ldr	r3, [pc, #248]	; (801768c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8017594:	9301      	str	r3, [sp, #4]
 8017596:	4b2b      	ldr	r3, [pc, #172]	; (8017644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8017598:	9300      	str	r3, [sp, #0]
 801759a:	2330      	movs	r3, #48	; 0x30
 801759c:	4a2a      	ldr	r2, [pc, #168]	; (8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801759e:	492b      	ldr	r1, [pc, #172]	; (801764c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 80175a0:	68f8      	ldr	r0, [r7, #12]
 80175a2:	47a0      	blx	r4
 80175a4:	2301      	movs	r3, #1
 80175a6:	e0f3      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80175ae:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017690 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 80175b2:	eef4 7a47 	vcmp.f32	s15, s14
 80175b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ba:	d00a      	beq.n	80175d2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	695c      	ldr	r4, [r3, #20]
 80175c0:	4b34      	ldr	r3, [pc, #208]	; (8017694 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 80175c2:	9300      	str	r3, [sp, #0]
 80175c4:	2331      	movs	r3, #49	; 0x31
 80175c6:	4a20      	ldr	r2, [pc, #128]	; (8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80175c8:	4933      	ldr	r1, [pc, #204]	; (8017698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 80175ca:	68f8      	ldr	r0, [r7, #12]
 80175cc:	47a0      	blx	r4
 80175ce:	2301      	movs	r3, #1
 80175d0:	e0de      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	781b      	ldrb	r3, [r3, #0]
 80175d6:	2b07      	cmp	r3, #7
 80175d8:	d160      	bne.n	801769c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	4618      	mov	r0, r3
 80175e0:	f7e8 ffbc 	bl	800055c <__aeabi_f2d>
 80175e4:	4604      	mov	r4, r0
 80175e6:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 80175e8:	683b      	ldr	r3, [r7, #0]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	4618      	mov	r0, r3
 80175ee:	f7e8 ffb5 	bl	800055c <__aeabi_f2d>
 80175f2:	4602      	mov	r2, r0
 80175f4:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 80175f6:	4620      	mov	r0, r4
 80175f8:	4629      	mov	r1, r5
 80175fa:	f7e9 f807 	bl	800060c <__aeabi_dmul>
 80175fe:	4602      	mov	r2, r0
 8017600:	460b      	mov	r3, r1
 8017602:	4610      	mov	r0, r2
 8017604:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 8017606:	a30c      	add	r3, pc, #48	; (adr r3, 8017638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8017608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801760c:	f7e9 f928 	bl	8000860 <__aeabi_ddiv>
 8017610:	4602      	mov	r2, r0
 8017612:	460b      	mov	r3, r1
 8017614:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8017618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801761a:	3308      	adds	r3, #8
 801761c:	f107 0214 	add.w	r2, r7, #20
 8017620:	4611      	mov	r1, r2
 8017622:	4618      	mov	r0, r3
 8017624:	ed97 0b06 	vldr	d0, [r7, #24]
 8017628:	f7fb fdb2 	bl	8013190 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801762c:	697a      	ldr	r2, [r7, #20]
 801762e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017630:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 8017632:	e0ac      	b.n	801778e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 8017634:	f3af 8000 	nop.w
 8017638:	00140014 	.word	0x00140014
 801763c:	3f240014 	.word	0x3f240014
 8017640:	0801e9a8 	.word	0x0801e9a8
 8017644:	0801e9ac 	.word	0x0801e9ac
 8017648:	0801e8fc 	.word	0x0801e8fc
 801764c:	0801e98c 	.word	0x0801e98c
 8017650:	38000000 	.word	0x38000000
 8017654:	3303126f 	.word	0x3303126f
 8017658:	0801e9e8 	.word	0x0801e9e8
 801765c:	0801e9f4 	.word	0x0801e9f4
 8017660:	0801e9c8 	.word	0x0801e9c8
 8017664:	0801ea28 	.word	0x0801ea28
 8017668:	0801ea34 	.word	0x0801ea34
 801766c:	0801ea0c 	.word	0x0801ea0c
 8017670:	ffff8000 	.word	0xffff8000
 8017674:	0801ea40 	.word	0x0801ea40
 8017678:	37800000 	.word	0x37800000
 801767c:	3283126f 	.word	0x3283126f
 8017680:	3ef00000 	.word	0x3ef00000
 8017684:	0801ea48 	.word	0x0801ea48
 8017688:	0801ea54 	.word	0x0801ea54
 801768c:	0801ea64 	.word	0x0801ea64
 8017690:	3b800000 	.word	0x3b800000
 8017694:	0801ea84 	.word	0x0801ea84
 8017698:	0801ea6c 	.word	0x0801ea6c
          static_cast<double>(params->beta),
 801769c:	683b      	ldr	r3, [r7, #0]
 801769e:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7e8 ff5b 	bl	800055c <__aeabi_f2d>
 80176a6:	4680      	mov	r8, r0
 80176a8:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7e8 ff54 	bl	800055c <__aeabi_f2d>
 80176b4:	4682      	mov	sl, r0
 80176b6:	468b      	mov	fp, r1
 80176b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176ba:	3308      	adds	r3, #8
 80176bc:	f107 0210 	add.w	r2, r7, #16
 80176c0:	4619      	mov	r1, r3
 80176c2:	2005      	movs	r0, #5
 80176c4:	ec4b ab11 	vmov	d1, sl, fp
 80176c8:	ec49 8b10 	vmov	d0, r8, r9
 80176cc:	f7fb fe2c 	bl	8013328 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 80176d0:	693a      	ldr	r2, [r7, #16]
 80176d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176d4:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 80176d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176d8:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 80176da:	221f      	movs	r2, #31
 80176dc:	4619      	mov	r1, r3
 80176de:	2005      	movs	r0, #5
 80176e0:	f7fb fe6a 	bl	80133b8 <_ZN6tflite20CalculateInputRadiusEiii>
 80176e4:	4603      	mov	r3, r0
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7e8 ff26 	bl	8000538 <__aeabi_i2d>
 80176ec:	4602      	mov	r2, r0
 80176ee:	460b      	mov	r3, r1
 80176f0:	4614      	mov	r4, r2
 80176f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 80176f6:	4620      	mov	r0, r4
 80176f8:	4629      	mov	r1, r5
 80176fa:	f7e9 fa37 	bl	8000b6c <__aeabi_d2iz>
 80176fe:	4602      	mov	r2, r0
 8017700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017702:	619a      	str	r2, [r3, #24]
    }
 8017704:	e043      	b.n	801778e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	2b01      	cmp	r3, #1
 801770c:	d018      	beq.n	8017740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	695c      	ldr	r4, [r3, #20]
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	781b      	ldrb	r3, [r3, #0]
 8017716:	4618      	mov	r0, r3
 8017718:	f7fb fcb4 	bl	8013084 <TfLiteTypeGetName>
 801771c:	4605      	mov	r5, r0
 801771e:	2001      	movs	r0, #1
 8017720:	f7fb fcb0 	bl	8013084 <TfLiteTypeGetName>
 8017724:	4603      	mov	r3, r0
 8017726:	9303      	str	r3, [sp, #12]
 8017728:	9502      	str	r5, [sp, #8]
 801772a:	4b1c      	ldr	r3, [pc, #112]	; (801779c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801772c:	9301      	str	r3, [sp, #4]
 801772e:	4b1c      	ldr	r3, [pc, #112]	; (80177a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8017730:	9300      	str	r3, [sp, #0]
 8017732:	234e      	movs	r3, #78	; 0x4e
 8017734:	4a1b      	ldr	r2, [pc, #108]	; (80177a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8017736:	491c      	ldr	r1, [pc, #112]	; (80177a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8017738:	68f8      	ldr	r0, [r7, #12]
 801773a:	47a0      	blx	r4
 801773c:	2301      	movs	r3, #1
 801773e:	e027      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	781b      	ldrb	r3, [r3, #0]
 8017744:	2b01      	cmp	r3, #1
 8017746:	d018      	beq.n	801777a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	695c      	ldr	r4, [r3, #20]
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	4618      	mov	r0, r3
 8017752:	f7fb fc97 	bl	8013084 <TfLiteTypeGetName>
 8017756:	4605      	mov	r5, r0
 8017758:	2001      	movs	r0, #1
 801775a:	f7fb fc93 	bl	8013084 <TfLiteTypeGetName>
 801775e:	4603      	mov	r3, r0
 8017760:	9303      	str	r3, [sp, #12]
 8017762:	9502      	str	r5, [sp, #8]
 8017764:	4b0d      	ldr	r3, [pc, #52]	; (801779c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8017766:	9301      	str	r3, [sp, #4]
 8017768:	4b10      	ldr	r3, [pc, #64]	; (80177ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801776a:	9300      	str	r3, [sp, #0]
 801776c:	234f      	movs	r3, #79	; 0x4f
 801776e:	4a0d      	ldr	r2, [pc, #52]	; (80177a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8017770:	490d      	ldr	r1, [pc, #52]	; (80177a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8017772:	68f8      	ldr	r0, [r7, #12]
 8017774:	47a0      	blx	r4
 8017776:	2301      	movs	r3, #1
 8017778:	e00a      	b.n	8017790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	4618      	mov	r0, r3
 8017780:	f7e8 feec 	bl	800055c <__aeabi_f2d>
 8017784:	4602      	mov	r2, r0
 8017786:	460b      	mov	r3, r1
 8017788:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801778a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801778e:	2300      	movs	r3, #0
}
 8017790:	4618      	mov	r0, r3
 8017792:	3728      	adds	r7, #40	; 0x28
 8017794:	46bd      	mov	sp, r7
 8017796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801779a:	bf00      	nop
 801779c:	0801eaa8 	.word	0x0801eaa8
 80177a0:	0801ea34 	.word	0x0801ea34
 80177a4:	0801e8fc 	.word	0x0801e8fc
 80177a8:	0801ea0c 	.word	0x0801ea0c
 80177ac:	0801ea54 	.word	0x0801ea54

080177b0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b084      	sub	sp, #16
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d101      	bne.n	80177c8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 80177c4:	f002 fe0a 	bl	801a3dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177cc:	2138      	movs	r1, #56	; 0x38
 80177ce:	68f8      	ldr	r0, [r7, #12]
 80177d0:	4798      	blx	r3
 80177d2:	4603      	mov	r3, r0
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3710      	adds	r7, #16
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}

080177dc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 80177dc:	b580      	push	{r7, lr}
 80177de:	b082      	sub	sp, #8
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	ed87 0a00 	vstr	s0, [r7]
 80177e8:	ed97 0a00 	vldr	s0, [r7]
 80177ec:	f7ea f81a 	bl	8001824 <_ZSt3expf>
 80177f0:	eef0 7a40 	vmov.f32	s15, s0
 80177f4:	eeb0 0a67 	vmov.f32	s0, s15
 80177f8:	3708      	adds	r7, #8
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}

080177fe <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 80177fe:	b580      	push	{r7, lr}
 8017800:	b082      	sub	sp, #8
 8017802:	af00      	add	r7, sp, #0
 8017804:	ed87 0a01 	vstr	s0, [r7, #4]
 8017808:	ed97 0a01 	vldr	s0, [r7, #4]
 801780c:	2000      	movs	r0, #0
 801780e:	f7ff ffe5 	bl	80177dc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 8017812:	eef0 7a40 	vmov.f32	s15, s0
 8017816:	eeb0 0a67 	vmov.f32	s0, s15
 801781a:	3708      	adds	r7, #8
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8017820:	b480      	push	{r7}
 8017822:	b083      	sub	sp, #12
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	4b03      	ldr	r3, [pc, #12]	; (8017838 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801782a:	4618      	mov	r0, r3
 801782c:	370c      	adds	r7, #12
 801782e:	46bd      	mov	sp, r7
 8017830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017834:	4770      	bx	lr
 8017836:	bf00      	nop
 8017838:	080177ff 	.word	0x080177ff

0801783c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801783c:	b480      	push	{r7}
 801783e:	b083      	sub	sp, #12
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	ed87 0a00 	vstr	s0, [r7]
 8017848:	edd7 7a00 	vldr	s15, [r7]
 801784c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017858:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801785c:	eef0 7a66 	vmov.f32	s15, s13
 8017860:	eeb0 0a67 	vmov.f32	s0, s15
 8017864:	370c      	adds	r7, #12
 8017866:	46bd      	mov	sp, r7
 8017868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786c:	4770      	bx	lr

0801786e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801786e:	b580      	push	{r7, lr}
 8017870:	b082      	sub	sp, #8
 8017872:	af00      	add	r7, sp, #0
 8017874:	ed87 0a01 	vstr	s0, [r7, #4]
 8017878:	ed97 0a01 	vldr	s0, [r7, #4]
 801787c:	2000      	movs	r0, #0
 801787e:	f7ff ffdd 	bl	801783c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 8017882:	eef0 7a40 	vmov.f32	s15, s0
 8017886:	eeb0 0a67 	vmov.f32	s0, s15
 801788a:	3708      	adds	r7, #8
 801788c:	46bd      	mov	sp, r7
 801788e:	bd80      	pop	{r7, pc}

08017890 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8017890:	b480      	push	{r7}
 8017892:	b083      	sub	sp, #12
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
 8017898:	4b03      	ldr	r3, [pc, #12]	; (80178a8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801789a:	4618      	mov	r0, r3
 801789c:	370c      	adds	r7, #12
 801789e:	46bd      	mov	sp, r7
 80178a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a4:	4770      	bx	lr
 80178a6:	bf00      	nop
 80178a8:	0801786f 	.word	0x0801786f

080178ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80178ac:	b590      	push	{r4, r7, lr}
 80178ae:	b08f      	sub	sp, #60	; 0x3c
 80178b0:	af04      	add	r7, sp, #16
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 80178b6:	6838      	ldr	r0, [r7, #0]
 80178b8:	f7fd fa9b 	bl	8014df2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80178bc:	4603      	mov	r3, r0
 80178be:	2b01      	cmp	r3, #1
 80178c0:	bf14      	ite	ne
 80178c2:	2301      	movne	r3, #1
 80178c4:	2300      	moveq	r3, #0
 80178c6:	b2db      	uxtb	r3, r3
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d013      	beq.n	80178f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	695c      	ldr	r4, [r3, #20]
 80178d0:	6838      	ldr	r0, [r7, #0]
 80178d2:	f7fd fa8e 	bl	8014df2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80178d6:	4603      	mov	r3, r0
 80178d8:	2201      	movs	r2, #1
 80178da:	9203      	str	r2, [sp, #12]
 80178dc:	9302      	str	r3, [sp, #8]
 80178de:	4b7c      	ldr	r3, [pc, #496]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 80178e0:	9301      	str	r3, [sp, #4]
 80178e2:	4b7c      	ldr	r3, [pc, #496]	; (8017ad4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 80178e4:	9300      	str	r3, [sp, #0]
 80178e6:	235d      	movs	r3, #93	; 0x5d
 80178e8:	4a7b      	ldr	r2, [pc, #492]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80178ea:	497c      	ldr	r1, [pc, #496]	; (8017adc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80178ec:	6878      	ldr	r0, [r7, #4]
 80178ee:	47a0      	blx	r4
 80178f0:	2301      	movs	r3, #1
 80178f2:	e146      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80178f4:	6838      	ldr	r0, [r7, #0]
 80178f6:	f7fd fa89 	bl	8014e0c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80178fa:	4603      	mov	r3, r0
 80178fc:	2b01      	cmp	r3, #1
 80178fe:	bf14      	ite	ne
 8017900:	2301      	movne	r3, #1
 8017902:	2300      	moveq	r3, #0
 8017904:	b2db      	uxtb	r3, r3
 8017906:	2b00      	cmp	r3, #0
 8017908:	d013      	beq.n	8017932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	695c      	ldr	r4, [r3, #20]
 801790e:	6838      	ldr	r0, [r7, #0]
 8017910:	f7fd fa7c 	bl	8014e0c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8017914:	4603      	mov	r3, r0
 8017916:	2201      	movs	r2, #1
 8017918:	9203      	str	r2, [sp, #12]
 801791a:	9302      	str	r3, [sp, #8]
 801791c:	4b6c      	ldr	r3, [pc, #432]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801791e:	9301      	str	r3, [sp, #4]
 8017920:	4b6f      	ldr	r3, [pc, #444]	; (8017ae0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 8017922:	9300      	str	r3, [sp, #0]
 8017924:	235e      	movs	r3, #94	; 0x5e
 8017926:	4a6c      	ldr	r2, [pc, #432]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017928:	496c      	ldr	r1, [pc, #432]	; (8017adc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	47a0      	blx	r4
 801792e:	2301      	movs	r3, #1
 8017930:	e127      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8017932:	2200      	movs	r2, #0
 8017934:	6839      	ldr	r1, [r7, #0]
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f7fb fe94 	bl	8013664 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801793c:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017940:	2b00      	cmp	r3, #0
 8017942:	d10a      	bne.n	801795a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	695c      	ldr	r4, [r3, #20]
 8017948:	4b66      	ldr	r3, [pc, #408]	; (8017ae4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801794a:	9300      	str	r3, [sp, #0]
 801794c:	2360      	movs	r3, #96	; 0x60
 801794e:	4a62      	ldr	r2, [pc, #392]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017950:	4965      	ldr	r1, [pc, #404]	; (8017ae8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	47a0      	blx	r4
 8017956:	2301      	movs	r3, #1
 8017958:	e113      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801795a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801795c:	f7fb fe05 	bl	801356a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8017960:	4603      	mov	r3, r0
 8017962:	2b00      	cmp	r3, #0
 8017964:	bfd4      	ite	le
 8017966:	2301      	movle	r3, #1
 8017968:	2300      	movgt	r3, #0
 801796a:	b2db      	uxtb	r3, r3
 801796c:	2b00      	cmp	r3, #0
 801796e:	d00a      	beq.n	8017986 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	695c      	ldr	r4, [r3, #20]
 8017974:	4b5d      	ldr	r3, [pc, #372]	; (8017aec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8017976:	9300      	str	r3, [sp, #0]
 8017978:	2361      	movs	r3, #97	; 0x61
 801797a:	4a57      	ldr	r2, [pc, #348]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801797c:	495a      	ldr	r1, [pc, #360]	; (8017ae8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	47a0      	blx	r4
 8017982:	2301      	movs	r3, #1
 8017984:	e0fd      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 8017986:	2200      	movs	r2, #0
 8017988:	6839      	ldr	r1, [r7, #0]
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f7fb fe7a 	bl	8013684 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8017990:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 8017992:	6a3b      	ldr	r3, [r7, #32]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d10a      	bne.n	80179ae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	695c      	ldr	r4, [r3, #20]
 801799c:	4b54      	ldr	r3, [pc, #336]	; (8017af0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801799e:	9300      	str	r3, [sp, #0]
 80179a0:	2363      	movs	r3, #99	; 0x63
 80179a2:	4a4d      	ldr	r2, [pc, #308]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80179a4:	4950      	ldr	r1, [pc, #320]	; (8017ae8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80179a6:	6878      	ldr	r0, [r7, #4]
 80179a8:	47a0      	blx	r4
 80179aa:	2301      	movs	r3, #1
 80179ac:	e0e9      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	691b      	ldr	r3, [r3, #16]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d10a      	bne.n	80179cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	695c      	ldr	r4, [r3, #20]
 80179ba:	4b4e      	ldr	r3, [pc, #312]	; (8017af4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 80179bc:	9300      	str	r3, [sp, #0]
 80179be:	2365      	movs	r3, #101	; 0x65
 80179c0:	4a45      	ldr	r2, [pc, #276]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80179c2:	4949      	ldr	r1, [pc, #292]	; (8017ae8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80179c4:	6878      	ldr	r0, [r7, #4]
 80179c6:	47a0      	blx	r4
 80179c8:	2301      	movs	r3, #1
 80179ca:	e0da      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 80179cc:	683b      	ldr	r3, [r7, #0]
 80179ce:	691b      	ldr	r3, [r3, #16]
 80179d0:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 80179d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d4:	781b      	ldrb	r3, [r3, #0]
 80179d6:	2b07      	cmp	r3, #7
 80179d8:	d12f      	bne.n	8017a3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179de:	f240 4102 	movw	r1, #1026	; 0x402
 80179e2:	6878      	ldr	r0, [r7, #4]
 80179e4:	4798      	blx	r3
 80179e6:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 80179e8:	69bb      	ldr	r3, [r7, #24]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d10a      	bne.n	8017a04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	695c      	ldr	r4, [r3, #20]
 80179f2:	4b41      	ldr	r3, [pc, #260]	; (8017af8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80179f4:	9300      	str	r3, [sp, #0]
 80179f6:	236b      	movs	r3, #107	; 0x6b
 80179f8:	4a37      	ldr	r2, [pc, #220]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80179fa:	493b      	ldr	r1, [pc, #236]	; (8017ae8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	47a0      	blx	r4
 8017a00:	2301      	movs	r3, #1
 8017a02:	e0be      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 8017a04:	69fb      	ldr	r3, [r7, #28]
 8017a06:	69ba      	ldr	r2, [r7, #24]
 8017a08:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a0e:	f240 4102 	movw	r1, #1026	; 0x402
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	4798      	blx	r3
 8017a16:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8017a18:	697b      	ldr	r3, [r7, #20]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d10a      	bne.n	8017a34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	695c      	ldr	r4, [r3, #20]
 8017a22:	4b36      	ldr	r3, [pc, #216]	; (8017afc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8017a24:	9300      	str	r3, [sp, #0]
 8017a26:	236f      	movs	r3, #111	; 0x6f
 8017a28:	4a2b      	ldr	r2, [pc, #172]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a2a:	492f      	ldr	r1, [pc, #188]	; (8017ae8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	47a0      	blx	r4
 8017a30:	2301      	movs	r3, #1
 8017a32:	e0a6      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 8017a34:	69fb      	ldr	r3, [r7, #28]
 8017a36:	697a      	ldr	r2, [r7, #20]
 8017a38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8017a3a:	6a3b      	ldr	r3, [r7, #32]
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	2b07      	cmp	r3, #7
 8017a40:	d112      	bne.n	8017a68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 8017a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a44:	781b      	ldrb	r3, [r3, #0]
 8017a46:	2b09      	cmp	r3, #9
 8017a48:	d028      	beq.n	8017a9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4c:	781b      	ldrb	r3, [r3, #0]
 8017a4e:	2b07      	cmp	r3, #7
 8017a50:	d024      	beq.n	8017a9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	695c      	ldr	r4, [r3, #20]
 8017a56:	4b2a      	ldr	r3, [pc, #168]	; (8017b00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8017a58:	9300      	str	r3, [sp, #0]
 8017a5a:	2375      	movs	r3, #117	; 0x75
 8017a5c:	4a1e      	ldr	r2, [pc, #120]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a5e:	4922      	ldr	r1, [pc, #136]	; (8017ae8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8017a60:	6878      	ldr	r0, [r7, #4]
 8017a62:	47a0      	blx	r4
 8017a64:	2301      	movs	r3, #1
 8017a66:	e08c      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8017a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a6a:	781a      	ldrb	r2, [r3, #0]
 8017a6c:	6a3b      	ldr	r3, [r7, #32]
 8017a6e:	781b      	ldrb	r3, [r3, #0]
 8017a70:	429a      	cmp	r2, r3
 8017a72:	d013      	beq.n	8017a9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	695c      	ldr	r4, [r3, #20]
 8017a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	461a      	mov	r2, r3
 8017a7e:	6a3b      	ldr	r3, [r7, #32]
 8017a80:	781b      	ldrb	r3, [r3, #0]
 8017a82:	9303      	str	r3, [sp, #12]
 8017a84:	9202      	str	r2, [sp, #8]
 8017a86:	4b1f      	ldr	r3, [pc, #124]	; (8017b04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8017a88:	9301      	str	r3, [sp, #4]
 8017a8a:	4b1f      	ldr	r3, [pc, #124]	; (8017b08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8017a8c:	9300      	str	r3, [sp, #0]
 8017a8e:	2378      	movs	r3, #120	; 0x78
 8017a90:	4a11      	ldr	r2, [pc, #68]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a92:	4912      	ldr	r1, [pc, #72]	; (8017adc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	47a0      	blx	r4
 8017a98:	2301      	movs	r3, #1
 8017a9a:	e072      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 8017a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a9e:	781b      	ldrb	r3, [r3, #0]
 8017aa0:	2b07      	cmp	r3, #7
 8017aa2:	d161      	bne.n	8017b68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8017aa4:	6a3b      	ldr	r3, [r7, #32]
 8017aa6:	691b      	ldr	r3, [r3, #16]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d035      	beq.n	8017b18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	695c      	ldr	r4, [r3, #20]
 8017ab0:	6a3b      	ldr	r3, [r7, #32]
 8017ab2:	691b      	ldr	r3, [r3, #16]
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	9203      	str	r2, [sp, #12]
 8017ab8:	9302      	str	r3, [sp, #8]
 8017aba:	4b14      	ldr	r3, [pc, #80]	; (8017b0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8017abc:	9301      	str	r3, [sp, #4]
 8017abe:	4b14      	ldr	r3, [pc, #80]	; (8017b10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8017ac0:	9300      	str	r3, [sp, #0]
 8017ac2:	237d      	movs	r3, #125	; 0x7d
 8017ac4:	4a04      	ldr	r2, [pc, #16]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017ac6:	4905      	ldr	r1, [pc, #20]	; (8017adc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8017ac8:	6878      	ldr	r0, [r7, #4]
 8017aca:	47a0      	blx	r4
 8017acc:	2301      	movs	r3, #1
 8017ace:	e058      	b.n	8017b82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 8017ad0:	0801eab8 	.word	0x0801eab8
 8017ad4:	0801eabc 	.word	0x0801eabc
 8017ad8:	0801e8fc 	.word	0x0801e8fc
 8017adc:	0801e98c 	.word	0x0801e98c
 8017ae0:	0801eacc 	.word	0x0801eacc
 8017ae4:	0801eae0 	.word	0x0801eae0
 8017ae8:	0801ea6c 	.word	0x0801ea6c
 8017aec:	0801eaf4 	.word	0x0801eaf4
 8017af0:	0801eb10 	.word	0x0801eb10
 8017af4:	0801eb24 	.word	0x0801eb24
 8017af8:	0801eb40 	.word	0x0801eb40
 8017afc:	0801eb58 	.word	0x0801eb58
 8017b00:	0801eb7c 	.word	0x0801eb7c
 8017b04:	0801ea54 	.word	0x0801ea54
 8017b08:	0801ea34 	.word	0x0801ea34
 8017b0c:	0801e9a8 	.word	0x0801e9a8
 8017b10:	0801e9ac 	.word	0x0801e9ac
 8017b14:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8017b18:	f107 0308 	add.w	r3, r7, #8
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f7ff fe7f 	bl	8017820 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8017b22:	69fb      	ldr	r3, [r7, #28]
 8017b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b26:	f240 2201 	movw	r2, #513	; 0x201
 8017b2a:	4619      	mov	r1, r3
 8017b2c:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 8017b14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8017b30:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8017b34:	f7ff faf4 	bl	8017120 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8017b38:	f107 030c 	add.w	r3, r7, #12
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7ff fea7 	bl	8017890 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b46:	f240 2201 	movw	r2, #513	; 0x201
 8017b4a:	4619      	mov	r1, r3
 8017b4c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8017b50:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8017b14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8017b54:	f7ff fae4 	bl	8017120 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8017b58:	6a3b      	ldr	r3, [r7, #32]
 8017b5a:	691a      	ldr	r2, [r3, #16]
 8017b5c:	69fb      	ldr	r3, [r7, #28]
 8017b5e:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8017b60:	6a3b      	ldr	r3, [r7, #32]
 8017b62:	68da      	ldr	r2, [r3, #12]
 8017b64:	69fb      	ldr	r3, [r7, #28]
 8017b66:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	695b      	ldr	r3, [r3, #20]
 8017b6c:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	9300      	str	r3, [sp, #0]
 8017b72:	693b      	ldr	r3, [r7, #16]
 8017b74:	6a3a      	ldr	r2, [r7, #32]
 8017b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b78:	6878      	ldr	r0, [r7, #4]
 8017b7a:	f7ff fbfd 	bl	8017378 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	bf00      	nop
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	372c      	adds	r7, #44	; 0x2c
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd90      	pop	{r4, r7, pc}
 8017b8a:	bf00      	nop

08017b8c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b084      	sub	sp, #16
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
 8017b94:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 8017b96:	4b21      	ldr	r3, [pc, #132]	; (8017c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017b98:	681a      	ldr	r2, [r3, #0]
 8017b9a:	683b      	ldr	r3, [r7, #0]
 8017b9c:	425b      	negs	r3, r3
 8017b9e:	441a      	add	r2, r3
 8017ba0:	4b1f      	ldr	r3, [pc, #124]	; (8017c20 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d224      	bcs.n	8017bf2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 8017ba8:	4b1e      	ldr	r3, [pc, #120]	; (8017c24 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	2b09      	cmp	r3, #9
 8017bae:	d906      	bls.n	8017bbe <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	4619      	mov	r1, r3
 8017bb4:	481c      	ldr	r0, [pc, #112]	; (8017c28 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 8017bb6:	f7ec f939 	bl	8003e2c <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 8017bba:	2300      	movs	r3, #0
 8017bbc:	e029      	b.n	8017c12 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8017bbe:	2101      	movs	r1, #1
 8017bc0:	6838      	ldr	r0, [r7, #0]
 8017bc2:	f7fb fa29 	bl	8013018 <_Z9ei_callocjj>
 8017bc6:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d106      	bne.n	8017bdc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	4619      	mov	r1, r3
 8017bd2:	4816      	ldr	r0, [pc, #88]	; (8017c2c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 8017bd4:	f7ec f92a 	bl	8003e2c <_Z9ei_printfPKcz>
      return NULL;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	e01a      	b.n	8017c12 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8017bdc:	4b11      	ldr	r3, [pc, #68]	; (8017c24 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	1c5a      	adds	r2, r3, #1
 8017be2:	4910      	ldr	r1, [pc, #64]	; (8017c24 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017be4:	600a      	str	r2, [r1, #0]
 8017be6:	4912      	ldr	r1, [pc, #72]	; (8017c30 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 8017be8:	68fa      	ldr	r2, [r7, #12]
 8017bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	e00f      	b.n	8017c12 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 8017bf2:	4b0a      	ldr	r3, [pc, #40]	; (8017c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017bf4:	681a      	ldr	r2, [r3, #0]
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	425b      	negs	r3, r3
 8017bfa:	4413      	add	r3, r2
 8017bfc:	4a07      	ldr	r2, [pc, #28]	; (8017c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017bfe:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8017c00:	4b06      	ldr	r3, [pc, #24]	; (8017c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8017c06:	683a      	ldr	r2, [r7, #0]
 8017c08:	2100      	movs	r1, #0
 8017c0a:	68f8      	ldr	r0, [r7, #12]
 8017c0c:	f002 fc8c 	bl	801a528 <memset>

  return ptr;
 8017c10:	68fb      	ldr	r3, [r7, #12]
}
 8017c12:	4618      	mov	r0, r3
 8017c14:	3710      	adds	r7, #16
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	20002bc0 	.word	0x20002bc0
 8017c20:	20002bbc 	.word	0x20002bbc
 8017c24:	20003058 	.word	0x20003058
 8017c28:	0801ebcc 	.word	0x0801ebcc
 8017c2c:	0801ec4c 	.word	0x0801ec4c
 8017c30:	20003030 	.word	0x20003030

08017c34 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b086      	sub	sp, #24
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	60f8      	str	r0, [r7, #12]
 8017c3c:	60b9      	str	r1, [r7, #8]
 8017c3e:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 8017c40:	4b1b      	ldr	r3, [pc, #108]	; (8017cb0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	2b03      	cmp	r3, #3
 8017c46:	d906      	bls.n	8017c56 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	4819      	ldr	r0, [pc, #100]	; (8017cb4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 8017c4e:	f7ec f8ed 	bl	8003e2c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8017c52:	2301      	movs	r3, #1
 8017c54:	e028      	b.n	8017ca8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 8017c5a:	693b      	ldr	r3, [r7, #16]
 8017c5c:	4619      	mov	r1, r3
 8017c5e:	68f8      	ldr	r0, [r7, #12]
 8017c60:	f7ff ff94 	bl	8017b8c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 8017c64:	4603      	mov	r3, r0
 8017c66:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8017c68:	697b      	ldr	r3, [r7, #20]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d106      	bne.n	8017c7c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 8017c6e:	68bb      	ldr	r3, [r7, #8]
 8017c70:	4619      	mov	r1, r3
 8017c72:	4811      	ldr	r0, [pc, #68]	; (8017cb8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 8017c74:	f7ec f8da 	bl	8003e2c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8017c78:	2301      	movs	r3, #1
 8017c7a:	e015      	b.n	8017ca8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 8017c7c:	4b0c      	ldr	r3, [pc, #48]	; (8017cb0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	4a0e      	ldr	r2, [pc, #56]	; (8017cbc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 8017c82:	00db      	lsls	r3, r3, #3
 8017c84:	4413      	add	r3, r2
 8017c86:	f107 0210 	add.w	r2, r7, #16
 8017c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017c8e:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 8017c92:	4b07      	ldr	r3, [pc, #28]	; (8017cb0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	461a      	mov	r2, r3
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 8017c9c:	4b04      	ldr	r3, [pc, #16]	; (8017cb0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	3301      	adds	r3, #1
 8017ca2:	4a03      	ldr	r2, [pc, #12]	; (8017cb0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017ca4:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 8017ca6:	2300      	movs	r3, #0
}
 8017ca8:	4618      	mov	r0, r3
 8017caa:	3718      	adds	r7, #24
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}
 8017cb0:	2000307c 	.word	0x2000307c
 8017cb4:	0801ec84 	.word	0x0801ec84
 8017cb8:	0801ecdc 	.word	0x0801ecdc
 8017cbc:	2000305c 	.word	0x2000305c

08017cc0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8017cc0:	b480      	push	{r7}
 8017cc2:	b083      	sub	sp, #12
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
 8017cc8:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 8017cca:	4b09      	ldr	r3, [pc, #36]	; (8017cf0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	461a      	mov	r2, r3
 8017cd0:	683b      	ldr	r3, [r7, #0]
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	dd01      	ble.n	8017cda <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	e004      	b.n	8017ce4 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 8017cda:	4a06      	ldr	r2, [pc, #24]	; (8017cf4 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	00db      	lsls	r3, r3, #3
 8017ce0:	4413      	add	r3, r2
 8017ce2:	685b      	ldr	r3, [r3, #4]
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	370c      	adds	r7, #12
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cee:	4770      	bx	lr
 8017cf0:	2000307c 	.word	0x2000307c
 8017cf4:	2000305c 	.word	0x2000305c

08017cf8 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 8017cf8:	b480      	push	{r7}
 8017cfa:	b083      	sub	sp, #12
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
 8017d00:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 8017d02:	683b      	ldr	r3, [r7, #0]
 8017d04:	019b      	lsls	r3, r3, #6
 8017d06:	4a04      	ldr	r2, [pc, #16]	; (8017d18 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 8017d08:	4413      	add	r3, r2
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	370c      	adds	r7, #12
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d14:	4770      	bx	lr
 8017d16:	bf00      	nop
 8017d18:	20002c1c 	.word	0x20002c1c

08017d1c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8017d1c:	b480      	push	{r7}
 8017d1e:	b083      	sub	sp, #12
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 8017d26:	683a      	ldr	r2, [r7, #0]
 8017d28:	4613      	mov	r3, r2
 8017d2a:	005b      	lsls	r3, r3, #1
 8017d2c:	4413      	add	r3, r2
 8017d2e:	009b      	lsls	r3, r3, #2
 8017d30:	4a03      	ldr	r2, [pc, #12]	; (8017d40 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 8017d32:	4413      	add	r3, r2
}
 8017d34:	4618      	mov	r0, r3
 8017d36:	370c      	adds	r7, #12
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3e:	4770      	bx	lr
 8017d40:	20002edc 	.word	0x20002edc

08017d44 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8017d44:	b5b0      	push	{r4, r5, r7, lr}
 8017d46:	b092      	sub	sp, #72	; 0x48
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8017d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017d52:	2010      	movs	r0, #16
 8017d54:	4798      	blx	r3
 8017d56:	4603      	mov	r3, r0
 8017d58:	4aa3      	ldr	r2, [pc, #652]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d5a:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8017d5c:	4ba2      	ldr	r3, [pc, #648]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d104      	bne.n	8017d6e <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 8017d64:	48a1      	ldr	r0, [pc, #644]	; (8017fec <_Z18trained_model_initPFPvjjE+0x2a8>)
 8017d66:	f7ec f861 	bl	8003e2c <_Z9ei_printfPKcz>
    return kTfLiteError;
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	e21d      	b.n	80181aa <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 8017d6e:	4b9e      	ldr	r3, [pc, #632]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	4a9f      	ldr	r2, [pc, #636]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017d74:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8017d76:	4b9c      	ldr	r3, [pc, #624]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017d7e:	4a9d      	ldr	r2, [pc, #628]	; (8017ff4 <_Z18trained_model_initPFPvjjE+0x2b0>)
 8017d80:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 8017d82:	4b9d      	ldr	r3, [pc, #628]	; (8017ff8 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d84:	4a9d      	ldr	r2, [pc, #628]	; (8017ffc <_Z18trained_model_initPFPvjjE+0x2b8>)
 8017d86:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8017d88:	4b9b      	ldr	r3, [pc, #620]	; (8017ff8 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d8a:	4a9d      	ldr	r2, [pc, #628]	; (8018000 <_Z18trained_model_initPFPvjjE+0x2bc>)
 8017d8c:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 8017d8e:	4b9a      	ldr	r3, [pc, #616]	; (8017ff8 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d90:	4a9c      	ldr	r2, [pc, #624]	; (8018004 <_Z18trained_model_initPFPvjjE+0x2c0>)
 8017d92:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 8017d94:	4b98      	ldr	r3, [pc, #608]	; (8017ff8 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d96:	4a9c      	ldr	r2, [pc, #624]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8017d98:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 8017d9a:	4b97      	ldr	r3, [pc, #604]	; (8017ff8 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d9c:	4a9b      	ldr	r2, [pc, #620]	; (801800c <_Z18trained_model_initPFPvjjE+0x2c8>)
 8017d9e:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 8017da0:	4b95      	ldr	r3, [pc, #596]	; (8017ff8 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017da2:	4a9b      	ldr	r2, [pc, #620]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017da4:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 8017da6:	4b94      	ldr	r3, [pc, #592]	; (8017ff8 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017da8:	220b      	movs	r2, #11
 8017daa:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 8017dac:	2300      	movs	r3, #0
 8017dae:	647b      	str	r3, [r7, #68]	; 0x44
 8017db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017db2:	2b0a      	cmp	r3, #10
 8017db4:	f200 810c 	bhi.w	8017fd0 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 8017db8:	4996      	ldr	r1, [pc, #600]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017dbc:	4613      	mov	r3, r2
 8017dbe:	005b      	lsls	r3, r3, #1
 8017dc0:	4413      	add	r3, r2
 8017dc2:	00db      	lsls	r3, r3, #3
 8017dc4:	440b      	add	r3, r1
 8017dc6:	3301      	adds	r3, #1
 8017dc8:	7819      	ldrb	r1, [r3, #0]
 8017dca:	4a91      	ldr	r2, [pc, #580]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017dce:	019b      	lsls	r3, r3, #6
 8017dd0:	4413      	add	r3, r2
 8017dd2:	460a      	mov	r2, r1
 8017dd4:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 8017dd6:	498f      	ldr	r1, [pc, #572]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017dda:	4613      	mov	r3, r2
 8017ddc:	005b      	lsls	r3, r3, #1
 8017dde:	4413      	add	r3, r2
 8017de0:	00db      	lsls	r3, r3, #3
 8017de2:	440b      	add	r3, r1
 8017de4:	3301      	adds	r3, #1
 8017de6:	7818      	ldrb	r0, [r3, #0]
 8017de8:	498b      	ldr	r1, [pc, #556]	; (8018018 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017dec:	4613      	mov	r3, r2
 8017dee:	005b      	lsls	r3, r3, #1
 8017df0:	4413      	add	r3, r2
 8017df2:	009b      	lsls	r3, r3, #2
 8017df4:	440b      	add	r3, r1
 8017df6:	3308      	adds	r3, #8
 8017df8:	4602      	mov	r2, r0
 8017dfa:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 8017dfc:	4a84      	ldr	r2, [pc, #528]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e00:	019b      	lsls	r3, r3, #6
 8017e02:	4413      	add	r3, r2
 8017e04:	332d      	adds	r3, #45	; 0x2d
 8017e06:	2200      	movs	r2, #0
 8017e08:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 8017e0a:	4982      	ldr	r1, [pc, #520]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e0e:	4613      	mov	r3, r2
 8017e10:	005b      	lsls	r3, r3, #1
 8017e12:	4413      	add	r3, r2
 8017e14:	00db      	lsls	r3, r3, #3
 8017e16:	440b      	add	r3, r1
 8017e18:	7819      	ldrb	r1, [r3, #0]
 8017e1a:	4a7d      	ldr	r2, [pc, #500]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e1e:	019b      	lsls	r3, r3, #6
 8017e20:	4413      	add	r3, r2
 8017e22:	3314      	adds	r3, #20
 8017e24:	460a      	mov	r2, r1
 8017e26:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 8017e28:	497a      	ldr	r1, [pc, #488]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	005b      	lsls	r3, r3, #1
 8017e30:	4413      	add	r3, r2
 8017e32:	00db      	lsls	r3, r3, #3
 8017e34:	440b      	add	r3, r1
 8017e36:	330c      	adds	r3, #12
 8017e38:	681a      	ldr	r2, [r3, #0]
 8017e3a:	4975      	ldr	r1, [pc, #468]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e3e:	019b      	lsls	r3, r3, #6
 8017e40:	440b      	add	r3, r1
 8017e42:	3318      	adds	r3, #24
 8017e44:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8017e46:	4973      	ldr	r1, [pc, #460]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	005b      	lsls	r3, r3, #1
 8017e4e:	4413      	add	r3, r2
 8017e50:	00db      	lsls	r3, r3, #3
 8017e52:	440b      	add	r3, r1
 8017e54:	3308      	adds	r3, #8
 8017e56:	681a      	ldr	r2, [r3, #0]
 8017e58:	496d      	ldr	r1, [pc, #436]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e5c:	019b      	lsls	r3, r3, #6
 8017e5e:	440b      	add	r3, r1
 8017e60:	3308      	adds	r3, #8
 8017e62:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8017e64:	496b      	ldr	r1, [pc, #428]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e68:	4613      	mov	r3, r2
 8017e6a:	005b      	lsls	r3, r3, #1
 8017e6c:	4413      	add	r3, r2
 8017e6e:	00db      	lsls	r3, r3, #3
 8017e70:	440b      	add	r3, r1
 8017e72:	3308      	adds	r3, #8
 8017e74:	6819      	ldr	r1, [r3, #0]
 8017e76:	4868      	ldr	r0, [pc, #416]	; (8018018 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e7a:	4613      	mov	r3, r2
 8017e7c:	005b      	lsls	r3, r3, #1
 8017e7e:	4413      	add	r3, r2
 8017e80:	009b      	lsls	r3, r3, #2
 8017e82:	4403      	add	r3, r0
 8017e84:	3304      	adds	r3, #4
 8017e86:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8017e88:	4a61      	ldr	r2, [pc, #388]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e8c:	019b      	lsls	r3, r3, #6
 8017e8e:	4413      	add	r3, r2
 8017e90:	3314      	adds	r3, #20
 8017e92:	781b      	ldrb	r3, [r3, #0]
 8017e94:	2b02      	cmp	r3, #2
 8017e96:	d11e      	bne.n	8017ed6 <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8017e98:	495e      	ldr	r1, [pc, #376]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e9c:	4613      	mov	r3, r2
 8017e9e:	005b      	lsls	r3, r3, #1
 8017ea0:	4413      	add	r3, r2
 8017ea2:	00db      	lsls	r3, r3, #3
 8017ea4:	440b      	add	r3, r1
 8017ea6:	3304      	adds	r3, #4
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	461a      	mov	r2, r3
 8017eac:	4b4e      	ldr	r3, [pc, #312]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	4413      	add	r3, r2
 8017eb2:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 8017eb4:	4a56      	ldr	r2, [pc, #344]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017eb8:	019b      	lsls	r3, r3, #6
 8017eba:	4413      	add	r3, r2
 8017ebc:	3304      	adds	r3, #4
 8017ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017ec0:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 8017ec2:	4955      	ldr	r1, [pc, #340]	; (8018018 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ec6:	4613      	mov	r3, r2
 8017ec8:	005b      	lsls	r3, r3, #1
 8017eca:	4413      	add	r3, r2
 8017ecc:	009b      	lsls	r3, r3, #2
 8017ece:	440b      	add	r3, r1
 8017ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017ed2:	601a      	str	r2, [r3, #0]
 8017ed4:	e01f      	b.n	8017f16 <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 8017ed6:	494f      	ldr	r1, [pc, #316]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017eda:	4613      	mov	r3, r2
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	4413      	add	r3, r2
 8017ee0:	00db      	lsls	r3, r3, #3
 8017ee2:	440b      	add	r3, r1
 8017ee4:	3304      	adds	r3, #4
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	4949      	ldr	r1, [pc, #292]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017eec:	019b      	lsls	r3, r3, #6
 8017eee:	440b      	add	r3, r1
 8017ef0:	3304      	adds	r3, #4
 8017ef2:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 8017ef4:	4947      	ldr	r1, [pc, #284]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ef8:	4613      	mov	r3, r2
 8017efa:	005b      	lsls	r3, r3, #1
 8017efc:	4413      	add	r3, r2
 8017efe:	00db      	lsls	r3, r3, #3
 8017f00:	440b      	add	r3, r1
 8017f02:	3304      	adds	r3, #4
 8017f04:	6819      	ldr	r1, [r3, #0]
 8017f06:	4844      	ldr	r0, [pc, #272]	; (8018018 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f0a:	4613      	mov	r3, r2
 8017f0c:	005b      	lsls	r3, r3, #1
 8017f0e:	4413      	add	r3, r2
 8017f10:	009b      	lsls	r3, r3, #2
 8017f12:	4403      	add	r3, r0
 8017f14:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 8017f16:	4a3e      	ldr	r2, [pc, #248]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f1a:	019b      	lsls	r3, r3, #6
 8017f1c:	4413      	add	r3, r2
 8017f1e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017f22:	493c      	ldr	r1, [pc, #240]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f26:	4613      	mov	r3, r2
 8017f28:	005b      	lsls	r3, r3, #1
 8017f2a:	4413      	add	r3, r2
 8017f2c:	00db      	lsls	r3, r3, #3
 8017f2e:	440b      	add	r3, r1
 8017f30:	f103 0210 	add.w	r2, r3, #16
 8017f34:	4603      	mov	r3, r0
 8017f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f3a:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 8017f3e:	4a34      	ldr	r2, [pc, #208]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f42:	019b      	lsls	r3, r3, #6
 8017f44:	4413      	add	r3, r2
 8017f46:	3330      	adds	r3, #48	; 0x30
 8017f48:	781b      	ldrb	r3, [r3, #0]
 8017f4a:	2b01      	cmp	r3, #1
 8017f4c:	d11b      	bne.n	8017f86 <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 8017f4e:	4931      	ldr	r1, [pc, #196]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f52:	4613      	mov	r3, r2
 8017f54:	005b      	lsls	r3, r3, #1
 8017f56:	4413      	add	r3, r2
 8017f58:	00db      	lsls	r3, r3, #3
 8017f5a:	440b      	add	r3, r1
 8017f5c:	3314      	adds	r3, #20
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 8017f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	685a      	ldr	r2, [r3, #4]
 8017f68:	4929      	ldr	r1, [pc, #164]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f6c:	019b      	lsls	r3, r3, #6
 8017f6e:	440b      	add	r3, r1
 8017f70:	330c      	adds	r3, #12
 8017f72:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 8017f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f76:	685b      	ldr	r3, [r3, #4]
 8017f78:	685a      	ldr	r2, [r3, #4]
 8017f7a:	4925      	ldr	r1, [pc, #148]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f7e:	019b      	lsls	r3, r3, #6
 8017f80:	440b      	add	r3, r1
 8017f82:	3310      	adds	r3, #16
 8017f84:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8017f86:	4a22      	ldr	r2, [pc, #136]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f8a:	019b      	lsls	r3, r3, #6
 8017f8c:	4413      	add	r3, r2
 8017f8e:	3314      	adds	r3, #20
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	2b02      	cmp	r3, #2
 8017f94:	d118      	bne.n	8017fc8 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 8017f96:	4a1e      	ldr	r2, [pc, #120]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f9a:	019b      	lsls	r3, r3, #6
 8017f9c:	4413      	add	r3, r2
 8017f9e:	3304      	adds	r3, #4
 8017fa0:	6819      	ldr	r1, [r3, #0]
 8017fa2:	481c      	ldr	r0, [pc, #112]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017fa6:	4613      	mov	r3, r2
 8017fa8:	005b      	lsls	r3, r3, #1
 8017faa:	4413      	add	r3, r2
 8017fac:	00db      	lsls	r3, r3, #3
 8017fae:	4403      	add	r3, r0
 8017fb0:	330c      	adds	r3, #12
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	440b      	add	r3, r1
 8017fb6:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 8017fb8:	4b0d      	ldr	r3, [pc, #52]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d902      	bls.n	8017fc8 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 8017fc2:	4a0b      	ldr	r2, [pc, #44]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc6:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 8017fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017fca:	3301      	adds	r3, #1
 8017fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8017fce:	e6ef      	b.n	8017db0 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 8017fd0:	4b07      	ldr	r3, [pc, #28]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017fd2:	681a      	ldr	r2, [r3, #0]
 8017fd4:	4b07      	ldr	r3, [pc, #28]	; (8017ff4 <_Z18trained_model_initPFPvjjE+0x2b0>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	429a      	cmp	r2, r3
 8017fda:	d921      	bls.n	8018020 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8017fdc:	480f      	ldr	r0, [pc, #60]	; (801801c <_Z18trained_model_initPFPvjjE+0x2d8>)
 8017fde:	f7eb ff25 	bl	8003e2c <_Z9ei_printfPKcz>
    return kTfLiteError;
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	e0e1      	b.n	80181aa <_Z18trained_model_initPFPvjjE+0x466>
 8017fe6:	bf00      	nop
 8017fe8:	20002bb8 	.word	0x20002bb8
 8017fec:	0801ed10 	.word	0x0801ed10
 8017ff0:	20002bbc 	.word	0x20002bbc
 8017ff4:	20002bc0 	.word	0x20002bc0
 8017ff8:	20002bc4 	.word	0x20002bc4
 8017ffc:	08017b8d 	.word	0x08017b8d
 8018000:	08017c35 	.word	0x08017c35
 8018004:	08017cc1 	.word	0x08017cc1
 8018008:	08017cf9 	.word	0x08017cf9
 801800c:	08017d1d 	.word	0x08017d1d
 8018010:	20002c1c 	.word	0x20002c1c
 8018014:	2000275c 	.word	0x2000275c
 8018018:	20002edc 	.word	0x20002edc
 801801c:	0801ed38 	.word	0x0801ed38
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 8018020:	4c64      	ldr	r4, [pc, #400]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x470>)
 8018022:	463b      	mov	r3, r7
 8018024:	4618      	mov	r0, r3
 8018026:	f7fd fe59 	bl	8015cdc <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801802a:	4625      	mov	r5, r4
 801802c:	463c      	mov	r4, r7
 801802e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018032:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018036:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801803a:	4c5e      	ldr	r4, [pc, #376]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x470>)
 801803c:	463b      	mov	r3, r7
 801803e:	4618      	mov	r0, r3
 8018040:	f7fe fc7c 	bl	801693c <_ZN6tflite16Register_SOFTMAXEv>
 8018044:	3420      	adds	r4, #32
 8018046:	463d      	mov	r5, r7
 8018048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801804a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801804c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 8018054:	2300      	movs	r3, #0
 8018056:	643b      	str	r3, [r7, #64]	; 0x40
 8018058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801805a:	2b03      	cmp	r3, #3
 801805c:	d86f      	bhi.n	801813e <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 801805e:	4a56      	ldr	r2, [pc, #344]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x474>)
 8018060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018062:	011b      	lsls	r3, r3, #4
 8018064:	4413      	add	r3, r2
 8018066:	6819      	ldr	r1, [r3, #0]
 8018068:	4854      	ldr	r0, [pc, #336]	; (80181bc <_Z18trained_model_initPFPvjjE+0x478>)
 801806a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801806c:	4613      	mov	r3, r2
 801806e:	00db      	lsls	r3, r3, #3
 8018070:	4413      	add	r3, r2
 8018072:	009b      	lsls	r3, r3, #2
 8018074:	4403      	add	r3, r0
 8018076:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8018078:	4a4f      	ldr	r2, [pc, #316]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x474>)
 801807a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801807c:	011b      	lsls	r3, r3, #4
 801807e:	4413      	add	r3, r2
 8018080:	3304      	adds	r3, #4
 8018082:	6819      	ldr	r1, [r3, #0]
 8018084:	484d      	ldr	r0, [pc, #308]	; (80181bc <_Z18trained_model_initPFPvjjE+0x478>)
 8018086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018088:	4613      	mov	r3, r2
 801808a:	00db      	lsls	r3, r3, #3
 801808c:	4413      	add	r3, r2
 801808e:	009b      	lsls	r3, r3, #2
 8018090:	4403      	add	r3, r0
 8018092:	3304      	adds	r3, #4
 8018094:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 8018096:	4a48      	ldr	r2, [pc, #288]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x474>)
 8018098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801809a:	011b      	lsls	r3, r3, #4
 801809c:	4413      	add	r3, r2
 801809e:	3308      	adds	r3, #8
 80180a0:	6819      	ldr	r1, [r3, #0]
 80180a2:	4846      	ldr	r0, [pc, #280]	; (80181bc <_Z18trained_model_initPFPvjjE+0x478>)
 80180a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180a6:	4613      	mov	r3, r2
 80180a8:	00db      	lsls	r3, r3, #3
 80180aa:	4413      	add	r3, r2
 80180ac:	009b      	lsls	r3, r3, #2
 80180ae:	4403      	add	r3, r0
 80180b0:	3314      	adds	r3, #20
 80180b2:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 80180b4:	4941      	ldr	r1, [pc, #260]	; (80181bc <_Z18trained_model_initPFPvjjE+0x478>)
 80180b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180b8:	4613      	mov	r3, r2
 80180ba:	00db      	lsls	r3, r3, #3
 80180bc:	4413      	add	r3, r2
 80180be:	009b      	lsls	r3, r3, #2
 80180c0:	440b      	add	r3, r1
 80180c2:	3318      	adds	r3, #24
 80180c4:	2200      	movs	r2, #0
 80180c6:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 80180c8:	493c      	ldr	r1, [pc, #240]	; (80181bc <_Z18trained_model_initPFPvjjE+0x478>)
 80180ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180cc:	4613      	mov	r3, r2
 80180ce:	00db      	lsls	r3, r3, #3
 80180d0:	4413      	add	r3, r2
 80180d2:	009b      	lsls	r3, r3, #2
 80180d4:	440b      	add	r3, r1
 80180d6:	331c      	adds	r3, #28
 80180d8:	2200      	movs	r2, #0
 80180da:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 80180dc:	4a36      	ldr	r2, [pc, #216]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x474>)
 80180de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180e0:	011b      	lsls	r3, r3, #4
 80180e2:	4413      	add	r3, r2
 80180e4:	330c      	adds	r3, #12
 80180e6:	781b      	ldrb	r3, [r3, #0]
 80180e8:	4a32      	ldr	r2, [pc, #200]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x470>)
 80180ea:	015b      	lsls	r3, r3, #5
 80180ec:	4413      	add	r3, r2
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d020      	beq.n	8018136 <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80180f4:	4a30      	ldr	r2, [pc, #192]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x474>)
 80180f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180f8:	011b      	lsls	r3, r3, #4
 80180fa:	4413      	add	r3, r2
 80180fc:	330c      	adds	r3, #12
 80180fe:	781b      	ldrb	r3, [r3, #0]
 8018100:	4a2c      	ldr	r2, [pc, #176]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x470>)
 8018102:	015b      	lsls	r3, r3, #5
 8018104:	4413      	add	r3, r2
 8018106:	681c      	ldr	r4, [r3, #0]
 8018108:	492c      	ldr	r1, [pc, #176]	; (80181bc <_Z18trained_model_initPFPvjjE+0x478>)
 801810a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801810c:	4613      	mov	r3, r2
 801810e:	00db      	lsls	r3, r3, #3
 8018110:	4413      	add	r3, r2
 8018112:	009b      	lsls	r3, r3, #2
 8018114:	440b      	add	r3, r1
 8018116:	3314      	adds	r3, #20
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	2200      	movs	r2, #0
 801811c:	4619      	mov	r1, r3
 801811e:	4828      	ldr	r0, [pc, #160]	; (80181c0 <_Z18trained_model_initPFPvjjE+0x47c>)
 8018120:	47a0      	blx	r4
 8018122:	4601      	mov	r1, r0
 8018124:	4825      	ldr	r0, [pc, #148]	; (80181bc <_Z18trained_model_initPFPvjjE+0x478>)
 8018126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018128:	4613      	mov	r3, r2
 801812a:	00db      	lsls	r3, r3, #3
 801812c:	4413      	add	r3, r2
 801812e:	009b      	lsls	r3, r3, #2
 8018130:	4403      	add	r3, r0
 8018132:	3310      	adds	r3, #16
 8018134:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 8018136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018138:	3301      	adds	r3, #1
 801813a:	643b      	str	r3, [r7, #64]	; 0x40
 801813c:	e78c      	b.n	8018058 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 801813e:	2300      	movs	r3, #0
 8018140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018144:	2b03      	cmp	r3, #3
 8018146:	d82f      	bhi.n	80181a8 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8018148:	4a1b      	ldr	r2, [pc, #108]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x474>)
 801814a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801814c:	011b      	lsls	r3, r3, #4
 801814e:	4413      	add	r3, r2
 8018150:	330c      	adds	r3, #12
 8018152:	781b      	ldrb	r3, [r3, #0]
 8018154:	4a17      	ldr	r2, [pc, #92]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x470>)
 8018156:	015b      	lsls	r3, r3, #5
 8018158:	4413      	add	r3, r2
 801815a:	3308      	adds	r3, #8
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d01e      	beq.n	80181a0 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 8018162:	4a15      	ldr	r2, [pc, #84]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x474>)
 8018164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018166:	011b      	lsls	r3, r3, #4
 8018168:	4413      	add	r3, r2
 801816a:	330c      	adds	r3, #12
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	4a11      	ldr	r2, [pc, #68]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x470>)
 8018170:	015b      	lsls	r3, r3, #5
 8018172:	4413      	add	r3, r2
 8018174:	3308      	adds	r3, #8
 8018176:	681c      	ldr	r4, [r3, #0]
 8018178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801817a:	4613      	mov	r3, r2
 801817c:	00db      	lsls	r3, r3, #3
 801817e:	4413      	add	r3, r2
 8018180:	009b      	lsls	r3, r3, #2
 8018182:	4a0e      	ldr	r2, [pc, #56]	; (80181bc <_Z18trained_model_initPFPvjjE+0x478>)
 8018184:	4413      	add	r3, r2
 8018186:	4619      	mov	r1, r3
 8018188:	480d      	ldr	r0, [pc, #52]	; (80181c0 <_Z18trained_model_initPFPvjjE+0x47c>)
 801818a:	47a0      	blx	r4
 801818c:	4603      	mov	r3, r0
 801818e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 8018192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018196:	2b00      	cmp	r3, #0
 8018198:	d002      	beq.n	80181a0 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 801819a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801819e:	e004      	b.n	80181aa <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 80181a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181a2:	3301      	adds	r3, #1
 80181a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80181a6:	e7cc      	b.n	8018142 <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 80181a8:	2300      	movs	r3, #0
}
 80181aa:	4618      	mov	r0, r3
 80181ac:	3748      	adds	r7, #72	; 0x48
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bdb0      	pop	{r4, r5, r7, pc}
 80181b2:	bf00      	nop
 80181b4:	20002f60 	.word	0x20002f60
 80181b8:	0801f324 	.word	0x0801f324
 80181bc:	20002fa0 	.word	0x20002fa0
 80181c0:	20002bc4 	.word	0x20002bc4

080181c4 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 80181c4:	b480      	push	{r7}
 80181c6:	b083      	sub	sp, #12
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 80181cc:	4b05      	ldr	r3, [pc, #20]	; (80181e4 <_Z19trained_model_inputi+0x20>)
 80181ce:	689a      	ldr	r2, [r3, #8]
 80181d0:	2300      	movs	r3, #0
 80181d2:	019b      	lsls	r3, r3, #6
 80181d4:	4413      	add	r3, r2
}
 80181d6:	4618      	mov	r0, r3
 80181d8:	370c      	adds	r7, #12
 80181da:	46bd      	mov	sp, r7
 80181dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e0:	4770      	bx	lr
 80181e2:	bf00      	nop
 80181e4:	20002bc4 	.word	0x20002bc4

080181e8 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 80181e8:	b480      	push	{r7}
 80181ea:	b083      	sub	sp, #12
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80181f0:	4b05      	ldr	r3, [pc, #20]	; (8018208 <_Z20trained_model_outputi+0x20>)
 80181f2:	689a      	ldr	r2, [r3, #8]
 80181f4:	230a      	movs	r3, #10
 80181f6:	019b      	lsls	r3, r3, #6
 80181f8:	4413      	add	r3, r2
}
 80181fa:	4618      	mov	r0, r3
 80181fc:	370c      	adds	r7, #12
 80181fe:	46bd      	mov	sp, r7
 8018200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018204:	4770      	bx	lr
 8018206:	bf00      	nop
 8018208:	20002bc4 	.word	0x20002bc4

0801820c <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 801820c:	b590      	push	{r4, r7, lr}
 801820e:	b083      	sub	sp, #12
 8018210:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 8018212:	2300      	movs	r3, #0
 8018214:	607b      	str	r3, [r7, #4]
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	2b03      	cmp	r3, #3
 801821a:	d81f      	bhi.n	801825c <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 801821c:	4a12      	ldr	r2, [pc, #72]	; (8018268 <_Z20trained_model_invokev+0x5c>)
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	011b      	lsls	r3, r3, #4
 8018222:	4413      	add	r3, r2
 8018224:	330c      	adds	r3, #12
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	4a10      	ldr	r2, [pc, #64]	; (801826c <_Z20trained_model_invokev+0x60>)
 801822a:	015b      	lsls	r3, r3, #5
 801822c:	4413      	add	r3, r2
 801822e:	330c      	adds	r3, #12
 8018230:	681c      	ldr	r4, [r3, #0]
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	4613      	mov	r3, r2
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	4413      	add	r3, r2
 801823a:	009b      	lsls	r3, r3, #2
 801823c:	4a0c      	ldr	r2, [pc, #48]	; (8018270 <_Z20trained_model_invokev+0x64>)
 801823e:	4413      	add	r3, r2
 8018240:	4619      	mov	r1, r3
 8018242:	480c      	ldr	r0, [pc, #48]	; (8018274 <_Z20trained_model_invokev+0x68>)
 8018244:	47a0      	blx	r4
 8018246:	4603      	mov	r3, r0
 8018248:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801824a:	78fb      	ldrb	r3, [r7, #3]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d001      	beq.n	8018254 <_Z20trained_model_invokev+0x48>
      return status;
 8018250:	78fb      	ldrb	r3, [r7, #3]
 8018252:	e004      	b.n	801825e <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	3301      	adds	r3, #1
 8018258:	607b      	str	r3, [r7, #4]
 801825a:	e7dc      	b.n	8018216 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801825c:	2300      	movs	r3, #0
}
 801825e:	4618      	mov	r0, r3
 8018260:	370c      	adds	r7, #12
 8018262:	46bd      	mov	sp, r7
 8018264:	bd90      	pop	{r4, r7, pc}
 8018266:	bf00      	nop
 8018268:	0801f324 	.word	0x0801f324
 801826c:	20002f60 	.word	0x20002f60
 8018270:	20002fa0 	.word	0x20002fa0
 8018274:	20002bc4 	.word	0x20002bc4

08018278 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8018278:	b580      	push	{r7, lr}
 801827a:	b084      	sub	sp, #16
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8018280:	4b10      	ldr	r3, [pc, #64]	; (80182c4 <_Z19trained_model_resetPFvPvE+0x4c>)
 8018282:	681a      	ldr	r2, [r3, #0]
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	4610      	mov	r0, r2
 8018288:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 801828a:	4b0f      	ldr	r3, [pc, #60]	; (80182c8 <_Z19trained_model_resetPFvPvE+0x50>)
 801828c:	2200      	movs	r2, #0
 801828e:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8018290:	2300      	movs	r3, #0
 8018292:	60fb      	str	r3, [r7, #12]
 8018294:	4b0d      	ldr	r3, [pc, #52]	; (80182cc <_Z19trained_model_resetPFvPvE+0x54>)
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	68fa      	ldr	r2, [r7, #12]
 801829a:	429a      	cmp	r2, r3
 801829c:	d20a      	bcs.n	80182b4 <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 801829e:	4a0c      	ldr	r2, [pc, #48]	; (80182d0 <_Z19trained_model_resetPFvPvE+0x58>)
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80182a6:	4618      	mov	r0, r3
 80182a8:	f7fa fec4 	bl	8013034 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	3301      	adds	r3, #1
 80182b0:	60fb      	str	r3, [r7, #12]
 80182b2:	e7ef      	b.n	8018294 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 80182b4:	4b05      	ldr	r3, [pc, #20]	; (80182cc <_Z19trained_model_resetPFvPvE+0x54>)
 80182b6:	2200      	movs	r2, #0
 80182b8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80182ba:	2300      	movs	r3, #0
}
 80182bc:	4618      	mov	r0, r3
 80182be:	3710      	adds	r7, #16
 80182c0:	46bd      	mov	sp, r7
 80182c2:	bd80      	pop	{r7, pc}
 80182c4:	20002bb8 	.word	0x20002bb8
 80182c8:	2000307c 	.word	0x2000307c
 80182cc:	20003058 	.word	0x20003058
 80182d0:	20003030 	.word	0x20003030

080182d4 <_Z41__static_initialization_and_destruction_0ii>:
 80182d4:	b480      	push	{r7}
 80182d6:	b083      	sub	sp, #12
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2b01      	cmp	r3, #1
 80182e2:	d11f      	bne.n	8018324 <_Z41__static_initialization_and_destruction_0ii+0x50>
 80182e4:	683b      	ldr	r3, [r7, #0]
 80182e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80182ea:	4293      	cmp	r3, r2
 80182ec:	d11a      	bne.n	8018324 <_Z41__static_initialization_and_destruction_0ii+0x50>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension0, 21, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 80182ee:	4b10      	ldr	r3, [pc, #64]	; (8018330 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	3320      	adds	r3, #32
};const NodeInfo_t nodeData[] = {
 80182f4:	4a0f      	ldr	r2, [pc, #60]	; (8018334 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182f6:	6053      	str	r3, [r2, #4]
 80182f8:	4b0d      	ldr	r3, [pc, #52]	; (8018330 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	4a0d      	ldr	r2, [pc, #52]	; (8018334 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
 8018302:	4b0b      	ldr	r3, [pc, #44]	; (8018330 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	3320      	adds	r3, #32
};const NodeInfo_t nodeData[] = {
 8018308:	4a0a      	ldr	r2, [pc, #40]	; (8018334 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801830a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 801830e:	4b08      	ldr	r3, [pc, #32]	; (8018330 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 8018314:	4a07      	ldr	r2, [pc, #28]	; (8018334 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8018316:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801831a:	4b05      	ldr	r3, [pc, #20]	; (8018330 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	4a05      	ldr	r2, [pc, #20]	; (8018334 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8018320:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8018324:	bf00      	nop
 8018326:	370c      	adds	r7, #12
 8018328:	46bd      	mov	sp, r7
 801832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832e:	4770      	bx	lr
 8018330:	20002bb8 	.word	0x20002bb8
 8018334:	2000275c 	.word	0x2000275c

08018338 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8018338:	b580      	push	{r7, lr}
 801833a:	af00      	add	r7, sp, #0
 801833c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018340:	2001      	movs	r0, #1
 8018342:	f7ff ffc7 	bl	80182d4 <_Z41__static_initialization_and_destruction_0ii>
 8018346:	bd80      	pop	{r7, pc}

08018348 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801834c:	2200      	movs	r2, #0
 801834e:	4912      	ldr	r1, [pc, #72]	; (8018398 <MX_USB_DEVICE_Init+0x50>)
 8018350:	4812      	ldr	r0, [pc, #72]	; (801839c <MX_USB_DEVICE_Init+0x54>)
 8018352:	f7f2 f9c9 	bl	800a6e8 <USBD_Init>
 8018356:	4603      	mov	r3, r0
 8018358:	2b00      	cmp	r3, #0
 801835a:	d001      	beq.n	8018360 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801835c:	f7ec f836 	bl	80043cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018360:	490f      	ldr	r1, [pc, #60]	; (80183a0 <MX_USB_DEVICE_Init+0x58>)
 8018362:	480e      	ldr	r0, [pc, #56]	; (801839c <MX_USB_DEVICE_Init+0x54>)
 8018364:	f7f2 f9f0 	bl	800a748 <USBD_RegisterClass>
 8018368:	4603      	mov	r3, r0
 801836a:	2b00      	cmp	r3, #0
 801836c:	d001      	beq.n	8018372 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801836e:	f7ec f82d 	bl	80043cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018372:	490c      	ldr	r1, [pc, #48]	; (80183a4 <MX_USB_DEVICE_Init+0x5c>)
 8018374:	4809      	ldr	r0, [pc, #36]	; (801839c <MX_USB_DEVICE_Init+0x54>)
 8018376:	f7f2 f8e1 	bl	800a53c <USBD_CDC_RegisterInterface>
 801837a:	4603      	mov	r3, r0
 801837c:	2b00      	cmp	r3, #0
 801837e:	d001      	beq.n	8018384 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018380:	f7ec f824 	bl	80043cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018384:	4805      	ldr	r0, [pc, #20]	; (801839c <MX_USB_DEVICE_Init+0x54>)
 8018386:	f7f2 fa15 	bl	800a7b4 <USBD_Start>
 801838a:	4603      	mov	r3, r0
 801838c:	2b00      	cmp	r3, #0
 801838e:	d001      	beq.n	8018394 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018390:	f7ec f81c 	bl	80043cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018394:	bf00      	nop
 8018396:	bd80      	pop	{r7, pc}
 8018398:	20002878 	.word	0x20002878
 801839c:	20003080 	.word	0x20003080
 80183a0:	200026d0 	.word	0x200026d0
 80183a4:	20002864 	.word	0x20002864

080183a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80183ac:	2200      	movs	r2, #0
 80183ae:	4905      	ldr	r1, [pc, #20]	; (80183c4 <CDC_Init_FS+0x1c>)
 80183b0:	4805      	ldr	r0, [pc, #20]	; (80183c8 <CDC_Init_FS+0x20>)
 80183b2:	f7f2 f8dd 	bl	800a570 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80183b6:	4905      	ldr	r1, [pc, #20]	; (80183cc <CDC_Init_FS+0x24>)
 80183b8:	4803      	ldr	r0, [pc, #12]	; (80183c8 <CDC_Init_FS+0x20>)
 80183ba:	f7f2 f8fb 	bl	800a5b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80183be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	bd80      	pop	{r7, pc}
 80183c4:	20003b5c 	.word	0x20003b5c
 80183c8:	20003080 	.word	0x20003080
 80183cc:	2000335c 	.word	0x2000335c

080183d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80183d0:	b480      	push	{r7}
 80183d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80183d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80183d6:	4618      	mov	r0, r3
 80183d8:	46bd      	mov	sp, r7
 80183da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183de:	4770      	bx	lr

080183e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80183e0:	b480      	push	{r7}
 80183e2:	b083      	sub	sp, #12
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	4603      	mov	r3, r0
 80183e8:	6039      	str	r1, [r7, #0]
 80183ea:	71fb      	strb	r3, [r7, #7]
 80183ec:	4613      	mov	r3, r2
 80183ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80183f0:	79fb      	ldrb	r3, [r7, #7]
 80183f2:	2b23      	cmp	r3, #35	; 0x23
 80183f4:	d84a      	bhi.n	801848c <CDC_Control_FS+0xac>
 80183f6:	a201      	add	r2, pc, #4	; (adr r2, 80183fc <CDC_Control_FS+0x1c>)
 80183f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183fc:	0801848d 	.word	0x0801848d
 8018400:	0801848d 	.word	0x0801848d
 8018404:	0801848d 	.word	0x0801848d
 8018408:	0801848d 	.word	0x0801848d
 801840c:	0801848d 	.word	0x0801848d
 8018410:	0801848d 	.word	0x0801848d
 8018414:	0801848d 	.word	0x0801848d
 8018418:	0801848d 	.word	0x0801848d
 801841c:	0801848d 	.word	0x0801848d
 8018420:	0801848d 	.word	0x0801848d
 8018424:	0801848d 	.word	0x0801848d
 8018428:	0801848d 	.word	0x0801848d
 801842c:	0801848d 	.word	0x0801848d
 8018430:	0801848d 	.word	0x0801848d
 8018434:	0801848d 	.word	0x0801848d
 8018438:	0801848d 	.word	0x0801848d
 801843c:	0801848d 	.word	0x0801848d
 8018440:	0801848d 	.word	0x0801848d
 8018444:	0801848d 	.word	0x0801848d
 8018448:	0801848d 	.word	0x0801848d
 801844c:	0801848d 	.word	0x0801848d
 8018450:	0801848d 	.word	0x0801848d
 8018454:	0801848d 	.word	0x0801848d
 8018458:	0801848d 	.word	0x0801848d
 801845c:	0801848d 	.word	0x0801848d
 8018460:	0801848d 	.word	0x0801848d
 8018464:	0801848d 	.word	0x0801848d
 8018468:	0801848d 	.word	0x0801848d
 801846c:	0801848d 	.word	0x0801848d
 8018470:	0801848d 	.word	0x0801848d
 8018474:	0801848d 	.word	0x0801848d
 8018478:	0801848d 	.word	0x0801848d
 801847c:	0801848d 	.word	0x0801848d
 8018480:	0801848d 	.word	0x0801848d
 8018484:	0801848d 	.word	0x0801848d
 8018488:	0801848d 	.word	0x0801848d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801848c:	bf00      	nop
  }

  return (USBD_OK);
 801848e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018490:	4618      	mov	r0, r3
 8018492:	370c      	adds	r7, #12
 8018494:	46bd      	mov	sp, r7
 8018496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849a:	4770      	bx	lr

0801849c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b082      	sub	sp, #8
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
 80184a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80184a6:	6879      	ldr	r1, [r7, #4]
 80184a8:	4805      	ldr	r0, [pc, #20]	; (80184c0 <CDC_Receive_FS+0x24>)
 80184aa:	f7f2 f883 	bl	800a5b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80184ae:	4804      	ldr	r0, [pc, #16]	; (80184c0 <CDC_Receive_FS+0x24>)
 80184b0:	f7f2 f8e4 	bl	800a67c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80184b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80184b6:	4618      	mov	r0, r3
 80184b8:	3708      	adds	r7, #8
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
 80184be:	bf00      	nop
 80184c0:	20003080 	.word	0x20003080

080184c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b084      	sub	sp, #16
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
 80184cc:	460b      	mov	r3, r1
 80184ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80184d0:	2300      	movs	r3, #0
 80184d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80184d4:	4b0d      	ldr	r3, [pc, #52]	; (801850c <CDC_Transmit_FS+0x48>)
 80184d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80184da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d001      	beq.n	80184ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80184e6:	2301      	movs	r3, #1
 80184e8:	e00b      	b.n	8018502 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80184ea:	887b      	ldrh	r3, [r7, #2]
 80184ec:	461a      	mov	r2, r3
 80184ee:	6879      	ldr	r1, [r7, #4]
 80184f0:	4806      	ldr	r0, [pc, #24]	; (801850c <CDC_Transmit_FS+0x48>)
 80184f2:	f7f2 f83d 	bl	800a570 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80184f6:	4805      	ldr	r0, [pc, #20]	; (801850c <CDC_Transmit_FS+0x48>)
 80184f8:	f7f2 f87a 	bl	800a5f0 <USBD_CDC_TransmitPacket>
 80184fc:	4603      	mov	r3, r0
 80184fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018500:	7bfb      	ldrb	r3, [r7, #15]
}
 8018502:	4618      	mov	r0, r3
 8018504:	3710      	adds	r7, #16
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}
 801850a:	bf00      	nop
 801850c:	20003080 	.word	0x20003080

08018510 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018510:	b480      	push	{r7}
 8018512:	b087      	sub	sp, #28
 8018514:	af00      	add	r7, sp, #0
 8018516:	60f8      	str	r0, [r7, #12]
 8018518:	60b9      	str	r1, [r7, #8]
 801851a:	4613      	mov	r3, r2
 801851c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801851e:	2300      	movs	r3, #0
 8018520:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018526:	4618      	mov	r0, r3
 8018528:	371c      	adds	r7, #28
 801852a:	46bd      	mov	sp, r7
 801852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018530:	4770      	bx	lr
	...

08018534 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018534:	b480      	push	{r7}
 8018536:	b083      	sub	sp, #12
 8018538:	af00      	add	r7, sp, #0
 801853a:	4603      	mov	r3, r0
 801853c:	6039      	str	r1, [r7, #0]
 801853e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	2212      	movs	r2, #18
 8018544:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018546:	4b03      	ldr	r3, [pc, #12]	; (8018554 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018548:	4618      	mov	r0, r3
 801854a:	370c      	adds	r7, #12
 801854c:	46bd      	mov	sp, r7
 801854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018552:	4770      	bx	lr
 8018554:	20002894 	.word	0x20002894

08018558 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018558:	b480      	push	{r7}
 801855a:	b083      	sub	sp, #12
 801855c:	af00      	add	r7, sp, #0
 801855e:	4603      	mov	r3, r0
 8018560:	6039      	str	r1, [r7, #0]
 8018562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	2204      	movs	r2, #4
 8018568:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801856a:	4b03      	ldr	r3, [pc, #12]	; (8018578 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801856c:	4618      	mov	r0, r3
 801856e:	370c      	adds	r7, #12
 8018570:	46bd      	mov	sp, r7
 8018572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018576:	4770      	bx	lr
 8018578:	200028a8 	.word	0x200028a8

0801857c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b082      	sub	sp, #8
 8018580:	af00      	add	r7, sp, #0
 8018582:	4603      	mov	r3, r0
 8018584:	6039      	str	r1, [r7, #0]
 8018586:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018588:	79fb      	ldrb	r3, [r7, #7]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d105      	bne.n	801859a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801858e:	683a      	ldr	r2, [r7, #0]
 8018590:	4907      	ldr	r1, [pc, #28]	; (80185b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8018592:	4808      	ldr	r0, [pc, #32]	; (80185b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8018594:	f7f3 faba 	bl	800bb0c <USBD_GetString>
 8018598:	e004      	b.n	80185a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801859a:	683a      	ldr	r2, [r7, #0]
 801859c:	4904      	ldr	r1, [pc, #16]	; (80185b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801859e:	4805      	ldr	r0, [pc, #20]	; (80185b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80185a0:	f7f3 fab4 	bl	800bb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80185a4:	4b02      	ldr	r3, [pc, #8]	; (80185b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80185a6:	4618      	mov	r0, r3
 80185a8:	3708      	adds	r7, #8
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	2000435c 	.word	0x2000435c
 80185b4:	0801ed8c 	.word	0x0801ed8c

080185b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b082      	sub	sp, #8
 80185bc:	af00      	add	r7, sp, #0
 80185be:	4603      	mov	r3, r0
 80185c0:	6039      	str	r1, [r7, #0]
 80185c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80185c4:	683a      	ldr	r2, [r7, #0]
 80185c6:	4904      	ldr	r1, [pc, #16]	; (80185d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80185c8:	4804      	ldr	r0, [pc, #16]	; (80185dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80185ca:	f7f3 fa9f 	bl	800bb0c <USBD_GetString>
  return USBD_StrDesc;
 80185ce:	4b02      	ldr	r3, [pc, #8]	; (80185d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80185d0:	4618      	mov	r0, r3
 80185d2:	3708      	adds	r7, #8
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}
 80185d8:	2000435c 	.word	0x2000435c
 80185dc:	0801eda4 	.word	0x0801eda4

080185e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b082      	sub	sp, #8
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	4603      	mov	r3, r0
 80185e8:	6039      	str	r1, [r7, #0]
 80185ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80185ec:	683b      	ldr	r3, [r7, #0]
 80185ee:	221a      	movs	r2, #26
 80185f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80185f2:	f000 f843 	bl	801867c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80185f6:	4b02      	ldr	r3, [pc, #8]	; (8018600 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	3708      	adds	r7, #8
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd80      	pop	{r7, pc}
 8018600:	200028ac 	.word	0x200028ac

08018604 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b082      	sub	sp, #8
 8018608:	af00      	add	r7, sp, #0
 801860a:	4603      	mov	r3, r0
 801860c:	6039      	str	r1, [r7, #0]
 801860e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018610:	79fb      	ldrb	r3, [r7, #7]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d105      	bne.n	8018622 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018616:	683a      	ldr	r2, [r7, #0]
 8018618:	4907      	ldr	r1, [pc, #28]	; (8018638 <USBD_FS_ConfigStrDescriptor+0x34>)
 801861a:	4808      	ldr	r0, [pc, #32]	; (801863c <USBD_FS_ConfigStrDescriptor+0x38>)
 801861c:	f7f3 fa76 	bl	800bb0c <USBD_GetString>
 8018620:	e004      	b.n	801862c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018622:	683a      	ldr	r2, [r7, #0]
 8018624:	4904      	ldr	r1, [pc, #16]	; (8018638 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018626:	4805      	ldr	r0, [pc, #20]	; (801863c <USBD_FS_ConfigStrDescriptor+0x38>)
 8018628:	f7f3 fa70 	bl	800bb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801862c:	4b02      	ldr	r3, [pc, #8]	; (8018638 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801862e:	4618      	mov	r0, r3
 8018630:	3708      	adds	r7, #8
 8018632:	46bd      	mov	sp, r7
 8018634:	bd80      	pop	{r7, pc}
 8018636:	bf00      	nop
 8018638:	2000435c 	.word	0x2000435c
 801863c:	0801edb8 	.word	0x0801edb8

08018640 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b082      	sub	sp, #8
 8018644:	af00      	add	r7, sp, #0
 8018646:	4603      	mov	r3, r0
 8018648:	6039      	str	r1, [r7, #0]
 801864a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801864c:	79fb      	ldrb	r3, [r7, #7]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d105      	bne.n	801865e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018652:	683a      	ldr	r2, [r7, #0]
 8018654:	4907      	ldr	r1, [pc, #28]	; (8018674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018656:	4808      	ldr	r0, [pc, #32]	; (8018678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018658:	f7f3 fa58 	bl	800bb0c <USBD_GetString>
 801865c:	e004      	b.n	8018668 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801865e:	683a      	ldr	r2, [r7, #0]
 8018660:	4904      	ldr	r1, [pc, #16]	; (8018674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018662:	4805      	ldr	r0, [pc, #20]	; (8018678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018664:	f7f3 fa52 	bl	800bb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018668:	4b02      	ldr	r3, [pc, #8]	; (8018674 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801866a:	4618      	mov	r0, r3
 801866c:	3708      	adds	r7, #8
 801866e:	46bd      	mov	sp, r7
 8018670:	bd80      	pop	{r7, pc}
 8018672:	bf00      	nop
 8018674:	2000435c 	.word	0x2000435c
 8018678:	0801edc4 	.word	0x0801edc4

0801867c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018682:	4b0f      	ldr	r3, [pc, #60]	; (80186c0 <Get_SerialNum+0x44>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018688:	4b0e      	ldr	r3, [pc, #56]	; (80186c4 <Get_SerialNum+0x48>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801868e:	4b0e      	ldr	r3, [pc, #56]	; (80186c8 <Get_SerialNum+0x4c>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018694:	68fa      	ldr	r2, [r7, #12]
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	4413      	add	r3, r2
 801869a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d009      	beq.n	80186b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80186a2:	2208      	movs	r2, #8
 80186a4:	4909      	ldr	r1, [pc, #36]	; (80186cc <Get_SerialNum+0x50>)
 80186a6:	68f8      	ldr	r0, [r7, #12]
 80186a8:	f000 f814 	bl	80186d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80186ac:	2204      	movs	r2, #4
 80186ae:	4908      	ldr	r1, [pc, #32]	; (80186d0 <Get_SerialNum+0x54>)
 80186b0:	68b8      	ldr	r0, [r7, #8]
 80186b2:	f000 f80f 	bl	80186d4 <IntToUnicode>
  }
}
 80186b6:	bf00      	nop
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	1fff7a10 	.word	0x1fff7a10
 80186c4:	1fff7a14 	.word	0x1fff7a14
 80186c8:	1fff7a18 	.word	0x1fff7a18
 80186cc:	200028ae 	.word	0x200028ae
 80186d0:	200028be 	.word	0x200028be

080186d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80186d4:	b480      	push	{r7}
 80186d6:	b087      	sub	sp, #28
 80186d8:	af00      	add	r7, sp, #0
 80186da:	60f8      	str	r0, [r7, #12]
 80186dc:	60b9      	str	r1, [r7, #8]
 80186de:	4613      	mov	r3, r2
 80186e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80186e2:	2300      	movs	r3, #0
 80186e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80186e6:	2300      	movs	r3, #0
 80186e8:	75fb      	strb	r3, [r7, #23]
 80186ea:	e027      	b.n	801873c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	0f1b      	lsrs	r3, r3, #28
 80186f0:	2b09      	cmp	r3, #9
 80186f2:	d80b      	bhi.n	801870c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	0f1b      	lsrs	r3, r3, #28
 80186f8:	b2da      	uxtb	r2, r3
 80186fa:	7dfb      	ldrb	r3, [r7, #23]
 80186fc:	005b      	lsls	r3, r3, #1
 80186fe:	4619      	mov	r1, r3
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	440b      	add	r3, r1
 8018704:	3230      	adds	r2, #48	; 0x30
 8018706:	b2d2      	uxtb	r2, r2
 8018708:	701a      	strb	r2, [r3, #0]
 801870a:	e00a      	b.n	8018722 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	0f1b      	lsrs	r3, r3, #28
 8018710:	b2da      	uxtb	r2, r3
 8018712:	7dfb      	ldrb	r3, [r7, #23]
 8018714:	005b      	lsls	r3, r3, #1
 8018716:	4619      	mov	r1, r3
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	440b      	add	r3, r1
 801871c:	3237      	adds	r2, #55	; 0x37
 801871e:	b2d2      	uxtb	r2, r2
 8018720:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	011b      	lsls	r3, r3, #4
 8018726:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018728:	7dfb      	ldrb	r3, [r7, #23]
 801872a:	005b      	lsls	r3, r3, #1
 801872c:	3301      	adds	r3, #1
 801872e:	68ba      	ldr	r2, [r7, #8]
 8018730:	4413      	add	r3, r2
 8018732:	2200      	movs	r2, #0
 8018734:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018736:	7dfb      	ldrb	r3, [r7, #23]
 8018738:	3301      	adds	r3, #1
 801873a:	75fb      	strb	r3, [r7, #23]
 801873c:	7dfa      	ldrb	r2, [r7, #23]
 801873e:	79fb      	ldrb	r3, [r7, #7]
 8018740:	429a      	cmp	r2, r3
 8018742:	d3d3      	bcc.n	80186ec <IntToUnicode+0x18>
  }
}
 8018744:	bf00      	nop
 8018746:	bf00      	nop
 8018748:	371c      	adds	r7, #28
 801874a:	46bd      	mov	sp, r7
 801874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018750:	4770      	bx	lr
	...

08018754 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b08a      	sub	sp, #40	; 0x28
 8018758:	af00      	add	r7, sp, #0
 801875a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801875c:	f107 0314 	add.w	r3, r7, #20
 8018760:	2200      	movs	r2, #0
 8018762:	601a      	str	r2, [r3, #0]
 8018764:	605a      	str	r2, [r3, #4]
 8018766:	609a      	str	r2, [r3, #8]
 8018768:	60da      	str	r2, [r3, #12]
 801876a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018774:	d13a      	bne.n	80187ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018776:	2300      	movs	r3, #0
 8018778:	613b      	str	r3, [r7, #16]
 801877a:	4b1e      	ldr	r3, [pc, #120]	; (80187f4 <HAL_PCD_MspInit+0xa0>)
 801877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801877e:	4a1d      	ldr	r2, [pc, #116]	; (80187f4 <HAL_PCD_MspInit+0xa0>)
 8018780:	f043 0301 	orr.w	r3, r3, #1
 8018784:	6313      	str	r3, [r2, #48]	; 0x30
 8018786:	4b1b      	ldr	r3, [pc, #108]	; (80187f4 <HAL_PCD_MspInit+0xa0>)
 8018788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801878a:	f003 0301 	and.w	r3, r3, #1
 801878e:	613b      	str	r3, [r7, #16]
 8018790:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018792:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018798:	2302      	movs	r3, #2
 801879a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801879c:	2300      	movs	r3, #0
 801879e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80187a0:	2303      	movs	r3, #3
 80187a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80187a4:	230a      	movs	r3, #10
 80187a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187a8:	f107 0314 	add.w	r3, r7, #20
 80187ac:	4619      	mov	r1, r3
 80187ae:	4812      	ldr	r0, [pc, #72]	; (80187f8 <HAL_PCD_MspInit+0xa4>)
 80187b0:	f7ec fffa 	bl	80057a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80187b4:	4b0f      	ldr	r3, [pc, #60]	; (80187f4 <HAL_PCD_MspInit+0xa0>)
 80187b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187b8:	4a0e      	ldr	r2, [pc, #56]	; (80187f4 <HAL_PCD_MspInit+0xa0>)
 80187ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187be:	6353      	str	r3, [r2, #52]	; 0x34
 80187c0:	2300      	movs	r3, #0
 80187c2:	60fb      	str	r3, [r7, #12]
 80187c4:	4b0b      	ldr	r3, [pc, #44]	; (80187f4 <HAL_PCD_MspInit+0xa0>)
 80187c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187c8:	4a0a      	ldr	r2, [pc, #40]	; (80187f4 <HAL_PCD_MspInit+0xa0>)
 80187ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80187ce:	6453      	str	r3, [r2, #68]	; 0x44
 80187d0:	4b08      	ldr	r3, [pc, #32]	; (80187f4 <HAL_PCD_MspInit+0xa0>)
 80187d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80187d8:	60fb      	str	r3, [r7, #12]
 80187da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80187dc:	2200      	movs	r2, #0
 80187de:	2100      	movs	r1, #0
 80187e0:	2043      	movs	r0, #67	; 0x43
 80187e2:	f7ec ff8e 	bl	8005702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80187e6:	2043      	movs	r0, #67	; 0x43
 80187e8:	f7ec ffa7 	bl	800573a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80187ec:	bf00      	nop
 80187ee:	3728      	adds	r7, #40	; 0x28
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	40023800 	.word	0x40023800
 80187f8:	40020000 	.word	0x40020000

080187fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b082      	sub	sp, #8
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018810:	4619      	mov	r1, r3
 8018812:	4610      	mov	r0, r2
 8018814:	f7f2 f81b 	bl	800a84e <USBD_LL_SetupStage>
}
 8018818:	bf00      	nop
 801881a:	3708      	adds	r7, #8
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}

08018820 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b082      	sub	sp, #8
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
 8018828:	460b      	mov	r3, r1
 801882a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018832:	78fa      	ldrb	r2, [r7, #3]
 8018834:	6879      	ldr	r1, [r7, #4]
 8018836:	4613      	mov	r3, r2
 8018838:	00db      	lsls	r3, r3, #3
 801883a:	4413      	add	r3, r2
 801883c:	009b      	lsls	r3, r3, #2
 801883e:	440b      	add	r3, r1
 8018840:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018844:	681a      	ldr	r2, [r3, #0]
 8018846:	78fb      	ldrb	r3, [r7, #3]
 8018848:	4619      	mov	r1, r3
 801884a:	f7f2 f855 	bl	800a8f8 <USBD_LL_DataOutStage>
}
 801884e:	bf00      	nop
 8018850:	3708      	adds	r7, #8
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}

08018856 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018856:	b580      	push	{r7, lr}
 8018858:	b082      	sub	sp, #8
 801885a:	af00      	add	r7, sp, #0
 801885c:	6078      	str	r0, [r7, #4]
 801885e:	460b      	mov	r3, r1
 8018860:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018868:	78fa      	ldrb	r2, [r7, #3]
 801886a:	6879      	ldr	r1, [r7, #4]
 801886c:	4613      	mov	r3, r2
 801886e:	00db      	lsls	r3, r3, #3
 8018870:	4413      	add	r3, r2
 8018872:	009b      	lsls	r3, r3, #2
 8018874:	440b      	add	r3, r1
 8018876:	334c      	adds	r3, #76	; 0x4c
 8018878:	681a      	ldr	r2, [r3, #0]
 801887a:	78fb      	ldrb	r3, [r7, #3]
 801887c:	4619      	mov	r1, r3
 801887e:	f7f2 f8ee 	bl	800aa5e <USBD_LL_DataInStage>
}
 8018882:	bf00      	nop
 8018884:	3708      	adds	r7, #8
 8018886:	46bd      	mov	sp, r7
 8018888:	bd80      	pop	{r7, pc}

0801888a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801888a:	b580      	push	{r7, lr}
 801888c:	b082      	sub	sp, #8
 801888e:	af00      	add	r7, sp, #0
 8018890:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018898:	4618      	mov	r0, r3
 801889a:	f7f2 fa22 	bl	800ace2 <USBD_LL_SOF>
}
 801889e:	bf00      	nop
 80188a0:	3708      	adds	r7, #8
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}

080188a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188a6:	b580      	push	{r7, lr}
 80188a8:	b084      	sub	sp, #16
 80188aa:	af00      	add	r7, sp, #0
 80188ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80188ae:	2301      	movs	r3, #1
 80188b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	68db      	ldr	r3, [r3, #12]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d102      	bne.n	80188c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80188ba:	2300      	movs	r3, #0
 80188bc:	73fb      	strb	r3, [r7, #15]
 80188be:	e008      	b.n	80188d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	2b02      	cmp	r3, #2
 80188c6:	d102      	bne.n	80188ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80188c8:	2301      	movs	r3, #1
 80188ca:	73fb      	strb	r3, [r7, #15]
 80188cc:	e001      	b.n	80188d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80188ce:	f7eb fd7d 	bl	80043cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188d8:	7bfa      	ldrb	r2, [r7, #15]
 80188da:	4611      	mov	r1, r2
 80188dc:	4618      	mov	r0, r3
 80188de:	f7f2 f9c2 	bl	800ac66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188e8:	4618      	mov	r0, r3
 80188ea:	f7f2 f96a 	bl	800abc2 <USBD_LL_Reset>
}
 80188ee:	bf00      	nop
 80188f0:	3710      	adds	r7, #16
 80188f2:	46bd      	mov	sp, r7
 80188f4:	bd80      	pop	{r7, pc}
	...

080188f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018906:	4618      	mov	r0, r3
 8018908:	f7f2 f9bd 	bl	800ac86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	687a      	ldr	r2, [r7, #4]
 8018918:	6812      	ldr	r2, [r2, #0]
 801891a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801891e:	f043 0301 	orr.w	r3, r3, #1
 8018922:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	6a1b      	ldr	r3, [r3, #32]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d005      	beq.n	8018938 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801892c:	4b04      	ldr	r3, [pc, #16]	; (8018940 <HAL_PCD_SuspendCallback+0x48>)
 801892e:	691b      	ldr	r3, [r3, #16]
 8018930:	4a03      	ldr	r2, [pc, #12]	; (8018940 <HAL_PCD_SuspendCallback+0x48>)
 8018932:	f043 0306 	orr.w	r3, r3, #6
 8018936:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018938:	bf00      	nop
 801893a:	3708      	adds	r7, #8
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}
 8018940:	e000ed00 	.word	0xe000ed00

08018944 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b082      	sub	sp, #8
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018952:	4618      	mov	r0, r3
 8018954:	f7f2 f9ad 	bl	800acb2 <USBD_LL_Resume>
}
 8018958:	bf00      	nop
 801895a:	3708      	adds	r7, #8
 801895c:	46bd      	mov	sp, r7
 801895e:	bd80      	pop	{r7, pc}

08018960 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018960:	b580      	push	{r7, lr}
 8018962:	b082      	sub	sp, #8
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
 8018968:	460b      	mov	r3, r1
 801896a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018972:	78fa      	ldrb	r2, [r7, #3]
 8018974:	4611      	mov	r1, r2
 8018976:	4618      	mov	r0, r3
 8018978:	f7f2 fa05 	bl	800ad86 <USBD_LL_IsoOUTIncomplete>
}
 801897c:	bf00      	nop
 801897e:	3708      	adds	r7, #8
 8018980:	46bd      	mov	sp, r7
 8018982:	bd80      	pop	{r7, pc}

08018984 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
 801898c:	460b      	mov	r3, r1
 801898e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018996:	78fa      	ldrb	r2, [r7, #3]
 8018998:	4611      	mov	r1, r2
 801899a:	4618      	mov	r0, r3
 801899c:	f7f2 f9c1 	bl	800ad22 <USBD_LL_IsoINIncomplete>
}
 80189a0:	bf00      	nop
 80189a2:	3708      	adds	r7, #8
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7f2 fa17 	bl	800adea <USBD_LL_DevConnected>
}
 80189bc:	bf00      	nop
 80189be:	3708      	adds	r7, #8
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}

080189c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b082      	sub	sp, #8
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7f2 fa14 	bl	800ae00 <USBD_LL_DevDisconnected>
}
 80189d8:	bf00      	nop
 80189da:	3708      	adds	r7, #8
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}

080189e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b082      	sub	sp, #8
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	781b      	ldrb	r3, [r3, #0]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d13c      	bne.n	8018a6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80189f0:	4a20      	ldr	r2, [pc, #128]	; (8018a74 <USBD_LL_Init+0x94>)
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	4a1e      	ldr	r2, [pc, #120]	; (8018a74 <USBD_LL_Init+0x94>)
 80189fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018a00:	4b1c      	ldr	r3, [pc, #112]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018a06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018a08:	4b1a      	ldr	r3, [pc, #104]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a0a:	2204      	movs	r2, #4
 8018a0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018a0e:	4b19      	ldr	r3, [pc, #100]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a10:	2202      	movs	r2, #2
 8018a12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018a14:	4b17      	ldr	r3, [pc, #92]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a16:	2200      	movs	r2, #0
 8018a18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018a1a:	4b16      	ldr	r3, [pc, #88]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a1c:	2202      	movs	r2, #2
 8018a1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018a20:	4b14      	ldr	r3, [pc, #80]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a22:	2200      	movs	r2, #0
 8018a24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018a26:	4b13      	ldr	r3, [pc, #76]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a28:	2200      	movs	r2, #0
 8018a2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018a2c:	4b11      	ldr	r3, [pc, #68]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a2e:	2200      	movs	r2, #0
 8018a30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018a32:	4b10      	ldr	r3, [pc, #64]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a34:	2200      	movs	r2, #0
 8018a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018a38:	4b0e      	ldr	r3, [pc, #56]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018a3e:	480d      	ldr	r0, [pc, #52]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a40:	f7ed f898 	bl	8005b74 <HAL_PCD_Init>
 8018a44:	4603      	mov	r3, r0
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d001      	beq.n	8018a4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018a4a:	f7eb fcbf 	bl	80043cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018a4e:	2180      	movs	r1, #128	; 0x80
 8018a50:	4808      	ldr	r0, [pc, #32]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a52:	f7ee faf0 	bl	8007036 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018a56:	2240      	movs	r2, #64	; 0x40
 8018a58:	2100      	movs	r1, #0
 8018a5a:	4806      	ldr	r0, [pc, #24]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a5c:	f7ee faa4 	bl	8006fa8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018a60:	2280      	movs	r2, #128	; 0x80
 8018a62:	2101      	movs	r1, #1
 8018a64:	4803      	ldr	r0, [pc, #12]	; (8018a74 <USBD_LL_Init+0x94>)
 8018a66:	f7ee fa9f 	bl	8006fa8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018a6a:	2300      	movs	r3, #0
}
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	3708      	adds	r7, #8
 8018a70:	46bd      	mov	sp, r7
 8018a72:	bd80      	pop	{r7, pc}
 8018a74:	2000455c 	.word	0x2000455c

08018a78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b084      	sub	sp, #16
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a80:	2300      	movs	r3, #0
 8018a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a84:	2300      	movs	r3, #0
 8018a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7ed f98d 	bl	8005dae <HAL_PCD_Start>
 8018a94:	4603      	mov	r3, r0
 8018a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a98:	7bfb      	ldrb	r3, [r7, #15]
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f000 f942 	bl	8018d24 <USBD_Get_USB_Status>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	3710      	adds	r7, #16
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}

08018aae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018aae:	b580      	push	{r7, lr}
 8018ab0:	b084      	sub	sp, #16
 8018ab2:	af00      	add	r7, sp, #0
 8018ab4:	6078      	str	r0, [r7, #4]
 8018ab6:	4608      	mov	r0, r1
 8018ab8:	4611      	mov	r1, r2
 8018aba:	461a      	mov	r2, r3
 8018abc:	4603      	mov	r3, r0
 8018abe:	70fb      	strb	r3, [r7, #3]
 8018ac0:	460b      	mov	r3, r1
 8018ac2:	70bb      	strb	r3, [r7, #2]
 8018ac4:	4613      	mov	r3, r2
 8018ac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ac8:	2300      	movs	r3, #0
 8018aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018acc:	2300      	movs	r3, #0
 8018ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018ad6:	78bb      	ldrb	r3, [r7, #2]
 8018ad8:	883a      	ldrh	r2, [r7, #0]
 8018ada:	78f9      	ldrb	r1, [r7, #3]
 8018adc:	f7ed fe5e 	bl	800679c <HAL_PCD_EP_Open>
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ae4:	7bfb      	ldrb	r3, [r7, #15]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f000 f91c 	bl	8018d24 <USBD_Get_USB_Status>
 8018aec:	4603      	mov	r3, r0
 8018aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	3710      	adds	r7, #16
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}

08018afa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018afa:	b580      	push	{r7, lr}
 8018afc:	b084      	sub	sp, #16
 8018afe:	af00      	add	r7, sp, #0
 8018b00:	6078      	str	r0, [r7, #4]
 8018b02:	460b      	mov	r3, r1
 8018b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b06:	2300      	movs	r3, #0
 8018b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b14:	78fa      	ldrb	r2, [r7, #3]
 8018b16:	4611      	mov	r1, r2
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7ed fea7 	bl	800686c <HAL_PCD_EP_Close>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b22:	7bfb      	ldrb	r3, [r7, #15]
 8018b24:	4618      	mov	r0, r3
 8018b26:	f000 f8fd 	bl	8018d24 <USBD_Get_USB_Status>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b30:	4618      	mov	r0, r3
 8018b32:	3710      	adds	r7, #16
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bd80      	pop	{r7, pc}

08018b38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b084      	sub	sp, #16
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
 8018b40:	460b      	mov	r3, r1
 8018b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b44:	2300      	movs	r3, #0
 8018b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b52:	78fa      	ldrb	r2, [r7, #3]
 8018b54:	4611      	mov	r1, r2
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7ed ff7f 	bl	8006a5a <HAL_PCD_EP_SetStall>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b60:	7bfb      	ldrb	r3, [r7, #15]
 8018b62:	4618      	mov	r0, r3
 8018b64:	f000 f8de 	bl	8018d24 <USBD_Get_USB_Status>
 8018b68:	4603      	mov	r3, r0
 8018b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b6e:	4618      	mov	r0, r3
 8018b70:	3710      	adds	r7, #16
 8018b72:	46bd      	mov	sp, r7
 8018b74:	bd80      	pop	{r7, pc}

08018b76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b76:	b580      	push	{r7, lr}
 8018b78:	b084      	sub	sp, #16
 8018b7a:	af00      	add	r7, sp, #0
 8018b7c:	6078      	str	r0, [r7, #4]
 8018b7e:	460b      	mov	r3, r1
 8018b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b82:	2300      	movs	r3, #0
 8018b84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b86:	2300      	movs	r3, #0
 8018b88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b90:	78fa      	ldrb	r2, [r7, #3]
 8018b92:	4611      	mov	r1, r2
 8018b94:	4618      	mov	r0, r3
 8018b96:	f7ed ffc4 	bl	8006b22 <HAL_PCD_EP_ClrStall>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b9e:	7bfb      	ldrb	r3, [r7, #15]
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f000 f8bf 	bl	8018d24 <USBD_Get_USB_Status>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	3710      	adds	r7, #16
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}

08018bb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018bb4:	b480      	push	{r7}
 8018bb6:	b085      	sub	sp, #20
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
 8018bbc:	460b      	mov	r3, r1
 8018bbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018bc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	da0b      	bge.n	8018be8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018bd0:	78fb      	ldrb	r3, [r7, #3]
 8018bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018bd6:	68f9      	ldr	r1, [r7, #12]
 8018bd8:	4613      	mov	r3, r2
 8018bda:	00db      	lsls	r3, r3, #3
 8018bdc:	4413      	add	r3, r2
 8018bde:	009b      	lsls	r3, r3, #2
 8018be0:	440b      	add	r3, r1
 8018be2:	333e      	adds	r3, #62	; 0x3e
 8018be4:	781b      	ldrb	r3, [r3, #0]
 8018be6:	e00b      	b.n	8018c00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018be8:	78fb      	ldrb	r3, [r7, #3]
 8018bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018bee:	68f9      	ldr	r1, [r7, #12]
 8018bf0:	4613      	mov	r3, r2
 8018bf2:	00db      	lsls	r3, r3, #3
 8018bf4:	4413      	add	r3, r2
 8018bf6:	009b      	lsls	r3, r3, #2
 8018bf8:	440b      	add	r3, r1
 8018bfa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018bfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018c00:	4618      	mov	r0, r3
 8018c02:	3714      	adds	r7, #20
 8018c04:	46bd      	mov	sp, r7
 8018c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0a:	4770      	bx	lr

08018c0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b084      	sub	sp, #16
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
 8018c14:	460b      	mov	r3, r1
 8018c16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c18:	2300      	movs	r3, #0
 8018c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018c26:	78fa      	ldrb	r2, [r7, #3]
 8018c28:	4611      	mov	r1, r2
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f7ed fd91 	bl	8006752 <HAL_PCD_SetAddress>
 8018c30:	4603      	mov	r3, r0
 8018c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c34:	7bfb      	ldrb	r3, [r7, #15]
 8018c36:	4618      	mov	r0, r3
 8018c38:	f000 f874 	bl	8018d24 <USBD_Get_USB_Status>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c42:	4618      	mov	r0, r3
 8018c44:	3710      	adds	r7, #16
 8018c46:	46bd      	mov	sp, r7
 8018c48:	bd80      	pop	{r7, pc}

08018c4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018c4a:	b580      	push	{r7, lr}
 8018c4c:	b086      	sub	sp, #24
 8018c4e:	af00      	add	r7, sp, #0
 8018c50:	60f8      	str	r0, [r7, #12]
 8018c52:	607a      	str	r2, [r7, #4]
 8018c54:	603b      	str	r3, [r7, #0]
 8018c56:	460b      	mov	r3, r1
 8018c58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018c68:	7af9      	ldrb	r1, [r7, #11]
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	687a      	ldr	r2, [r7, #4]
 8018c6e:	f7ed feaa 	bl	80069c6 <HAL_PCD_EP_Transmit>
 8018c72:	4603      	mov	r3, r0
 8018c74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c76:	7dfb      	ldrb	r3, [r7, #23]
 8018c78:	4618      	mov	r0, r3
 8018c7a:	f000 f853 	bl	8018d24 <USBD_Get_USB_Status>
 8018c7e:	4603      	mov	r3, r0
 8018c80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018c82:	7dbb      	ldrb	r3, [r7, #22]
}
 8018c84:	4618      	mov	r0, r3
 8018c86:	3718      	adds	r7, #24
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	bd80      	pop	{r7, pc}

08018c8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b086      	sub	sp, #24
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	60f8      	str	r0, [r7, #12]
 8018c94:	607a      	str	r2, [r7, #4]
 8018c96:	603b      	str	r3, [r7, #0]
 8018c98:	460b      	mov	r3, r1
 8018c9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018caa:	7af9      	ldrb	r1, [r7, #11]
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	687a      	ldr	r2, [r7, #4]
 8018cb0:	f7ed fe26 	bl	8006900 <HAL_PCD_EP_Receive>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018cb8:	7dfb      	ldrb	r3, [r7, #23]
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f000 f832 	bl	8018d24 <USBD_Get_USB_Status>
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018cc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	3718      	adds	r7, #24
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}

08018cce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018cce:	b580      	push	{r7, lr}
 8018cd0:	b082      	sub	sp, #8
 8018cd2:	af00      	add	r7, sp, #0
 8018cd4:	6078      	str	r0, [r7, #4]
 8018cd6:	460b      	mov	r3, r1
 8018cd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ce0:	78fa      	ldrb	r2, [r7, #3]
 8018ce2:	4611      	mov	r1, r2
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7ed fe56 	bl	8006996 <HAL_PCD_EP_GetRxCount>
 8018cea:	4603      	mov	r3, r0
}
 8018cec:	4618      	mov	r0, r3
 8018cee:	3708      	adds	r7, #8
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bd80      	pop	{r7, pc}

08018cf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018cf4:	b480      	push	{r7}
 8018cf6:	b083      	sub	sp, #12
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018cfc:	4b03      	ldr	r3, [pc, #12]	; (8018d0c <USBD_static_malloc+0x18>)
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	370c      	adds	r7, #12
 8018d02:	46bd      	mov	sp, r7
 8018d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d08:	4770      	bx	lr
 8018d0a:	bf00      	nop
 8018d0c:	20004a68 	.word	0x20004a68

08018d10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018d10:	b480      	push	{r7}
 8018d12:	b083      	sub	sp, #12
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]

}
 8018d18:	bf00      	nop
 8018d1a:	370c      	adds	r7, #12
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d22:	4770      	bx	lr

08018d24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018d24:	b480      	push	{r7}
 8018d26:	b085      	sub	sp, #20
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d2e:	2300      	movs	r3, #0
 8018d30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018d32:	79fb      	ldrb	r3, [r7, #7]
 8018d34:	2b03      	cmp	r3, #3
 8018d36:	d817      	bhi.n	8018d68 <USBD_Get_USB_Status+0x44>
 8018d38:	a201      	add	r2, pc, #4	; (adr r2, 8018d40 <USBD_Get_USB_Status+0x1c>)
 8018d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d3e:	bf00      	nop
 8018d40:	08018d51 	.word	0x08018d51
 8018d44:	08018d57 	.word	0x08018d57
 8018d48:	08018d5d 	.word	0x08018d5d
 8018d4c:	08018d63 	.word	0x08018d63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018d50:	2300      	movs	r3, #0
 8018d52:	73fb      	strb	r3, [r7, #15]
    break;
 8018d54:	e00b      	b.n	8018d6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018d56:	2303      	movs	r3, #3
 8018d58:	73fb      	strb	r3, [r7, #15]
    break;
 8018d5a:	e008      	b.n	8018d6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8018d60:	e005      	b.n	8018d6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018d62:	2303      	movs	r3, #3
 8018d64:	73fb      	strb	r3, [r7, #15]
    break;
 8018d66:	e002      	b.n	8018d6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018d68:	2303      	movs	r3, #3
 8018d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8018d6c:	bf00      	nop
  }
  return usb_status;
 8018d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d70:	4618      	mov	r0, r3
 8018d72:	3714      	adds	r7, #20
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr

08018d7c <_ZdaPv>:
 8018d7c:	f000 b813 	b.w	8018da6 <_ZdlPv>

08018d80 <_Znwj>:
 8018d80:	2801      	cmp	r0, #1
 8018d82:	bf38      	it	cc
 8018d84:	2001      	movcc	r0, #1
 8018d86:	b510      	push	{r4, lr}
 8018d88:	4604      	mov	r4, r0
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	f001 fb94 	bl	801a4b8 <malloc>
 8018d90:	b930      	cbnz	r0, 8018da0 <_Znwj+0x20>
 8018d92:	f000 f80b 	bl	8018dac <_ZSt15get_new_handlerv>
 8018d96:	b908      	cbnz	r0, 8018d9c <_Znwj+0x1c>
 8018d98:	f001 fb20 	bl	801a3dc <abort>
 8018d9c:	4780      	blx	r0
 8018d9e:	e7f4      	b.n	8018d8a <_Znwj+0xa>
 8018da0:	bd10      	pop	{r4, pc}

08018da2 <_Znaj>:
 8018da2:	f7ff bfed 	b.w	8018d80 <_Znwj>

08018da6 <_ZdlPv>:
 8018da6:	f001 bb8f 	b.w	801a4c8 <free>
	...

08018dac <_ZSt15get_new_handlerv>:
 8018dac:	4b02      	ldr	r3, [pc, #8]	; (8018db8 <_ZSt15get_new_handlerv+0xc>)
 8018dae:	6818      	ldr	r0, [r3, #0]
 8018db0:	f3bf 8f5b 	dmb	ish
 8018db4:	4770      	bx	lr
 8018db6:	bf00      	nop
 8018db8:	20004c88 	.word	0x20004c88
 8018dbc:	00000000 	.word	0x00000000

08018dc0 <floor>:
 8018dc0:	ec51 0b10 	vmov	r0, r1, d0
 8018dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018dcc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018dd0:	2e13      	cmp	r6, #19
 8018dd2:	ee10 5a10 	vmov	r5, s0
 8018dd6:	ee10 8a10 	vmov	r8, s0
 8018dda:	460c      	mov	r4, r1
 8018ddc:	dc32      	bgt.n	8018e44 <floor+0x84>
 8018dde:	2e00      	cmp	r6, #0
 8018de0:	da14      	bge.n	8018e0c <floor+0x4c>
 8018de2:	a333      	add	r3, pc, #204	; (adr r3, 8018eb0 <floor+0xf0>)
 8018de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de8:	f7e7 fa5a 	bl	80002a0 <__adddf3>
 8018dec:	2200      	movs	r2, #0
 8018dee:	2300      	movs	r3, #0
 8018df0:	f7e7 fe9c 	bl	8000b2c <__aeabi_dcmpgt>
 8018df4:	b138      	cbz	r0, 8018e06 <floor+0x46>
 8018df6:	2c00      	cmp	r4, #0
 8018df8:	da57      	bge.n	8018eaa <floor+0xea>
 8018dfa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018dfe:	431d      	orrs	r5, r3
 8018e00:	d001      	beq.n	8018e06 <floor+0x46>
 8018e02:	4c2d      	ldr	r4, [pc, #180]	; (8018eb8 <floor+0xf8>)
 8018e04:	2500      	movs	r5, #0
 8018e06:	4621      	mov	r1, r4
 8018e08:	4628      	mov	r0, r5
 8018e0a:	e025      	b.n	8018e58 <floor+0x98>
 8018e0c:	4f2b      	ldr	r7, [pc, #172]	; (8018ebc <floor+0xfc>)
 8018e0e:	4137      	asrs	r7, r6
 8018e10:	ea01 0307 	and.w	r3, r1, r7
 8018e14:	4303      	orrs	r3, r0
 8018e16:	d01f      	beq.n	8018e58 <floor+0x98>
 8018e18:	a325      	add	r3, pc, #148	; (adr r3, 8018eb0 <floor+0xf0>)
 8018e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e1e:	f7e7 fa3f 	bl	80002a0 <__adddf3>
 8018e22:	2200      	movs	r2, #0
 8018e24:	2300      	movs	r3, #0
 8018e26:	f7e7 fe81 	bl	8000b2c <__aeabi_dcmpgt>
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	d0eb      	beq.n	8018e06 <floor+0x46>
 8018e2e:	2c00      	cmp	r4, #0
 8018e30:	bfbe      	ittt	lt
 8018e32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018e36:	fa43 f606 	asrlt.w	r6, r3, r6
 8018e3a:	19a4      	addlt	r4, r4, r6
 8018e3c:	ea24 0407 	bic.w	r4, r4, r7
 8018e40:	2500      	movs	r5, #0
 8018e42:	e7e0      	b.n	8018e06 <floor+0x46>
 8018e44:	2e33      	cmp	r6, #51	; 0x33
 8018e46:	dd0b      	ble.n	8018e60 <floor+0xa0>
 8018e48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018e4c:	d104      	bne.n	8018e58 <floor+0x98>
 8018e4e:	ee10 2a10 	vmov	r2, s0
 8018e52:	460b      	mov	r3, r1
 8018e54:	f7e7 fa24 	bl	80002a0 <__adddf3>
 8018e58:	ec41 0b10 	vmov	d0, r0, r1
 8018e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e60:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018e64:	f04f 33ff 	mov.w	r3, #4294967295
 8018e68:	fa23 f707 	lsr.w	r7, r3, r7
 8018e6c:	4207      	tst	r7, r0
 8018e6e:	d0f3      	beq.n	8018e58 <floor+0x98>
 8018e70:	a30f      	add	r3, pc, #60	; (adr r3, 8018eb0 <floor+0xf0>)
 8018e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e76:	f7e7 fa13 	bl	80002a0 <__adddf3>
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	f7e7 fe55 	bl	8000b2c <__aeabi_dcmpgt>
 8018e82:	2800      	cmp	r0, #0
 8018e84:	d0bf      	beq.n	8018e06 <floor+0x46>
 8018e86:	2c00      	cmp	r4, #0
 8018e88:	da02      	bge.n	8018e90 <floor+0xd0>
 8018e8a:	2e14      	cmp	r6, #20
 8018e8c:	d103      	bne.n	8018e96 <floor+0xd6>
 8018e8e:	3401      	adds	r4, #1
 8018e90:	ea25 0507 	bic.w	r5, r5, r7
 8018e94:	e7b7      	b.n	8018e06 <floor+0x46>
 8018e96:	2301      	movs	r3, #1
 8018e98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018e9c:	fa03 f606 	lsl.w	r6, r3, r6
 8018ea0:	4435      	add	r5, r6
 8018ea2:	4545      	cmp	r5, r8
 8018ea4:	bf38      	it	cc
 8018ea6:	18e4      	addcc	r4, r4, r3
 8018ea8:	e7f2      	b.n	8018e90 <floor+0xd0>
 8018eaa:	2500      	movs	r5, #0
 8018eac:	462c      	mov	r4, r5
 8018eae:	e7aa      	b.n	8018e06 <floor+0x46>
 8018eb0:	8800759c 	.word	0x8800759c
 8018eb4:	7e37e43c 	.word	0x7e37e43c
 8018eb8:	bff00000 	.word	0xbff00000
 8018ebc:	000fffff 	.word	0x000fffff

08018ec0 <frexp>:
 8018ec0:	b570      	push	{r4, r5, r6, lr}
 8018ec2:	2100      	movs	r1, #0
 8018ec4:	ec55 4b10 	vmov	r4, r5, d0
 8018ec8:	6001      	str	r1, [r0, #0]
 8018eca:	4916      	ldr	r1, [pc, #88]	; (8018f24 <frexp+0x64>)
 8018ecc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8018ed0:	428a      	cmp	r2, r1
 8018ed2:	4606      	mov	r6, r0
 8018ed4:	462b      	mov	r3, r5
 8018ed6:	dc22      	bgt.n	8018f1e <frexp+0x5e>
 8018ed8:	ee10 1a10 	vmov	r1, s0
 8018edc:	4311      	orrs	r1, r2
 8018ede:	d01e      	beq.n	8018f1e <frexp+0x5e>
 8018ee0:	4911      	ldr	r1, [pc, #68]	; (8018f28 <frexp+0x68>)
 8018ee2:	4029      	ands	r1, r5
 8018ee4:	b969      	cbnz	r1, 8018f02 <frexp+0x42>
 8018ee6:	4b11      	ldr	r3, [pc, #68]	; (8018f2c <frexp+0x6c>)
 8018ee8:	2200      	movs	r2, #0
 8018eea:	ee10 0a10 	vmov	r0, s0
 8018eee:	4629      	mov	r1, r5
 8018ef0:	f7e7 fb8c 	bl	800060c <__aeabi_dmul>
 8018ef4:	460b      	mov	r3, r1
 8018ef6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018efa:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8018efe:	4604      	mov	r4, r0
 8018f00:	6031      	str	r1, [r6, #0]
 8018f02:	6831      	ldr	r1, [r6, #0]
 8018f04:	1512      	asrs	r2, r2, #20
 8018f06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018f0a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8018f0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018f12:	440a      	add	r2, r1
 8018f14:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018f18:	6032      	str	r2, [r6, #0]
 8018f1a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018f1e:	ec45 4b10 	vmov	d0, r4, r5
 8018f22:	bd70      	pop	{r4, r5, r6, pc}
 8018f24:	7fefffff 	.word	0x7fefffff
 8018f28:	7ff00000 	.word	0x7ff00000
 8018f2c:	43500000 	.word	0x43500000

08018f30 <round>:
 8018f30:	ec51 0b10 	vmov	r0, r1, d0
 8018f34:	b570      	push	{r4, r5, r6, lr}
 8018f36:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8018f3a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8018f3e:	2c13      	cmp	r4, #19
 8018f40:	ee10 2a10 	vmov	r2, s0
 8018f44:	460b      	mov	r3, r1
 8018f46:	dc19      	bgt.n	8018f7c <round+0x4c>
 8018f48:	2c00      	cmp	r4, #0
 8018f4a:	da09      	bge.n	8018f60 <round+0x30>
 8018f4c:	3401      	adds	r4, #1
 8018f4e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018f52:	d103      	bne.n	8018f5c <round+0x2c>
 8018f54:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018f58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	e028      	b.n	8018fb2 <round+0x82>
 8018f60:	4d15      	ldr	r5, [pc, #84]	; (8018fb8 <round+0x88>)
 8018f62:	4125      	asrs	r5, r4
 8018f64:	ea01 0605 	and.w	r6, r1, r5
 8018f68:	4332      	orrs	r2, r6
 8018f6a:	d00e      	beq.n	8018f8a <round+0x5a>
 8018f6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018f70:	fa42 f404 	asr.w	r4, r2, r4
 8018f74:	4423      	add	r3, r4
 8018f76:	ea23 0305 	bic.w	r3, r3, r5
 8018f7a:	e7ef      	b.n	8018f5c <round+0x2c>
 8018f7c:	2c33      	cmp	r4, #51	; 0x33
 8018f7e:	dd07      	ble.n	8018f90 <round+0x60>
 8018f80:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018f84:	d101      	bne.n	8018f8a <round+0x5a>
 8018f86:	f7e7 f98b 	bl	80002a0 <__adddf3>
 8018f8a:	ec41 0b10 	vmov	d0, r0, r1
 8018f8e:	bd70      	pop	{r4, r5, r6, pc}
 8018f90:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8018f94:	f04f 35ff 	mov.w	r5, #4294967295
 8018f98:	40f5      	lsrs	r5, r6
 8018f9a:	4228      	tst	r0, r5
 8018f9c:	d0f5      	beq.n	8018f8a <round+0x5a>
 8018f9e:	2101      	movs	r1, #1
 8018fa0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8018fa4:	fa01 f404 	lsl.w	r4, r1, r4
 8018fa8:	1912      	adds	r2, r2, r4
 8018faa:	bf28      	it	cs
 8018fac:	185b      	addcs	r3, r3, r1
 8018fae:	ea22 0205 	bic.w	r2, r2, r5
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	4610      	mov	r0, r2
 8018fb6:	e7e8      	b.n	8018f8a <round+0x5a>
 8018fb8:	000fffff 	.word	0x000fffff

08018fbc <roundf>:
 8018fbc:	ee10 0a10 	vmov	r0, s0
 8018fc0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8018fc4:	3a7f      	subs	r2, #127	; 0x7f
 8018fc6:	2a16      	cmp	r2, #22
 8018fc8:	dc15      	bgt.n	8018ff6 <roundf+0x3a>
 8018fca:	2a00      	cmp	r2, #0
 8018fcc:	da08      	bge.n	8018fe0 <roundf+0x24>
 8018fce:	3201      	adds	r2, #1
 8018fd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018fd4:	d101      	bne.n	8018fda <roundf+0x1e>
 8018fd6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018fda:	ee00 3a10 	vmov	s0, r3
 8018fde:	4770      	bx	lr
 8018fe0:	4907      	ldr	r1, [pc, #28]	; (8019000 <roundf+0x44>)
 8018fe2:	4111      	asrs	r1, r2
 8018fe4:	4208      	tst	r0, r1
 8018fe6:	d0fa      	beq.n	8018fde <roundf+0x22>
 8018fe8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8018fec:	4113      	asrs	r3, r2
 8018fee:	4403      	add	r3, r0
 8018ff0:	ea23 0301 	bic.w	r3, r3, r1
 8018ff4:	e7f1      	b.n	8018fda <roundf+0x1e>
 8018ff6:	2a80      	cmp	r2, #128	; 0x80
 8018ff8:	d1f1      	bne.n	8018fde <roundf+0x22>
 8018ffa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018ffe:	4770      	bx	lr
 8019000:	007fffff 	.word	0x007fffff

08019004 <pow>:
 8019004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019006:	ed2d 8b02 	vpush	{d8}
 801900a:	eeb0 8a40 	vmov.f32	s16, s0
 801900e:	eef0 8a60 	vmov.f32	s17, s1
 8019012:	ec55 4b11 	vmov	r4, r5, d1
 8019016:	f000 f8e7 	bl	80191e8 <__ieee754_pow>
 801901a:	4622      	mov	r2, r4
 801901c:	462b      	mov	r3, r5
 801901e:	4620      	mov	r0, r4
 8019020:	4629      	mov	r1, r5
 8019022:	ec57 6b10 	vmov	r6, r7, d0
 8019026:	f7e7 fd8b 	bl	8000b40 <__aeabi_dcmpun>
 801902a:	2800      	cmp	r0, #0
 801902c:	d13b      	bne.n	80190a6 <pow+0xa2>
 801902e:	ec51 0b18 	vmov	r0, r1, d8
 8019032:	2200      	movs	r2, #0
 8019034:	2300      	movs	r3, #0
 8019036:	f7e7 fd51 	bl	8000adc <__aeabi_dcmpeq>
 801903a:	b1b8      	cbz	r0, 801906c <pow+0x68>
 801903c:	2200      	movs	r2, #0
 801903e:	2300      	movs	r3, #0
 8019040:	4620      	mov	r0, r4
 8019042:	4629      	mov	r1, r5
 8019044:	f7e7 fd4a 	bl	8000adc <__aeabi_dcmpeq>
 8019048:	2800      	cmp	r0, #0
 801904a:	d146      	bne.n	80190da <pow+0xd6>
 801904c:	ec45 4b10 	vmov	d0, r4, r5
 8019050:	f001 f91f 	bl	801a292 <finite>
 8019054:	b338      	cbz	r0, 80190a6 <pow+0xa2>
 8019056:	2200      	movs	r2, #0
 8019058:	2300      	movs	r3, #0
 801905a:	4620      	mov	r0, r4
 801905c:	4629      	mov	r1, r5
 801905e:	f7e7 fd47 	bl	8000af0 <__aeabi_dcmplt>
 8019062:	b300      	cbz	r0, 80190a6 <pow+0xa2>
 8019064:	f001 f9e8 	bl	801a438 <__errno>
 8019068:	2322      	movs	r3, #34	; 0x22
 801906a:	e01b      	b.n	80190a4 <pow+0xa0>
 801906c:	ec47 6b10 	vmov	d0, r6, r7
 8019070:	f001 f90f 	bl	801a292 <finite>
 8019074:	b9e0      	cbnz	r0, 80190b0 <pow+0xac>
 8019076:	eeb0 0a48 	vmov.f32	s0, s16
 801907a:	eef0 0a68 	vmov.f32	s1, s17
 801907e:	f001 f908 	bl	801a292 <finite>
 8019082:	b1a8      	cbz	r0, 80190b0 <pow+0xac>
 8019084:	ec45 4b10 	vmov	d0, r4, r5
 8019088:	f001 f903 	bl	801a292 <finite>
 801908c:	b180      	cbz	r0, 80190b0 <pow+0xac>
 801908e:	4632      	mov	r2, r6
 8019090:	463b      	mov	r3, r7
 8019092:	4630      	mov	r0, r6
 8019094:	4639      	mov	r1, r7
 8019096:	f7e7 fd53 	bl	8000b40 <__aeabi_dcmpun>
 801909a:	2800      	cmp	r0, #0
 801909c:	d0e2      	beq.n	8019064 <pow+0x60>
 801909e:	f001 f9cb 	bl	801a438 <__errno>
 80190a2:	2321      	movs	r3, #33	; 0x21
 80190a4:	6003      	str	r3, [r0, #0]
 80190a6:	ecbd 8b02 	vpop	{d8}
 80190aa:	ec47 6b10 	vmov	d0, r6, r7
 80190ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190b0:	2200      	movs	r2, #0
 80190b2:	2300      	movs	r3, #0
 80190b4:	4630      	mov	r0, r6
 80190b6:	4639      	mov	r1, r7
 80190b8:	f7e7 fd10 	bl	8000adc <__aeabi_dcmpeq>
 80190bc:	2800      	cmp	r0, #0
 80190be:	d0f2      	beq.n	80190a6 <pow+0xa2>
 80190c0:	eeb0 0a48 	vmov.f32	s0, s16
 80190c4:	eef0 0a68 	vmov.f32	s1, s17
 80190c8:	f001 f8e3 	bl	801a292 <finite>
 80190cc:	2800      	cmp	r0, #0
 80190ce:	d0ea      	beq.n	80190a6 <pow+0xa2>
 80190d0:	ec45 4b10 	vmov	d0, r4, r5
 80190d4:	f001 f8dd 	bl	801a292 <finite>
 80190d8:	e7c3      	b.n	8019062 <pow+0x5e>
 80190da:	4f01      	ldr	r7, [pc, #4]	; (80190e0 <pow+0xdc>)
 80190dc:	2600      	movs	r6, #0
 80190de:	e7e2      	b.n	80190a6 <pow+0xa2>
 80190e0:	3ff00000 	.word	0x3ff00000

080190e4 <expf>:
 80190e4:	b508      	push	{r3, lr}
 80190e6:	ed2d 8b02 	vpush	{d8}
 80190ea:	eef0 8a40 	vmov.f32	s17, s0
 80190ee:	f000 fe5b 	bl	8019da8 <__ieee754_expf>
 80190f2:	eeb0 8a40 	vmov.f32	s16, s0
 80190f6:	eeb0 0a68 	vmov.f32	s0, s17
 80190fa:	f001 f95b 	bl	801a3b4 <finitef>
 80190fe:	b160      	cbz	r0, 801911a <expf+0x36>
 8019100:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019140 <expf+0x5c>
 8019104:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801910c:	dd0a      	ble.n	8019124 <expf+0x40>
 801910e:	f001 f993 	bl	801a438 <__errno>
 8019112:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8019144 <expf+0x60>
 8019116:	2322      	movs	r3, #34	; 0x22
 8019118:	6003      	str	r3, [r0, #0]
 801911a:	eeb0 0a48 	vmov.f32	s0, s16
 801911e:	ecbd 8b02 	vpop	{d8}
 8019122:	bd08      	pop	{r3, pc}
 8019124:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019148 <expf+0x64>
 8019128:	eef4 8ae7 	vcmpe.f32	s17, s15
 801912c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019130:	d5f3      	bpl.n	801911a <expf+0x36>
 8019132:	f001 f981 	bl	801a438 <__errno>
 8019136:	2322      	movs	r3, #34	; 0x22
 8019138:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801914c <expf+0x68>
 801913c:	6003      	str	r3, [r0, #0]
 801913e:	e7ec      	b.n	801911a <expf+0x36>
 8019140:	42b17180 	.word	0x42b17180
 8019144:	7f800000 	.word	0x7f800000
 8019148:	c2cff1b5 	.word	0xc2cff1b5
 801914c:	00000000 	.word	0x00000000

08019150 <log10f>:
 8019150:	b508      	push	{r3, lr}
 8019152:	ed2d 8b02 	vpush	{d8}
 8019156:	eeb0 8a40 	vmov.f32	s16, s0
 801915a:	f000 ffe3 	bl	801a124 <__ieee754_log10f>
 801915e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019166:	d60f      	bvs.n	8019188 <log10f+0x38>
 8019168:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801916c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019170:	d80a      	bhi.n	8019188 <log10f+0x38>
 8019172:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801917a:	d108      	bne.n	801918e <log10f+0x3e>
 801917c:	f001 f95c 	bl	801a438 <__errno>
 8019180:	2322      	movs	r3, #34	; 0x22
 8019182:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80191a4 <log10f+0x54>
 8019186:	6003      	str	r3, [r0, #0]
 8019188:	ecbd 8b02 	vpop	{d8}
 801918c:	bd08      	pop	{r3, pc}
 801918e:	f001 f953 	bl	801a438 <__errno>
 8019192:	ecbd 8b02 	vpop	{d8}
 8019196:	2321      	movs	r3, #33	; 0x21
 8019198:	6003      	str	r3, [r0, #0]
 801919a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801919e:	4802      	ldr	r0, [pc, #8]	; (80191a8 <log10f+0x58>)
 80191a0:	f001 b916 	b.w	801a3d0 <nanf>
 80191a4:	ff800000 	.word	0xff800000
 80191a8:	0801f3eb 	.word	0x0801f3eb

080191ac <sqrtf>:
 80191ac:	b508      	push	{r3, lr}
 80191ae:	ed2d 8b02 	vpush	{d8}
 80191b2:	eeb0 8a40 	vmov.f32	s16, s0
 80191b6:	f001 f80d 	bl	801a1d4 <__ieee754_sqrtf>
 80191ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80191be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191c2:	d60c      	bvs.n	80191de <sqrtf+0x32>
 80191c4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80191e4 <sqrtf+0x38>
 80191c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80191cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191d0:	d505      	bpl.n	80191de <sqrtf+0x32>
 80191d2:	f001 f931 	bl	801a438 <__errno>
 80191d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80191da:	2321      	movs	r3, #33	; 0x21
 80191dc:	6003      	str	r3, [r0, #0]
 80191de:	ecbd 8b02 	vpop	{d8}
 80191e2:	bd08      	pop	{r3, pc}
 80191e4:	00000000 	.word	0x00000000

080191e8 <__ieee754_pow>:
 80191e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ec:	ed2d 8b06 	vpush	{d8-d10}
 80191f0:	b089      	sub	sp, #36	; 0x24
 80191f2:	ed8d 1b00 	vstr	d1, [sp]
 80191f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80191fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80191fe:	ea58 0102 	orrs.w	r1, r8, r2
 8019202:	ec57 6b10 	vmov	r6, r7, d0
 8019206:	d115      	bne.n	8019234 <__ieee754_pow+0x4c>
 8019208:	19b3      	adds	r3, r6, r6
 801920a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801920e:	4152      	adcs	r2, r2
 8019210:	4299      	cmp	r1, r3
 8019212:	4b89      	ldr	r3, [pc, #548]	; (8019438 <__ieee754_pow+0x250>)
 8019214:	4193      	sbcs	r3, r2
 8019216:	f080 84d2 	bcs.w	8019bbe <__ieee754_pow+0x9d6>
 801921a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801921e:	4630      	mov	r0, r6
 8019220:	4639      	mov	r1, r7
 8019222:	f7e7 f83d 	bl	80002a0 <__adddf3>
 8019226:	ec41 0b10 	vmov	d0, r0, r1
 801922a:	b009      	add	sp, #36	; 0x24
 801922c:	ecbd 8b06 	vpop	{d8-d10}
 8019230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019234:	4b81      	ldr	r3, [pc, #516]	; (801943c <__ieee754_pow+0x254>)
 8019236:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801923a:	429c      	cmp	r4, r3
 801923c:	ee10 aa10 	vmov	sl, s0
 8019240:	463d      	mov	r5, r7
 8019242:	dc06      	bgt.n	8019252 <__ieee754_pow+0x6a>
 8019244:	d101      	bne.n	801924a <__ieee754_pow+0x62>
 8019246:	2e00      	cmp	r6, #0
 8019248:	d1e7      	bne.n	801921a <__ieee754_pow+0x32>
 801924a:	4598      	cmp	r8, r3
 801924c:	dc01      	bgt.n	8019252 <__ieee754_pow+0x6a>
 801924e:	d10f      	bne.n	8019270 <__ieee754_pow+0x88>
 8019250:	b172      	cbz	r2, 8019270 <__ieee754_pow+0x88>
 8019252:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019256:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801925a:	ea55 050a 	orrs.w	r5, r5, sl
 801925e:	d1dc      	bne.n	801921a <__ieee754_pow+0x32>
 8019260:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019264:	18db      	adds	r3, r3, r3
 8019266:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801926a:	4152      	adcs	r2, r2
 801926c:	429d      	cmp	r5, r3
 801926e:	e7d0      	b.n	8019212 <__ieee754_pow+0x2a>
 8019270:	2d00      	cmp	r5, #0
 8019272:	da3b      	bge.n	80192ec <__ieee754_pow+0x104>
 8019274:	4b72      	ldr	r3, [pc, #456]	; (8019440 <__ieee754_pow+0x258>)
 8019276:	4598      	cmp	r8, r3
 8019278:	dc51      	bgt.n	801931e <__ieee754_pow+0x136>
 801927a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801927e:	4598      	cmp	r8, r3
 8019280:	f340 84ac 	ble.w	8019bdc <__ieee754_pow+0x9f4>
 8019284:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019288:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801928c:	2b14      	cmp	r3, #20
 801928e:	dd0f      	ble.n	80192b0 <__ieee754_pow+0xc8>
 8019290:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019294:	fa22 f103 	lsr.w	r1, r2, r3
 8019298:	fa01 f303 	lsl.w	r3, r1, r3
 801929c:	4293      	cmp	r3, r2
 801929e:	f040 849d 	bne.w	8019bdc <__ieee754_pow+0x9f4>
 80192a2:	f001 0101 	and.w	r1, r1, #1
 80192a6:	f1c1 0302 	rsb	r3, r1, #2
 80192aa:	9304      	str	r3, [sp, #16]
 80192ac:	b182      	cbz	r2, 80192d0 <__ieee754_pow+0xe8>
 80192ae:	e05f      	b.n	8019370 <__ieee754_pow+0x188>
 80192b0:	2a00      	cmp	r2, #0
 80192b2:	d15b      	bne.n	801936c <__ieee754_pow+0x184>
 80192b4:	f1c3 0314 	rsb	r3, r3, #20
 80192b8:	fa48 f103 	asr.w	r1, r8, r3
 80192bc:	fa01 f303 	lsl.w	r3, r1, r3
 80192c0:	4543      	cmp	r3, r8
 80192c2:	f040 8488 	bne.w	8019bd6 <__ieee754_pow+0x9ee>
 80192c6:	f001 0101 	and.w	r1, r1, #1
 80192ca:	f1c1 0302 	rsb	r3, r1, #2
 80192ce:	9304      	str	r3, [sp, #16]
 80192d0:	4b5c      	ldr	r3, [pc, #368]	; (8019444 <__ieee754_pow+0x25c>)
 80192d2:	4598      	cmp	r8, r3
 80192d4:	d132      	bne.n	801933c <__ieee754_pow+0x154>
 80192d6:	f1b9 0f00 	cmp.w	r9, #0
 80192da:	f280 8478 	bge.w	8019bce <__ieee754_pow+0x9e6>
 80192de:	4959      	ldr	r1, [pc, #356]	; (8019444 <__ieee754_pow+0x25c>)
 80192e0:	4632      	mov	r2, r6
 80192e2:	463b      	mov	r3, r7
 80192e4:	2000      	movs	r0, #0
 80192e6:	f7e7 fabb 	bl	8000860 <__aeabi_ddiv>
 80192ea:	e79c      	b.n	8019226 <__ieee754_pow+0x3e>
 80192ec:	2300      	movs	r3, #0
 80192ee:	9304      	str	r3, [sp, #16]
 80192f0:	2a00      	cmp	r2, #0
 80192f2:	d13d      	bne.n	8019370 <__ieee754_pow+0x188>
 80192f4:	4b51      	ldr	r3, [pc, #324]	; (801943c <__ieee754_pow+0x254>)
 80192f6:	4598      	cmp	r8, r3
 80192f8:	d1ea      	bne.n	80192d0 <__ieee754_pow+0xe8>
 80192fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80192fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019302:	ea53 030a 	orrs.w	r3, r3, sl
 8019306:	f000 845a 	beq.w	8019bbe <__ieee754_pow+0x9d6>
 801930a:	4b4f      	ldr	r3, [pc, #316]	; (8019448 <__ieee754_pow+0x260>)
 801930c:	429c      	cmp	r4, r3
 801930e:	dd08      	ble.n	8019322 <__ieee754_pow+0x13a>
 8019310:	f1b9 0f00 	cmp.w	r9, #0
 8019314:	f2c0 8457 	blt.w	8019bc6 <__ieee754_pow+0x9de>
 8019318:	e9dd 0100 	ldrd	r0, r1, [sp]
 801931c:	e783      	b.n	8019226 <__ieee754_pow+0x3e>
 801931e:	2302      	movs	r3, #2
 8019320:	e7e5      	b.n	80192ee <__ieee754_pow+0x106>
 8019322:	f1b9 0f00 	cmp.w	r9, #0
 8019326:	f04f 0000 	mov.w	r0, #0
 801932a:	f04f 0100 	mov.w	r1, #0
 801932e:	f6bf af7a 	bge.w	8019226 <__ieee754_pow+0x3e>
 8019332:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019336:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801933a:	e774      	b.n	8019226 <__ieee754_pow+0x3e>
 801933c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019340:	d106      	bne.n	8019350 <__ieee754_pow+0x168>
 8019342:	4632      	mov	r2, r6
 8019344:	463b      	mov	r3, r7
 8019346:	4630      	mov	r0, r6
 8019348:	4639      	mov	r1, r7
 801934a:	f7e7 f95f 	bl	800060c <__aeabi_dmul>
 801934e:	e76a      	b.n	8019226 <__ieee754_pow+0x3e>
 8019350:	4b3e      	ldr	r3, [pc, #248]	; (801944c <__ieee754_pow+0x264>)
 8019352:	4599      	cmp	r9, r3
 8019354:	d10c      	bne.n	8019370 <__ieee754_pow+0x188>
 8019356:	2d00      	cmp	r5, #0
 8019358:	db0a      	blt.n	8019370 <__ieee754_pow+0x188>
 801935a:	ec47 6b10 	vmov	d0, r6, r7
 801935e:	b009      	add	sp, #36	; 0x24
 8019360:	ecbd 8b06 	vpop	{d8-d10}
 8019364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019368:	f000 bc6c 	b.w	8019c44 <__ieee754_sqrt>
 801936c:	2300      	movs	r3, #0
 801936e:	9304      	str	r3, [sp, #16]
 8019370:	ec47 6b10 	vmov	d0, r6, r7
 8019374:	f000 ff84 	bl	801a280 <fabs>
 8019378:	ec51 0b10 	vmov	r0, r1, d0
 801937c:	f1ba 0f00 	cmp.w	sl, #0
 8019380:	d129      	bne.n	80193d6 <__ieee754_pow+0x1ee>
 8019382:	b124      	cbz	r4, 801938e <__ieee754_pow+0x1a6>
 8019384:	4b2f      	ldr	r3, [pc, #188]	; (8019444 <__ieee754_pow+0x25c>)
 8019386:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801938a:	429a      	cmp	r2, r3
 801938c:	d123      	bne.n	80193d6 <__ieee754_pow+0x1ee>
 801938e:	f1b9 0f00 	cmp.w	r9, #0
 8019392:	da05      	bge.n	80193a0 <__ieee754_pow+0x1b8>
 8019394:	4602      	mov	r2, r0
 8019396:	460b      	mov	r3, r1
 8019398:	2000      	movs	r0, #0
 801939a:	492a      	ldr	r1, [pc, #168]	; (8019444 <__ieee754_pow+0x25c>)
 801939c:	f7e7 fa60 	bl	8000860 <__aeabi_ddiv>
 80193a0:	2d00      	cmp	r5, #0
 80193a2:	f6bf af40 	bge.w	8019226 <__ieee754_pow+0x3e>
 80193a6:	9b04      	ldr	r3, [sp, #16]
 80193a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80193ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80193b0:	4323      	orrs	r3, r4
 80193b2:	d108      	bne.n	80193c6 <__ieee754_pow+0x1de>
 80193b4:	4602      	mov	r2, r0
 80193b6:	460b      	mov	r3, r1
 80193b8:	4610      	mov	r0, r2
 80193ba:	4619      	mov	r1, r3
 80193bc:	f7e6 ff6e 	bl	800029c <__aeabi_dsub>
 80193c0:	4602      	mov	r2, r0
 80193c2:	460b      	mov	r3, r1
 80193c4:	e78f      	b.n	80192e6 <__ieee754_pow+0xfe>
 80193c6:	9b04      	ldr	r3, [sp, #16]
 80193c8:	2b01      	cmp	r3, #1
 80193ca:	f47f af2c 	bne.w	8019226 <__ieee754_pow+0x3e>
 80193ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80193d2:	4619      	mov	r1, r3
 80193d4:	e727      	b.n	8019226 <__ieee754_pow+0x3e>
 80193d6:	0feb      	lsrs	r3, r5, #31
 80193d8:	3b01      	subs	r3, #1
 80193da:	9306      	str	r3, [sp, #24]
 80193dc:	9a06      	ldr	r2, [sp, #24]
 80193de:	9b04      	ldr	r3, [sp, #16]
 80193e0:	4313      	orrs	r3, r2
 80193e2:	d102      	bne.n	80193ea <__ieee754_pow+0x202>
 80193e4:	4632      	mov	r2, r6
 80193e6:	463b      	mov	r3, r7
 80193e8:	e7e6      	b.n	80193b8 <__ieee754_pow+0x1d0>
 80193ea:	4b19      	ldr	r3, [pc, #100]	; (8019450 <__ieee754_pow+0x268>)
 80193ec:	4598      	cmp	r8, r3
 80193ee:	f340 80fb 	ble.w	80195e8 <__ieee754_pow+0x400>
 80193f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80193f6:	4598      	cmp	r8, r3
 80193f8:	4b13      	ldr	r3, [pc, #76]	; (8019448 <__ieee754_pow+0x260>)
 80193fa:	dd0c      	ble.n	8019416 <__ieee754_pow+0x22e>
 80193fc:	429c      	cmp	r4, r3
 80193fe:	dc0f      	bgt.n	8019420 <__ieee754_pow+0x238>
 8019400:	f1b9 0f00 	cmp.w	r9, #0
 8019404:	da0f      	bge.n	8019426 <__ieee754_pow+0x23e>
 8019406:	2000      	movs	r0, #0
 8019408:	b009      	add	sp, #36	; 0x24
 801940a:	ecbd 8b06 	vpop	{d8-d10}
 801940e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019412:	f000 bf09 	b.w	801a228 <__math_oflow>
 8019416:	429c      	cmp	r4, r3
 8019418:	dbf2      	blt.n	8019400 <__ieee754_pow+0x218>
 801941a:	4b0a      	ldr	r3, [pc, #40]	; (8019444 <__ieee754_pow+0x25c>)
 801941c:	429c      	cmp	r4, r3
 801941e:	dd19      	ble.n	8019454 <__ieee754_pow+0x26c>
 8019420:	f1b9 0f00 	cmp.w	r9, #0
 8019424:	dcef      	bgt.n	8019406 <__ieee754_pow+0x21e>
 8019426:	2000      	movs	r0, #0
 8019428:	b009      	add	sp, #36	; 0x24
 801942a:	ecbd 8b06 	vpop	{d8-d10}
 801942e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019432:	f000 bef0 	b.w	801a216 <__math_uflow>
 8019436:	bf00      	nop
 8019438:	fff00000 	.word	0xfff00000
 801943c:	7ff00000 	.word	0x7ff00000
 8019440:	433fffff 	.word	0x433fffff
 8019444:	3ff00000 	.word	0x3ff00000
 8019448:	3fefffff 	.word	0x3fefffff
 801944c:	3fe00000 	.word	0x3fe00000
 8019450:	41e00000 	.word	0x41e00000
 8019454:	4b60      	ldr	r3, [pc, #384]	; (80195d8 <__ieee754_pow+0x3f0>)
 8019456:	2200      	movs	r2, #0
 8019458:	f7e6 ff20 	bl	800029c <__aeabi_dsub>
 801945c:	a354      	add	r3, pc, #336	; (adr r3, 80195b0 <__ieee754_pow+0x3c8>)
 801945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019462:	4604      	mov	r4, r0
 8019464:	460d      	mov	r5, r1
 8019466:	f7e7 f8d1 	bl	800060c <__aeabi_dmul>
 801946a:	a353      	add	r3, pc, #332	; (adr r3, 80195b8 <__ieee754_pow+0x3d0>)
 801946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019470:	4606      	mov	r6, r0
 8019472:	460f      	mov	r7, r1
 8019474:	4620      	mov	r0, r4
 8019476:	4629      	mov	r1, r5
 8019478:	f7e7 f8c8 	bl	800060c <__aeabi_dmul>
 801947c:	4b57      	ldr	r3, [pc, #348]	; (80195dc <__ieee754_pow+0x3f4>)
 801947e:	4682      	mov	sl, r0
 8019480:	468b      	mov	fp, r1
 8019482:	2200      	movs	r2, #0
 8019484:	4620      	mov	r0, r4
 8019486:	4629      	mov	r1, r5
 8019488:	f7e7 f8c0 	bl	800060c <__aeabi_dmul>
 801948c:	4602      	mov	r2, r0
 801948e:	460b      	mov	r3, r1
 8019490:	a14b      	add	r1, pc, #300	; (adr r1, 80195c0 <__ieee754_pow+0x3d8>)
 8019492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019496:	f7e6 ff01 	bl	800029c <__aeabi_dsub>
 801949a:	4622      	mov	r2, r4
 801949c:	462b      	mov	r3, r5
 801949e:	f7e7 f8b5 	bl	800060c <__aeabi_dmul>
 80194a2:	4602      	mov	r2, r0
 80194a4:	460b      	mov	r3, r1
 80194a6:	2000      	movs	r0, #0
 80194a8:	494d      	ldr	r1, [pc, #308]	; (80195e0 <__ieee754_pow+0x3f8>)
 80194aa:	f7e6 fef7 	bl	800029c <__aeabi_dsub>
 80194ae:	4622      	mov	r2, r4
 80194b0:	4680      	mov	r8, r0
 80194b2:	4689      	mov	r9, r1
 80194b4:	462b      	mov	r3, r5
 80194b6:	4620      	mov	r0, r4
 80194b8:	4629      	mov	r1, r5
 80194ba:	f7e7 f8a7 	bl	800060c <__aeabi_dmul>
 80194be:	4602      	mov	r2, r0
 80194c0:	460b      	mov	r3, r1
 80194c2:	4640      	mov	r0, r8
 80194c4:	4649      	mov	r1, r9
 80194c6:	f7e7 f8a1 	bl	800060c <__aeabi_dmul>
 80194ca:	a33f      	add	r3, pc, #252	; (adr r3, 80195c8 <__ieee754_pow+0x3e0>)
 80194cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194d0:	f7e7 f89c 	bl	800060c <__aeabi_dmul>
 80194d4:	4602      	mov	r2, r0
 80194d6:	460b      	mov	r3, r1
 80194d8:	4650      	mov	r0, sl
 80194da:	4659      	mov	r1, fp
 80194dc:	f7e6 fede 	bl	800029c <__aeabi_dsub>
 80194e0:	4602      	mov	r2, r0
 80194e2:	460b      	mov	r3, r1
 80194e4:	4680      	mov	r8, r0
 80194e6:	4689      	mov	r9, r1
 80194e8:	4630      	mov	r0, r6
 80194ea:	4639      	mov	r1, r7
 80194ec:	f7e6 fed8 	bl	80002a0 <__adddf3>
 80194f0:	2000      	movs	r0, #0
 80194f2:	4632      	mov	r2, r6
 80194f4:	463b      	mov	r3, r7
 80194f6:	4604      	mov	r4, r0
 80194f8:	460d      	mov	r5, r1
 80194fa:	f7e6 fecf 	bl	800029c <__aeabi_dsub>
 80194fe:	4602      	mov	r2, r0
 8019500:	460b      	mov	r3, r1
 8019502:	4640      	mov	r0, r8
 8019504:	4649      	mov	r1, r9
 8019506:	f7e6 fec9 	bl	800029c <__aeabi_dsub>
 801950a:	9b04      	ldr	r3, [sp, #16]
 801950c:	9a06      	ldr	r2, [sp, #24]
 801950e:	3b01      	subs	r3, #1
 8019510:	4313      	orrs	r3, r2
 8019512:	4682      	mov	sl, r0
 8019514:	468b      	mov	fp, r1
 8019516:	f040 81e7 	bne.w	80198e8 <__ieee754_pow+0x700>
 801951a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80195d0 <__ieee754_pow+0x3e8>
 801951e:	eeb0 8a47 	vmov.f32	s16, s14
 8019522:	eef0 8a67 	vmov.f32	s17, s15
 8019526:	e9dd 6700 	ldrd	r6, r7, [sp]
 801952a:	2600      	movs	r6, #0
 801952c:	4632      	mov	r2, r6
 801952e:	463b      	mov	r3, r7
 8019530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019534:	f7e6 feb2 	bl	800029c <__aeabi_dsub>
 8019538:	4622      	mov	r2, r4
 801953a:	462b      	mov	r3, r5
 801953c:	f7e7 f866 	bl	800060c <__aeabi_dmul>
 8019540:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019544:	4680      	mov	r8, r0
 8019546:	4689      	mov	r9, r1
 8019548:	4650      	mov	r0, sl
 801954a:	4659      	mov	r1, fp
 801954c:	f7e7 f85e 	bl	800060c <__aeabi_dmul>
 8019550:	4602      	mov	r2, r0
 8019552:	460b      	mov	r3, r1
 8019554:	4640      	mov	r0, r8
 8019556:	4649      	mov	r1, r9
 8019558:	f7e6 fea2 	bl	80002a0 <__adddf3>
 801955c:	4632      	mov	r2, r6
 801955e:	463b      	mov	r3, r7
 8019560:	4680      	mov	r8, r0
 8019562:	4689      	mov	r9, r1
 8019564:	4620      	mov	r0, r4
 8019566:	4629      	mov	r1, r5
 8019568:	f7e7 f850 	bl	800060c <__aeabi_dmul>
 801956c:	460b      	mov	r3, r1
 801956e:	4604      	mov	r4, r0
 8019570:	460d      	mov	r5, r1
 8019572:	4602      	mov	r2, r0
 8019574:	4649      	mov	r1, r9
 8019576:	4640      	mov	r0, r8
 8019578:	f7e6 fe92 	bl	80002a0 <__adddf3>
 801957c:	4b19      	ldr	r3, [pc, #100]	; (80195e4 <__ieee754_pow+0x3fc>)
 801957e:	4299      	cmp	r1, r3
 8019580:	ec45 4b19 	vmov	d9, r4, r5
 8019584:	4606      	mov	r6, r0
 8019586:	460f      	mov	r7, r1
 8019588:	468b      	mov	fp, r1
 801958a:	f340 82f1 	ble.w	8019b70 <__ieee754_pow+0x988>
 801958e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019596:	4303      	orrs	r3, r0
 8019598:	f000 81e4 	beq.w	8019964 <__ieee754_pow+0x77c>
 801959c:	ec51 0b18 	vmov	r0, r1, d8
 80195a0:	2200      	movs	r2, #0
 80195a2:	2300      	movs	r3, #0
 80195a4:	f7e7 faa4 	bl	8000af0 <__aeabi_dcmplt>
 80195a8:	3800      	subs	r0, #0
 80195aa:	bf18      	it	ne
 80195ac:	2001      	movne	r0, #1
 80195ae:	e72b      	b.n	8019408 <__ieee754_pow+0x220>
 80195b0:	60000000 	.word	0x60000000
 80195b4:	3ff71547 	.word	0x3ff71547
 80195b8:	f85ddf44 	.word	0xf85ddf44
 80195bc:	3e54ae0b 	.word	0x3e54ae0b
 80195c0:	55555555 	.word	0x55555555
 80195c4:	3fd55555 	.word	0x3fd55555
 80195c8:	652b82fe 	.word	0x652b82fe
 80195cc:	3ff71547 	.word	0x3ff71547
 80195d0:	00000000 	.word	0x00000000
 80195d4:	bff00000 	.word	0xbff00000
 80195d8:	3ff00000 	.word	0x3ff00000
 80195dc:	3fd00000 	.word	0x3fd00000
 80195e0:	3fe00000 	.word	0x3fe00000
 80195e4:	408fffff 	.word	0x408fffff
 80195e8:	4bd5      	ldr	r3, [pc, #852]	; (8019940 <__ieee754_pow+0x758>)
 80195ea:	402b      	ands	r3, r5
 80195ec:	2200      	movs	r2, #0
 80195ee:	b92b      	cbnz	r3, 80195fc <__ieee754_pow+0x414>
 80195f0:	4bd4      	ldr	r3, [pc, #848]	; (8019944 <__ieee754_pow+0x75c>)
 80195f2:	f7e7 f80b 	bl	800060c <__aeabi_dmul>
 80195f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80195fa:	460c      	mov	r4, r1
 80195fc:	1523      	asrs	r3, r4, #20
 80195fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019602:	4413      	add	r3, r2
 8019604:	9305      	str	r3, [sp, #20]
 8019606:	4bd0      	ldr	r3, [pc, #832]	; (8019948 <__ieee754_pow+0x760>)
 8019608:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801960c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019610:	429c      	cmp	r4, r3
 8019612:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019616:	dd08      	ble.n	801962a <__ieee754_pow+0x442>
 8019618:	4bcc      	ldr	r3, [pc, #816]	; (801994c <__ieee754_pow+0x764>)
 801961a:	429c      	cmp	r4, r3
 801961c:	f340 8162 	ble.w	80198e4 <__ieee754_pow+0x6fc>
 8019620:	9b05      	ldr	r3, [sp, #20]
 8019622:	3301      	adds	r3, #1
 8019624:	9305      	str	r3, [sp, #20]
 8019626:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801962a:	2400      	movs	r4, #0
 801962c:	00e3      	lsls	r3, r4, #3
 801962e:	9307      	str	r3, [sp, #28]
 8019630:	4bc7      	ldr	r3, [pc, #796]	; (8019950 <__ieee754_pow+0x768>)
 8019632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019636:	ed93 7b00 	vldr	d7, [r3]
 801963a:	4629      	mov	r1, r5
 801963c:	ec53 2b17 	vmov	r2, r3, d7
 8019640:	eeb0 9a47 	vmov.f32	s18, s14
 8019644:	eef0 9a67 	vmov.f32	s19, s15
 8019648:	4682      	mov	sl, r0
 801964a:	f7e6 fe27 	bl	800029c <__aeabi_dsub>
 801964e:	4652      	mov	r2, sl
 8019650:	4606      	mov	r6, r0
 8019652:	460f      	mov	r7, r1
 8019654:	462b      	mov	r3, r5
 8019656:	ec51 0b19 	vmov	r0, r1, d9
 801965a:	f7e6 fe21 	bl	80002a0 <__adddf3>
 801965e:	4602      	mov	r2, r0
 8019660:	460b      	mov	r3, r1
 8019662:	2000      	movs	r0, #0
 8019664:	49bb      	ldr	r1, [pc, #748]	; (8019954 <__ieee754_pow+0x76c>)
 8019666:	f7e7 f8fb 	bl	8000860 <__aeabi_ddiv>
 801966a:	ec41 0b1a 	vmov	d10, r0, r1
 801966e:	4602      	mov	r2, r0
 8019670:	460b      	mov	r3, r1
 8019672:	4630      	mov	r0, r6
 8019674:	4639      	mov	r1, r7
 8019676:	f7e6 ffc9 	bl	800060c <__aeabi_dmul>
 801967a:	2300      	movs	r3, #0
 801967c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019680:	9302      	str	r3, [sp, #8]
 8019682:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019686:	46ab      	mov	fp, r5
 8019688:	106d      	asrs	r5, r5, #1
 801968a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801968e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019692:	ec41 0b18 	vmov	d8, r0, r1
 8019696:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801969a:	2200      	movs	r2, #0
 801969c:	4640      	mov	r0, r8
 801969e:	4649      	mov	r1, r9
 80196a0:	4614      	mov	r4, r2
 80196a2:	461d      	mov	r5, r3
 80196a4:	f7e6 ffb2 	bl	800060c <__aeabi_dmul>
 80196a8:	4602      	mov	r2, r0
 80196aa:	460b      	mov	r3, r1
 80196ac:	4630      	mov	r0, r6
 80196ae:	4639      	mov	r1, r7
 80196b0:	f7e6 fdf4 	bl	800029c <__aeabi_dsub>
 80196b4:	ec53 2b19 	vmov	r2, r3, d9
 80196b8:	4606      	mov	r6, r0
 80196ba:	460f      	mov	r7, r1
 80196bc:	4620      	mov	r0, r4
 80196be:	4629      	mov	r1, r5
 80196c0:	f7e6 fdec 	bl	800029c <__aeabi_dsub>
 80196c4:	4602      	mov	r2, r0
 80196c6:	460b      	mov	r3, r1
 80196c8:	4650      	mov	r0, sl
 80196ca:	4659      	mov	r1, fp
 80196cc:	f7e6 fde6 	bl	800029c <__aeabi_dsub>
 80196d0:	4642      	mov	r2, r8
 80196d2:	464b      	mov	r3, r9
 80196d4:	f7e6 ff9a 	bl	800060c <__aeabi_dmul>
 80196d8:	4602      	mov	r2, r0
 80196da:	460b      	mov	r3, r1
 80196dc:	4630      	mov	r0, r6
 80196de:	4639      	mov	r1, r7
 80196e0:	f7e6 fddc 	bl	800029c <__aeabi_dsub>
 80196e4:	ec53 2b1a 	vmov	r2, r3, d10
 80196e8:	f7e6 ff90 	bl	800060c <__aeabi_dmul>
 80196ec:	ec53 2b18 	vmov	r2, r3, d8
 80196f0:	ec41 0b19 	vmov	d9, r0, r1
 80196f4:	ec51 0b18 	vmov	r0, r1, d8
 80196f8:	f7e6 ff88 	bl	800060c <__aeabi_dmul>
 80196fc:	a37c      	add	r3, pc, #496	; (adr r3, 80198f0 <__ieee754_pow+0x708>)
 80196fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019702:	4604      	mov	r4, r0
 8019704:	460d      	mov	r5, r1
 8019706:	f7e6 ff81 	bl	800060c <__aeabi_dmul>
 801970a:	a37b      	add	r3, pc, #492	; (adr r3, 80198f8 <__ieee754_pow+0x710>)
 801970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019710:	f7e6 fdc6 	bl	80002a0 <__adddf3>
 8019714:	4622      	mov	r2, r4
 8019716:	462b      	mov	r3, r5
 8019718:	f7e6 ff78 	bl	800060c <__aeabi_dmul>
 801971c:	a378      	add	r3, pc, #480	; (adr r3, 8019900 <__ieee754_pow+0x718>)
 801971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019722:	f7e6 fdbd 	bl	80002a0 <__adddf3>
 8019726:	4622      	mov	r2, r4
 8019728:	462b      	mov	r3, r5
 801972a:	f7e6 ff6f 	bl	800060c <__aeabi_dmul>
 801972e:	a376      	add	r3, pc, #472	; (adr r3, 8019908 <__ieee754_pow+0x720>)
 8019730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019734:	f7e6 fdb4 	bl	80002a0 <__adddf3>
 8019738:	4622      	mov	r2, r4
 801973a:	462b      	mov	r3, r5
 801973c:	f7e6 ff66 	bl	800060c <__aeabi_dmul>
 8019740:	a373      	add	r3, pc, #460	; (adr r3, 8019910 <__ieee754_pow+0x728>)
 8019742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019746:	f7e6 fdab 	bl	80002a0 <__adddf3>
 801974a:	4622      	mov	r2, r4
 801974c:	462b      	mov	r3, r5
 801974e:	f7e6 ff5d 	bl	800060c <__aeabi_dmul>
 8019752:	a371      	add	r3, pc, #452	; (adr r3, 8019918 <__ieee754_pow+0x730>)
 8019754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019758:	f7e6 fda2 	bl	80002a0 <__adddf3>
 801975c:	4622      	mov	r2, r4
 801975e:	4606      	mov	r6, r0
 8019760:	460f      	mov	r7, r1
 8019762:	462b      	mov	r3, r5
 8019764:	4620      	mov	r0, r4
 8019766:	4629      	mov	r1, r5
 8019768:	f7e6 ff50 	bl	800060c <__aeabi_dmul>
 801976c:	4602      	mov	r2, r0
 801976e:	460b      	mov	r3, r1
 8019770:	4630      	mov	r0, r6
 8019772:	4639      	mov	r1, r7
 8019774:	f7e6 ff4a 	bl	800060c <__aeabi_dmul>
 8019778:	4642      	mov	r2, r8
 801977a:	4604      	mov	r4, r0
 801977c:	460d      	mov	r5, r1
 801977e:	464b      	mov	r3, r9
 8019780:	ec51 0b18 	vmov	r0, r1, d8
 8019784:	f7e6 fd8c 	bl	80002a0 <__adddf3>
 8019788:	ec53 2b19 	vmov	r2, r3, d9
 801978c:	f7e6 ff3e 	bl	800060c <__aeabi_dmul>
 8019790:	4622      	mov	r2, r4
 8019792:	462b      	mov	r3, r5
 8019794:	f7e6 fd84 	bl	80002a0 <__adddf3>
 8019798:	4642      	mov	r2, r8
 801979a:	4682      	mov	sl, r0
 801979c:	468b      	mov	fp, r1
 801979e:	464b      	mov	r3, r9
 80197a0:	4640      	mov	r0, r8
 80197a2:	4649      	mov	r1, r9
 80197a4:	f7e6 ff32 	bl	800060c <__aeabi_dmul>
 80197a8:	4b6b      	ldr	r3, [pc, #428]	; (8019958 <__ieee754_pow+0x770>)
 80197aa:	2200      	movs	r2, #0
 80197ac:	4606      	mov	r6, r0
 80197ae:	460f      	mov	r7, r1
 80197b0:	f7e6 fd76 	bl	80002a0 <__adddf3>
 80197b4:	4652      	mov	r2, sl
 80197b6:	465b      	mov	r3, fp
 80197b8:	f7e6 fd72 	bl	80002a0 <__adddf3>
 80197bc:	2000      	movs	r0, #0
 80197be:	4604      	mov	r4, r0
 80197c0:	460d      	mov	r5, r1
 80197c2:	4602      	mov	r2, r0
 80197c4:	460b      	mov	r3, r1
 80197c6:	4640      	mov	r0, r8
 80197c8:	4649      	mov	r1, r9
 80197ca:	f7e6 ff1f 	bl	800060c <__aeabi_dmul>
 80197ce:	4b62      	ldr	r3, [pc, #392]	; (8019958 <__ieee754_pow+0x770>)
 80197d0:	4680      	mov	r8, r0
 80197d2:	4689      	mov	r9, r1
 80197d4:	2200      	movs	r2, #0
 80197d6:	4620      	mov	r0, r4
 80197d8:	4629      	mov	r1, r5
 80197da:	f7e6 fd5f 	bl	800029c <__aeabi_dsub>
 80197de:	4632      	mov	r2, r6
 80197e0:	463b      	mov	r3, r7
 80197e2:	f7e6 fd5b 	bl	800029c <__aeabi_dsub>
 80197e6:	4602      	mov	r2, r0
 80197e8:	460b      	mov	r3, r1
 80197ea:	4650      	mov	r0, sl
 80197ec:	4659      	mov	r1, fp
 80197ee:	f7e6 fd55 	bl	800029c <__aeabi_dsub>
 80197f2:	ec53 2b18 	vmov	r2, r3, d8
 80197f6:	f7e6 ff09 	bl	800060c <__aeabi_dmul>
 80197fa:	4622      	mov	r2, r4
 80197fc:	4606      	mov	r6, r0
 80197fe:	460f      	mov	r7, r1
 8019800:	462b      	mov	r3, r5
 8019802:	ec51 0b19 	vmov	r0, r1, d9
 8019806:	f7e6 ff01 	bl	800060c <__aeabi_dmul>
 801980a:	4602      	mov	r2, r0
 801980c:	460b      	mov	r3, r1
 801980e:	4630      	mov	r0, r6
 8019810:	4639      	mov	r1, r7
 8019812:	f7e6 fd45 	bl	80002a0 <__adddf3>
 8019816:	4606      	mov	r6, r0
 8019818:	460f      	mov	r7, r1
 801981a:	4602      	mov	r2, r0
 801981c:	460b      	mov	r3, r1
 801981e:	4640      	mov	r0, r8
 8019820:	4649      	mov	r1, r9
 8019822:	f7e6 fd3d 	bl	80002a0 <__adddf3>
 8019826:	a33e      	add	r3, pc, #248	; (adr r3, 8019920 <__ieee754_pow+0x738>)
 8019828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801982c:	2000      	movs	r0, #0
 801982e:	4604      	mov	r4, r0
 8019830:	460d      	mov	r5, r1
 8019832:	f7e6 feeb 	bl	800060c <__aeabi_dmul>
 8019836:	4642      	mov	r2, r8
 8019838:	ec41 0b18 	vmov	d8, r0, r1
 801983c:	464b      	mov	r3, r9
 801983e:	4620      	mov	r0, r4
 8019840:	4629      	mov	r1, r5
 8019842:	f7e6 fd2b 	bl	800029c <__aeabi_dsub>
 8019846:	4602      	mov	r2, r0
 8019848:	460b      	mov	r3, r1
 801984a:	4630      	mov	r0, r6
 801984c:	4639      	mov	r1, r7
 801984e:	f7e6 fd25 	bl	800029c <__aeabi_dsub>
 8019852:	a335      	add	r3, pc, #212	; (adr r3, 8019928 <__ieee754_pow+0x740>)
 8019854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019858:	f7e6 fed8 	bl	800060c <__aeabi_dmul>
 801985c:	a334      	add	r3, pc, #208	; (adr r3, 8019930 <__ieee754_pow+0x748>)
 801985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019862:	4606      	mov	r6, r0
 8019864:	460f      	mov	r7, r1
 8019866:	4620      	mov	r0, r4
 8019868:	4629      	mov	r1, r5
 801986a:	f7e6 fecf 	bl	800060c <__aeabi_dmul>
 801986e:	4602      	mov	r2, r0
 8019870:	460b      	mov	r3, r1
 8019872:	4630      	mov	r0, r6
 8019874:	4639      	mov	r1, r7
 8019876:	f7e6 fd13 	bl	80002a0 <__adddf3>
 801987a:	9a07      	ldr	r2, [sp, #28]
 801987c:	4b37      	ldr	r3, [pc, #220]	; (801995c <__ieee754_pow+0x774>)
 801987e:	4413      	add	r3, r2
 8019880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019884:	f7e6 fd0c 	bl	80002a0 <__adddf3>
 8019888:	4682      	mov	sl, r0
 801988a:	9805      	ldr	r0, [sp, #20]
 801988c:	468b      	mov	fp, r1
 801988e:	f7e6 fe53 	bl	8000538 <__aeabi_i2d>
 8019892:	9a07      	ldr	r2, [sp, #28]
 8019894:	4b32      	ldr	r3, [pc, #200]	; (8019960 <__ieee754_pow+0x778>)
 8019896:	4413      	add	r3, r2
 8019898:	e9d3 8900 	ldrd	r8, r9, [r3]
 801989c:	4606      	mov	r6, r0
 801989e:	460f      	mov	r7, r1
 80198a0:	4652      	mov	r2, sl
 80198a2:	465b      	mov	r3, fp
 80198a4:	ec51 0b18 	vmov	r0, r1, d8
 80198a8:	f7e6 fcfa 	bl	80002a0 <__adddf3>
 80198ac:	4642      	mov	r2, r8
 80198ae:	464b      	mov	r3, r9
 80198b0:	f7e6 fcf6 	bl	80002a0 <__adddf3>
 80198b4:	4632      	mov	r2, r6
 80198b6:	463b      	mov	r3, r7
 80198b8:	f7e6 fcf2 	bl	80002a0 <__adddf3>
 80198bc:	2000      	movs	r0, #0
 80198be:	4632      	mov	r2, r6
 80198c0:	463b      	mov	r3, r7
 80198c2:	4604      	mov	r4, r0
 80198c4:	460d      	mov	r5, r1
 80198c6:	f7e6 fce9 	bl	800029c <__aeabi_dsub>
 80198ca:	4642      	mov	r2, r8
 80198cc:	464b      	mov	r3, r9
 80198ce:	f7e6 fce5 	bl	800029c <__aeabi_dsub>
 80198d2:	ec53 2b18 	vmov	r2, r3, d8
 80198d6:	f7e6 fce1 	bl	800029c <__aeabi_dsub>
 80198da:	4602      	mov	r2, r0
 80198dc:	460b      	mov	r3, r1
 80198de:	4650      	mov	r0, sl
 80198e0:	4659      	mov	r1, fp
 80198e2:	e610      	b.n	8019506 <__ieee754_pow+0x31e>
 80198e4:	2401      	movs	r4, #1
 80198e6:	e6a1      	b.n	801962c <__ieee754_pow+0x444>
 80198e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8019938 <__ieee754_pow+0x750>
 80198ec:	e617      	b.n	801951e <__ieee754_pow+0x336>
 80198ee:	bf00      	nop
 80198f0:	4a454eef 	.word	0x4a454eef
 80198f4:	3fca7e28 	.word	0x3fca7e28
 80198f8:	93c9db65 	.word	0x93c9db65
 80198fc:	3fcd864a 	.word	0x3fcd864a
 8019900:	a91d4101 	.word	0xa91d4101
 8019904:	3fd17460 	.word	0x3fd17460
 8019908:	518f264d 	.word	0x518f264d
 801990c:	3fd55555 	.word	0x3fd55555
 8019910:	db6fabff 	.word	0xdb6fabff
 8019914:	3fdb6db6 	.word	0x3fdb6db6
 8019918:	33333303 	.word	0x33333303
 801991c:	3fe33333 	.word	0x3fe33333
 8019920:	e0000000 	.word	0xe0000000
 8019924:	3feec709 	.word	0x3feec709
 8019928:	dc3a03fd 	.word	0xdc3a03fd
 801992c:	3feec709 	.word	0x3feec709
 8019930:	145b01f5 	.word	0x145b01f5
 8019934:	be3e2fe0 	.word	0xbe3e2fe0
 8019938:	00000000 	.word	0x00000000
 801993c:	3ff00000 	.word	0x3ff00000
 8019940:	7ff00000 	.word	0x7ff00000
 8019944:	43400000 	.word	0x43400000
 8019948:	0003988e 	.word	0x0003988e
 801994c:	000bb679 	.word	0x000bb679
 8019950:	0801f368 	.word	0x0801f368
 8019954:	3ff00000 	.word	0x3ff00000
 8019958:	40080000 	.word	0x40080000
 801995c:	0801f388 	.word	0x0801f388
 8019960:	0801f378 	.word	0x0801f378
 8019964:	a3b5      	add	r3, pc, #724	; (adr r3, 8019c3c <__ieee754_pow+0xa54>)
 8019966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801996a:	4640      	mov	r0, r8
 801996c:	4649      	mov	r1, r9
 801996e:	f7e6 fc97 	bl	80002a0 <__adddf3>
 8019972:	4622      	mov	r2, r4
 8019974:	ec41 0b1a 	vmov	d10, r0, r1
 8019978:	462b      	mov	r3, r5
 801997a:	4630      	mov	r0, r6
 801997c:	4639      	mov	r1, r7
 801997e:	f7e6 fc8d 	bl	800029c <__aeabi_dsub>
 8019982:	4602      	mov	r2, r0
 8019984:	460b      	mov	r3, r1
 8019986:	ec51 0b1a 	vmov	r0, r1, d10
 801998a:	f7e7 f8cf 	bl	8000b2c <__aeabi_dcmpgt>
 801998e:	2800      	cmp	r0, #0
 8019990:	f47f ae04 	bne.w	801959c <__ieee754_pow+0x3b4>
 8019994:	4aa4      	ldr	r2, [pc, #656]	; (8019c28 <__ieee754_pow+0xa40>)
 8019996:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801999a:	4293      	cmp	r3, r2
 801999c:	f340 8108 	ble.w	8019bb0 <__ieee754_pow+0x9c8>
 80199a0:	151b      	asrs	r3, r3, #20
 80199a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80199a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80199aa:	fa4a f303 	asr.w	r3, sl, r3
 80199ae:	445b      	add	r3, fp
 80199b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80199b4:	4e9d      	ldr	r6, [pc, #628]	; (8019c2c <__ieee754_pow+0xa44>)
 80199b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80199ba:	4116      	asrs	r6, r2
 80199bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80199c0:	2000      	movs	r0, #0
 80199c2:	ea23 0106 	bic.w	r1, r3, r6
 80199c6:	f1c2 0214 	rsb	r2, r2, #20
 80199ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80199ce:	fa4a fa02 	asr.w	sl, sl, r2
 80199d2:	f1bb 0f00 	cmp.w	fp, #0
 80199d6:	4602      	mov	r2, r0
 80199d8:	460b      	mov	r3, r1
 80199da:	4620      	mov	r0, r4
 80199dc:	4629      	mov	r1, r5
 80199de:	bfb8      	it	lt
 80199e0:	f1ca 0a00 	rsblt	sl, sl, #0
 80199e4:	f7e6 fc5a 	bl	800029c <__aeabi_dsub>
 80199e8:	ec41 0b19 	vmov	d9, r0, r1
 80199ec:	4642      	mov	r2, r8
 80199ee:	464b      	mov	r3, r9
 80199f0:	ec51 0b19 	vmov	r0, r1, d9
 80199f4:	f7e6 fc54 	bl	80002a0 <__adddf3>
 80199f8:	a37b      	add	r3, pc, #492	; (adr r3, 8019be8 <__ieee754_pow+0xa00>)
 80199fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199fe:	2000      	movs	r0, #0
 8019a00:	4604      	mov	r4, r0
 8019a02:	460d      	mov	r5, r1
 8019a04:	f7e6 fe02 	bl	800060c <__aeabi_dmul>
 8019a08:	ec53 2b19 	vmov	r2, r3, d9
 8019a0c:	4606      	mov	r6, r0
 8019a0e:	460f      	mov	r7, r1
 8019a10:	4620      	mov	r0, r4
 8019a12:	4629      	mov	r1, r5
 8019a14:	f7e6 fc42 	bl	800029c <__aeabi_dsub>
 8019a18:	4602      	mov	r2, r0
 8019a1a:	460b      	mov	r3, r1
 8019a1c:	4640      	mov	r0, r8
 8019a1e:	4649      	mov	r1, r9
 8019a20:	f7e6 fc3c 	bl	800029c <__aeabi_dsub>
 8019a24:	a372      	add	r3, pc, #456	; (adr r3, 8019bf0 <__ieee754_pow+0xa08>)
 8019a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a2a:	f7e6 fdef 	bl	800060c <__aeabi_dmul>
 8019a2e:	a372      	add	r3, pc, #456	; (adr r3, 8019bf8 <__ieee754_pow+0xa10>)
 8019a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a34:	4680      	mov	r8, r0
 8019a36:	4689      	mov	r9, r1
 8019a38:	4620      	mov	r0, r4
 8019a3a:	4629      	mov	r1, r5
 8019a3c:	f7e6 fde6 	bl	800060c <__aeabi_dmul>
 8019a40:	4602      	mov	r2, r0
 8019a42:	460b      	mov	r3, r1
 8019a44:	4640      	mov	r0, r8
 8019a46:	4649      	mov	r1, r9
 8019a48:	f7e6 fc2a 	bl	80002a0 <__adddf3>
 8019a4c:	4604      	mov	r4, r0
 8019a4e:	460d      	mov	r5, r1
 8019a50:	4602      	mov	r2, r0
 8019a52:	460b      	mov	r3, r1
 8019a54:	4630      	mov	r0, r6
 8019a56:	4639      	mov	r1, r7
 8019a58:	f7e6 fc22 	bl	80002a0 <__adddf3>
 8019a5c:	4632      	mov	r2, r6
 8019a5e:	463b      	mov	r3, r7
 8019a60:	4680      	mov	r8, r0
 8019a62:	4689      	mov	r9, r1
 8019a64:	f7e6 fc1a 	bl	800029c <__aeabi_dsub>
 8019a68:	4602      	mov	r2, r0
 8019a6a:	460b      	mov	r3, r1
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	4629      	mov	r1, r5
 8019a70:	f7e6 fc14 	bl	800029c <__aeabi_dsub>
 8019a74:	4642      	mov	r2, r8
 8019a76:	4606      	mov	r6, r0
 8019a78:	460f      	mov	r7, r1
 8019a7a:	464b      	mov	r3, r9
 8019a7c:	4640      	mov	r0, r8
 8019a7e:	4649      	mov	r1, r9
 8019a80:	f7e6 fdc4 	bl	800060c <__aeabi_dmul>
 8019a84:	a35e      	add	r3, pc, #376	; (adr r3, 8019c00 <__ieee754_pow+0xa18>)
 8019a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a8a:	4604      	mov	r4, r0
 8019a8c:	460d      	mov	r5, r1
 8019a8e:	f7e6 fdbd 	bl	800060c <__aeabi_dmul>
 8019a92:	a35d      	add	r3, pc, #372	; (adr r3, 8019c08 <__ieee754_pow+0xa20>)
 8019a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a98:	f7e6 fc00 	bl	800029c <__aeabi_dsub>
 8019a9c:	4622      	mov	r2, r4
 8019a9e:	462b      	mov	r3, r5
 8019aa0:	f7e6 fdb4 	bl	800060c <__aeabi_dmul>
 8019aa4:	a35a      	add	r3, pc, #360	; (adr r3, 8019c10 <__ieee754_pow+0xa28>)
 8019aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aaa:	f7e6 fbf9 	bl	80002a0 <__adddf3>
 8019aae:	4622      	mov	r2, r4
 8019ab0:	462b      	mov	r3, r5
 8019ab2:	f7e6 fdab 	bl	800060c <__aeabi_dmul>
 8019ab6:	a358      	add	r3, pc, #352	; (adr r3, 8019c18 <__ieee754_pow+0xa30>)
 8019ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019abc:	f7e6 fbee 	bl	800029c <__aeabi_dsub>
 8019ac0:	4622      	mov	r2, r4
 8019ac2:	462b      	mov	r3, r5
 8019ac4:	f7e6 fda2 	bl	800060c <__aeabi_dmul>
 8019ac8:	a355      	add	r3, pc, #340	; (adr r3, 8019c20 <__ieee754_pow+0xa38>)
 8019aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ace:	f7e6 fbe7 	bl	80002a0 <__adddf3>
 8019ad2:	4622      	mov	r2, r4
 8019ad4:	462b      	mov	r3, r5
 8019ad6:	f7e6 fd99 	bl	800060c <__aeabi_dmul>
 8019ada:	4602      	mov	r2, r0
 8019adc:	460b      	mov	r3, r1
 8019ade:	4640      	mov	r0, r8
 8019ae0:	4649      	mov	r1, r9
 8019ae2:	f7e6 fbdb 	bl	800029c <__aeabi_dsub>
 8019ae6:	4604      	mov	r4, r0
 8019ae8:	460d      	mov	r5, r1
 8019aea:	4602      	mov	r2, r0
 8019aec:	460b      	mov	r3, r1
 8019aee:	4640      	mov	r0, r8
 8019af0:	4649      	mov	r1, r9
 8019af2:	f7e6 fd8b 	bl	800060c <__aeabi_dmul>
 8019af6:	2200      	movs	r2, #0
 8019af8:	ec41 0b19 	vmov	d9, r0, r1
 8019afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019b00:	4620      	mov	r0, r4
 8019b02:	4629      	mov	r1, r5
 8019b04:	f7e6 fbca 	bl	800029c <__aeabi_dsub>
 8019b08:	4602      	mov	r2, r0
 8019b0a:	460b      	mov	r3, r1
 8019b0c:	ec51 0b19 	vmov	r0, r1, d9
 8019b10:	f7e6 fea6 	bl	8000860 <__aeabi_ddiv>
 8019b14:	4632      	mov	r2, r6
 8019b16:	4604      	mov	r4, r0
 8019b18:	460d      	mov	r5, r1
 8019b1a:	463b      	mov	r3, r7
 8019b1c:	4640      	mov	r0, r8
 8019b1e:	4649      	mov	r1, r9
 8019b20:	f7e6 fd74 	bl	800060c <__aeabi_dmul>
 8019b24:	4632      	mov	r2, r6
 8019b26:	463b      	mov	r3, r7
 8019b28:	f7e6 fbba 	bl	80002a0 <__adddf3>
 8019b2c:	4602      	mov	r2, r0
 8019b2e:	460b      	mov	r3, r1
 8019b30:	4620      	mov	r0, r4
 8019b32:	4629      	mov	r1, r5
 8019b34:	f7e6 fbb2 	bl	800029c <__aeabi_dsub>
 8019b38:	4642      	mov	r2, r8
 8019b3a:	464b      	mov	r3, r9
 8019b3c:	f7e6 fbae 	bl	800029c <__aeabi_dsub>
 8019b40:	460b      	mov	r3, r1
 8019b42:	4602      	mov	r2, r0
 8019b44:	493a      	ldr	r1, [pc, #232]	; (8019c30 <__ieee754_pow+0xa48>)
 8019b46:	2000      	movs	r0, #0
 8019b48:	f7e6 fba8 	bl	800029c <__aeabi_dsub>
 8019b4c:	ec41 0b10 	vmov	d0, r0, r1
 8019b50:	ee10 3a90 	vmov	r3, s1
 8019b54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019b5c:	da2b      	bge.n	8019bb6 <__ieee754_pow+0x9ce>
 8019b5e:	4650      	mov	r0, sl
 8019b60:	f000 fba2 	bl	801a2a8 <scalbn>
 8019b64:	ec51 0b10 	vmov	r0, r1, d0
 8019b68:	ec53 2b18 	vmov	r2, r3, d8
 8019b6c:	f7ff bbed 	b.w	801934a <__ieee754_pow+0x162>
 8019b70:	4b30      	ldr	r3, [pc, #192]	; (8019c34 <__ieee754_pow+0xa4c>)
 8019b72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019b76:	429e      	cmp	r6, r3
 8019b78:	f77f af0c 	ble.w	8019994 <__ieee754_pow+0x7ac>
 8019b7c:	4b2e      	ldr	r3, [pc, #184]	; (8019c38 <__ieee754_pow+0xa50>)
 8019b7e:	440b      	add	r3, r1
 8019b80:	4303      	orrs	r3, r0
 8019b82:	d009      	beq.n	8019b98 <__ieee754_pow+0x9b0>
 8019b84:	ec51 0b18 	vmov	r0, r1, d8
 8019b88:	2200      	movs	r2, #0
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	f7e6 ffb0 	bl	8000af0 <__aeabi_dcmplt>
 8019b90:	3800      	subs	r0, #0
 8019b92:	bf18      	it	ne
 8019b94:	2001      	movne	r0, #1
 8019b96:	e447      	b.n	8019428 <__ieee754_pow+0x240>
 8019b98:	4622      	mov	r2, r4
 8019b9a:	462b      	mov	r3, r5
 8019b9c:	f7e6 fb7e 	bl	800029c <__aeabi_dsub>
 8019ba0:	4642      	mov	r2, r8
 8019ba2:	464b      	mov	r3, r9
 8019ba4:	f7e6 ffb8 	bl	8000b18 <__aeabi_dcmpge>
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	f43f aef3 	beq.w	8019994 <__ieee754_pow+0x7ac>
 8019bae:	e7e9      	b.n	8019b84 <__ieee754_pow+0x99c>
 8019bb0:	f04f 0a00 	mov.w	sl, #0
 8019bb4:	e71a      	b.n	80199ec <__ieee754_pow+0x804>
 8019bb6:	ec51 0b10 	vmov	r0, r1, d0
 8019bba:	4619      	mov	r1, r3
 8019bbc:	e7d4      	b.n	8019b68 <__ieee754_pow+0x980>
 8019bbe:	491c      	ldr	r1, [pc, #112]	; (8019c30 <__ieee754_pow+0xa48>)
 8019bc0:	2000      	movs	r0, #0
 8019bc2:	f7ff bb30 	b.w	8019226 <__ieee754_pow+0x3e>
 8019bc6:	2000      	movs	r0, #0
 8019bc8:	2100      	movs	r1, #0
 8019bca:	f7ff bb2c 	b.w	8019226 <__ieee754_pow+0x3e>
 8019bce:	4630      	mov	r0, r6
 8019bd0:	4639      	mov	r1, r7
 8019bd2:	f7ff bb28 	b.w	8019226 <__ieee754_pow+0x3e>
 8019bd6:	9204      	str	r2, [sp, #16]
 8019bd8:	f7ff bb7a 	b.w	80192d0 <__ieee754_pow+0xe8>
 8019bdc:	2300      	movs	r3, #0
 8019bde:	f7ff bb64 	b.w	80192aa <__ieee754_pow+0xc2>
 8019be2:	bf00      	nop
 8019be4:	f3af 8000 	nop.w
 8019be8:	00000000 	.word	0x00000000
 8019bec:	3fe62e43 	.word	0x3fe62e43
 8019bf0:	fefa39ef 	.word	0xfefa39ef
 8019bf4:	3fe62e42 	.word	0x3fe62e42
 8019bf8:	0ca86c39 	.word	0x0ca86c39
 8019bfc:	be205c61 	.word	0xbe205c61
 8019c00:	72bea4d0 	.word	0x72bea4d0
 8019c04:	3e663769 	.word	0x3e663769
 8019c08:	c5d26bf1 	.word	0xc5d26bf1
 8019c0c:	3ebbbd41 	.word	0x3ebbbd41
 8019c10:	af25de2c 	.word	0xaf25de2c
 8019c14:	3f11566a 	.word	0x3f11566a
 8019c18:	16bebd93 	.word	0x16bebd93
 8019c1c:	3f66c16c 	.word	0x3f66c16c
 8019c20:	5555553e 	.word	0x5555553e
 8019c24:	3fc55555 	.word	0x3fc55555
 8019c28:	3fe00000 	.word	0x3fe00000
 8019c2c:	000fffff 	.word	0x000fffff
 8019c30:	3ff00000 	.word	0x3ff00000
 8019c34:	4090cbff 	.word	0x4090cbff
 8019c38:	3f6f3400 	.word	0x3f6f3400
 8019c3c:	652b82fe 	.word	0x652b82fe
 8019c40:	3c971547 	.word	0x3c971547

08019c44 <__ieee754_sqrt>:
 8019c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c48:	ec55 4b10 	vmov	r4, r5, d0
 8019c4c:	4e55      	ldr	r6, [pc, #340]	; (8019da4 <__ieee754_sqrt+0x160>)
 8019c4e:	43ae      	bics	r6, r5
 8019c50:	ee10 0a10 	vmov	r0, s0
 8019c54:	ee10 3a10 	vmov	r3, s0
 8019c58:	462a      	mov	r2, r5
 8019c5a:	4629      	mov	r1, r5
 8019c5c:	d110      	bne.n	8019c80 <__ieee754_sqrt+0x3c>
 8019c5e:	ee10 2a10 	vmov	r2, s0
 8019c62:	462b      	mov	r3, r5
 8019c64:	f7e6 fcd2 	bl	800060c <__aeabi_dmul>
 8019c68:	4602      	mov	r2, r0
 8019c6a:	460b      	mov	r3, r1
 8019c6c:	4620      	mov	r0, r4
 8019c6e:	4629      	mov	r1, r5
 8019c70:	f7e6 fb16 	bl	80002a0 <__adddf3>
 8019c74:	4604      	mov	r4, r0
 8019c76:	460d      	mov	r5, r1
 8019c78:	ec45 4b10 	vmov	d0, r4, r5
 8019c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c80:	2d00      	cmp	r5, #0
 8019c82:	dc10      	bgt.n	8019ca6 <__ieee754_sqrt+0x62>
 8019c84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019c88:	4330      	orrs	r0, r6
 8019c8a:	d0f5      	beq.n	8019c78 <__ieee754_sqrt+0x34>
 8019c8c:	b15d      	cbz	r5, 8019ca6 <__ieee754_sqrt+0x62>
 8019c8e:	ee10 2a10 	vmov	r2, s0
 8019c92:	462b      	mov	r3, r5
 8019c94:	ee10 0a10 	vmov	r0, s0
 8019c98:	f7e6 fb00 	bl	800029c <__aeabi_dsub>
 8019c9c:	4602      	mov	r2, r0
 8019c9e:	460b      	mov	r3, r1
 8019ca0:	f7e6 fdde 	bl	8000860 <__aeabi_ddiv>
 8019ca4:	e7e6      	b.n	8019c74 <__ieee754_sqrt+0x30>
 8019ca6:	1512      	asrs	r2, r2, #20
 8019ca8:	d074      	beq.n	8019d94 <__ieee754_sqrt+0x150>
 8019caa:	07d4      	lsls	r4, r2, #31
 8019cac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019cb0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8019cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019cb8:	bf5e      	ittt	pl
 8019cba:	0fda      	lsrpl	r2, r3, #31
 8019cbc:	005b      	lslpl	r3, r3, #1
 8019cbe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8019cc2:	2400      	movs	r4, #0
 8019cc4:	0fda      	lsrs	r2, r3, #31
 8019cc6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8019cca:	107f      	asrs	r7, r7, #1
 8019ccc:	005b      	lsls	r3, r3, #1
 8019cce:	2516      	movs	r5, #22
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019cd6:	1886      	adds	r6, r0, r2
 8019cd8:	428e      	cmp	r6, r1
 8019cda:	bfde      	ittt	le
 8019cdc:	1b89      	suble	r1, r1, r6
 8019cde:	18b0      	addle	r0, r6, r2
 8019ce0:	18a4      	addle	r4, r4, r2
 8019ce2:	0049      	lsls	r1, r1, #1
 8019ce4:	3d01      	subs	r5, #1
 8019ce6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8019cea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8019cee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019cf2:	d1f0      	bne.n	8019cd6 <__ieee754_sqrt+0x92>
 8019cf4:	462a      	mov	r2, r5
 8019cf6:	f04f 0e20 	mov.w	lr, #32
 8019cfa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019cfe:	4281      	cmp	r1, r0
 8019d00:	eb06 0c05 	add.w	ip, r6, r5
 8019d04:	dc02      	bgt.n	8019d0c <__ieee754_sqrt+0xc8>
 8019d06:	d113      	bne.n	8019d30 <__ieee754_sqrt+0xec>
 8019d08:	459c      	cmp	ip, r3
 8019d0a:	d811      	bhi.n	8019d30 <__ieee754_sqrt+0xec>
 8019d0c:	f1bc 0f00 	cmp.w	ip, #0
 8019d10:	eb0c 0506 	add.w	r5, ip, r6
 8019d14:	da43      	bge.n	8019d9e <__ieee754_sqrt+0x15a>
 8019d16:	2d00      	cmp	r5, #0
 8019d18:	db41      	blt.n	8019d9e <__ieee754_sqrt+0x15a>
 8019d1a:	f100 0801 	add.w	r8, r0, #1
 8019d1e:	1a09      	subs	r1, r1, r0
 8019d20:	459c      	cmp	ip, r3
 8019d22:	bf88      	it	hi
 8019d24:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8019d28:	eba3 030c 	sub.w	r3, r3, ip
 8019d2c:	4432      	add	r2, r6
 8019d2e:	4640      	mov	r0, r8
 8019d30:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8019d34:	f1be 0e01 	subs.w	lr, lr, #1
 8019d38:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019d40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019d44:	d1db      	bne.n	8019cfe <__ieee754_sqrt+0xba>
 8019d46:	430b      	orrs	r3, r1
 8019d48:	d006      	beq.n	8019d58 <__ieee754_sqrt+0x114>
 8019d4a:	1c50      	adds	r0, r2, #1
 8019d4c:	bf13      	iteet	ne
 8019d4e:	3201      	addne	r2, #1
 8019d50:	3401      	addeq	r4, #1
 8019d52:	4672      	moveq	r2, lr
 8019d54:	f022 0201 	bicne.w	r2, r2, #1
 8019d58:	1063      	asrs	r3, r4, #1
 8019d5a:	0852      	lsrs	r2, r2, #1
 8019d5c:	07e1      	lsls	r1, r4, #31
 8019d5e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019d62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019d66:	bf48      	it	mi
 8019d68:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019d6c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019d70:	4614      	mov	r4, r2
 8019d72:	e781      	b.n	8019c78 <__ieee754_sqrt+0x34>
 8019d74:	0ad9      	lsrs	r1, r3, #11
 8019d76:	3815      	subs	r0, #21
 8019d78:	055b      	lsls	r3, r3, #21
 8019d7a:	2900      	cmp	r1, #0
 8019d7c:	d0fa      	beq.n	8019d74 <__ieee754_sqrt+0x130>
 8019d7e:	02cd      	lsls	r5, r1, #11
 8019d80:	d50a      	bpl.n	8019d98 <__ieee754_sqrt+0x154>
 8019d82:	f1c2 0420 	rsb	r4, r2, #32
 8019d86:	fa23 f404 	lsr.w	r4, r3, r4
 8019d8a:	1e55      	subs	r5, r2, #1
 8019d8c:	4093      	lsls	r3, r2
 8019d8e:	4321      	orrs	r1, r4
 8019d90:	1b42      	subs	r2, r0, r5
 8019d92:	e78a      	b.n	8019caa <__ieee754_sqrt+0x66>
 8019d94:	4610      	mov	r0, r2
 8019d96:	e7f0      	b.n	8019d7a <__ieee754_sqrt+0x136>
 8019d98:	0049      	lsls	r1, r1, #1
 8019d9a:	3201      	adds	r2, #1
 8019d9c:	e7ef      	b.n	8019d7e <__ieee754_sqrt+0x13a>
 8019d9e:	4680      	mov	r8, r0
 8019da0:	e7bd      	b.n	8019d1e <__ieee754_sqrt+0xda>
 8019da2:	bf00      	nop
 8019da4:	7ff00000 	.word	0x7ff00000

08019da8 <__ieee754_expf>:
 8019da8:	ee10 2a10 	vmov	r2, s0
 8019dac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019db0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019db4:	d902      	bls.n	8019dbc <__ieee754_expf+0x14>
 8019db6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019dba:	4770      	bx	lr
 8019dbc:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8019dc0:	d106      	bne.n	8019dd0 <__ieee754_expf+0x28>
 8019dc2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019efc <__ieee754_expf+0x154>
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	bf18      	it	ne
 8019dca:	eeb0 0a67 	vmovne.f32	s0, s15
 8019dce:	4770      	bx	lr
 8019dd0:	484b      	ldr	r0, [pc, #300]	; (8019f00 <__ieee754_expf+0x158>)
 8019dd2:	4282      	cmp	r2, r0
 8019dd4:	dd02      	ble.n	8019ddc <__ieee754_expf+0x34>
 8019dd6:	2000      	movs	r0, #0
 8019dd8:	f000 ba4c 	b.w	801a274 <__math_oflowf>
 8019ddc:	2a00      	cmp	r2, #0
 8019dde:	da05      	bge.n	8019dec <__ieee754_expf+0x44>
 8019de0:	4a48      	ldr	r2, [pc, #288]	; (8019f04 <__ieee754_expf+0x15c>)
 8019de2:	4291      	cmp	r1, r2
 8019de4:	d902      	bls.n	8019dec <__ieee754_expf+0x44>
 8019de6:	2000      	movs	r0, #0
 8019de8:	f000 ba3e 	b.w	801a268 <__math_uflowf>
 8019dec:	4a46      	ldr	r2, [pc, #280]	; (8019f08 <__ieee754_expf+0x160>)
 8019dee:	4291      	cmp	r1, r2
 8019df0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019df4:	d952      	bls.n	8019e9c <__ieee754_expf+0xf4>
 8019df6:	4a45      	ldr	r2, [pc, #276]	; (8019f0c <__ieee754_expf+0x164>)
 8019df8:	4291      	cmp	r1, r2
 8019dfa:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8019dfe:	d834      	bhi.n	8019e6a <__ieee754_expf+0xc2>
 8019e00:	4943      	ldr	r1, [pc, #268]	; (8019f10 <__ieee754_expf+0x168>)
 8019e02:	4411      	add	r1, r2
 8019e04:	ed91 7a00 	vldr	s14, [r1]
 8019e08:	4942      	ldr	r1, [pc, #264]	; (8019f14 <__ieee754_expf+0x16c>)
 8019e0a:	440a      	add	r2, r1
 8019e0c:	edd2 7a00 	vldr	s15, [r2]
 8019e10:	ee30 7a47 	vsub.f32	s14, s0, s14
 8019e14:	f1c3 0201 	rsb	r2, r3, #1
 8019e18:	1ad2      	subs	r2, r2, r3
 8019e1a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8019e1e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8019e22:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019f18 <__ieee754_expf+0x170>
 8019e26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019f1c <__ieee754_expf+0x174>
 8019e2a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019e2e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019f20 <__ieee754_expf+0x178>
 8019e32:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019e36:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8019f24 <__ieee754_expf+0x17c>
 8019e3a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019e3e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019f28 <__ieee754_expf+0x180>
 8019e42:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019e46:	eef0 6a40 	vmov.f32	s13, s0
 8019e4a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019e4e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019e52:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019e56:	bb92      	cbnz	r2, 8019ebe <__ieee754_expf+0x116>
 8019e58:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019e5c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019e60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019e64:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019e68:	4770      	bx	lr
 8019e6a:	4b30      	ldr	r3, [pc, #192]	; (8019f2c <__ieee754_expf+0x184>)
 8019e6c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019f30 <__ieee754_expf+0x188>
 8019e70:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019f34 <__ieee754_expf+0x18c>
 8019e74:	4413      	add	r3, r2
 8019e76:	edd3 7a00 	vldr	s15, [r3]
 8019e7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019e7e:	eeb0 7a40 	vmov.f32	s14, s0
 8019e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e86:	ee17 2a90 	vmov	r2, s15
 8019e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e8e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019e92:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019f38 <__ieee754_expf+0x190>
 8019e96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e9a:	e7be      	b.n	8019e1a <__ieee754_expf+0x72>
 8019e9c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8019ea0:	d20b      	bcs.n	8019eba <__ieee754_expf+0x112>
 8019ea2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019f3c <__ieee754_expf+0x194>
 8019ea6:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019eaa:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eb2:	dd02      	ble.n	8019eba <__ieee754_expf+0x112>
 8019eb4:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019eb8:	4770      	bx	lr
 8019eba:	2200      	movs	r2, #0
 8019ebc:	e7af      	b.n	8019e1e <__ieee754_expf+0x76>
 8019ebe:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019ec2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019ec6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8019eca:	bfb8      	it	lt
 8019ecc:	3264      	addlt	r2, #100	; 0x64
 8019ece:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019ed2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019ed6:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8019eda:	ee17 3a90 	vmov	r3, s15
 8019ede:	bfab      	itete	ge
 8019ee0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019ee4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019ee8:	ee00 3a10 	vmovge	s0, r3
 8019eec:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019f40 <__ieee754_expf+0x198>
 8019ef0:	bfbc      	itt	lt
 8019ef2:	ee00 3a10 	vmovlt	s0, r3
 8019ef6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019efa:	4770      	bx	lr
 8019efc:	00000000 	.word	0x00000000
 8019f00:	42b17217 	.word	0x42b17217
 8019f04:	42cff1b5 	.word	0x42cff1b5
 8019f08:	3eb17218 	.word	0x3eb17218
 8019f0c:	3f851591 	.word	0x3f851591
 8019f10:	0801f3a0 	.word	0x0801f3a0
 8019f14:	0801f3a8 	.word	0x0801f3a8
 8019f18:	3331bb4c 	.word	0x3331bb4c
 8019f1c:	b5ddea0e 	.word	0xb5ddea0e
 8019f20:	388ab355 	.word	0x388ab355
 8019f24:	bb360b61 	.word	0xbb360b61
 8019f28:	3e2aaaab 	.word	0x3e2aaaab
 8019f2c:	0801f398 	.word	0x0801f398
 8019f30:	3fb8aa3b 	.word	0x3fb8aa3b
 8019f34:	3f317180 	.word	0x3f317180
 8019f38:	3717f7d1 	.word	0x3717f7d1
 8019f3c:	7149f2ca 	.word	0x7149f2ca
 8019f40:	0d800000 	.word	0x0d800000

08019f44 <__ieee754_logf>:
 8019f44:	ee10 3a10 	vmov	r3, s0
 8019f48:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019f4c:	d106      	bne.n	8019f5c <__ieee754_logf+0x18>
 8019f4e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801a0e4 <__ieee754_logf+0x1a0>
 8019f52:	eddf 7a65 	vldr	s15, [pc, #404]	; 801a0e8 <__ieee754_logf+0x1a4>
 8019f56:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019f5a:	4770      	bx	lr
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	da02      	bge.n	8019f66 <__ieee754_logf+0x22>
 8019f60:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019f64:	e7f5      	b.n	8019f52 <__ieee754_logf+0xe>
 8019f66:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019f6a:	db02      	blt.n	8019f72 <__ieee754_logf+0x2e>
 8019f6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019f70:	4770      	bx	lr
 8019f72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019f76:	bfb8      	it	lt
 8019f78:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801a0ec <__ieee754_logf+0x1a8>
 8019f7c:	485c      	ldr	r0, [pc, #368]	; (801a0f0 <__ieee754_logf+0x1ac>)
 8019f7e:	bfbe      	ittt	lt
 8019f80:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019f84:	f06f 0118 	mvnlt.w	r1, #24
 8019f88:	ee17 3a90 	vmovlt	r3, s15
 8019f8c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8019f90:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019f94:	4418      	add	r0, r3
 8019f96:	bfa8      	it	ge
 8019f98:	2100      	movge	r1, #0
 8019f9a:	3a7f      	subs	r2, #127	; 0x7f
 8019f9c:	440a      	add	r2, r1
 8019f9e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8019fa2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8019fa6:	4319      	orrs	r1, r3
 8019fa8:	ee00 1a10 	vmov	s0, r1
 8019fac:	4951      	ldr	r1, [pc, #324]	; (801a0f4 <__ieee754_logf+0x1b0>)
 8019fae:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8019fb2:	f103 000f 	add.w	r0, r3, #15
 8019fb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019fba:	4001      	ands	r1, r0
 8019fbc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019fc0:	bb89      	cbnz	r1, 801a026 <__ieee754_logf+0xe2>
 8019fc2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fca:	d10f      	bne.n	8019fec <__ieee754_logf+0xa8>
 8019fcc:	2a00      	cmp	r2, #0
 8019fce:	f000 8085 	beq.w	801a0dc <__ieee754_logf+0x198>
 8019fd2:	ee07 2a90 	vmov	s15, r2
 8019fd6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801a0f8 <__ieee754_logf+0x1b4>
 8019fda:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801a0fc <__ieee754_logf+0x1b8>
 8019fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fe2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019fe6:	eea7 0a87 	vfma.f32	s0, s15, s14
 8019fea:	4770      	bx	lr
 8019fec:	eddf 6a44 	vldr	s13, [pc, #272]	; 801a100 <__ieee754_logf+0x1bc>
 8019ff0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019ff4:	eee0 7a66 	vfms.f32	s15, s0, s13
 8019ff8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a000:	b912      	cbnz	r2, 801a008 <__ieee754_logf+0xc4>
 801a002:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a006:	4770      	bx	lr
 801a008:	ee07 2a90 	vmov	s15, r2
 801a00c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801a0f8 <__ieee754_logf+0x1b4>
 801a010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a014:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801a018:	ee37 0a40 	vsub.f32	s0, s14, s0
 801a01c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801a0fc <__ieee754_logf+0x1b8>
 801a020:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801a024:	4770      	bx	lr
 801a026:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801a02a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a02e:	eddf 5a35 	vldr	s11, [pc, #212]	; 801a104 <__ieee754_logf+0x1c0>
 801a032:	eddf 4a35 	vldr	s9, [pc, #212]	; 801a108 <__ieee754_logf+0x1c4>
 801a036:	4935      	ldr	r1, [pc, #212]	; (801a10c <__ieee754_logf+0x1c8>)
 801a038:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801a03c:	4419      	add	r1, r3
 801a03e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801a042:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a046:	430b      	orrs	r3, r1
 801a048:	2b00      	cmp	r3, #0
 801a04a:	ee07 2a90 	vmov	s15, r2
 801a04e:	ee26 5a06 	vmul.f32	s10, s12, s12
 801a052:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a056:	ee25 7a05 	vmul.f32	s14, s10, s10
 801a05a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801a110 <__ieee754_logf+0x1cc>
 801a05e:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a062:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801a114 <__ieee754_logf+0x1d0>
 801a066:	eee7 5a87 	vfma.f32	s11, s15, s14
 801a06a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a118 <__ieee754_logf+0x1d4>
 801a06e:	eee7 7a24 	vfma.f32	s15, s14, s9
 801a072:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801a11c <__ieee754_logf+0x1d8>
 801a076:	eee7 4a87 	vfma.f32	s9, s15, s14
 801a07a:	eddf 7a29 	vldr	s15, [pc, #164]	; 801a120 <__ieee754_logf+0x1dc>
 801a07e:	eee4 7a87 	vfma.f32	s15, s9, s14
 801a082:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a086:	eee5 7a87 	vfma.f32	s15, s11, s14
 801a08a:	dd1c      	ble.n	801a0c6 <__ieee754_logf+0x182>
 801a08c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a090:	ee20 7a07 	vmul.f32	s14, s0, s14
 801a094:	ee27 7a00 	vmul.f32	s14, s14, s0
 801a098:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a09c:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a0a0:	b922      	cbnz	r2, 801a0ac <__ieee754_logf+0x168>
 801a0a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a0a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a0aa:	4770      	bx	lr
 801a0ac:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801a0f8 <__ieee754_logf+0x1b4>
 801a0b0:	eee6 7a86 	vfma.f32	s15, s13, s12
 801a0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a0b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a0bc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a0fc <__ieee754_logf+0x1b8>
 801a0c0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801a0c4:	4770      	bx	lr
 801a0c6:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a0ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a0ce:	2a00      	cmp	r2, #0
 801a0d0:	d0e9      	beq.n	801a0a6 <__ieee754_logf+0x162>
 801a0d2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801a0f8 <__ieee754_logf+0x1b4>
 801a0d6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801a0da:	e7ed      	b.n	801a0b8 <__ieee754_logf+0x174>
 801a0dc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801a0e8 <__ieee754_logf+0x1a4>
 801a0e0:	4770      	bx	lr
 801a0e2:	bf00      	nop
 801a0e4:	cc000000 	.word	0xcc000000
 801a0e8:	00000000 	.word	0x00000000
 801a0ec:	4c000000 	.word	0x4c000000
 801a0f0:	004afb20 	.word	0x004afb20
 801a0f4:	007ffff0 	.word	0x007ffff0
 801a0f8:	3717f7d1 	.word	0x3717f7d1
 801a0fc:	3f317180 	.word	0x3f317180
 801a100:	3eaaaaab 	.word	0x3eaaaaab
 801a104:	3e1cd04f 	.word	0x3e1cd04f
 801a108:	3e178897 	.word	0x3e178897
 801a10c:	ffcf5c30 	.word	0xffcf5c30
 801a110:	3e638e29 	.word	0x3e638e29
 801a114:	3ecccccd 	.word	0x3ecccccd
 801a118:	3e3a3325 	.word	0x3e3a3325
 801a11c:	3e924925 	.word	0x3e924925
 801a120:	3f2aaaab 	.word	0x3f2aaaab

0801a124 <__ieee754_log10f>:
 801a124:	b508      	push	{r3, lr}
 801a126:	ee10 2a10 	vmov	r2, s0
 801a12a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801a12e:	ed2d 8b02 	vpush	{d8}
 801a132:	d108      	bne.n	801a146 <__ieee754_log10f+0x22>
 801a134:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801a1bc <__ieee754_log10f+0x98>
 801a138:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a1c0 <__ieee754_log10f+0x9c>
 801a13c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801a140:	ecbd 8b02 	vpop	{d8}
 801a144:	bd08      	pop	{r3, pc}
 801a146:	2a00      	cmp	r2, #0
 801a148:	da02      	bge.n	801a150 <__ieee754_log10f+0x2c>
 801a14a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801a14e:	e7f3      	b.n	801a138 <__ieee754_log10f+0x14>
 801a150:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a154:	db02      	blt.n	801a15c <__ieee754_log10f+0x38>
 801a156:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a15a:	e7f1      	b.n	801a140 <__ieee754_log10f+0x1c>
 801a15c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801a160:	bfbf      	itttt	lt
 801a162:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801a1c4 <__ieee754_log10f+0xa0>
 801a166:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801a16a:	f06f 0118 	mvnlt.w	r1, #24
 801a16e:	ee17 2a90 	vmovlt	r2, s15
 801a172:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801a176:	bfa8      	it	ge
 801a178:	2100      	movge	r1, #0
 801a17a:	3b7f      	subs	r3, #127	; 0x7f
 801a17c:	440b      	add	r3, r1
 801a17e:	0fd9      	lsrs	r1, r3, #31
 801a180:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a184:	ee07 3a90 	vmov	s15, r3
 801a188:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a18c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801a190:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a194:	ee00 3a10 	vmov	s0, r3
 801a198:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801a19c:	f7ff fed2 	bl	8019f44 <__ieee754_logf>
 801a1a0:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a1c8 <__ieee754_log10f+0xa4>
 801a1a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a1a8:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a1cc <__ieee754_log10f+0xa8>
 801a1ac:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a1b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a1d0 <__ieee754_log10f+0xac>
 801a1b4:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a1b8:	e7c2      	b.n	801a140 <__ieee754_log10f+0x1c>
 801a1ba:	bf00      	nop
 801a1bc:	cc000000 	.word	0xcc000000
 801a1c0:	00000000 	.word	0x00000000
 801a1c4:	4c000000 	.word	0x4c000000
 801a1c8:	3ede5bd9 	.word	0x3ede5bd9
 801a1cc:	355427db 	.word	0x355427db
 801a1d0:	3e9a2080 	.word	0x3e9a2080

0801a1d4 <__ieee754_sqrtf>:
 801a1d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a1d8:	4770      	bx	lr

0801a1da <with_errno>:
 801a1da:	b570      	push	{r4, r5, r6, lr}
 801a1dc:	4604      	mov	r4, r0
 801a1de:	460d      	mov	r5, r1
 801a1e0:	4616      	mov	r6, r2
 801a1e2:	f000 f929 	bl	801a438 <__errno>
 801a1e6:	4629      	mov	r1, r5
 801a1e8:	6006      	str	r6, [r0, #0]
 801a1ea:	4620      	mov	r0, r4
 801a1ec:	bd70      	pop	{r4, r5, r6, pc}

0801a1ee <xflow>:
 801a1ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1f0:	4614      	mov	r4, r2
 801a1f2:	461d      	mov	r5, r3
 801a1f4:	b108      	cbz	r0, 801a1fa <xflow+0xc>
 801a1f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a1fa:	e9cd 2300 	strd	r2, r3, [sp]
 801a1fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a202:	4620      	mov	r0, r4
 801a204:	4629      	mov	r1, r5
 801a206:	f7e6 fa01 	bl	800060c <__aeabi_dmul>
 801a20a:	2222      	movs	r2, #34	; 0x22
 801a20c:	b003      	add	sp, #12
 801a20e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a212:	f7ff bfe2 	b.w	801a1da <with_errno>

0801a216 <__math_uflow>:
 801a216:	b508      	push	{r3, lr}
 801a218:	2200      	movs	r2, #0
 801a21a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a21e:	f7ff ffe6 	bl	801a1ee <xflow>
 801a222:	ec41 0b10 	vmov	d0, r0, r1
 801a226:	bd08      	pop	{r3, pc}

0801a228 <__math_oflow>:
 801a228:	b508      	push	{r3, lr}
 801a22a:	2200      	movs	r2, #0
 801a22c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801a230:	f7ff ffdd 	bl	801a1ee <xflow>
 801a234:	ec41 0b10 	vmov	d0, r0, r1
 801a238:	bd08      	pop	{r3, pc}

0801a23a <with_errnof>:
 801a23a:	b513      	push	{r0, r1, r4, lr}
 801a23c:	4604      	mov	r4, r0
 801a23e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a242:	f000 f8f9 	bl	801a438 <__errno>
 801a246:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a24a:	6004      	str	r4, [r0, #0]
 801a24c:	b002      	add	sp, #8
 801a24e:	bd10      	pop	{r4, pc}

0801a250 <xflowf>:
 801a250:	b130      	cbz	r0, 801a260 <xflowf+0x10>
 801a252:	eef1 7a40 	vneg.f32	s15, s0
 801a256:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a25a:	2022      	movs	r0, #34	; 0x22
 801a25c:	f7ff bfed 	b.w	801a23a <with_errnof>
 801a260:	eef0 7a40 	vmov.f32	s15, s0
 801a264:	e7f7      	b.n	801a256 <xflowf+0x6>
	...

0801a268 <__math_uflowf>:
 801a268:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a270 <__math_uflowf+0x8>
 801a26c:	f7ff bff0 	b.w	801a250 <xflowf>
 801a270:	10000000 	.word	0x10000000

0801a274 <__math_oflowf>:
 801a274:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a27c <__math_oflowf+0x8>
 801a278:	f7ff bfea 	b.w	801a250 <xflowf>
 801a27c:	70000000 	.word	0x70000000

0801a280 <fabs>:
 801a280:	ec51 0b10 	vmov	r0, r1, d0
 801a284:	ee10 2a10 	vmov	r2, s0
 801a288:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a28c:	ec43 2b10 	vmov	d0, r2, r3
 801a290:	4770      	bx	lr

0801a292 <finite>:
 801a292:	b082      	sub	sp, #8
 801a294:	ed8d 0b00 	vstr	d0, [sp]
 801a298:	9801      	ldr	r0, [sp, #4]
 801a29a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a29e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a2a2:	0fc0      	lsrs	r0, r0, #31
 801a2a4:	b002      	add	sp, #8
 801a2a6:	4770      	bx	lr

0801a2a8 <scalbn>:
 801a2a8:	b570      	push	{r4, r5, r6, lr}
 801a2aa:	ec55 4b10 	vmov	r4, r5, d0
 801a2ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a2b2:	4606      	mov	r6, r0
 801a2b4:	462b      	mov	r3, r5
 801a2b6:	b99a      	cbnz	r2, 801a2e0 <scalbn+0x38>
 801a2b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a2bc:	4323      	orrs	r3, r4
 801a2be:	d036      	beq.n	801a32e <scalbn+0x86>
 801a2c0:	4b39      	ldr	r3, [pc, #228]	; (801a3a8 <scalbn+0x100>)
 801a2c2:	4629      	mov	r1, r5
 801a2c4:	ee10 0a10 	vmov	r0, s0
 801a2c8:	2200      	movs	r2, #0
 801a2ca:	f7e6 f99f 	bl	800060c <__aeabi_dmul>
 801a2ce:	4b37      	ldr	r3, [pc, #220]	; (801a3ac <scalbn+0x104>)
 801a2d0:	429e      	cmp	r6, r3
 801a2d2:	4604      	mov	r4, r0
 801a2d4:	460d      	mov	r5, r1
 801a2d6:	da10      	bge.n	801a2fa <scalbn+0x52>
 801a2d8:	a32b      	add	r3, pc, #172	; (adr r3, 801a388 <scalbn+0xe0>)
 801a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2de:	e03a      	b.n	801a356 <scalbn+0xae>
 801a2e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a2e4:	428a      	cmp	r2, r1
 801a2e6:	d10c      	bne.n	801a302 <scalbn+0x5a>
 801a2e8:	ee10 2a10 	vmov	r2, s0
 801a2ec:	4620      	mov	r0, r4
 801a2ee:	4629      	mov	r1, r5
 801a2f0:	f7e5 ffd6 	bl	80002a0 <__adddf3>
 801a2f4:	4604      	mov	r4, r0
 801a2f6:	460d      	mov	r5, r1
 801a2f8:	e019      	b.n	801a32e <scalbn+0x86>
 801a2fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a2fe:	460b      	mov	r3, r1
 801a300:	3a36      	subs	r2, #54	; 0x36
 801a302:	4432      	add	r2, r6
 801a304:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a308:	428a      	cmp	r2, r1
 801a30a:	dd08      	ble.n	801a31e <scalbn+0x76>
 801a30c:	2d00      	cmp	r5, #0
 801a30e:	a120      	add	r1, pc, #128	; (adr r1, 801a390 <scalbn+0xe8>)
 801a310:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a314:	da1c      	bge.n	801a350 <scalbn+0xa8>
 801a316:	a120      	add	r1, pc, #128	; (adr r1, 801a398 <scalbn+0xf0>)
 801a318:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a31c:	e018      	b.n	801a350 <scalbn+0xa8>
 801a31e:	2a00      	cmp	r2, #0
 801a320:	dd08      	ble.n	801a334 <scalbn+0x8c>
 801a322:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a326:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a32a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a32e:	ec45 4b10 	vmov	d0, r4, r5
 801a332:	bd70      	pop	{r4, r5, r6, pc}
 801a334:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a338:	da19      	bge.n	801a36e <scalbn+0xc6>
 801a33a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a33e:	429e      	cmp	r6, r3
 801a340:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a344:	dd0a      	ble.n	801a35c <scalbn+0xb4>
 801a346:	a112      	add	r1, pc, #72	; (adr r1, 801a390 <scalbn+0xe8>)
 801a348:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d1e2      	bne.n	801a316 <scalbn+0x6e>
 801a350:	a30f      	add	r3, pc, #60	; (adr r3, 801a390 <scalbn+0xe8>)
 801a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a356:	f7e6 f959 	bl	800060c <__aeabi_dmul>
 801a35a:	e7cb      	b.n	801a2f4 <scalbn+0x4c>
 801a35c:	a10a      	add	r1, pc, #40	; (adr r1, 801a388 <scalbn+0xe0>)
 801a35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d0b8      	beq.n	801a2d8 <scalbn+0x30>
 801a366:	a10e      	add	r1, pc, #56	; (adr r1, 801a3a0 <scalbn+0xf8>)
 801a368:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a36c:	e7b4      	b.n	801a2d8 <scalbn+0x30>
 801a36e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a372:	3236      	adds	r2, #54	; 0x36
 801a374:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a378:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a37c:	4620      	mov	r0, r4
 801a37e:	4b0c      	ldr	r3, [pc, #48]	; (801a3b0 <scalbn+0x108>)
 801a380:	2200      	movs	r2, #0
 801a382:	e7e8      	b.n	801a356 <scalbn+0xae>
 801a384:	f3af 8000 	nop.w
 801a388:	c2f8f359 	.word	0xc2f8f359
 801a38c:	01a56e1f 	.word	0x01a56e1f
 801a390:	8800759c 	.word	0x8800759c
 801a394:	7e37e43c 	.word	0x7e37e43c
 801a398:	8800759c 	.word	0x8800759c
 801a39c:	fe37e43c 	.word	0xfe37e43c
 801a3a0:	c2f8f359 	.word	0xc2f8f359
 801a3a4:	81a56e1f 	.word	0x81a56e1f
 801a3a8:	43500000 	.word	0x43500000
 801a3ac:	ffff3cb0 	.word	0xffff3cb0
 801a3b0:	3c900000 	.word	0x3c900000

0801a3b4 <finitef>:
 801a3b4:	b082      	sub	sp, #8
 801a3b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a3ba:	9801      	ldr	r0, [sp, #4]
 801a3bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a3c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a3c4:	bfac      	ite	ge
 801a3c6:	2000      	movge	r0, #0
 801a3c8:	2001      	movlt	r0, #1
 801a3ca:	b002      	add	sp, #8
 801a3cc:	4770      	bx	lr
	...

0801a3d0 <nanf>:
 801a3d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a3d8 <nanf+0x8>
 801a3d4:	4770      	bx	lr
 801a3d6:	bf00      	nop
 801a3d8:	7fc00000 	.word	0x7fc00000

0801a3dc <abort>:
 801a3dc:	b508      	push	{r3, lr}
 801a3de:	2006      	movs	r0, #6
 801a3e0:	f000 ff9c 	bl	801b31c <raise>
 801a3e4:	2001      	movs	r0, #1
 801a3e6:	f7ea ff31 	bl	800524c <_exit>
	...

0801a3ec <__assert_func>:
 801a3ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3ee:	4614      	mov	r4, r2
 801a3f0:	461a      	mov	r2, r3
 801a3f2:	4b09      	ldr	r3, [pc, #36]	; (801a418 <__assert_func+0x2c>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	4605      	mov	r5, r0
 801a3f8:	68d8      	ldr	r0, [r3, #12]
 801a3fa:	b14c      	cbz	r4, 801a410 <__assert_func+0x24>
 801a3fc:	4b07      	ldr	r3, [pc, #28]	; (801a41c <__assert_func+0x30>)
 801a3fe:	9100      	str	r1, [sp, #0]
 801a400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a404:	4906      	ldr	r1, [pc, #24]	; (801a420 <__assert_func+0x34>)
 801a406:	462b      	mov	r3, r5
 801a408:	f000 f81c 	bl	801a444 <fiprintf>
 801a40c:	f7ff ffe6 	bl	801a3dc <abort>
 801a410:	4b04      	ldr	r3, [pc, #16]	; (801a424 <__assert_func+0x38>)
 801a412:	461c      	mov	r4, r3
 801a414:	e7f3      	b.n	801a3fe <__assert_func+0x12>
 801a416:	bf00      	nop
 801a418:	200028c8 	.word	0x200028c8
 801a41c:	0801f3b0 	.word	0x0801f3b0
 801a420:	0801f3bd 	.word	0x0801f3bd
 801a424:	0801f3eb 	.word	0x0801f3eb

0801a428 <calloc>:
 801a428:	4b02      	ldr	r3, [pc, #8]	; (801a434 <calloc+0xc>)
 801a42a:	460a      	mov	r2, r1
 801a42c:	4601      	mov	r1, r0
 801a42e:	6818      	ldr	r0, [r3, #0]
 801a430:	f000 b882 	b.w	801a538 <_calloc_r>
 801a434:	200028c8 	.word	0x200028c8

0801a438 <__errno>:
 801a438:	4b01      	ldr	r3, [pc, #4]	; (801a440 <__errno+0x8>)
 801a43a:	6818      	ldr	r0, [r3, #0]
 801a43c:	4770      	bx	lr
 801a43e:	bf00      	nop
 801a440:	200028c8 	.word	0x200028c8

0801a444 <fiprintf>:
 801a444:	b40e      	push	{r1, r2, r3}
 801a446:	b503      	push	{r0, r1, lr}
 801a448:	4601      	mov	r1, r0
 801a44a:	ab03      	add	r3, sp, #12
 801a44c:	4805      	ldr	r0, [pc, #20]	; (801a464 <fiprintf+0x20>)
 801a44e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a452:	6800      	ldr	r0, [r0, #0]
 801a454:	9301      	str	r3, [sp, #4]
 801a456:	f000 f98f 	bl	801a778 <_vfiprintf_r>
 801a45a:	b002      	add	sp, #8
 801a45c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a460:	b003      	add	sp, #12
 801a462:	4770      	bx	lr
 801a464:	200028c8 	.word	0x200028c8

0801a468 <__libc_init_array>:
 801a468:	b570      	push	{r4, r5, r6, lr}
 801a46a:	4d0d      	ldr	r5, [pc, #52]	; (801a4a0 <__libc_init_array+0x38>)
 801a46c:	4c0d      	ldr	r4, [pc, #52]	; (801a4a4 <__libc_init_array+0x3c>)
 801a46e:	1b64      	subs	r4, r4, r5
 801a470:	10a4      	asrs	r4, r4, #2
 801a472:	2600      	movs	r6, #0
 801a474:	42a6      	cmp	r6, r4
 801a476:	d109      	bne.n	801a48c <__libc_init_array+0x24>
 801a478:	4d0b      	ldr	r5, [pc, #44]	; (801a4a8 <__libc_init_array+0x40>)
 801a47a:	4c0c      	ldr	r4, [pc, #48]	; (801a4ac <__libc_init_array+0x44>)
 801a47c:	f002 fed4 	bl	801d228 <_init>
 801a480:	1b64      	subs	r4, r4, r5
 801a482:	10a4      	asrs	r4, r4, #2
 801a484:	2600      	movs	r6, #0
 801a486:	42a6      	cmp	r6, r4
 801a488:	d105      	bne.n	801a496 <__libc_init_array+0x2e>
 801a48a:	bd70      	pop	{r4, r5, r6, pc}
 801a48c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a490:	4798      	blx	r3
 801a492:	3601      	adds	r6, #1
 801a494:	e7ee      	b.n	801a474 <__libc_init_array+0xc>
 801a496:	f855 3b04 	ldr.w	r3, [r5], #4
 801a49a:	4798      	blx	r3
 801a49c:	3601      	adds	r6, #1
 801a49e:	e7f2      	b.n	801a486 <__libc_init_array+0x1e>
 801a4a0:	0801f794 	.word	0x0801f794
 801a4a4:	0801f794 	.word	0x0801f794
 801a4a8:	0801f794 	.word	0x0801f794
 801a4ac:	0801f79c 	.word	0x0801f79c

0801a4b0 <__retarget_lock_init_recursive>:
 801a4b0:	4770      	bx	lr

0801a4b2 <__retarget_lock_acquire_recursive>:
 801a4b2:	4770      	bx	lr

0801a4b4 <__retarget_lock_release_recursive>:
 801a4b4:	4770      	bx	lr
	...

0801a4b8 <malloc>:
 801a4b8:	4b02      	ldr	r3, [pc, #8]	; (801a4c4 <malloc+0xc>)
 801a4ba:	4601      	mov	r1, r0
 801a4bc:	6818      	ldr	r0, [r3, #0]
 801a4be:	f000 b8bd 	b.w	801a63c <_malloc_r>
 801a4c2:	bf00      	nop
 801a4c4:	200028c8 	.word	0x200028c8

0801a4c8 <free>:
 801a4c8:	4b02      	ldr	r3, [pc, #8]	; (801a4d4 <free+0xc>)
 801a4ca:	4601      	mov	r1, r0
 801a4cc:	6818      	ldr	r0, [r3, #0]
 801a4ce:	f000 b849 	b.w	801a564 <_free_r>
 801a4d2:	bf00      	nop
 801a4d4:	200028c8 	.word	0x200028c8

0801a4d8 <memcpy>:
 801a4d8:	440a      	add	r2, r1
 801a4da:	4291      	cmp	r1, r2
 801a4dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801a4e0:	d100      	bne.n	801a4e4 <memcpy+0xc>
 801a4e2:	4770      	bx	lr
 801a4e4:	b510      	push	{r4, lr}
 801a4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a4ee:	4291      	cmp	r1, r2
 801a4f0:	d1f9      	bne.n	801a4e6 <memcpy+0xe>
 801a4f2:	bd10      	pop	{r4, pc}

0801a4f4 <memmove>:
 801a4f4:	4288      	cmp	r0, r1
 801a4f6:	b510      	push	{r4, lr}
 801a4f8:	eb01 0402 	add.w	r4, r1, r2
 801a4fc:	d902      	bls.n	801a504 <memmove+0x10>
 801a4fe:	4284      	cmp	r4, r0
 801a500:	4623      	mov	r3, r4
 801a502:	d807      	bhi.n	801a514 <memmove+0x20>
 801a504:	1e43      	subs	r3, r0, #1
 801a506:	42a1      	cmp	r1, r4
 801a508:	d008      	beq.n	801a51c <memmove+0x28>
 801a50a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a50e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a512:	e7f8      	b.n	801a506 <memmove+0x12>
 801a514:	4402      	add	r2, r0
 801a516:	4601      	mov	r1, r0
 801a518:	428a      	cmp	r2, r1
 801a51a:	d100      	bne.n	801a51e <memmove+0x2a>
 801a51c:	bd10      	pop	{r4, pc}
 801a51e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a526:	e7f7      	b.n	801a518 <memmove+0x24>

0801a528 <memset>:
 801a528:	4402      	add	r2, r0
 801a52a:	4603      	mov	r3, r0
 801a52c:	4293      	cmp	r3, r2
 801a52e:	d100      	bne.n	801a532 <memset+0xa>
 801a530:	4770      	bx	lr
 801a532:	f803 1b01 	strb.w	r1, [r3], #1
 801a536:	e7f9      	b.n	801a52c <memset+0x4>

0801a538 <_calloc_r>:
 801a538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a53a:	fba1 2402 	umull	r2, r4, r1, r2
 801a53e:	b94c      	cbnz	r4, 801a554 <_calloc_r+0x1c>
 801a540:	4611      	mov	r1, r2
 801a542:	9201      	str	r2, [sp, #4]
 801a544:	f000 f87a 	bl	801a63c <_malloc_r>
 801a548:	9a01      	ldr	r2, [sp, #4]
 801a54a:	4605      	mov	r5, r0
 801a54c:	b930      	cbnz	r0, 801a55c <_calloc_r+0x24>
 801a54e:	4628      	mov	r0, r5
 801a550:	b003      	add	sp, #12
 801a552:	bd30      	pop	{r4, r5, pc}
 801a554:	220c      	movs	r2, #12
 801a556:	6002      	str	r2, [r0, #0]
 801a558:	2500      	movs	r5, #0
 801a55a:	e7f8      	b.n	801a54e <_calloc_r+0x16>
 801a55c:	4621      	mov	r1, r4
 801a55e:	f7ff ffe3 	bl	801a528 <memset>
 801a562:	e7f4      	b.n	801a54e <_calloc_r+0x16>

0801a564 <_free_r>:
 801a564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a566:	2900      	cmp	r1, #0
 801a568:	d044      	beq.n	801a5f4 <_free_r+0x90>
 801a56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a56e:	9001      	str	r0, [sp, #4]
 801a570:	2b00      	cmp	r3, #0
 801a572:	f1a1 0404 	sub.w	r4, r1, #4
 801a576:	bfb8      	it	lt
 801a578:	18e4      	addlt	r4, r4, r3
 801a57a:	f002 f87b 	bl	801c674 <__malloc_lock>
 801a57e:	4a1e      	ldr	r2, [pc, #120]	; (801a5f8 <_free_r+0x94>)
 801a580:	9801      	ldr	r0, [sp, #4]
 801a582:	6813      	ldr	r3, [r2, #0]
 801a584:	b933      	cbnz	r3, 801a594 <_free_r+0x30>
 801a586:	6063      	str	r3, [r4, #4]
 801a588:	6014      	str	r4, [r2, #0]
 801a58a:	b003      	add	sp, #12
 801a58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a590:	f002 b876 	b.w	801c680 <__malloc_unlock>
 801a594:	42a3      	cmp	r3, r4
 801a596:	d908      	bls.n	801a5aa <_free_r+0x46>
 801a598:	6825      	ldr	r5, [r4, #0]
 801a59a:	1961      	adds	r1, r4, r5
 801a59c:	428b      	cmp	r3, r1
 801a59e:	bf01      	itttt	eq
 801a5a0:	6819      	ldreq	r1, [r3, #0]
 801a5a2:	685b      	ldreq	r3, [r3, #4]
 801a5a4:	1949      	addeq	r1, r1, r5
 801a5a6:	6021      	streq	r1, [r4, #0]
 801a5a8:	e7ed      	b.n	801a586 <_free_r+0x22>
 801a5aa:	461a      	mov	r2, r3
 801a5ac:	685b      	ldr	r3, [r3, #4]
 801a5ae:	b10b      	cbz	r3, 801a5b4 <_free_r+0x50>
 801a5b0:	42a3      	cmp	r3, r4
 801a5b2:	d9fa      	bls.n	801a5aa <_free_r+0x46>
 801a5b4:	6811      	ldr	r1, [r2, #0]
 801a5b6:	1855      	adds	r5, r2, r1
 801a5b8:	42a5      	cmp	r5, r4
 801a5ba:	d10b      	bne.n	801a5d4 <_free_r+0x70>
 801a5bc:	6824      	ldr	r4, [r4, #0]
 801a5be:	4421      	add	r1, r4
 801a5c0:	1854      	adds	r4, r2, r1
 801a5c2:	42a3      	cmp	r3, r4
 801a5c4:	6011      	str	r1, [r2, #0]
 801a5c6:	d1e0      	bne.n	801a58a <_free_r+0x26>
 801a5c8:	681c      	ldr	r4, [r3, #0]
 801a5ca:	685b      	ldr	r3, [r3, #4]
 801a5cc:	6053      	str	r3, [r2, #4]
 801a5ce:	4421      	add	r1, r4
 801a5d0:	6011      	str	r1, [r2, #0]
 801a5d2:	e7da      	b.n	801a58a <_free_r+0x26>
 801a5d4:	d902      	bls.n	801a5dc <_free_r+0x78>
 801a5d6:	230c      	movs	r3, #12
 801a5d8:	6003      	str	r3, [r0, #0]
 801a5da:	e7d6      	b.n	801a58a <_free_r+0x26>
 801a5dc:	6825      	ldr	r5, [r4, #0]
 801a5de:	1961      	adds	r1, r4, r5
 801a5e0:	428b      	cmp	r3, r1
 801a5e2:	bf04      	itt	eq
 801a5e4:	6819      	ldreq	r1, [r3, #0]
 801a5e6:	685b      	ldreq	r3, [r3, #4]
 801a5e8:	6063      	str	r3, [r4, #4]
 801a5ea:	bf04      	itt	eq
 801a5ec:	1949      	addeq	r1, r1, r5
 801a5ee:	6021      	streq	r1, [r4, #0]
 801a5f0:	6054      	str	r4, [r2, #4]
 801a5f2:	e7ca      	b.n	801a58a <_free_r+0x26>
 801a5f4:	b003      	add	sp, #12
 801a5f6:	bd30      	pop	{r4, r5, pc}
 801a5f8:	20004c90 	.word	0x20004c90

0801a5fc <sbrk_aligned>:
 801a5fc:	b570      	push	{r4, r5, r6, lr}
 801a5fe:	4e0e      	ldr	r6, [pc, #56]	; (801a638 <sbrk_aligned+0x3c>)
 801a600:	460c      	mov	r4, r1
 801a602:	6831      	ldr	r1, [r6, #0]
 801a604:	4605      	mov	r5, r0
 801a606:	b911      	cbnz	r1, 801a60e <sbrk_aligned+0x12>
 801a608:	f000 fe50 	bl	801b2ac <_sbrk_r>
 801a60c:	6030      	str	r0, [r6, #0]
 801a60e:	4621      	mov	r1, r4
 801a610:	4628      	mov	r0, r5
 801a612:	f000 fe4b 	bl	801b2ac <_sbrk_r>
 801a616:	1c43      	adds	r3, r0, #1
 801a618:	d00a      	beq.n	801a630 <sbrk_aligned+0x34>
 801a61a:	1cc4      	adds	r4, r0, #3
 801a61c:	f024 0403 	bic.w	r4, r4, #3
 801a620:	42a0      	cmp	r0, r4
 801a622:	d007      	beq.n	801a634 <sbrk_aligned+0x38>
 801a624:	1a21      	subs	r1, r4, r0
 801a626:	4628      	mov	r0, r5
 801a628:	f000 fe40 	bl	801b2ac <_sbrk_r>
 801a62c:	3001      	adds	r0, #1
 801a62e:	d101      	bne.n	801a634 <sbrk_aligned+0x38>
 801a630:	f04f 34ff 	mov.w	r4, #4294967295
 801a634:	4620      	mov	r0, r4
 801a636:	bd70      	pop	{r4, r5, r6, pc}
 801a638:	20004c94 	.word	0x20004c94

0801a63c <_malloc_r>:
 801a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a640:	1ccd      	adds	r5, r1, #3
 801a642:	f025 0503 	bic.w	r5, r5, #3
 801a646:	3508      	adds	r5, #8
 801a648:	2d0c      	cmp	r5, #12
 801a64a:	bf38      	it	cc
 801a64c:	250c      	movcc	r5, #12
 801a64e:	2d00      	cmp	r5, #0
 801a650:	4607      	mov	r7, r0
 801a652:	db01      	blt.n	801a658 <_malloc_r+0x1c>
 801a654:	42a9      	cmp	r1, r5
 801a656:	d905      	bls.n	801a664 <_malloc_r+0x28>
 801a658:	230c      	movs	r3, #12
 801a65a:	603b      	str	r3, [r7, #0]
 801a65c:	2600      	movs	r6, #0
 801a65e:	4630      	mov	r0, r6
 801a660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a664:	4e2e      	ldr	r6, [pc, #184]	; (801a720 <_malloc_r+0xe4>)
 801a666:	f002 f805 	bl	801c674 <__malloc_lock>
 801a66a:	6833      	ldr	r3, [r6, #0]
 801a66c:	461c      	mov	r4, r3
 801a66e:	bb34      	cbnz	r4, 801a6be <_malloc_r+0x82>
 801a670:	4629      	mov	r1, r5
 801a672:	4638      	mov	r0, r7
 801a674:	f7ff ffc2 	bl	801a5fc <sbrk_aligned>
 801a678:	1c43      	adds	r3, r0, #1
 801a67a:	4604      	mov	r4, r0
 801a67c:	d14d      	bne.n	801a71a <_malloc_r+0xde>
 801a67e:	6834      	ldr	r4, [r6, #0]
 801a680:	4626      	mov	r6, r4
 801a682:	2e00      	cmp	r6, #0
 801a684:	d140      	bne.n	801a708 <_malloc_r+0xcc>
 801a686:	6823      	ldr	r3, [r4, #0]
 801a688:	4631      	mov	r1, r6
 801a68a:	4638      	mov	r0, r7
 801a68c:	eb04 0803 	add.w	r8, r4, r3
 801a690:	f000 fe0c 	bl	801b2ac <_sbrk_r>
 801a694:	4580      	cmp	r8, r0
 801a696:	d13a      	bne.n	801a70e <_malloc_r+0xd2>
 801a698:	6821      	ldr	r1, [r4, #0]
 801a69a:	3503      	adds	r5, #3
 801a69c:	1a6d      	subs	r5, r5, r1
 801a69e:	f025 0503 	bic.w	r5, r5, #3
 801a6a2:	3508      	adds	r5, #8
 801a6a4:	2d0c      	cmp	r5, #12
 801a6a6:	bf38      	it	cc
 801a6a8:	250c      	movcc	r5, #12
 801a6aa:	4629      	mov	r1, r5
 801a6ac:	4638      	mov	r0, r7
 801a6ae:	f7ff ffa5 	bl	801a5fc <sbrk_aligned>
 801a6b2:	3001      	adds	r0, #1
 801a6b4:	d02b      	beq.n	801a70e <_malloc_r+0xd2>
 801a6b6:	6823      	ldr	r3, [r4, #0]
 801a6b8:	442b      	add	r3, r5
 801a6ba:	6023      	str	r3, [r4, #0]
 801a6bc:	e00e      	b.n	801a6dc <_malloc_r+0xa0>
 801a6be:	6822      	ldr	r2, [r4, #0]
 801a6c0:	1b52      	subs	r2, r2, r5
 801a6c2:	d41e      	bmi.n	801a702 <_malloc_r+0xc6>
 801a6c4:	2a0b      	cmp	r2, #11
 801a6c6:	d916      	bls.n	801a6f6 <_malloc_r+0xba>
 801a6c8:	1961      	adds	r1, r4, r5
 801a6ca:	42a3      	cmp	r3, r4
 801a6cc:	6025      	str	r5, [r4, #0]
 801a6ce:	bf18      	it	ne
 801a6d0:	6059      	strne	r1, [r3, #4]
 801a6d2:	6863      	ldr	r3, [r4, #4]
 801a6d4:	bf08      	it	eq
 801a6d6:	6031      	streq	r1, [r6, #0]
 801a6d8:	5162      	str	r2, [r4, r5]
 801a6da:	604b      	str	r3, [r1, #4]
 801a6dc:	4638      	mov	r0, r7
 801a6de:	f104 060b 	add.w	r6, r4, #11
 801a6e2:	f001 ffcd 	bl	801c680 <__malloc_unlock>
 801a6e6:	f026 0607 	bic.w	r6, r6, #7
 801a6ea:	1d23      	adds	r3, r4, #4
 801a6ec:	1af2      	subs	r2, r6, r3
 801a6ee:	d0b6      	beq.n	801a65e <_malloc_r+0x22>
 801a6f0:	1b9b      	subs	r3, r3, r6
 801a6f2:	50a3      	str	r3, [r4, r2]
 801a6f4:	e7b3      	b.n	801a65e <_malloc_r+0x22>
 801a6f6:	6862      	ldr	r2, [r4, #4]
 801a6f8:	42a3      	cmp	r3, r4
 801a6fa:	bf0c      	ite	eq
 801a6fc:	6032      	streq	r2, [r6, #0]
 801a6fe:	605a      	strne	r2, [r3, #4]
 801a700:	e7ec      	b.n	801a6dc <_malloc_r+0xa0>
 801a702:	4623      	mov	r3, r4
 801a704:	6864      	ldr	r4, [r4, #4]
 801a706:	e7b2      	b.n	801a66e <_malloc_r+0x32>
 801a708:	4634      	mov	r4, r6
 801a70a:	6876      	ldr	r6, [r6, #4]
 801a70c:	e7b9      	b.n	801a682 <_malloc_r+0x46>
 801a70e:	230c      	movs	r3, #12
 801a710:	603b      	str	r3, [r7, #0]
 801a712:	4638      	mov	r0, r7
 801a714:	f001 ffb4 	bl	801c680 <__malloc_unlock>
 801a718:	e7a1      	b.n	801a65e <_malloc_r+0x22>
 801a71a:	6025      	str	r5, [r4, #0]
 801a71c:	e7de      	b.n	801a6dc <_malloc_r+0xa0>
 801a71e:	bf00      	nop
 801a720:	20004c90 	.word	0x20004c90

0801a724 <__sfputc_r>:
 801a724:	6893      	ldr	r3, [r2, #8]
 801a726:	3b01      	subs	r3, #1
 801a728:	2b00      	cmp	r3, #0
 801a72a:	b410      	push	{r4}
 801a72c:	6093      	str	r3, [r2, #8]
 801a72e:	da08      	bge.n	801a742 <__sfputc_r+0x1e>
 801a730:	6994      	ldr	r4, [r2, #24]
 801a732:	42a3      	cmp	r3, r4
 801a734:	db01      	blt.n	801a73a <__sfputc_r+0x16>
 801a736:	290a      	cmp	r1, #10
 801a738:	d103      	bne.n	801a742 <__sfputc_r+0x1e>
 801a73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a73e:	f000 be29 	b.w	801b394 <__swbuf_r>
 801a742:	6813      	ldr	r3, [r2, #0]
 801a744:	1c58      	adds	r0, r3, #1
 801a746:	6010      	str	r0, [r2, #0]
 801a748:	7019      	strb	r1, [r3, #0]
 801a74a:	4608      	mov	r0, r1
 801a74c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a750:	4770      	bx	lr

0801a752 <__sfputs_r>:
 801a752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a754:	4606      	mov	r6, r0
 801a756:	460f      	mov	r7, r1
 801a758:	4614      	mov	r4, r2
 801a75a:	18d5      	adds	r5, r2, r3
 801a75c:	42ac      	cmp	r4, r5
 801a75e:	d101      	bne.n	801a764 <__sfputs_r+0x12>
 801a760:	2000      	movs	r0, #0
 801a762:	e007      	b.n	801a774 <__sfputs_r+0x22>
 801a764:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a768:	463a      	mov	r2, r7
 801a76a:	4630      	mov	r0, r6
 801a76c:	f7ff ffda 	bl	801a724 <__sfputc_r>
 801a770:	1c43      	adds	r3, r0, #1
 801a772:	d1f3      	bne.n	801a75c <__sfputs_r+0xa>
 801a774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a778 <_vfiprintf_r>:
 801a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a77c:	460d      	mov	r5, r1
 801a77e:	b09d      	sub	sp, #116	; 0x74
 801a780:	4614      	mov	r4, r2
 801a782:	4698      	mov	r8, r3
 801a784:	4606      	mov	r6, r0
 801a786:	b118      	cbz	r0, 801a790 <_vfiprintf_r+0x18>
 801a788:	6983      	ldr	r3, [r0, #24]
 801a78a:	b90b      	cbnz	r3, 801a790 <_vfiprintf_r+0x18>
 801a78c:	f001 fe58 	bl	801c440 <__sinit>
 801a790:	4b89      	ldr	r3, [pc, #548]	; (801a9b8 <_vfiprintf_r+0x240>)
 801a792:	429d      	cmp	r5, r3
 801a794:	d11b      	bne.n	801a7ce <_vfiprintf_r+0x56>
 801a796:	6875      	ldr	r5, [r6, #4]
 801a798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a79a:	07d9      	lsls	r1, r3, #31
 801a79c:	d405      	bmi.n	801a7aa <_vfiprintf_r+0x32>
 801a79e:	89ab      	ldrh	r3, [r5, #12]
 801a7a0:	059a      	lsls	r2, r3, #22
 801a7a2:	d402      	bmi.n	801a7aa <_vfiprintf_r+0x32>
 801a7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7a6:	f7ff fe84 	bl	801a4b2 <__retarget_lock_acquire_recursive>
 801a7aa:	89ab      	ldrh	r3, [r5, #12]
 801a7ac:	071b      	lsls	r3, r3, #28
 801a7ae:	d501      	bpl.n	801a7b4 <_vfiprintf_r+0x3c>
 801a7b0:	692b      	ldr	r3, [r5, #16]
 801a7b2:	b9eb      	cbnz	r3, 801a7f0 <_vfiprintf_r+0x78>
 801a7b4:	4629      	mov	r1, r5
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	f000 fe3e 	bl	801b438 <__swsetup_r>
 801a7bc:	b1c0      	cbz	r0, 801a7f0 <_vfiprintf_r+0x78>
 801a7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7c0:	07dc      	lsls	r4, r3, #31
 801a7c2:	d50e      	bpl.n	801a7e2 <_vfiprintf_r+0x6a>
 801a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a7c8:	b01d      	add	sp, #116	; 0x74
 801a7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ce:	4b7b      	ldr	r3, [pc, #492]	; (801a9bc <_vfiprintf_r+0x244>)
 801a7d0:	429d      	cmp	r5, r3
 801a7d2:	d101      	bne.n	801a7d8 <_vfiprintf_r+0x60>
 801a7d4:	68b5      	ldr	r5, [r6, #8]
 801a7d6:	e7df      	b.n	801a798 <_vfiprintf_r+0x20>
 801a7d8:	4b79      	ldr	r3, [pc, #484]	; (801a9c0 <_vfiprintf_r+0x248>)
 801a7da:	429d      	cmp	r5, r3
 801a7dc:	bf08      	it	eq
 801a7de:	68f5      	ldreq	r5, [r6, #12]
 801a7e0:	e7da      	b.n	801a798 <_vfiprintf_r+0x20>
 801a7e2:	89ab      	ldrh	r3, [r5, #12]
 801a7e4:	0598      	lsls	r0, r3, #22
 801a7e6:	d4ed      	bmi.n	801a7c4 <_vfiprintf_r+0x4c>
 801a7e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7ea:	f7ff fe63 	bl	801a4b4 <__retarget_lock_release_recursive>
 801a7ee:	e7e9      	b.n	801a7c4 <_vfiprintf_r+0x4c>
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	9309      	str	r3, [sp, #36]	; 0x24
 801a7f4:	2320      	movs	r3, #32
 801a7f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a7fa:	f8cd 800c 	str.w	r8, [sp, #12]
 801a7fe:	2330      	movs	r3, #48	; 0x30
 801a800:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a9c4 <_vfiprintf_r+0x24c>
 801a804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a808:	f04f 0901 	mov.w	r9, #1
 801a80c:	4623      	mov	r3, r4
 801a80e:	469a      	mov	sl, r3
 801a810:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a814:	b10a      	cbz	r2, 801a81a <_vfiprintf_r+0xa2>
 801a816:	2a25      	cmp	r2, #37	; 0x25
 801a818:	d1f9      	bne.n	801a80e <_vfiprintf_r+0x96>
 801a81a:	ebba 0b04 	subs.w	fp, sl, r4
 801a81e:	d00b      	beq.n	801a838 <_vfiprintf_r+0xc0>
 801a820:	465b      	mov	r3, fp
 801a822:	4622      	mov	r2, r4
 801a824:	4629      	mov	r1, r5
 801a826:	4630      	mov	r0, r6
 801a828:	f7ff ff93 	bl	801a752 <__sfputs_r>
 801a82c:	3001      	adds	r0, #1
 801a82e:	f000 80aa 	beq.w	801a986 <_vfiprintf_r+0x20e>
 801a832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a834:	445a      	add	r2, fp
 801a836:	9209      	str	r2, [sp, #36]	; 0x24
 801a838:	f89a 3000 	ldrb.w	r3, [sl]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	f000 80a2 	beq.w	801a986 <_vfiprintf_r+0x20e>
 801a842:	2300      	movs	r3, #0
 801a844:	f04f 32ff 	mov.w	r2, #4294967295
 801a848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a84c:	f10a 0a01 	add.w	sl, sl, #1
 801a850:	9304      	str	r3, [sp, #16]
 801a852:	9307      	str	r3, [sp, #28]
 801a854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a858:	931a      	str	r3, [sp, #104]	; 0x68
 801a85a:	4654      	mov	r4, sl
 801a85c:	2205      	movs	r2, #5
 801a85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a862:	4858      	ldr	r0, [pc, #352]	; (801a9c4 <_vfiprintf_r+0x24c>)
 801a864:	f7e5 fcb4 	bl	80001d0 <memchr>
 801a868:	9a04      	ldr	r2, [sp, #16]
 801a86a:	b9d8      	cbnz	r0, 801a8a4 <_vfiprintf_r+0x12c>
 801a86c:	06d1      	lsls	r1, r2, #27
 801a86e:	bf44      	itt	mi
 801a870:	2320      	movmi	r3, #32
 801a872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a876:	0713      	lsls	r3, r2, #28
 801a878:	bf44      	itt	mi
 801a87a:	232b      	movmi	r3, #43	; 0x2b
 801a87c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a880:	f89a 3000 	ldrb.w	r3, [sl]
 801a884:	2b2a      	cmp	r3, #42	; 0x2a
 801a886:	d015      	beq.n	801a8b4 <_vfiprintf_r+0x13c>
 801a888:	9a07      	ldr	r2, [sp, #28]
 801a88a:	4654      	mov	r4, sl
 801a88c:	2000      	movs	r0, #0
 801a88e:	f04f 0c0a 	mov.w	ip, #10
 801a892:	4621      	mov	r1, r4
 801a894:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a898:	3b30      	subs	r3, #48	; 0x30
 801a89a:	2b09      	cmp	r3, #9
 801a89c:	d94e      	bls.n	801a93c <_vfiprintf_r+0x1c4>
 801a89e:	b1b0      	cbz	r0, 801a8ce <_vfiprintf_r+0x156>
 801a8a0:	9207      	str	r2, [sp, #28]
 801a8a2:	e014      	b.n	801a8ce <_vfiprintf_r+0x156>
 801a8a4:	eba0 0308 	sub.w	r3, r0, r8
 801a8a8:	fa09 f303 	lsl.w	r3, r9, r3
 801a8ac:	4313      	orrs	r3, r2
 801a8ae:	9304      	str	r3, [sp, #16]
 801a8b0:	46a2      	mov	sl, r4
 801a8b2:	e7d2      	b.n	801a85a <_vfiprintf_r+0xe2>
 801a8b4:	9b03      	ldr	r3, [sp, #12]
 801a8b6:	1d19      	adds	r1, r3, #4
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	9103      	str	r1, [sp, #12]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	bfbb      	ittet	lt
 801a8c0:	425b      	neglt	r3, r3
 801a8c2:	f042 0202 	orrlt.w	r2, r2, #2
 801a8c6:	9307      	strge	r3, [sp, #28]
 801a8c8:	9307      	strlt	r3, [sp, #28]
 801a8ca:	bfb8      	it	lt
 801a8cc:	9204      	strlt	r2, [sp, #16]
 801a8ce:	7823      	ldrb	r3, [r4, #0]
 801a8d0:	2b2e      	cmp	r3, #46	; 0x2e
 801a8d2:	d10c      	bne.n	801a8ee <_vfiprintf_r+0x176>
 801a8d4:	7863      	ldrb	r3, [r4, #1]
 801a8d6:	2b2a      	cmp	r3, #42	; 0x2a
 801a8d8:	d135      	bne.n	801a946 <_vfiprintf_r+0x1ce>
 801a8da:	9b03      	ldr	r3, [sp, #12]
 801a8dc:	1d1a      	adds	r2, r3, #4
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	9203      	str	r2, [sp, #12]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	bfb8      	it	lt
 801a8e6:	f04f 33ff 	movlt.w	r3, #4294967295
 801a8ea:	3402      	adds	r4, #2
 801a8ec:	9305      	str	r3, [sp, #20]
 801a8ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a9d4 <_vfiprintf_r+0x25c>
 801a8f2:	7821      	ldrb	r1, [r4, #0]
 801a8f4:	2203      	movs	r2, #3
 801a8f6:	4650      	mov	r0, sl
 801a8f8:	f7e5 fc6a 	bl	80001d0 <memchr>
 801a8fc:	b140      	cbz	r0, 801a910 <_vfiprintf_r+0x198>
 801a8fe:	2340      	movs	r3, #64	; 0x40
 801a900:	eba0 000a 	sub.w	r0, r0, sl
 801a904:	fa03 f000 	lsl.w	r0, r3, r0
 801a908:	9b04      	ldr	r3, [sp, #16]
 801a90a:	4303      	orrs	r3, r0
 801a90c:	3401      	adds	r4, #1
 801a90e:	9304      	str	r3, [sp, #16]
 801a910:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a914:	482c      	ldr	r0, [pc, #176]	; (801a9c8 <_vfiprintf_r+0x250>)
 801a916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a91a:	2206      	movs	r2, #6
 801a91c:	f7e5 fc58 	bl	80001d0 <memchr>
 801a920:	2800      	cmp	r0, #0
 801a922:	d03f      	beq.n	801a9a4 <_vfiprintf_r+0x22c>
 801a924:	4b29      	ldr	r3, [pc, #164]	; (801a9cc <_vfiprintf_r+0x254>)
 801a926:	bb1b      	cbnz	r3, 801a970 <_vfiprintf_r+0x1f8>
 801a928:	9b03      	ldr	r3, [sp, #12]
 801a92a:	3307      	adds	r3, #7
 801a92c:	f023 0307 	bic.w	r3, r3, #7
 801a930:	3308      	adds	r3, #8
 801a932:	9303      	str	r3, [sp, #12]
 801a934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a936:	443b      	add	r3, r7
 801a938:	9309      	str	r3, [sp, #36]	; 0x24
 801a93a:	e767      	b.n	801a80c <_vfiprintf_r+0x94>
 801a93c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a940:	460c      	mov	r4, r1
 801a942:	2001      	movs	r0, #1
 801a944:	e7a5      	b.n	801a892 <_vfiprintf_r+0x11a>
 801a946:	2300      	movs	r3, #0
 801a948:	3401      	adds	r4, #1
 801a94a:	9305      	str	r3, [sp, #20]
 801a94c:	4619      	mov	r1, r3
 801a94e:	f04f 0c0a 	mov.w	ip, #10
 801a952:	4620      	mov	r0, r4
 801a954:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a958:	3a30      	subs	r2, #48	; 0x30
 801a95a:	2a09      	cmp	r2, #9
 801a95c:	d903      	bls.n	801a966 <_vfiprintf_r+0x1ee>
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d0c5      	beq.n	801a8ee <_vfiprintf_r+0x176>
 801a962:	9105      	str	r1, [sp, #20]
 801a964:	e7c3      	b.n	801a8ee <_vfiprintf_r+0x176>
 801a966:	fb0c 2101 	mla	r1, ip, r1, r2
 801a96a:	4604      	mov	r4, r0
 801a96c:	2301      	movs	r3, #1
 801a96e:	e7f0      	b.n	801a952 <_vfiprintf_r+0x1da>
 801a970:	ab03      	add	r3, sp, #12
 801a972:	9300      	str	r3, [sp, #0]
 801a974:	462a      	mov	r2, r5
 801a976:	4b16      	ldr	r3, [pc, #88]	; (801a9d0 <_vfiprintf_r+0x258>)
 801a978:	a904      	add	r1, sp, #16
 801a97a:	4630      	mov	r0, r6
 801a97c:	f000 f8cc 	bl	801ab18 <_printf_float>
 801a980:	4607      	mov	r7, r0
 801a982:	1c78      	adds	r0, r7, #1
 801a984:	d1d6      	bne.n	801a934 <_vfiprintf_r+0x1bc>
 801a986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a988:	07d9      	lsls	r1, r3, #31
 801a98a:	d405      	bmi.n	801a998 <_vfiprintf_r+0x220>
 801a98c:	89ab      	ldrh	r3, [r5, #12]
 801a98e:	059a      	lsls	r2, r3, #22
 801a990:	d402      	bmi.n	801a998 <_vfiprintf_r+0x220>
 801a992:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a994:	f7ff fd8e 	bl	801a4b4 <__retarget_lock_release_recursive>
 801a998:	89ab      	ldrh	r3, [r5, #12]
 801a99a:	065b      	lsls	r3, r3, #25
 801a99c:	f53f af12 	bmi.w	801a7c4 <_vfiprintf_r+0x4c>
 801a9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a9a2:	e711      	b.n	801a7c8 <_vfiprintf_r+0x50>
 801a9a4:	ab03      	add	r3, sp, #12
 801a9a6:	9300      	str	r3, [sp, #0]
 801a9a8:	462a      	mov	r2, r5
 801a9aa:	4b09      	ldr	r3, [pc, #36]	; (801a9d0 <_vfiprintf_r+0x258>)
 801a9ac:	a904      	add	r1, sp, #16
 801a9ae:	4630      	mov	r0, r6
 801a9b0:	f000 fb56 	bl	801b060 <_printf_i>
 801a9b4:	e7e4      	b.n	801a980 <_vfiprintf_r+0x208>
 801a9b6:	bf00      	nop
 801a9b8:	0801f5e8 	.word	0x0801f5e8
 801a9bc:	0801f608 	.word	0x0801f608
 801a9c0:	0801f5c8 	.word	0x0801f5c8
 801a9c4:	0801f3f0 	.word	0x0801f3f0
 801a9c8:	0801f3fa 	.word	0x0801f3fa
 801a9cc:	0801ab19 	.word	0x0801ab19
 801a9d0:	0801a753 	.word	0x0801a753
 801a9d4:	0801f3f6 	.word	0x0801f3f6

0801a9d8 <__cvt>:
 801a9d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a9dc:	ec55 4b10 	vmov	r4, r5, d0
 801a9e0:	2d00      	cmp	r5, #0
 801a9e2:	460e      	mov	r6, r1
 801a9e4:	4619      	mov	r1, r3
 801a9e6:	462b      	mov	r3, r5
 801a9e8:	bfbb      	ittet	lt
 801a9ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a9ee:	461d      	movlt	r5, r3
 801a9f0:	2300      	movge	r3, #0
 801a9f2:	232d      	movlt	r3, #45	; 0x2d
 801a9f4:	700b      	strb	r3, [r1, #0]
 801a9f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a9fc:	4691      	mov	r9, r2
 801a9fe:	f023 0820 	bic.w	r8, r3, #32
 801aa02:	bfbc      	itt	lt
 801aa04:	4622      	movlt	r2, r4
 801aa06:	4614      	movlt	r4, r2
 801aa08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aa0c:	d005      	beq.n	801aa1a <__cvt+0x42>
 801aa0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801aa12:	d100      	bne.n	801aa16 <__cvt+0x3e>
 801aa14:	3601      	adds	r6, #1
 801aa16:	2102      	movs	r1, #2
 801aa18:	e000      	b.n	801aa1c <__cvt+0x44>
 801aa1a:	2103      	movs	r1, #3
 801aa1c:	ab03      	add	r3, sp, #12
 801aa1e:	9301      	str	r3, [sp, #4]
 801aa20:	ab02      	add	r3, sp, #8
 801aa22:	9300      	str	r3, [sp, #0]
 801aa24:	ec45 4b10 	vmov	d0, r4, r5
 801aa28:	4653      	mov	r3, sl
 801aa2a:	4632      	mov	r2, r6
 801aa2c:	f000 fe00 	bl	801b630 <_dtoa_r>
 801aa30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801aa34:	4607      	mov	r7, r0
 801aa36:	d102      	bne.n	801aa3e <__cvt+0x66>
 801aa38:	f019 0f01 	tst.w	r9, #1
 801aa3c:	d022      	beq.n	801aa84 <__cvt+0xac>
 801aa3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aa42:	eb07 0906 	add.w	r9, r7, r6
 801aa46:	d110      	bne.n	801aa6a <__cvt+0x92>
 801aa48:	783b      	ldrb	r3, [r7, #0]
 801aa4a:	2b30      	cmp	r3, #48	; 0x30
 801aa4c:	d10a      	bne.n	801aa64 <__cvt+0x8c>
 801aa4e:	2200      	movs	r2, #0
 801aa50:	2300      	movs	r3, #0
 801aa52:	4620      	mov	r0, r4
 801aa54:	4629      	mov	r1, r5
 801aa56:	f7e6 f841 	bl	8000adc <__aeabi_dcmpeq>
 801aa5a:	b918      	cbnz	r0, 801aa64 <__cvt+0x8c>
 801aa5c:	f1c6 0601 	rsb	r6, r6, #1
 801aa60:	f8ca 6000 	str.w	r6, [sl]
 801aa64:	f8da 3000 	ldr.w	r3, [sl]
 801aa68:	4499      	add	r9, r3
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	4620      	mov	r0, r4
 801aa70:	4629      	mov	r1, r5
 801aa72:	f7e6 f833 	bl	8000adc <__aeabi_dcmpeq>
 801aa76:	b108      	cbz	r0, 801aa7c <__cvt+0xa4>
 801aa78:	f8cd 900c 	str.w	r9, [sp, #12]
 801aa7c:	2230      	movs	r2, #48	; 0x30
 801aa7e:	9b03      	ldr	r3, [sp, #12]
 801aa80:	454b      	cmp	r3, r9
 801aa82:	d307      	bcc.n	801aa94 <__cvt+0xbc>
 801aa84:	9b03      	ldr	r3, [sp, #12]
 801aa86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aa88:	1bdb      	subs	r3, r3, r7
 801aa8a:	4638      	mov	r0, r7
 801aa8c:	6013      	str	r3, [r2, #0]
 801aa8e:	b004      	add	sp, #16
 801aa90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa94:	1c59      	adds	r1, r3, #1
 801aa96:	9103      	str	r1, [sp, #12]
 801aa98:	701a      	strb	r2, [r3, #0]
 801aa9a:	e7f0      	b.n	801aa7e <__cvt+0xa6>

0801aa9c <__exponent>:
 801aa9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa9e:	4603      	mov	r3, r0
 801aaa0:	2900      	cmp	r1, #0
 801aaa2:	bfb8      	it	lt
 801aaa4:	4249      	neglt	r1, r1
 801aaa6:	f803 2b02 	strb.w	r2, [r3], #2
 801aaaa:	bfb4      	ite	lt
 801aaac:	222d      	movlt	r2, #45	; 0x2d
 801aaae:	222b      	movge	r2, #43	; 0x2b
 801aab0:	2909      	cmp	r1, #9
 801aab2:	7042      	strb	r2, [r0, #1]
 801aab4:	dd2a      	ble.n	801ab0c <__exponent+0x70>
 801aab6:	f10d 0407 	add.w	r4, sp, #7
 801aaba:	46a4      	mov	ip, r4
 801aabc:	270a      	movs	r7, #10
 801aabe:	46a6      	mov	lr, r4
 801aac0:	460a      	mov	r2, r1
 801aac2:	fb91 f6f7 	sdiv	r6, r1, r7
 801aac6:	fb07 1516 	mls	r5, r7, r6, r1
 801aaca:	3530      	adds	r5, #48	; 0x30
 801aacc:	2a63      	cmp	r2, #99	; 0x63
 801aace:	f104 34ff 	add.w	r4, r4, #4294967295
 801aad2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801aad6:	4631      	mov	r1, r6
 801aad8:	dcf1      	bgt.n	801aabe <__exponent+0x22>
 801aada:	3130      	adds	r1, #48	; 0x30
 801aadc:	f1ae 0502 	sub.w	r5, lr, #2
 801aae0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801aae4:	1c44      	adds	r4, r0, #1
 801aae6:	4629      	mov	r1, r5
 801aae8:	4561      	cmp	r1, ip
 801aaea:	d30a      	bcc.n	801ab02 <__exponent+0x66>
 801aaec:	f10d 0209 	add.w	r2, sp, #9
 801aaf0:	eba2 020e 	sub.w	r2, r2, lr
 801aaf4:	4565      	cmp	r5, ip
 801aaf6:	bf88      	it	hi
 801aaf8:	2200      	movhi	r2, #0
 801aafa:	4413      	add	r3, r2
 801aafc:	1a18      	subs	r0, r3, r0
 801aafe:	b003      	add	sp, #12
 801ab00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab02:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab06:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ab0a:	e7ed      	b.n	801aae8 <__exponent+0x4c>
 801ab0c:	2330      	movs	r3, #48	; 0x30
 801ab0e:	3130      	adds	r1, #48	; 0x30
 801ab10:	7083      	strb	r3, [r0, #2]
 801ab12:	70c1      	strb	r1, [r0, #3]
 801ab14:	1d03      	adds	r3, r0, #4
 801ab16:	e7f1      	b.n	801aafc <__exponent+0x60>

0801ab18 <_printf_float>:
 801ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab1c:	ed2d 8b02 	vpush	{d8}
 801ab20:	b08d      	sub	sp, #52	; 0x34
 801ab22:	460c      	mov	r4, r1
 801ab24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ab28:	4616      	mov	r6, r2
 801ab2a:	461f      	mov	r7, r3
 801ab2c:	4605      	mov	r5, r0
 801ab2e:	f001 fd25 	bl	801c57c <_localeconv_r>
 801ab32:	f8d0 a000 	ldr.w	sl, [r0]
 801ab36:	4650      	mov	r0, sl
 801ab38:	f7e5 fba4 	bl	8000284 <strlen>
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	930a      	str	r3, [sp, #40]	; 0x28
 801ab40:	6823      	ldr	r3, [r4, #0]
 801ab42:	9305      	str	r3, [sp, #20]
 801ab44:	f8d8 3000 	ldr.w	r3, [r8]
 801ab48:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ab4c:	3307      	adds	r3, #7
 801ab4e:	f023 0307 	bic.w	r3, r3, #7
 801ab52:	f103 0208 	add.w	r2, r3, #8
 801ab56:	f8c8 2000 	str.w	r2, [r8]
 801ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801ab62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801ab66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ab6a:	9307      	str	r3, [sp, #28]
 801ab6c:	f8cd 8018 	str.w	r8, [sp, #24]
 801ab70:	ee08 0a10 	vmov	s16, r0
 801ab74:	4b9f      	ldr	r3, [pc, #636]	; (801adf4 <_printf_float+0x2dc>)
 801ab76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ab7a:	f04f 32ff 	mov.w	r2, #4294967295
 801ab7e:	f7e5 ffdf 	bl	8000b40 <__aeabi_dcmpun>
 801ab82:	bb88      	cbnz	r0, 801abe8 <_printf_float+0xd0>
 801ab84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ab88:	4b9a      	ldr	r3, [pc, #616]	; (801adf4 <_printf_float+0x2dc>)
 801ab8a:	f04f 32ff 	mov.w	r2, #4294967295
 801ab8e:	f7e5 ffb9 	bl	8000b04 <__aeabi_dcmple>
 801ab92:	bb48      	cbnz	r0, 801abe8 <_printf_float+0xd0>
 801ab94:	2200      	movs	r2, #0
 801ab96:	2300      	movs	r3, #0
 801ab98:	4640      	mov	r0, r8
 801ab9a:	4649      	mov	r1, r9
 801ab9c:	f7e5 ffa8 	bl	8000af0 <__aeabi_dcmplt>
 801aba0:	b110      	cbz	r0, 801aba8 <_printf_float+0x90>
 801aba2:	232d      	movs	r3, #45	; 0x2d
 801aba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aba8:	4b93      	ldr	r3, [pc, #588]	; (801adf8 <_printf_float+0x2e0>)
 801abaa:	4894      	ldr	r0, [pc, #592]	; (801adfc <_printf_float+0x2e4>)
 801abac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801abb0:	bf94      	ite	ls
 801abb2:	4698      	movls	r8, r3
 801abb4:	4680      	movhi	r8, r0
 801abb6:	2303      	movs	r3, #3
 801abb8:	6123      	str	r3, [r4, #16]
 801abba:	9b05      	ldr	r3, [sp, #20]
 801abbc:	f023 0204 	bic.w	r2, r3, #4
 801abc0:	6022      	str	r2, [r4, #0]
 801abc2:	f04f 0900 	mov.w	r9, #0
 801abc6:	9700      	str	r7, [sp, #0]
 801abc8:	4633      	mov	r3, r6
 801abca:	aa0b      	add	r2, sp, #44	; 0x2c
 801abcc:	4621      	mov	r1, r4
 801abce:	4628      	mov	r0, r5
 801abd0:	f000 f9d8 	bl	801af84 <_printf_common>
 801abd4:	3001      	adds	r0, #1
 801abd6:	f040 8090 	bne.w	801acfa <_printf_float+0x1e2>
 801abda:	f04f 30ff 	mov.w	r0, #4294967295
 801abde:	b00d      	add	sp, #52	; 0x34
 801abe0:	ecbd 8b02 	vpop	{d8}
 801abe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abe8:	4642      	mov	r2, r8
 801abea:	464b      	mov	r3, r9
 801abec:	4640      	mov	r0, r8
 801abee:	4649      	mov	r1, r9
 801abf0:	f7e5 ffa6 	bl	8000b40 <__aeabi_dcmpun>
 801abf4:	b140      	cbz	r0, 801ac08 <_printf_float+0xf0>
 801abf6:	464b      	mov	r3, r9
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	bfbc      	itt	lt
 801abfc:	232d      	movlt	r3, #45	; 0x2d
 801abfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ac02:	487f      	ldr	r0, [pc, #508]	; (801ae00 <_printf_float+0x2e8>)
 801ac04:	4b7f      	ldr	r3, [pc, #508]	; (801ae04 <_printf_float+0x2ec>)
 801ac06:	e7d1      	b.n	801abac <_printf_float+0x94>
 801ac08:	6863      	ldr	r3, [r4, #4]
 801ac0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ac0e:	9206      	str	r2, [sp, #24]
 801ac10:	1c5a      	adds	r2, r3, #1
 801ac12:	d13f      	bne.n	801ac94 <_printf_float+0x17c>
 801ac14:	2306      	movs	r3, #6
 801ac16:	6063      	str	r3, [r4, #4]
 801ac18:	9b05      	ldr	r3, [sp, #20]
 801ac1a:	6861      	ldr	r1, [r4, #4]
 801ac1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801ac20:	2300      	movs	r3, #0
 801ac22:	9303      	str	r3, [sp, #12]
 801ac24:	ab0a      	add	r3, sp, #40	; 0x28
 801ac26:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ac2a:	ab09      	add	r3, sp, #36	; 0x24
 801ac2c:	ec49 8b10 	vmov	d0, r8, r9
 801ac30:	9300      	str	r3, [sp, #0]
 801ac32:	6022      	str	r2, [r4, #0]
 801ac34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ac38:	4628      	mov	r0, r5
 801ac3a:	f7ff fecd 	bl	801a9d8 <__cvt>
 801ac3e:	9b06      	ldr	r3, [sp, #24]
 801ac40:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac42:	2b47      	cmp	r3, #71	; 0x47
 801ac44:	4680      	mov	r8, r0
 801ac46:	d108      	bne.n	801ac5a <_printf_float+0x142>
 801ac48:	1cc8      	adds	r0, r1, #3
 801ac4a:	db02      	blt.n	801ac52 <_printf_float+0x13a>
 801ac4c:	6863      	ldr	r3, [r4, #4]
 801ac4e:	4299      	cmp	r1, r3
 801ac50:	dd41      	ble.n	801acd6 <_printf_float+0x1be>
 801ac52:	f1ab 0b02 	sub.w	fp, fp, #2
 801ac56:	fa5f fb8b 	uxtb.w	fp, fp
 801ac5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ac5e:	d820      	bhi.n	801aca2 <_printf_float+0x18a>
 801ac60:	3901      	subs	r1, #1
 801ac62:	465a      	mov	r2, fp
 801ac64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ac68:	9109      	str	r1, [sp, #36]	; 0x24
 801ac6a:	f7ff ff17 	bl	801aa9c <__exponent>
 801ac6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac70:	1813      	adds	r3, r2, r0
 801ac72:	2a01      	cmp	r2, #1
 801ac74:	4681      	mov	r9, r0
 801ac76:	6123      	str	r3, [r4, #16]
 801ac78:	dc02      	bgt.n	801ac80 <_printf_float+0x168>
 801ac7a:	6822      	ldr	r2, [r4, #0]
 801ac7c:	07d2      	lsls	r2, r2, #31
 801ac7e:	d501      	bpl.n	801ac84 <_printf_float+0x16c>
 801ac80:	3301      	adds	r3, #1
 801ac82:	6123      	str	r3, [r4, #16]
 801ac84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d09c      	beq.n	801abc6 <_printf_float+0xae>
 801ac8c:	232d      	movs	r3, #45	; 0x2d
 801ac8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac92:	e798      	b.n	801abc6 <_printf_float+0xae>
 801ac94:	9a06      	ldr	r2, [sp, #24]
 801ac96:	2a47      	cmp	r2, #71	; 0x47
 801ac98:	d1be      	bne.n	801ac18 <_printf_float+0x100>
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d1bc      	bne.n	801ac18 <_printf_float+0x100>
 801ac9e:	2301      	movs	r3, #1
 801aca0:	e7b9      	b.n	801ac16 <_printf_float+0xfe>
 801aca2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801aca6:	d118      	bne.n	801acda <_printf_float+0x1c2>
 801aca8:	2900      	cmp	r1, #0
 801acaa:	6863      	ldr	r3, [r4, #4]
 801acac:	dd0b      	ble.n	801acc6 <_printf_float+0x1ae>
 801acae:	6121      	str	r1, [r4, #16]
 801acb0:	b913      	cbnz	r3, 801acb8 <_printf_float+0x1a0>
 801acb2:	6822      	ldr	r2, [r4, #0]
 801acb4:	07d0      	lsls	r0, r2, #31
 801acb6:	d502      	bpl.n	801acbe <_printf_float+0x1a6>
 801acb8:	3301      	adds	r3, #1
 801acba:	440b      	add	r3, r1
 801acbc:	6123      	str	r3, [r4, #16]
 801acbe:	65a1      	str	r1, [r4, #88]	; 0x58
 801acc0:	f04f 0900 	mov.w	r9, #0
 801acc4:	e7de      	b.n	801ac84 <_printf_float+0x16c>
 801acc6:	b913      	cbnz	r3, 801acce <_printf_float+0x1b6>
 801acc8:	6822      	ldr	r2, [r4, #0]
 801acca:	07d2      	lsls	r2, r2, #31
 801accc:	d501      	bpl.n	801acd2 <_printf_float+0x1ba>
 801acce:	3302      	adds	r3, #2
 801acd0:	e7f4      	b.n	801acbc <_printf_float+0x1a4>
 801acd2:	2301      	movs	r3, #1
 801acd4:	e7f2      	b.n	801acbc <_printf_float+0x1a4>
 801acd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801acda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801acdc:	4299      	cmp	r1, r3
 801acde:	db05      	blt.n	801acec <_printf_float+0x1d4>
 801ace0:	6823      	ldr	r3, [r4, #0]
 801ace2:	6121      	str	r1, [r4, #16]
 801ace4:	07d8      	lsls	r0, r3, #31
 801ace6:	d5ea      	bpl.n	801acbe <_printf_float+0x1a6>
 801ace8:	1c4b      	adds	r3, r1, #1
 801acea:	e7e7      	b.n	801acbc <_printf_float+0x1a4>
 801acec:	2900      	cmp	r1, #0
 801acee:	bfd4      	ite	le
 801acf0:	f1c1 0202 	rsble	r2, r1, #2
 801acf4:	2201      	movgt	r2, #1
 801acf6:	4413      	add	r3, r2
 801acf8:	e7e0      	b.n	801acbc <_printf_float+0x1a4>
 801acfa:	6823      	ldr	r3, [r4, #0]
 801acfc:	055a      	lsls	r2, r3, #21
 801acfe:	d407      	bmi.n	801ad10 <_printf_float+0x1f8>
 801ad00:	6923      	ldr	r3, [r4, #16]
 801ad02:	4642      	mov	r2, r8
 801ad04:	4631      	mov	r1, r6
 801ad06:	4628      	mov	r0, r5
 801ad08:	47b8      	blx	r7
 801ad0a:	3001      	adds	r0, #1
 801ad0c:	d12c      	bne.n	801ad68 <_printf_float+0x250>
 801ad0e:	e764      	b.n	801abda <_printf_float+0xc2>
 801ad10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ad14:	f240 80e0 	bls.w	801aed8 <_printf_float+0x3c0>
 801ad18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ad1c:	2200      	movs	r2, #0
 801ad1e:	2300      	movs	r3, #0
 801ad20:	f7e5 fedc 	bl	8000adc <__aeabi_dcmpeq>
 801ad24:	2800      	cmp	r0, #0
 801ad26:	d034      	beq.n	801ad92 <_printf_float+0x27a>
 801ad28:	4a37      	ldr	r2, [pc, #220]	; (801ae08 <_printf_float+0x2f0>)
 801ad2a:	2301      	movs	r3, #1
 801ad2c:	4631      	mov	r1, r6
 801ad2e:	4628      	mov	r0, r5
 801ad30:	47b8      	blx	r7
 801ad32:	3001      	adds	r0, #1
 801ad34:	f43f af51 	beq.w	801abda <_printf_float+0xc2>
 801ad38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ad3c:	429a      	cmp	r2, r3
 801ad3e:	db02      	blt.n	801ad46 <_printf_float+0x22e>
 801ad40:	6823      	ldr	r3, [r4, #0]
 801ad42:	07d8      	lsls	r0, r3, #31
 801ad44:	d510      	bpl.n	801ad68 <_printf_float+0x250>
 801ad46:	ee18 3a10 	vmov	r3, s16
 801ad4a:	4652      	mov	r2, sl
 801ad4c:	4631      	mov	r1, r6
 801ad4e:	4628      	mov	r0, r5
 801ad50:	47b8      	blx	r7
 801ad52:	3001      	adds	r0, #1
 801ad54:	f43f af41 	beq.w	801abda <_printf_float+0xc2>
 801ad58:	f04f 0800 	mov.w	r8, #0
 801ad5c:	f104 091a 	add.w	r9, r4, #26
 801ad60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad62:	3b01      	subs	r3, #1
 801ad64:	4543      	cmp	r3, r8
 801ad66:	dc09      	bgt.n	801ad7c <_printf_float+0x264>
 801ad68:	6823      	ldr	r3, [r4, #0]
 801ad6a:	079b      	lsls	r3, r3, #30
 801ad6c:	f100 8105 	bmi.w	801af7a <_printf_float+0x462>
 801ad70:	68e0      	ldr	r0, [r4, #12]
 801ad72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad74:	4298      	cmp	r0, r3
 801ad76:	bfb8      	it	lt
 801ad78:	4618      	movlt	r0, r3
 801ad7a:	e730      	b.n	801abde <_printf_float+0xc6>
 801ad7c:	2301      	movs	r3, #1
 801ad7e:	464a      	mov	r2, r9
 801ad80:	4631      	mov	r1, r6
 801ad82:	4628      	mov	r0, r5
 801ad84:	47b8      	blx	r7
 801ad86:	3001      	adds	r0, #1
 801ad88:	f43f af27 	beq.w	801abda <_printf_float+0xc2>
 801ad8c:	f108 0801 	add.w	r8, r8, #1
 801ad90:	e7e6      	b.n	801ad60 <_printf_float+0x248>
 801ad92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	dc39      	bgt.n	801ae0c <_printf_float+0x2f4>
 801ad98:	4a1b      	ldr	r2, [pc, #108]	; (801ae08 <_printf_float+0x2f0>)
 801ad9a:	2301      	movs	r3, #1
 801ad9c:	4631      	mov	r1, r6
 801ad9e:	4628      	mov	r0, r5
 801ada0:	47b8      	blx	r7
 801ada2:	3001      	adds	r0, #1
 801ada4:	f43f af19 	beq.w	801abda <_printf_float+0xc2>
 801ada8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801adac:	4313      	orrs	r3, r2
 801adae:	d102      	bne.n	801adb6 <_printf_float+0x29e>
 801adb0:	6823      	ldr	r3, [r4, #0]
 801adb2:	07d9      	lsls	r1, r3, #31
 801adb4:	d5d8      	bpl.n	801ad68 <_printf_float+0x250>
 801adb6:	ee18 3a10 	vmov	r3, s16
 801adba:	4652      	mov	r2, sl
 801adbc:	4631      	mov	r1, r6
 801adbe:	4628      	mov	r0, r5
 801adc0:	47b8      	blx	r7
 801adc2:	3001      	adds	r0, #1
 801adc4:	f43f af09 	beq.w	801abda <_printf_float+0xc2>
 801adc8:	f04f 0900 	mov.w	r9, #0
 801adcc:	f104 0a1a 	add.w	sl, r4, #26
 801add0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801add2:	425b      	negs	r3, r3
 801add4:	454b      	cmp	r3, r9
 801add6:	dc01      	bgt.n	801addc <_printf_float+0x2c4>
 801add8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adda:	e792      	b.n	801ad02 <_printf_float+0x1ea>
 801addc:	2301      	movs	r3, #1
 801adde:	4652      	mov	r2, sl
 801ade0:	4631      	mov	r1, r6
 801ade2:	4628      	mov	r0, r5
 801ade4:	47b8      	blx	r7
 801ade6:	3001      	adds	r0, #1
 801ade8:	f43f aef7 	beq.w	801abda <_printf_float+0xc2>
 801adec:	f109 0901 	add.w	r9, r9, #1
 801adf0:	e7ee      	b.n	801add0 <_printf_float+0x2b8>
 801adf2:	bf00      	nop
 801adf4:	7fefffff 	.word	0x7fefffff
 801adf8:	0801f401 	.word	0x0801f401
 801adfc:	0801f405 	.word	0x0801f405
 801ae00:	0801f40d 	.word	0x0801f40d
 801ae04:	0801f409 	.word	0x0801f409
 801ae08:	0801f411 	.word	0x0801f411
 801ae0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ae10:	429a      	cmp	r2, r3
 801ae12:	bfa8      	it	ge
 801ae14:	461a      	movge	r2, r3
 801ae16:	2a00      	cmp	r2, #0
 801ae18:	4691      	mov	r9, r2
 801ae1a:	dc37      	bgt.n	801ae8c <_printf_float+0x374>
 801ae1c:	f04f 0b00 	mov.w	fp, #0
 801ae20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ae24:	f104 021a 	add.w	r2, r4, #26
 801ae28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ae2a:	9305      	str	r3, [sp, #20]
 801ae2c:	eba3 0309 	sub.w	r3, r3, r9
 801ae30:	455b      	cmp	r3, fp
 801ae32:	dc33      	bgt.n	801ae9c <_printf_float+0x384>
 801ae34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae38:	429a      	cmp	r2, r3
 801ae3a:	db3b      	blt.n	801aeb4 <_printf_float+0x39c>
 801ae3c:	6823      	ldr	r3, [r4, #0]
 801ae3e:	07da      	lsls	r2, r3, #31
 801ae40:	d438      	bmi.n	801aeb4 <_printf_float+0x39c>
 801ae42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae44:	9a05      	ldr	r2, [sp, #20]
 801ae46:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae48:	1a9a      	subs	r2, r3, r2
 801ae4a:	eba3 0901 	sub.w	r9, r3, r1
 801ae4e:	4591      	cmp	r9, r2
 801ae50:	bfa8      	it	ge
 801ae52:	4691      	movge	r9, r2
 801ae54:	f1b9 0f00 	cmp.w	r9, #0
 801ae58:	dc35      	bgt.n	801aec6 <_printf_float+0x3ae>
 801ae5a:	f04f 0800 	mov.w	r8, #0
 801ae5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ae62:	f104 0a1a 	add.w	sl, r4, #26
 801ae66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae6a:	1a9b      	subs	r3, r3, r2
 801ae6c:	eba3 0309 	sub.w	r3, r3, r9
 801ae70:	4543      	cmp	r3, r8
 801ae72:	f77f af79 	ble.w	801ad68 <_printf_float+0x250>
 801ae76:	2301      	movs	r3, #1
 801ae78:	4652      	mov	r2, sl
 801ae7a:	4631      	mov	r1, r6
 801ae7c:	4628      	mov	r0, r5
 801ae7e:	47b8      	blx	r7
 801ae80:	3001      	adds	r0, #1
 801ae82:	f43f aeaa 	beq.w	801abda <_printf_float+0xc2>
 801ae86:	f108 0801 	add.w	r8, r8, #1
 801ae8a:	e7ec      	b.n	801ae66 <_printf_float+0x34e>
 801ae8c:	4613      	mov	r3, r2
 801ae8e:	4631      	mov	r1, r6
 801ae90:	4642      	mov	r2, r8
 801ae92:	4628      	mov	r0, r5
 801ae94:	47b8      	blx	r7
 801ae96:	3001      	adds	r0, #1
 801ae98:	d1c0      	bne.n	801ae1c <_printf_float+0x304>
 801ae9a:	e69e      	b.n	801abda <_printf_float+0xc2>
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	4631      	mov	r1, r6
 801aea0:	4628      	mov	r0, r5
 801aea2:	9205      	str	r2, [sp, #20]
 801aea4:	47b8      	blx	r7
 801aea6:	3001      	adds	r0, #1
 801aea8:	f43f ae97 	beq.w	801abda <_printf_float+0xc2>
 801aeac:	9a05      	ldr	r2, [sp, #20]
 801aeae:	f10b 0b01 	add.w	fp, fp, #1
 801aeb2:	e7b9      	b.n	801ae28 <_printf_float+0x310>
 801aeb4:	ee18 3a10 	vmov	r3, s16
 801aeb8:	4652      	mov	r2, sl
 801aeba:	4631      	mov	r1, r6
 801aebc:	4628      	mov	r0, r5
 801aebe:	47b8      	blx	r7
 801aec0:	3001      	adds	r0, #1
 801aec2:	d1be      	bne.n	801ae42 <_printf_float+0x32a>
 801aec4:	e689      	b.n	801abda <_printf_float+0xc2>
 801aec6:	9a05      	ldr	r2, [sp, #20]
 801aec8:	464b      	mov	r3, r9
 801aeca:	4442      	add	r2, r8
 801aecc:	4631      	mov	r1, r6
 801aece:	4628      	mov	r0, r5
 801aed0:	47b8      	blx	r7
 801aed2:	3001      	adds	r0, #1
 801aed4:	d1c1      	bne.n	801ae5a <_printf_float+0x342>
 801aed6:	e680      	b.n	801abda <_printf_float+0xc2>
 801aed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aeda:	2a01      	cmp	r2, #1
 801aedc:	dc01      	bgt.n	801aee2 <_printf_float+0x3ca>
 801aede:	07db      	lsls	r3, r3, #31
 801aee0:	d538      	bpl.n	801af54 <_printf_float+0x43c>
 801aee2:	2301      	movs	r3, #1
 801aee4:	4642      	mov	r2, r8
 801aee6:	4631      	mov	r1, r6
 801aee8:	4628      	mov	r0, r5
 801aeea:	47b8      	blx	r7
 801aeec:	3001      	adds	r0, #1
 801aeee:	f43f ae74 	beq.w	801abda <_printf_float+0xc2>
 801aef2:	ee18 3a10 	vmov	r3, s16
 801aef6:	4652      	mov	r2, sl
 801aef8:	4631      	mov	r1, r6
 801aefa:	4628      	mov	r0, r5
 801aefc:	47b8      	blx	r7
 801aefe:	3001      	adds	r0, #1
 801af00:	f43f ae6b 	beq.w	801abda <_printf_float+0xc2>
 801af04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801af08:	2200      	movs	r2, #0
 801af0a:	2300      	movs	r3, #0
 801af0c:	f7e5 fde6 	bl	8000adc <__aeabi_dcmpeq>
 801af10:	b9d8      	cbnz	r0, 801af4a <_printf_float+0x432>
 801af12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af14:	f108 0201 	add.w	r2, r8, #1
 801af18:	3b01      	subs	r3, #1
 801af1a:	4631      	mov	r1, r6
 801af1c:	4628      	mov	r0, r5
 801af1e:	47b8      	blx	r7
 801af20:	3001      	adds	r0, #1
 801af22:	d10e      	bne.n	801af42 <_printf_float+0x42a>
 801af24:	e659      	b.n	801abda <_printf_float+0xc2>
 801af26:	2301      	movs	r3, #1
 801af28:	4652      	mov	r2, sl
 801af2a:	4631      	mov	r1, r6
 801af2c:	4628      	mov	r0, r5
 801af2e:	47b8      	blx	r7
 801af30:	3001      	adds	r0, #1
 801af32:	f43f ae52 	beq.w	801abda <_printf_float+0xc2>
 801af36:	f108 0801 	add.w	r8, r8, #1
 801af3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af3c:	3b01      	subs	r3, #1
 801af3e:	4543      	cmp	r3, r8
 801af40:	dcf1      	bgt.n	801af26 <_printf_float+0x40e>
 801af42:	464b      	mov	r3, r9
 801af44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801af48:	e6dc      	b.n	801ad04 <_printf_float+0x1ec>
 801af4a:	f04f 0800 	mov.w	r8, #0
 801af4e:	f104 0a1a 	add.w	sl, r4, #26
 801af52:	e7f2      	b.n	801af3a <_printf_float+0x422>
 801af54:	2301      	movs	r3, #1
 801af56:	4642      	mov	r2, r8
 801af58:	e7df      	b.n	801af1a <_printf_float+0x402>
 801af5a:	2301      	movs	r3, #1
 801af5c:	464a      	mov	r2, r9
 801af5e:	4631      	mov	r1, r6
 801af60:	4628      	mov	r0, r5
 801af62:	47b8      	blx	r7
 801af64:	3001      	adds	r0, #1
 801af66:	f43f ae38 	beq.w	801abda <_printf_float+0xc2>
 801af6a:	f108 0801 	add.w	r8, r8, #1
 801af6e:	68e3      	ldr	r3, [r4, #12]
 801af70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801af72:	1a5b      	subs	r3, r3, r1
 801af74:	4543      	cmp	r3, r8
 801af76:	dcf0      	bgt.n	801af5a <_printf_float+0x442>
 801af78:	e6fa      	b.n	801ad70 <_printf_float+0x258>
 801af7a:	f04f 0800 	mov.w	r8, #0
 801af7e:	f104 0919 	add.w	r9, r4, #25
 801af82:	e7f4      	b.n	801af6e <_printf_float+0x456>

0801af84 <_printf_common>:
 801af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af88:	4616      	mov	r6, r2
 801af8a:	4699      	mov	r9, r3
 801af8c:	688a      	ldr	r2, [r1, #8]
 801af8e:	690b      	ldr	r3, [r1, #16]
 801af90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801af94:	4293      	cmp	r3, r2
 801af96:	bfb8      	it	lt
 801af98:	4613      	movlt	r3, r2
 801af9a:	6033      	str	r3, [r6, #0]
 801af9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801afa0:	4607      	mov	r7, r0
 801afa2:	460c      	mov	r4, r1
 801afa4:	b10a      	cbz	r2, 801afaa <_printf_common+0x26>
 801afa6:	3301      	adds	r3, #1
 801afa8:	6033      	str	r3, [r6, #0]
 801afaa:	6823      	ldr	r3, [r4, #0]
 801afac:	0699      	lsls	r1, r3, #26
 801afae:	bf42      	ittt	mi
 801afb0:	6833      	ldrmi	r3, [r6, #0]
 801afb2:	3302      	addmi	r3, #2
 801afb4:	6033      	strmi	r3, [r6, #0]
 801afb6:	6825      	ldr	r5, [r4, #0]
 801afb8:	f015 0506 	ands.w	r5, r5, #6
 801afbc:	d106      	bne.n	801afcc <_printf_common+0x48>
 801afbe:	f104 0a19 	add.w	sl, r4, #25
 801afc2:	68e3      	ldr	r3, [r4, #12]
 801afc4:	6832      	ldr	r2, [r6, #0]
 801afc6:	1a9b      	subs	r3, r3, r2
 801afc8:	42ab      	cmp	r3, r5
 801afca:	dc26      	bgt.n	801b01a <_printf_common+0x96>
 801afcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801afd0:	1e13      	subs	r3, r2, #0
 801afd2:	6822      	ldr	r2, [r4, #0]
 801afd4:	bf18      	it	ne
 801afd6:	2301      	movne	r3, #1
 801afd8:	0692      	lsls	r2, r2, #26
 801afda:	d42b      	bmi.n	801b034 <_printf_common+0xb0>
 801afdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801afe0:	4649      	mov	r1, r9
 801afe2:	4638      	mov	r0, r7
 801afe4:	47c0      	blx	r8
 801afe6:	3001      	adds	r0, #1
 801afe8:	d01e      	beq.n	801b028 <_printf_common+0xa4>
 801afea:	6823      	ldr	r3, [r4, #0]
 801afec:	68e5      	ldr	r5, [r4, #12]
 801afee:	6832      	ldr	r2, [r6, #0]
 801aff0:	f003 0306 	and.w	r3, r3, #6
 801aff4:	2b04      	cmp	r3, #4
 801aff6:	bf08      	it	eq
 801aff8:	1aad      	subeq	r5, r5, r2
 801affa:	68a3      	ldr	r3, [r4, #8]
 801affc:	6922      	ldr	r2, [r4, #16]
 801affe:	bf0c      	ite	eq
 801b000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b004:	2500      	movne	r5, #0
 801b006:	4293      	cmp	r3, r2
 801b008:	bfc4      	itt	gt
 801b00a:	1a9b      	subgt	r3, r3, r2
 801b00c:	18ed      	addgt	r5, r5, r3
 801b00e:	2600      	movs	r6, #0
 801b010:	341a      	adds	r4, #26
 801b012:	42b5      	cmp	r5, r6
 801b014:	d11a      	bne.n	801b04c <_printf_common+0xc8>
 801b016:	2000      	movs	r0, #0
 801b018:	e008      	b.n	801b02c <_printf_common+0xa8>
 801b01a:	2301      	movs	r3, #1
 801b01c:	4652      	mov	r2, sl
 801b01e:	4649      	mov	r1, r9
 801b020:	4638      	mov	r0, r7
 801b022:	47c0      	blx	r8
 801b024:	3001      	adds	r0, #1
 801b026:	d103      	bne.n	801b030 <_printf_common+0xac>
 801b028:	f04f 30ff 	mov.w	r0, #4294967295
 801b02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b030:	3501      	adds	r5, #1
 801b032:	e7c6      	b.n	801afc2 <_printf_common+0x3e>
 801b034:	18e1      	adds	r1, r4, r3
 801b036:	1c5a      	adds	r2, r3, #1
 801b038:	2030      	movs	r0, #48	; 0x30
 801b03a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b03e:	4422      	add	r2, r4
 801b040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b048:	3302      	adds	r3, #2
 801b04a:	e7c7      	b.n	801afdc <_printf_common+0x58>
 801b04c:	2301      	movs	r3, #1
 801b04e:	4622      	mov	r2, r4
 801b050:	4649      	mov	r1, r9
 801b052:	4638      	mov	r0, r7
 801b054:	47c0      	blx	r8
 801b056:	3001      	adds	r0, #1
 801b058:	d0e6      	beq.n	801b028 <_printf_common+0xa4>
 801b05a:	3601      	adds	r6, #1
 801b05c:	e7d9      	b.n	801b012 <_printf_common+0x8e>
	...

0801b060 <_printf_i>:
 801b060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b064:	7e0f      	ldrb	r7, [r1, #24]
 801b066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b068:	2f78      	cmp	r7, #120	; 0x78
 801b06a:	4691      	mov	r9, r2
 801b06c:	4680      	mov	r8, r0
 801b06e:	460c      	mov	r4, r1
 801b070:	469a      	mov	sl, r3
 801b072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b076:	d807      	bhi.n	801b088 <_printf_i+0x28>
 801b078:	2f62      	cmp	r7, #98	; 0x62
 801b07a:	d80a      	bhi.n	801b092 <_printf_i+0x32>
 801b07c:	2f00      	cmp	r7, #0
 801b07e:	f000 80d8 	beq.w	801b232 <_printf_i+0x1d2>
 801b082:	2f58      	cmp	r7, #88	; 0x58
 801b084:	f000 80a3 	beq.w	801b1ce <_printf_i+0x16e>
 801b088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b08c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b090:	e03a      	b.n	801b108 <_printf_i+0xa8>
 801b092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b096:	2b15      	cmp	r3, #21
 801b098:	d8f6      	bhi.n	801b088 <_printf_i+0x28>
 801b09a:	a101      	add	r1, pc, #4	; (adr r1, 801b0a0 <_printf_i+0x40>)
 801b09c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b0a0:	0801b0f9 	.word	0x0801b0f9
 801b0a4:	0801b10d 	.word	0x0801b10d
 801b0a8:	0801b089 	.word	0x0801b089
 801b0ac:	0801b089 	.word	0x0801b089
 801b0b0:	0801b089 	.word	0x0801b089
 801b0b4:	0801b089 	.word	0x0801b089
 801b0b8:	0801b10d 	.word	0x0801b10d
 801b0bc:	0801b089 	.word	0x0801b089
 801b0c0:	0801b089 	.word	0x0801b089
 801b0c4:	0801b089 	.word	0x0801b089
 801b0c8:	0801b089 	.word	0x0801b089
 801b0cc:	0801b219 	.word	0x0801b219
 801b0d0:	0801b13d 	.word	0x0801b13d
 801b0d4:	0801b1fb 	.word	0x0801b1fb
 801b0d8:	0801b089 	.word	0x0801b089
 801b0dc:	0801b089 	.word	0x0801b089
 801b0e0:	0801b23b 	.word	0x0801b23b
 801b0e4:	0801b089 	.word	0x0801b089
 801b0e8:	0801b13d 	.word	0x0801b13d
 801b0ec:	0801b089 	.word	0x0801b089
 801b0f0:	0801b089 	.word	0x0801b089
 801b0f4:	0801b203 	.word	0x0801b203
 801b0f8:	682b      	ldr	r3, [r5, #0]
 801b0fa:	1d1a      	adds	r2, r3, #4
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	602a      	str	r2, [r5, #0]
 801b100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b108:	2301      	movs	r3, #1
 801b10a:	e0a3      	b.n	801b254 <_printf_i+0x1f4>
 801b10c:	6820      	ldr	r0, [r4, #0]
 801b10e:	6829      	ldr	r1, [r5, #0]
 801b110:	0606      	lsls	r6, r0, #24
 801b112:	f101 0304 	add.w	r3, r1, #4
 801b116:	d50a      	bpl.n	801b12e <_printf_i+0xce>
 801b118:	680e      	ldr	r6, [r1, #0]
 801b11a:	602b      	str	r3, [r5, #0]
 801b11c:	2e00      	cmp	r6, #0
 801b11e:	da03      	bge.n	801b128 <_printf_i+0xc8>
 801b120:	232d      	movs	r3, #45	; 0x2d
 801b122:	4276      	negs	r6, r6
 801b124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b128:	485e      	ldr	r0, [pc, #376]	; (801b2a4 <_printf_i+0x244>)
 801b12a:	230a      	movs	r3, #10
 801b12c:	e019      	b.n	801b162 <_printf_i+0x102>
 801b12e:	680e      	ldr	r6, [r1, #0]
 801b130:	602b      	str	r3, [r5, #0]
 801b132:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b136:	bf18      	it	ne
 801b138:	b236      	sxthne	r6, r6
 801b13a:	e7ef      	b.n	801b11c <_printf_i+0xbc>
 801b13c:	682b      	ldr	r3, [r5, #0]
 801b13e:	6820      	ldr	r0, [r4, #0]
 801b140:	1d19      	adds	r1, r3, #4
 801b142:	6029      	str	r1, [r5, #0]
 801b144:	0601      	lsls	r1, r0, #24
 801b146:	d501      	bpl.n	801b14c <_printf_i+0xec>
 801b148:	681e      	ldr	r6, [r3, #0]
 801b14a:	e002      	b.n	801b152 <_printf_i+0xf2>
 801b14c:	0646      	lsls	r6, r0, #25
 801b14e:	d5fb      	bpl.n	801b148 <_printf_i+0xe8>
 801b150:	881e      	ldrh	r6, [r3, #0]
 801b152:	4854      	ldr	r0, [pc, #336]	; (801b2a4 <_printf_i+0x244>)
 801b154:	2f6f      	cmp	r7, #111	; 0x6f
 801b156:	bf0c      	ite	eq
 801b158:	2308      	moveq	r3, #8
 801b15a:	230a      	movne	r3, #10
 801b15c:	2100      	movs	r1, #0
 801b15e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b162:	6865      	ldr	r5, [r4, #4]
 801b164:	60a5      	str	r5, [r4, #8]
 801b166:	2d00      	cmp	r5, #0
 801b168:	bfa2      	ittt	ge
 801b16a:	6821      	ldrge	r1, [r4, #0]
 801b16c:	f021 0104 	bicge.w	r1, r1, #4
 801b170:	6021      	strge	r1, [r4, #0]
 801b172:	b90e      	cbnz	r6, 801b178 <_printf_i+0x118>
 801b174:	2d00      	cmp	r5, #0
 801b176:	d04d      	beq.n	801b214 <_printf_i+0x1b4>
 801b178:	4615      	mov	r5, r2
 801b17a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b17e:	fb03 6711 	mls	r7, r3, r1, r6
 801b182:	5dc7      	ldrb	r7, [r0, r7]
 801b184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b188:	4637      	mov	r7, r6
 801b18a:	42bb      	cmp	r3, r7
 801b18c:	460e      	mov	r6, r1
 801b18e:	d9f4      	bls.n	801b17a <_printf_i+0x11a>
 801b190:	2b08      	cmp	r3, #8
 801b192:	d10b      	bne.n	801b1ac <_printf_i+0x14c>
 801b194:	6823      	ldr	r3, [r4, #0]
 801b196:	07de      	lsls	r6, r3, #31
 801b198:	d508      	bpl.n	801b1ac <_printf_i+0x14c>
 801b19a:	6923      	ldr	r3, [r4, #16]
 801b19c:	6861      	ldr	r1, [r4, #4]
 801b19e:	4299      	cmp	r1, r3
 801b1a0:	bfde      	ittt	le
 801b1a2:	2330      	movle	r3, #48	; 0x30
 801b1a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b1a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b1ac:	1b52      	subs	r2, r2, r5
 801b1ae:	6122      	str	r2, [r4, #16]
 801b1b0:	f8cd a000 	str.w	sl, [sp]
 801b1b4:	464b      	mov	r3, r9
 801b1b6:	aa03      	add	r2, sp, #12
 801b1b8:	4621      	mov	r1, r4
 801b1ba:	4640      	mov	r0, r8
 801b1bc:	f7ff fee2 	bl	801af84 <_printf_common>
 801b1c0:	3001      	adds	r0, #1
 801b1c2:	d14c      	bne.n	801b25e <_printf_i+0x1fe>
 801b1c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b1c8:	b004      	add	sp, #16
 801b1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1ce:	4835      	ldr	r0, [pc, #212]	; (801b2a4 <_printf_i+0x244>)
 801b1d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b1d4:	6829      	ldr	r1, [r5, #0]
 801b1d6:	6823      	ldr	r3, [r4, #0]
 801b1d8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b1dc:	6029      	str	r1, [r5, #0]
 801b1de:	061d      	lsls	r5, r3, #24
 801b1e0:	d514      	bpl.n	801b20c <_printf_i+0x1ac>
 801b1e2:	07df      	lsls	r7, r3, #31
 801b1e4:	bf44      	itt	mi
 801b1e6:	f043 0320 	orrmi.w	r3, r3, #32
 801b1ea:	6023      	strmi	r3, [r4, #0]
 801b1ec:	b91e      	cbnz	r6, 801b1f6 <_printf_i+0x196>
 801b1ee:	6823      	ldr	r3, [r4, #0]
 801b1f0:	f023 0320 	bic.w	r3, r3, #32
 801b1f4:	6023      	str	r3, [r4, #0]
 801b1f6:	2310      	movs	r3, #16
 801b1f8:	e7b0      	b.n	801b15c <_printf_i+0xfc>
 801b1fa:	6823      	ldr	r3, [r4, #0]
 801b1fc:	f043 0320 	orr.w	r3, r3, #32
 801b200:	6023      	str	r3, [r4, #0]
 801b202:	2378      	movs	r3, #120	; 0x78
 801b204:	4828      	ldr	r0, [pc, #160]	; (801b2a8 <_printf_i+0x248>)
 801b206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b20a:	e7e3      	b.n	801b1d4 <_printf_i+0x174>
 801b20c:	0659      	lsls	r1, r3, #25
 801b20e:	bf48      	it	mi
 801b210:	b2b6      	uxthmi	r6, r6
 801b212:	e7e6      	b.n	801b1e2 <_printf_i+0x182>
 801b214:	4615      	mov	r5, r2
 801b216:	e7bb      	b.n	801b190 <_printf_i+0x130>
 801b218:	682b      	ldr	r3, [r5, #0]
 801b21a:	6826      	ldr	r6, [r4, #0]
 801b21c:	6961      	ldr	r1, [r4, #20]
 801b21e:	1d18      	adds	r0, r3, #4
 801b220:	6028      	str	r0, [r5, #0]
 801b222:	0635      	lsls	r5, r6, #24
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	d501      	bpl.n	801b22c <_printf_i+0x1cc>
 801b228:	6019      	str	r1, [r3, #0]
 801b22a:	e002      	b.n	801b232 <_printf_i+0x1d2>
 801b22c:	0670      	lsls	r0, r6, #25
 801b22e:	d5fb      	bpl.n	801b228 <_printf_i+0x1c8>
 801b230:	8019      	strh	r1, [r3, #0]
 801b232:	2300      	movs	r3, #0
 801b234:	6123      	str	r3, [r4, #16]
 801b236:	4615      	mov	r5, r2
 801b238:	e7ba      	b.n	801b1b0 <_printf_i+0x150>
 801b23a:	682b      	ldr	r3, [r5, #0]
 801b23c:	1d1a      	adds	r2, r3, #4
 801b23e:	602a      	str	r2, [r5, #0]
 801b240:	681d      	ldr	r5, [r3, #0]
 801b242:	6862      	ldr	r2, [r4, #4]
 801b244:	2100      	movs	r1, #0
 801b246:	4628      	mov	r0, r5
 801b248:	f7e4 ffc2 	bl	80001d0 <memchr>
 801b24c:	b108      	cbz	r0, 801b252 <_printf_i+0x1f2>
 801b24e:	1b40      	subs	r0, r0, r5
 801b250:	6060      	str	r0, [r4, #4]
 801b252:	6863      	ldr	r3, [r4, #4]
 801b254:	6123      	str	r3, [r4, #16]
 801b256:	2300      	movs	r3, #0
 801b258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b25c:	e7a8      	b.n	801b1b0 <_printf_i+0x150>
 801b25e:	6923      	ldr	r3, [r4, #16]
 801b260:	462a      	mov	r2, r5
 801b262:	4649      	mov	r1, r9
 801b264:	4640      	mov	r0, r8
 801b266:	47d0      	blx	sl
 801b268:	3001      	adds	r0, #1
 801b26a:	d0ab      	beq.n	801b1c4 <_printf_i+0x164>
 801b26c:	6823      	ldr	r3, [r4, #0]
 801b26e:	079b      	lsls	r3, r3, #30
 801b270:	d413      	bmi.n	801b29a <_printf_i+0x23a>
 801b272:	68e0      	ldr	r0, [r4, #12]
 801b274:	9b03      	ldr	r3, [sp, #12]
 801b276:	4298      	cmp	r0, r3
 801b278:	bfb8      	it	lt
 801b27a:	4618      	movlt	r0, r3
 801b27c:	e7a4      	b.n	801b1c8 <_printf_i+0x168>
 801b27e:	2301      	movs	r3, #1
 801b280:	4632      	mov	r2, r6
 801b282:	4649      	mov	r1, r9
 801b284:	4640      	mov	r0, r8
 801b286:	47d0      	blx	sl
 801b288:	3001      	adds	r0, #1
 801b28a:	d09b      	beq.n	801b1c4 <_printf_i+0x164>
 801b28c:	3501      	adds	r5, #1
 801b28e:	68e3      	ldr	r3, [r4, #12]
 801b290:	9903      	ldr	r1, [sp, #12]
 801b292:	1a5b      	subs	r3, r3, r1
 801b294:	42ab      	cmp	r3, r5
 801b296:	dcf2      	bgt.n	801b27e <_printf_i+0x21e>
 801b298:	e7eb      	b.n	801b272 <_printf_i+0x212>
 801b29a:	2500      	movs	r5, #0
 801b29c:	f104 0619 	add.w	r6, r4, #25
 801b2a0:	e7f5      	b.n	801b28e <_printf_i+0x22e>
 801b2a2:	bf00      	nop
 801b2a4:	0801f413 	.word	0x0801f413
 801b2a8:	0801f424 	.word	0x0801f424

0801b2ac <_sbrk_r>:
 801b2ac:	b538      	push	{r3, r4, r5, lr}
 801b2ae:	4d06      	ldr	r5, [pc, #24]	; (801b2c8 <_sbrk_r+0x1c>)
 801b2b0:	2300      	movs	r3, #0
 801b2b2:	4604      	mov	r4, r0
 801b2b4:	4608      	mov	r0, r1
 801b2b6:	602b      	str	r3, [r5, #0]
 801b2b8:	f7ea f840 	bl	800533c <_sbrk>
 801b2bc:	1c43      	adds	r3, r0, #1
 801b2be:	d102      	bne.n	801b2c6 <_sbrk_r+0x1a>
 801b2c0:	682b      	ldr	r3, [r5, #0]
 801b2c2:	b103      	cbz	r3, 801b2c6 <_sbrk_r+0x1a>
 801b2c4:	6023      	str	r3, [r4, #0]
 801b2c6:	bd38      	pop	{r3, r4, r5, pc}
 801b2c8:	20004c98 	.word	0x20004c98

0801b2cc <_raise_r>:
 801b2cc:	291f      	cmp	r1, #31
 801b2ce:	b538      	push	{r3, r4, r5, lr}
 801b2d0:	4604      	mov	r4, r0
 801b2d2:	460d      	mov	r5, r1
 801b2d4:	d904      	bls.n	801b2e0 <_raise_r+0x14>
 801b2d6:	2316      	movs	r3, #22
 801b2d8:	6003      	str	r3, [r0, #0]
 801b2da:	f04f 30ff 	mov.w	r0, #4294967295
 801b2de:	bd38      	pop	{r3, r4, r5, pc}
 801b2e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b2e2:	b112      	cbz	r2, 801b2ea <_raise_r+0x1e>
 801b2e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2e8:	b94b      	cbnz	r3, 801b2fe <_raise_r+0x32>
 801b2ea:	4620      	mov	r0, r4
 801b2ec:	f000 f830 	bl	801b350 <_getpid_r>
 801b2f0:	462a      	mov	r2, r5
 801b2f2:	4601      	mov	r1, r0
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2fa:	f000 b817 	b.w	801b32c <_kill_r>
 801b2fe:	2b01      	cmp	r3, #1
 801b300:	d00a      	beq.n	801b318 <_raise_r+0x4c>
 801b302:	1c59      	adds	r1, r3, #1
 801b304:	d103      	bne.n	801b30e <_raise_r+0x42>
 801b306:	2316      	movs	r3, #22
 801b308:	6003      	str	r3, [r0, #0]
 801b30a:	2001      	movs	r0, #1
 801b30c:	e7e7      	b.n	801b2de <_raise_r+0x12>
 801b30e:	2400      	movs	r4, #0
 801b310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b314:	4628      	mov	r0, r5
 801b316:	4798      	blx	r3
 801b318:	2000      	movs	r0, #0
 801b31a:	e7e0      	b.n	801b2de <_raise_r+0x12>

0801b31c <raise>:
 801b31c:	4b02      	ldr	r3, [pc, #8]	; (801b328 <raise+0xc>)
 801b31e:	4601      	mov	r1, r0
 801b320:	6818      	ldr	r0, [r3, #0]
 801b322:	f7ff bfd3 	b.w	801b2cc <_raise_r>
 801b326:	bf00      	nop
 801b328:	200028c8 	.word	0x200028c8

0801b32c <_kill_r>:
 801b32c:	b538      	push	{r3, r4, r5, lr}
 801b32e:	4d07      	ldr	r5, [pc, #28]	; (801b34c <_kill_r+0x20>)
 801b330:	2300      	movs	r3, #0
 801b332:	4604      	mov	r4, r0
 801b334:	4608      	mov	r0, r1
 801b336:	4611      	mov	r1, r2
 801b338:	602b      	str	r3, [r5, #0]
 801b33a:	f7e9 ff77 	bl	800522c <_kill>
 801b33e:	1c43      	adds	r3, r0, #1
 801b340:	d102      	bne.n	801b348 <_kill_r+0x1c>
 801b342:	682b      	ldr	r3, [r5, #0]
 801b344:	b103      	cbz	r3, 801b348 <_kill_r+0x1c>
 801b346:	6023      	str	r3, [r4, #0]
 801b348:	bd38      	pop	{r3, r4, r5, pc}
 801b34a:	bf00      	nop
 801b34c:	20004c98 	.word	0x20004c98

0801b350 <_getpid_r>:
 801b350:	f7e9 bf64 	b.w	800521c <_getpid>

0801b354 <_vsiprintf_r>:
 801b354:	b500      	push	{lr}
 801b356:	b09b      	sub	sp, #108	; 0x6c
 801b358:	9100      	str	r1, [sp, #0]
 801b35a:	9104      	str	r1, [sp, #16]
 801b35c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b360:	9105      	str	r1, [sp, #20]
 801b362:	9102      	str	r1, [sp, #8]
 801b364:	4905      	ldr	r1, [pc, #20]	; (801b37c <_vsiprintf_r+0x28>)
 801b366:	9103      	str	r1, [sp, #12]
 801b368:	4669      	mov	r1, sp
 801b36a:	f001 fd9d 	bl	801cea8 <_svfiprintf_r>
 801b36e:	9b00      	ldr	r3, [sp, #0]
 801b370:	2200      	movs	r2, #0
 801b372:	701a      	strb	r2, [r3, #0]
 801b374:	b01b      	add	sp, #108	; 0x6c
 801b376:	f85d fb04 	ldr.w	pc, [sp], #4
 801b37a:	bf00      	nop
 801b37c:	ffff0208 	.word	0xffff0208

0801b380 <vsiprintf>:
 801b380:	4613      	mov	r3, r2
 801b382:	460a      	mov	r2, r1
 801b384:	4601      	mov	r1, r0
 801b386:	4802      	ldr	r0, [pc, #8]	; (801b390 <vsiprintf+0x10>)
 801b388:	6800      	ldr	r0, [r0, #0]
 801b38a:	f7ff bfe3 	b.w	801b354 <_vsiprintf_r>
 801b38e:	bf00      	nop
 801b390:	200028c8 	.word	0x200028c8

0801b394 <__swbuf_r>:
 801b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b396:	460e      	mov	r6, r1
 801b398:	4614      	mov	r4, r2
 801b39a:	4605      	mov	r5, r0
 801b39c:	b118      	cbz	r0, 801b3a6 <__swbuf_r+0x12>
 801b39e:	6983      	ldr	r3, [r0, #24]
 801b3a0:	b90b      	cbnz	r3, 801b3a6 <__swbuf_r+0x12>
 801b3a2:	f001 f84d 	bl	801c440 <__sinit>
 801b3a6:	4b21      	ldr	r3, [pc, #132]	; (801b42c <__swbuf_r+0x98>)
 801b3a8:	429c      	cmp	r4, r3
 801b3aa:	d12b      	bne.n	801b404 <__swbuf_r+0x70>
 801b3ac:	686c      	ldr	r4, [r5, #4]
 801b3ae:	69a3      	ldr	r3, [r4, #24]
 801b3b0:	60a3      	str	r3, [r4, #8]
 801b3b2:	89a3      	ldrh	r3, [r4, #12]
 801b3b4:	071a      	lsls	r2, r3, #28
 801b3b6:	d52f      	bpl.n	801b418 <__swbuf_r+0x84>
 801b3b8:	6923      	ldr	r3, [r4, #16]
 801b3ba:	b36b      	cbz	r3, 801b418 <__swbuf_r+0x84>
 801b3bc:	6923      	ldr	r3, [r4, #16]
 801b3be:	6820      	ldr	r0, [r4, #0]
 801b3c0:	1ac0      	subs	r0, r0, r3
 801b3c2:	6963      	ldr	r3, [r4, #20]
 801b3c4:	b2f6      	uxtb	r6, r6
 801b3c6:	4283      	cmp	r3, r0
 801b3c8:	4637      	mov	r7, r6
 801b3ca:	dc04      	bgt.n	801b3d6 <__swbuf_r+0x42>
 801b3cc:	4621      	mov	r1, r4
 801b3ce:	4628      	mov	r0, r5
 801b3d0:	f000 ffa2 	bl	801c318 <_fflush_r>
 801b3d4:	bb30      	cbnz	r0, 801b424 <__swbuf_r+0x90>
 801b3d6:	68a3      	ldr	r3, [r4, #8]
 801b3d8:	3b01      	subs	r3, #1
 801b3da:	60a3      	str	r3, [r4, #8]
 801b3dc:	6823      	ldr	r3, [r4, #0]
 801b3de:	1c5a      	adds	r2, r3, #1
 801b3e0:	6022      	str	r2, [r4, #0]
 801b3e2:	701e      	strb	r6, [r3, #0]
 801b3e4:	6963      	ldr	r3, [r4, #20]
 801b3e6:	3001      	adds	r0, #1
 801b3e8:	4283      	cmp	r3, r0
 801b3ea:	d004      	beq.n	801b3f6 <__swbuf_r+0x62>
 801b3ec:	89a3      	ldrh	r3, [r4, #12]
 801b3ee:	07db      	lsls	r3, r3, #31
 801b3f0:	d506      	bpl.n	801b400 <__swbuf_r+0x6c>
 801b3f2:	2e0a      	cmp	r6, #10
 801b3f4:	d104      	bne.n	801b400 <__swbuf_r+0x6c>
 801b3f6:	4621      	mov	r1, r4
 801b3f8:	4628      	mov	r0, r5
 801b3fa:	f000 ff8d 	bl	801c318 <_fflush_r>
 801b3fe:	b988      	cbnz	r0, 801b424 <__swbuf_r+0x90>
 801b400:	4638      	mov	r0, r7
 801b402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b404:	4b0a      	ldr	r3, [pc, #40]	; (801b430 <__swbuf_r+0x9c>)
 801b406:	429c      	cmp	r4, r3
 801b408:	d101      	bne.n	801b40e <__swbuf_r+0x7a>
 801b40a:	68ac      	ldr	r4, [r5, #8]
 801b40c:	e7cf      	b.n	801b3ae <__swbuf_r+0x1a>
 801b40e:	4b09      	ldr	r3, [pc, #36]	; (801b434 <__swbuf_r+0xa0>)
 801b410:	429c      	cmp	r4, r3
 801b412:	bf08      	it	eq
 801b414:	68ec      	ldreq	r4, [r5, #12]
 801b416:	e7ca      	b.n	801b3ae <__swbuf_r+0x1a>
 801b418:	4621      	mov	r1, r4
 801b41a:	4628      	mov	r0, r5
 801b41c:	f000 f80c 	bl	801b438 <__swsetup_r>
 801b420:	2800      	cmp	r0, #0
 801b422:	d0cb      	beq.n	801b3bc <__swbuf_r+0x28>
 801b424:	f04f 37ff 	mov.w	r7, #4294967295
 801b428:	e7ea      	b.n	801b400 <__swbuf_r+0x6c>
 801b42a:	bf00      	nop
 801b42c:	0801f5e8 	.word	0x0801f5e8
 801b430:	0801f608 	.word	0x0801f608
 801b434:	0801f5c8 	.word	0x0801f5c8

0801b438 <__swsetup_r>:
 801b438:	4b32      	ldr	r3, [pc, #200]	; (801b504 <__swsetup_r+0xcc>)
 801b43a:	b570      	push	{r4, r5, r6, lr}
 801b43c:	681d      	ldr	r5, [r3, #0]
 801b43e:	4606      	mov	r6, r0
 801b440:	460c      	mov	r4, r1
 801b442:	b125      	cbz	r5, 801b44e <__swsetup_r+0x16>
 801b444:	69ab      	ldr	r3, [r5, #24]
 801b446:	b913      	cbnz	r3, 801b44e <__swsetup_r+0x16>
 801b448:	4628      	mov	r0, r5
 801b44a:	f000 fff9 	bl	801c440 <__sinit>
 801b44e:	4b2e      	ldr	r3, [pc, #184]	; (801b508 <__swsetup_r+0xd0>)
 801b450:	429c      	cmp	r4, r3
 801b452:	d10f      	bne.n	801b474 <__swsetup_r+0x3c>
 801b454:	686c      	ldr	r4, [r5, #4]
 801b456:	89a3      	ldrh	r3, [r4, #12]
 801b458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b45c:	0719      	lsls	r1, r3, #28
 801b45e:	d42c      	bmi.n	801b4ba <__swsetup_r+0x82>
 801b460:	06dd      	lsls	r5, r3, #27
 801b462:	d411      	bmi.n	801b488 <__swsetup_r+0x50>
 801b464:	2309      	movs	r3, #9
 801b466:	6033      	str	r3, [r6, #0]
 801b468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b46c:	81a3      	strh	r3, [r4, #12]
 801b46e:	f04f 30ff 	mov.w	r0, #4294967295
 801b472:	e03e      	b.n	801b4f2 <__swsetup_r+0xba>
 801b474:	4b25      	ldr	r3, [pc, #148]	; (801b50c <__swsetup_r+0xd4>)
 801b476:	429c      	cmp	r4, r3
 801b478:	d101      	bne.n	801b47e <__swsetup_r+0x46>
 801b47a:	68ac      	ldr	r4, [r5, #8]
 801b47c:	e7eb      	b.n	801b456 <__swsetup_r+0x1e>
 801b47e:	4b24      	ldr	r3, [pc, #144]	; (801b510 <__swsetup_r+0xd8>)
 801b480:	429c      	cmp	r4, r3
 801b482:	bf08      	it	eq
 801b484:	68ec      	ldreq	r4, [r5, #12]
 801b486:	e7e6      	b.n	801b456 <__swsetup_r+0x1e>
 801b488:	0758      	lsls	r0, r3, #29
 801b48a:	d512      	bpl.n	801b4b2 <__swsetup_r+0x7a>
 801b48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b48e:	b141      	cbz	r1, 801b4a2 <__swsetup_r+0x6a>
 801b490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b494:	4299      	cmp	r1, r3
 801b496:	d002      	beq.n	801b49e <__swsetup_r+0x66>
 801b498:	4630      	mov	r0, r6
 801b49a:	f7ff f863 	bl	801a564 <_free_r>
 801b49e:	2300      	movs	r3, #0
 801b4a0:	6363      	str	r3, [r4, #52]	; 0x34
 801b4a2:	89a3      	ldrh	r3, [r4, #12]
 801b4a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b4a8:	81a3      	strh	r3, [r4, #12]
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	6063      	str	r3, [r4, #4]
 801b4ae:	6923      	ldr	r3, [r4, #16]
 801b4b0:	6023      	str	r3, [r4, #0]
 801b4b2:	89a3      	ldrh	r3, [r4, #12]
 801b4b4:	f043 0308 	orr.w	r3, r3, #8
 801b4b8:	81a3      	strh	r3, [r4, #12]
 801b4ba:	6923      	ldr	r3, [r4, #16]
 801b4bc:	b94b      	cbnz	r3, 801b4d2 <__swsetup_r+0x9a>
 801b4be:	89a3      	ldrh	r3, [r4, #12]
 801b4c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4c8:	d003      	beq.n	801b4d2 <__swsetup_r+0x9a>
 801b4ca:	4621      	mov	r1, r4
 801b4cc:	4630      	mov	r0, r6
 801b4ce:	f001 f87f 	bl	801c5d0 <__smakebuf_r>
 801b4d2:	89a0      	ldrh	r0, [r4, #12]
 801b4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4d8:	f010 0301 	ands.w	r3, r0, #1
 801b4dc:	d00a      	beq.n	801b4f4 <__swsetup_r+0xbc>
 801b4de:	2300      	movs	r3, #0
 801b4e0:	60a3      	str	r3, [r4, #8]
 801b4e2:	6963      	ldr	r3, [r4, #20]
 801b4e4:	425b      	negs	r3, r3
 801b4e6:	61a3      	str	r3, [r4, #24]
 801b4e8:	6923      	ldr	r3, [r4, #16]
 801b4ea:	b943      	cbnz	r3, 801b4fe <__swsetup_r+0xc6>
 801b4ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b4f0:	d1ba      	bne.n	801b468 <__swsetup_r+0x30>
 801b4f2:	bd70      	pop	{r4, r5, r6, pc}
 801b4f4:	0781      	lsls	r1, r0, #30
 801b4f6:	bf58      	it	pl
 801b4f8:	6963      	ldrpl	r3, [r4, #20]
 801b4fa:	60a3      	str	r3, [r4, #8]
 801b4fc:	e7f4      	b.n	801b4e8 <__swsetup_r+0xb0>
 801b4fe:	2000      	movs	r0, #0
 801b500:	e7f7      	b.n	801b4f2 <__swsetup_r+0xba>
 801b502:	bf00      	nop
 801b504:	200028c8 	.word	0x200028c8
 801b508:	0801f5e8 	.word	0x0801f5e8
 801b50c:	0801f608 	.word	0x0801f608
 801b510:	0801f5c8 	.word	0x0801f5c8

0801b514 <quorem>:
 801b514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b518:	6903      	ldr	r3, [r0, #16]
 801b51a:	690c      	ldr	r4, [r1, #16]
 801b51c:	42a3      	cmp	r3, r4
 801b51e:	4607      	mov	r7, r0
 801b520:	f2c0 8081 	blt.w	801b626 <quorem+0x112>
 801b524:	3c01      	subs	r4, #1
 801b526:	f101 0814 	add.w	r8, r1, #20
 801b52a:	f100 0514 	add.w	r5, r0, #20
 801b52e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b532:	9301      	str	r3, [sp, #4]
 801b534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b53c:	3301      	adds	r3, #1
 801b53e:	429a      	cmp	r2, r3
 801b540:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b544:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b548:	fbb2 f6f3 	udiv	r6, r2, r3
 801b54c:	d331      	bcc.n	801b5b2 <quorem+0x9e>
 801b54e:	f04f 0e00 	mov.w	lr, #0
 801b552:	4640      	mov	r0, r8
 801b554:	46ac      	mov	ip, r5
 801b556:	46f2      	mov	sl, lr
 801b558:	f850 2b04 	ldr.w	r2, [r0], #4
 801b55c:	b293      	uxth	r3, r2
 801b55e:	fb06 e303 	mla	r3, r6, r3, lr
 801b562:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b566:	b29b      	uxth	r3, r3
 801b568:	ebaa 0303 	sub.w	r3, sl, r3
 801b56c:	f8dc a000 	ldr.w	sl, [ip]
 801b570:	0c12      	lsrs	r2, r2, #16
 801b572:	fa13 f38a 	uxtah	r3, r3, sl
 801b576:	fb06 e202 	mla	r2, r6, r2, lr
 801b57a:	9300      	str	r3, [sp, #0]
 801b57c:	9b00      	ldr	r3, [sp, #0]
 801b57e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b582:	b292      	uxth	r2, r2
 801b584:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b58c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b590:	4581      	cmp	r9, r0
 801b592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b596:	f84c 3b04 	str.w	r3, [ip], #4
 801b59a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b59e:	d2db      	bcs.n	801b558 <quorem+0x44>
 801b5a0:	f855 300b 	ldr.w	r3, [r5, fp]
 801b5a4:	b92b      	cbnz	r3, 801b5b2 <quorem+0x9e>
 801b5a6:	9b01      	ldr	r3, [sp, #4]
 801b5a8:	3b04      	subs	r3, #4
 801b5aa:	429d      	cmp	r5, r3
 801b5ac:	461a      	mov	r2, r3
 801b5ae:	d32e      	bcc.n	801b60e <quorem+0xfa>
 801b5b0:	613c      	str	r4, [r7, #16]
 801b5b2:	4638      	mov	r0, r7
 801b5b4:	f001 faec 	bl	801cb90 <__mcmp>
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	db24      	blt.n	801b606 <quorem+0xf2>
 801b5bc:	3601      	adds	r6, #1
 801b5be:	4628      	mov	r0, r5
 801b5c0:	f04f 0c00 	mov.w	ip, #0
 801b5c4:	f858 2b04 	ldr.w	r2, [r8], #4
 801b5c8:	f8d0 e000 	ldr.w	lr, [r0]
 801b5cc:	b293      	uxth	r3, r2
 801b5ce:	ebac 0303 	sub.w	r3, ip, r3
 801b5d2:	0c12      	lsrs	r2, r2, #16
 801b5d4:	fa13 f38e 	uxtah	r3, r3, lr
 801b5d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b5dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b5e0:	b29b      	uxth	r3, r3
 801b5e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5e6:	45c1      	cmp	r9, r8
 801b5e8:	f840 3b04 	str.w	r3, [r0], #4
 801b5ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b5f0:	d2e8      	bcs.n	801b5c4 <quorem+0xb0>
 801b5f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5fa:	b922      	cbnz	r2, 801b606 <quorem+0xf2>
 801b5fc:	3b04      	subs	r3, #4
 801b5fe:	429d      	cmp	r5, r3
 801b600:	461a      	mov	r2, r3
 801b602:	d30a      	bcc.n	801b61a <quorem+0x106>
 801b604:	613c      	str	r4, [r7, #16]
 801b606:	4630      	mov	r0, r6
 801b608:	b003      	add	sp, #12
 801b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b60e:	6812      	ldr	r2, [r2, #0]
 801b610:	3b04      	subs	r3, #4
 801b612:	2a00      	cmp	r2, #0
 801b614:	d1cc      	bne.n	801b5b0 <quorem+0x9c>
 801b616:	3c01      	subs	r4, #1
 801b618:	e7c7      	b.n	801b5aa <quorem+0x96>
 801b61a:	6812      	ldr	r2, [r2, #0]
 801b61c:	3b04      	subs	r3, #4
 801b61e:	2a00      	cmp	r2, #0
 801b620:	d1f0      	bne.n	801b604 <quorem+0xf0>
 801b622:	3c01      	subs	r4, #1
 801b624:	e7eb      	b.n	801b5fe <quorem+0xea>
 801b626:	2000      	movs	r0, #0
 801b628:	e7ee      	b.n	801b608 <quorem+0xf4>
 801b62a:	0000      	movs	r0, r0
 801b62c:	0000      	movs	r0, r0
	...

0801b630 <_dtoa_r>:
 801b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b634:	ed2d 8b04 	vpush	{d8-d9}
 801b638:	ec57 6b10 	vmov	r6, r7, d0
 801b63c:	b093      	sub	sp, #76	; 0x4c
 801b63e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b644:	9106      	str	r1, [sp, #24]
 801b646:	ee10 aa10 	vmov	sl, s0
 801b64a:	4604      	mov	r4, r0
 801b64c:	9209      	str	r2, [sp, #36]	; 0x24
 801b64e:	930c      	str	r3, [sp, #48]	; 0x30
 801b650:	46bb      	mov	fp, r7
 801b652:	b975      	cbnz	r5, 801b672 <_dtoa_r+0x42>
 801b654:	2010      	movs	r0, #16
 801b656:	f7fe ff2f 	bl	801a4b8 <malloc>
 801b65a:	4602      	mov	r2, r0
 801b65c:	6260      	str	r0, [r4, #36]	; 0x24
 801b65e:	b920      	cbnz	r0, 801b66a <_dtoa_r+0x3a>
 801b660:	4ba7      	ldr	r3, [pc, #668]	; (801b900 <_dtoa_r+0x2d0>)
 801b662:	21ea      	movs	r1, #234	; 0xea
 801b664:	48a7      	ldr	r0, [pc, #668]	; (801b904 <_dtoa_r+0x2d4>)
 801b666:	f7fe fec1 	bl	801a3ec <__assert_func>
 801b66a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b66e:	6005      	str	r5, [r0, #0]
 801b670:	60c5      	str	r5, [r0, #12]
 801b672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b674:	6819      	ldr	r1, [r3, #0]
 801b676:	b151      	cbz	r1, 801b68e <_dtoa_r+0x5e>
 801b678:	685a      	ldr	r2, [r3, #4]
 801b67a:	604a      	str	r2, [r1, #4]
 801b67c:	2301      	movs	r3, #1
 801b67e:	4093      	lsls	r3, r2
 801b680:	608b      	str	r3, [r1, #8]
 801b682:	4620      	mov	r0, r4
 801b684:	f001 f842 	bl	801c70c <_Bfree>
 801b688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b68a:	2200      	movs	r2, #0
 801b68c:	601a      	str	r2, [r3, #0]
 801b68e:	1e3b      	subs	r3, r7, #0
 801b690:	bfaa      	itet	ge
 801b692:	2300      	movge	r3, #0
 801b694:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b698:	f8c8 3000 	strge.w	r3, [r8]
 801b69c:	4b9a      	ldr	r3, [pc, #616]	; (801b908 <_dtoa_r+0x2d8>)
 801b69e:	bfbc      	itt	lt
 801b6a0:	2201      	movlt	r2, #1
 801b6a2:	f8c8 2000 	strlt.w	r2, [r8]
 801b6a6:	ea33 030b 	bics.w	r3, r3, fp
 801b6aa:	d11b      	bne.n	801b6e4 <_dtoa_r+0xb4>
 801b6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b6ae:	f242 730f 	movw	r3, #9999	; 0x270f
 801b6b2:	6013      	str	r3, [r2, #0]
 801b6b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b6b8:	4333      	orrs	r3, r6
 801b6ba:	f000 8592 	beq.w	801c1e2 <_dtoa_r+0xbb2>
 801b6be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b6c0:	b963      	cbnz	r3, 801b6dc <_dtoa_r+0xac>
 801b6c2:	4b92      	ldr	r3, [pc, #584]	; (801b90c <_dtoa_r+0x2dc>)
 801b6c4:	e022      	b.n	801b70c <_dtoa_r+0xdc>
 801b6c6:	4b92      	ldr	r3, [pc, #584]	; (801b910 <_dtoa_r+0x2e0>)
 801b6c8:	9301      	str	r3, [sp, #4]
 801b6ca:	3308      	adds	r3, #8
 801b6cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b6ce:	6013      	str	r3, [r2, #0]
 801b6d0:	9801      	ldr	r0, [sp, #4]
 801b6d2:	b013      	add	sp, #76	; 0x4c
 801b6d4:	ecbd 8b04 	vpop	{d8-d9}
 801b6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6dc:	4b8b      	ldr	r3, [pc, #556]	; (801b90c <_dtoa_r+0x2dc>)
 801b6de:	9301      	str	r3, [sp, #4]
 801b6e0:	3303      	adds	r3, #3
 801b6e2:	e7f3      	b.n	801b6cc <_dtoa_r+0x9c>
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	2300      	movs	r3, #0
 801b6e8:	4650      	mov	r0, sl
 801b6ea:	4659      	mov	r1, fp
 801b6ec:	f7e5 f9f6 	bl	8000adc <__aeabi_dcmpeq>
 801b6f0:	ec4b ab19 	vmov	d9, sl, fp
 801b6f4:	4680      	mov	r8, r0
 801b6f6:	b158      	cbz	r0, 801b710 <_dtoa_r+0xe0>
 801b6f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b6fa:	2301      	movs	r3, #1
 801b6fc:	6013      	str	r3, [r2, #0]
 801b6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b700:	2b00      	cmp	r3, #0
 801b702:	f000 856b 	beq.w	801c1dc <_dtoa_r+0xbac>
 801b706:	4883      	ldr	r0, [pc, #524]	; (801b914 <_dtoa_r+0x2e4>)
 801b708:	6018      	str	r0, [r3, #0]
 801b70a:	1e43      	subs	r3, r0, #1
 801b70c:	9301      	str	r3, [sp, #4]
 801b70e:	e7df      	b.n	801b6d0 <_dtoa_r+0xa0>
 801b710:	ec4b ab10 	vmov	d0, sl, fp
 801b714:	aa10      	add	r2, sp, #64	; 0x40
 801b716:	a911      	add	r1, sp, #68	; 0x44
 801b718:	4620      	mov	r0, r4
 801b71a:	f001 fadf 	bl	801ccdc <__d2b>
 801b71e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b722:	ee08 0a10 	vmov	s16, r0
 801b726:	2d00      	cmp	r5, #0
 801b728:	f000 8084 	beq.w	801b834 <_dtoa_r+0x204>
 801b72c:	ee19 3a90 	vmov	r3, s19
 801b730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b734:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b738:	4656      	mov	r6, sl
 801b73a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b73e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b742:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b746:	4b74      	ldr	r3, [pc, #464]	; (801b918 <_dtoa_r+0x2e8>)
 801b748:	2200      	movs	r2, #0
 801b74a:	4630      	mov	r0, r6
 801b74c:	4639      	mov	r1, r7
 801b74e:	f7e4 fda5 	bl	800029c <__aeabi_dsub>
 801b752:	a365      	add	r3, pc, #404	; (adr r3, 801b8e8 <_dtoa_r+0x2b8>)
 801b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b758:	f7e4 ff58 	bl	800060c <__aeabi_dmul>
 801b75c:	a364      	add	r3, pc, #400	; (adr r3, 801b8f0 <_dtoa_r+0x2c0>)
 801b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b762:	f7e4 fd9d 	bl	80002a0 <__adddf3>
 801b766:	4606      	mov	r6, r0
 801b768:	4628      	mov	r0, r5
 801b76a:	460f      	mov	r7, r1
 801b76c:	f7e4 fee4 	bl	8000538 <__aeabi_i2d>
 801b770:	a361      	add	r3, pc, #388	; (adr r3, 801b8f8 <_dtoa_r+0x2c8>)
 801b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b776:	f7e4 ff49 	bl	800060c <__aeabi_dmul>
 801b77a:	4602      	mov	r2, r0
 801b77c:	460b      	mov	r3, r1
 801b77e:	4630      	mov	r0, r6
 801b780:	4639      	mov	r1, r7
 801b782:	f7e4 fd8d 	bl	80002a0 <__adddf3>
 801b786:	4606      	mov	r6, r0
 801b788:	460f      	mov	r7, r1
 801b78a:	f7e5 f9ef 	bl	8000b6c <__aeabi_d2iz>
 801b78e:	2200      	movs	r2, #0
 801b790:	9000      	str	r0, [sp, #0]
 801b792:	2300      	movs	r3, #0
 801b794:	4630      	mov	r0, r6
 801b796:	4639      	mov	r1, r7
 801b798:	f7e5 f9aa 	bl	8000af0 <__aeabi_dcmplt>
 801b79c:	b150      	cbz	r0, 801b7b4 <_dtoa_r+0x184>
 801b79e:	9800      	ldr	r0, [sp, #0]
 801b7a0:	f7e4 feca 	bl	8000538 <__aeabi_i2d>
 801b7a4:	4632      	mov	r2, r6
 801b7a6:	463b      	mov	r3, r7
 801b7a8:	f7e5 f998 	bl	8000adc <__aeabi_dcmpeq>
 801b7ac:	b910      	cbnz	r0, 801b7b4 <_dtoa_r+0x184>
 801b7ae:	9b00      	ldr	r3, [sp, #0]
 801b7b0:	3b01      	subs	r3, #1
 801b7b2:	9300      	str	r3, [sp, #0]
 801b7b4:	9b00      	ldr	r3, [sp, #0]
 801b7b6:	2b16      	cmp	r3, #22
 801b7b8:	d85a      	bhi.n	801b870 <_dtoa_r+0x240>
 801b7ba:	9a00      	ldr	r2, [sp, #0]
 801b7bc:	4b57      	ldr	r3, [pc, #348]	; (801b91c <_dtoa_r+0x2ec>)
 801b7be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7c6:	ec51 0b19 	vmov	r0, r1, d9
 801b7ca:	f7e5 f991 	bl	8000af0 <__aeabi_dcmplt>
 801b7ce:	2800      	cmp	r0, #0
 801b7d0:	d050      	beq.n	801b874 <_dtoa_r+0x244>
 801b7d2:	9b00      	ldr	r3, [sp, #0]
 801b7d4:	3b01      	subs	r3, #1
 801b7d6:	9300      	str	r3, [sp, #0]
 801b7d8:	2300      	movs	r3, #0
 801b7da:	930b      	str	r3, [sp, #44]	; 0x2c
 801b7dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b7de:	1b5d      	subs	r5, r3, r5
 801b7e0:	1e6b      	subs	r3, r5, #1
 801b7e2:	9305      	str	r3, [sp, #20]
 801b7e4:	bf45      	ittet	mi
 801b7e6:	f1c5 0301 	rsbmi	r3, r5, #1
 801b7ea:	9304      	strmi	r3, [sp, #16]
 801b7ec:	2300      	movpl	r3, #0
 801b7ee:	2300      	movmi	r3, #0
 801b7f0:	bf4c      	ite	mi
 801b7f2:	9305      	strmi	r3, [sp, #20]
 801b7f4:	9304      	strpl	r3, [sp, #16]
 801b7f6:	9b00      	ldr	r3, [sp, #0]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	db3d      	blt.n	801b878 <_dtoa_r+0x248>
 801b7fc:	9b05      	ldr	r3, [sp, #20]
 801b7fe:	9a00      	ldr	r2, [sp, #0]
 801b800:	920a      	str	r2, [sp, #40]	; 0x28
 801b802:	4413      	add	r3, r2
 801b804:	9305      	str	r3, [sp, #20]
 801b806:	2300      	movs	r3, #0
 801b808:	9307      	str	r3, [sp, #28]
 801b80a:	9b06      	ldr	r3, [sp, #24]
 801b80c:	2b09      	cmp	r3, #9
 801b80e:	f200 8089 	bhi.w	801b924 <_dtoa_r+0x2f4>
 801b812:	2b05      	cmp	r3, #5
 801b814:	bfc4      	itt	gt
 801b816:	3b04      	subgt	r3, #4
 801b818:	9306      	strgt	r3, [sp, #24]
 801b81a:	9b06      	ldr	r3, [sp, #24]
 801b81c:	f1a3 0302 	sub.w	r3, r3, #2
 801b820:	bfcc      	ite	gt
 801b822:	2500      	movgt	r5, #0
 801b824:	2501      	movle	r5, #1
 801b826:	2b03      	cmp	r3, #3
 801b828:	f200 8087 	bhi.w	801b93a <_dtoa_r+0x30a>
 801b82c:	e8df f003 	tbb	[pc, r3]
 801b830:	59383a2d 	.word	0x59383a2d
 801b834:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b838:	441d      	add	r5, r3
 801b83a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b83e:	2b20      	cmp	r3, #32
 801b840:	bfc1      	itttt	gt
 801b842:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b846:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b84a:	fa0b f303 	lslgt.w	r3, fp, r3
 801b84e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b852:	bfda      	itte	le
 801b854:	f1c3 0320 	rsble	r3, r3, #32
 801b858:	fa06 f003 	lslle.w	r0, r6, r3
 801b85c:	4318      	orrgt	r0, r3
 801b85e:	f7e4 fe5b 	bl	8000518 <__aeabi_ui2d>
 801b862:	2301      	movs	r3, #1
 801b864:	4606      	mov	r6, r0
 801b866:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b86a:	3d01      	subs	r5, #1
 801b86c:	930e      	str	r3, [sp, #56]	; 0x38
 801b86e:	e76a      	b.n	801b746 <_dtoa_r+0x116>
 801b870:	2301      	movs	r3, #1
 801b872:	e7b2      	b.n	801b7da <_dtoa_r+0x1aa>
 801b874:	900b      	str	r0, [sp, #44]	; 0x2c
 801b876:	e7b1      	b.n	801b7dc <_dtoa_r+0x1ac>
 801b878:	9b04      	ldr	r3, [sp, #16]
 801b87a:	9a00      	ldr	r2, [sp, #0]
 801b87c:	1a9b      	subs	r3, r3, r2
 801b87e:	9304      	str	r3, [sp, #16]
 801b880:	4253      	negs	r3, r2
 801b882:	9307      	str	r3, [sp, #28]
 801b884:	2300      	movs	r3, #0
 801b886:	930a      	str	r3, [sp, #40]	; 0x28
 801b888:	e7bf      	b.n	801b80a <_dtoa_r+0x1da>
 801b88a:	2300      	movs	r3, #0
 801b88c:	9308      	str	r3, [sp, #32]
 801b88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b890:	2b00      	cmp	r3, #0
 801b892:	dc55      	bgt.n	801b940 <_dtoa_r+0x310>
 801b894:	2301      	movs	r3, #1
 801b896:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b89a:	461a      	mov	r2, r3
 801b89c:	9209      	str	r2, [sp, #36]	; 0x24
 801b89e:	e00c      	b.n	801b8ba <_dtoa_r+0x28a>
 801b8a0:	2301      	movs	r3, #1
 801b8a2:	e7f3      	b.n	801b88c <_dtoa_r+0x25c>
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8a8:	9308      	str	r3, [sp, #32]
 801b8aa:	9b00      	ldr	r3, [sp, #0]
 801b8ac:	4413      	add	r3, r2
 801b8ae:	9302      	str	r3, [sp, #8]
 801b8b0:	3301      	adds	r3, #1
 801b8b2:	2b01      	cmp	r3, #1
 801b8b4:	9303      	str	r3, [sp, #12]
 801b8b6:	bfb8      	it	lt
 801b8b8:	2301      	movlt	r3, #1
 801b8ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b8bc:	2200      	movs	r2, #0
 801b8be:	6042      	str	r2, [r0, #4]
 801b8c0:	2204      	movs	r2, #4
 801b8c2:	f102 0614 	add.w	r6, r2, #20
 801b8c6:	429e      	cmp	r6, r3
 801b8c8:	6841      	ldr	r1, [r0, #4]
 801b8ca:	d93d      	bls.n	801b948 <_dtoa_r+0x318>
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	f000 fedd 	bl	801c68c <_Balloc>
 801b8d2:	9001      	str	r0, [sp, #4]
 801b8d4:	2800      	cmp	r0, #0
 801b8d6:	d13b      	bne.n	801b950 <_dtoa_r+0x320>
 801b8d8:	4b11      	ldr	r3, [pc, #68]	; (801b920 <_dtoa_r+0x2f0>)
 801b8da:	4602      	mov	r2, r0
 801b8dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b8e0:	e6c0      	b.n	801b664 <_dtoa_r+0x34>
 801b8e2:	2301      	movs	r3, #1
 801b8e4:	e7df      	b.n	801b8a6 <_dtoa_r+0x276>
 801b8e6:	bf00      	nop
 801b8e8:	636f4361 	.word	0x636f4361
 801b8ec:	3fd287a7 	.word	0x3fd287a7
 801b8f0:	8b60c8b3 	.word	0x8b60c8b3
 801b8f4:	3fc68a28 	.word	0x3fc68a28
 801b8f8:	509f79fb 	.word	0x509f79fb
 801b8fc:	3fd34413 	.word	0x3fd34413
 801b900:	0801f543 	.word	0x0801f543
 801b904:	0801f55a 	.word	0x0801f55a
 801b908:	7ff00000 	.word	0x7ff00000
 801b90c:	0801f53f 	.word	0x0801f53f
 801b910:	0801f536 	.word	0x0801f536
 801b914:	0801f412 	.word	0x0801f412
 801b918:	3ff80000 	.word	0x3ff80000
 801b91c:	0801f6b8 	.word	0x0801f6b8
 801b920:	0801f5b5 	.word	0x0801f5b5
 801b924:	2501      	movs	r5, #1
 801b926:	2300      	movs	r3, #0
 801b928:	9306      	str	r3, [sp, #24]
 801b92a:	9508      	str	r5, [sp, #32]
 801b92c:	f04f 33ff 	mov.w	r3, #4294967295
 801b930:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b934:	2200      	movs	r2, #0
 801b936:	2312      	movs	r3, #18
 801b938:	e7b0      	b.n	801b89c <_dtoa_r+0x26c>
 801b93a:	2301      	movs	r3, #1
 801b93c:	9308      	str	r3, [sp, #32]
 801b93e:	e7f5      	b.n	801b92c <_dtoa_r+0x2fc>
 801b940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b942:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b946:	e7b8      	b.n	801b8ba <_dtoa_r+0x28a>
 801b948:	3101      	adds	r1, #1
 801b94a:	6041      	str	r1, [r0, #4]
 801b94c:	0052      	lsls	r2, r2, #1
 801b94e:	e7b8      	b.n	801b8c2 <_dtoa_r+0x292>
 801b950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b952:	9a01      	ldr	r2, [sp, #4]
 801b954:	601a      	str	r2, [r3, #0]
 801b956:	9b03      	ldr	r3, [sp, #12]
 801b958:	2b0e      	cmp	r3, #14
 801b95a:	f200 809d 	bhi.w	801ba98 <_dtoa_r+0x468>
 801b95e:	2d00      	cmp	r5, #0
 801b960:	f000 809a 	beq.w	801ba98 <_dtoa_r+0x468>
 801b964:	9b00      	ldr	r3, [sp, #0]
 801b966:	2b00      	cmp	r3, #0
 801b968:	dd32      	ble.n	801b9d0 <_dtoa_r+0x3a0>
 801b96a:	4ab7      	ldr	r2, [pc, #732]	; (801bc48 <_dtoa_r+0x618>)
 801b96c:	f003 030f 	and.w	r3, r3, #15
 801b970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b974:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b978:	9b00      	ldr	r3, [sp, #0]
 801b97a:	05d8      	lsls	r0, r3, #23
 801b97c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b980:	d516      	bpl.n	801b9b0 <_dtoa_r+0x380>
 801b982:	4bb2      	ldr	r3, [pc, #712]	; (801bc4c <_dtoa_r+0x61c>)
 801b984:	ec51 0b19 	vmov	r0, r1, d9
 801b988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b98c:	f7e4 ff68 	bl	8000860 <__aeabi_ddiv>
 801b990:	f007 070f 	and.w	r7, r7, #15
 801b994:	4682      	mov	sl, r0
 801b996:	468b      	mov	fp, r1
 801b998:	2503      	movs	r5, #3
 801b99a:	4eac      	ldr	r6, [pc, #688]	; (801bc4c <_dtoa_r+0x61c>)
 801b99c:	b957      	cbnz	r7, 801b9b4 <_dtoa_r+0x384>
 801b99e:	4642      	mov	r2, r8
 801b9a0:	464b      	mov	r3, r9
 801b9a2:	4650      	mov	r0, sl
 801b9a4:	4659      	mov	r1, fp
 801b9a6:	f7e4 ff5b 	bl	8000860 <__aeabi_ddiv>
 801b9aa:	4682      	mov	sl, r0
 801b9ac:	468b      	mov	fp, r1
 801b9ae:	e028      	b.n	801ba02 <_dtoa_r+0x3d2>
 801b9b0:	2502      	movs	r5, #2
 801b9b2:	e7f2      	b.n	801b99a <_dtoa_r+0x36a>
 801b9b4:	07f9      	lsls	r1, r7, #31
 801b9b6:	d508      	bpl.n	801b9ca <_dtoa_r+0x39a>
 801b9b8:	4640      	mov	r0, r8
 801b9ba:	4649      	mov	r1, r9
 801b9bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b9c0:	f7e4 fe24 	bl	800060c <__aeabi_dmul>
 801b9c4:	3501      	adds	r5, #1
 801b9c6:	4680      	mov	r8, r0
 801b9c8:	4689      	mov	r9, r1
 801b9ca:	107f      	asrs	r7, r7, #1
 801b9cc:	3608      	adds	r6, #8
 801b9ce:	e7e5      	b.n	801b99c <_dtoa_r+0x36c>
 801b9d0:	f000 809b 	beq.w	801bb0a <_dtoa_r+0x4da>
 801b9d4:	9b00      	ldr	r3, [sp, #0]
 801b9d6:	4f9d      	ldr	r7, [pc, #628]	; (801bc4c <_dtoa_r+0x61c>)
 801b9d8:	425e      	negs	r6, r3
 801b9da:	4b9b      	ldr	r3, [pc, #620]	; (801bc48 <_dtoa_r+0x618>)
 801b9dc:	f006 020f 	and.w	r2, r6, #15
 801b9e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e8:	ec51 0b19 	vmov	r0, r1, d9
 801b9ec:	f7e4 fe0e 	bl	800060c <__aeabi_dmul>
 801b9f0:	1136      	asrs	r6, r6, #4
 801b9f2:	4682      	mov	sl, r0
 801b9f4:	468b      	mov	fp, r1
 801b9f6:	2300      	movs	r3, #0
 801b9f8:	2502      	movs	r5, #2
 801b9fa:	2e00      	cmp	r6, #0
 801b9fc:	d17a      	bne.n	801baf4 <_dtoa_r+0x4c4>
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d1d3      	bne.n	801b9aa <_dtoa_r+0x37a>
 801ba02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	f000 8082 	beq.w	801bb0e <_dtoa_r+0x4de>
 801ba0a:	4b91      	ldr	r3, [pc, #580]	; (801bc50 <_dtoa_r+0x620>)
 801ba0c:	2200      	movs	r2, #0
 801ba0e:	4650      	mov	r0, sl
 801ba10:	4659      	mov	r1, fp
 801ba12:	f7e5 f86d 	bl	8000af0 <__aeabi_dcmplt>
 801ba16:	2800      	cmp	r0, #0
 801ba18:	d079      	beq.n	801bb0e <_dtoa_r+0x4de>
 801ba1a:	9b03      	ldr	r3, [sp, #12]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d076      	beq.n	801bb0e <_dtoa_r+0x4de>
 801ba20:	9b02      	ldr	r3, [sp, #8]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	dd36      	ble.n	801ba94 <_dtoa_r+0x464>
 801ba26:	9b00      	ldr	r3, [sp, #0]
 801ba28:	4650      	mov	r0, sl
 801ba2a:	4659      	mov	r1, fp
 801ba2c:	1e5f      	subs	r7, r3, #1
 801ba2e:	2200      	movs	r2, #0
 801ba30:	4b88      	ldr	r3, [pc, #544]	; (801bc54 <_dtoa_r+0x624>)
 801ba32:	f7e4 fdeb 	bl	800060c <__aeabi_dmul>
 801ba36:	9e02      	ldr	r6, [sp, #8]
 801ba38:	4682      	mov	sl, r0
 801ba3a:	468b      	mov	fp, r1
 801ba3c:	3501      	adds	r5, #1
 801ba3e:	4628      	mov	r0, r5
 801ba40:	f7e4 fd7a 	bl	8000538 <__aeabi_i2d>
 801ba44:	4652      	mov	r2, sl
 801ba46:	465b      	mov	r3, fp
 801ba48:	f7e4 fde0 	bl	800060c <__aeabi_dmul>
 801ba4c:	4b82      	ldr	r3, [pc, #520]	; (801bc58 <_dtoa_r+0x628>)
 801ba4e:	2200      	movs	r2, #0
 801ba50:	f7e4 fc26 	bl	80002a0 <__adddf3>
 801ba54:	46d0      	mov	r8, sl
 801ba56:	46d9      	mov	r9, fp
 801ba58:	4682      	mov	sl, r0
 801ba5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801ba5e:	2e00      	cmp	r6, #0
 801ba60:	d158      	bne.n	801bb14 <_dtoa_r+0x4e4>
 801ba62:	4b7e      	ldr	r3, [pc, #504]	; (801bc5c <_dtoa_r+0x62c>)
 801ba64:	2200      	movs	r2, #0
 801ba66:	4640      	mov	r0, r8
 801ba68:	4649      	mov	r1, r9
 801ba6a:	f7e4 fc17 	bl	800029c <__aeabi_dsub>
 801ba6e:	4652      	mov	r2, sl
 801ba70:	465b      	mov	r3, fp
 801ba72:	4680      	mov	r8, r0
 801ba74:	4689      	mov	r9, r1
 801ba76:	f7e5 f859 	bl	8000b2c <__aeabi_dcmpgt>
 801ba7a:	2800      	cmp	r0, #0
 801ba7c:	f040 8295 	bne.w	801bfaa <_dtoa_r+0x97a>
 801ba80:	4652      	mov	r2, sl
 801ba82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ba86:	4640      	mov	r0, r8
 801ba88:	4649      	mov	r1, r9
 801ba8a:	f7e5 f831 	bl	8000af0 <__aeabi_dcmplt>
 801ba8e:	2800      	cmp	r0, #0
 801ba90:	f040 8289 	bne.w	801bfa6 <_dtoa_r+0x976>
 801ba94:	ec5b ab19 	vmov	sl, fp, d9
 801ba98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	f2c0 8148 	blt.w	801bd30 <_dtoa_r+0x700>
 801baa0:	9a00      	ldr	r2, [sp, #0]
 801baa2:	2a0e      	cmp	r2, #14
 801baa4:	f300 8144 	bgt.w	801bd30 <_dtoa_r+0x700>
 801baa8:	4b67      	ldr	r3, [pc, #412]	; (801bc48 <_dtoa_r+0x618>)
 801baaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801baae:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	f280 80d5 	bge.w	801bc64 <_dtoa_r+0x634>
 801baba:	9b03      	ldr	r3, [sp, #12]
 801babc:	2b00      	cmp	r3, #0
 801babe:	f300 80d1 	bgt.w	801bc64 <_dtoa_r+0x634>
 801bac2:	f040 826f 	bne.w	801bfa4 <_dtoa_r+0x974>
 801bac6:	4b65      	ldr	r3, [pc, #404]	; (801bc5c <_dtoa_r+0x62c>)
 801bac8:	2200      	movs	r2, #0
 801baca:	4640      	mov	r0, r8
 801bacc:	4649      	mov	r1, r9
 801bace:	f7e4 fd9d 	bl	800060c <__aeabi_dmul>
 801bad2:	4652      	mov	r2, sl
 801bad4:	465b      	mov	r3, fp
 801bad6:	f7e5 f81f 	bl	8000b18 <__aeabi_dcmpge>
 801bada:	9e03      	ldr	r6, [sp, #12]
 801badc:	4637      	mov	r7, r6
 801bade:	2800      	cmp	r0, #0
 801bae0:	f040 8245 	bne.w	801bf6e <_dtoa_r+0x93e>
 801bae4:	9d01      	ldr	r5, [sp, #4]
 801bae6:	2331      	movs	r3, #49	; 0x31
 801bae8:	f805 3b01 	strb.w	r3, [r5], #1
 801baec:	9b00      	ldr	r3, [sp, #0]
 801baee:	3301      	adds	r3, #1
 801baf0:	9300      	str	r3, [sp, #0]
 801baf2:	e240      	b.n	801bf76 <_dtoa_r+0x946>
 801baf4:	07f2      	lsls	r2, r6, #31
 801baf6:	d505      	bpl.n	801bb04 <_dtoa_r+0x4d4>
 801baf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bafc:	f7e4 fd86 	bl	800060c <__aeabi_dmul>
 801bb00:	3501      	adds	r5, #1
 801bb02:	2301      	movs	r3, #1
 801bb04:	1076      	asrs	r6, r6, #1
 801bb06:	3708      	adds	r7, #8
 801bb08:	e777      	b.n	801b9fa <_dtoa_r+0x3ca>
 801bb0a:	2502      	movs	r5, #2
 801bb0c:	e779      	b.n	801ba02 <_dtoa_r+0x3d2>
 801bb0e:	9f00      	ldr	r7, [sp, #0]
 801bb10:	9e03      	ldr	r6, [sp, #12]
 801bb12:	e794      	b.n	801ba3e <_dtoa_r+0x40e>
 801bb14:	9901      	ldr	r1, [sp, #4]
 801bb16:	4b4c      	ldr	r3, [pc, #304]	; (801bc48 <_dtoa_r+0x618>)
 801bb18:	4431      	add	r1, r6
 801bb1a:	910d      	str	r1, [sp, #52]	; 0x34
 801bb1c:	9908      	ldr	r1, [sp, #32]
 801bb1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bb22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bb26:	2900      	cmp	r1, #0
 801bb28:	d043      	beq.n	801bbb2 <_dtoa_r+0x582>
 801bb2a:	494d      	ldr	r1, [pc, #308]	; (801bc60 <_dtoa_r+0x630>)
 801bb2c:	2000      	movs	r0, #0
 801bb2e:	f7e4 fe97 	bl	8000860 <__aeabi_ddiv>
 801bb32:	4652      	mov	r2, sl
 801bb34:	465b      	mov	r3, fp
 801bb36:	f7e4 fbb1 	bl	800029c <__aeabi_dsub>
 801bb3a:	9d01      	ldr	r5, [sp, #4]
 801bb3c:	4682      	mov	sl, r0
 801bb3e:	468b      	mov	fp, r1
 801bb40:	4649      	mov	r1, r9
 801bb42:	4640      	mov	r0, r8
 801bb44:	f7e5 f812 	bl	8000b6c <__aeabi_d2iz>
 801bb48:	4606      	mov	r6, r0
 801bb4a:	f7e4 fcf5 	bl	8000538 <__aeabi_i2d>
 801bb4e:	4602      	mov	r2, r0
 801bb50:	460b      	mov	r3, r1
 801bb52:	4640      	mov	r0, r8
 801bb54:	4649      	mov	r1, r9
 801bb56:	f7e4 fba1 	bl	800029c <__aeabi_dsub>
 801bb5a:	3630      	adds	r6, #48	; 0x30
 801bb5c:	f805 6b01 	strb.w	r6, [r5], #1
 801bb60:	4652      	mov	r2, sl
 801bb62:	465b      	mov	r3, fp
 801bb64:	4680      	mov	r8, r0
 801bb66:	4689      	mov	r9, r1
 801bb68:	f7e4 ffc2 	bl	8000af0 <__aeabi_dcmplt>
 801bb6c:	2800      	cmp	r0, #0
 801bb6e:	d163      	bne.n	801bc38 <_dtoa_r+0x608>
 801bb70:	4642      	mov	r2, r8
 801bb72:	464b      	mov	r3, r9
 801bb74:	4936      	ldr	r1, [pc, #216]	; (801bc50 <_dtoa_r+0x620>)
 801bb76:	2000      	movs	r0, #0
 801bb78:	f7e4 fb90 	bl	800029c <__aeabi_dsub>
 801bb7c:	4652      	mov	r2, sl
 801bb7e:	465b      	mov	r3, fp
 801bb80:	f7e4 ffb6 	bl	8000af0 <__aeabi_dcmplt>
 801bb84:	2800      	cmp	r0, #0
 801bb86:	f040 80b5 	bne.w	801bcf4 <_dtoa_r+0x6c4>
 801bb8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb8c:	429d      	cmp	r5, r3
 801bb8e:	d081      	beq.n	801ba94 <_dtoa_r+0x464>
 801bb90:	4b30      	ldr	r3, [pc, #192]	; (801bc54 <_dtoa_r+0x624>)
 801bb92:	2200      	movs	r2, #0
 801bb94:	4650      	mov	r0, sl
 801bb96:	4659      	mov	r1, fp
 801bb98:	f7e4 fd38 	bl	800060c <__aeabi_dmul>
 801bb9c:	4b2d      	ldr	r3, [pc, #180]	; (801bc54 <_dtoa_r+0x624>)
 801bb9e:	4682      	mov	sl, r0
 801bba0:	468b      	mov	fp, r1
 801bba2:	4640      	mov	r0, r8
 801bba4:	4649      	mov	r1, r9
 801bba6:	2200      	movs	r2, #0
 801bba8:	f7e4 fd30 	bl	800060c <__aeabi_dmul>
 801bbac:	4680      	mov	r8, r0
 801bbae:	4689      	mov	r9, r1
 801bbb0:	e7c6      	b.n	801bb40 <_dtoa_r+0x510>
 801bbb2:	4650      	mov	r0, sl
 801bbb4:	4659      	mov	r1, fp
 801bbb6:	f7e4 fd29 	bl	800060c <__aeabi_dmul>
 801bbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbbc:	9d01      	ldr	r5, [sp, #4]
 801bbbe:	930f      	str	r3, [sp, #60]	; 0x3c
 801bbc0:	4682      	mov	sl, r0
 801bbc2:	468b      	mov	fp, r1
 801bbc4:	4649      	mov	r1, r9
 801bbc6:	4640      	mov	r0, r8
 801bbc8:	f7e4 ffd0 	bl	8000b6c <__aeabi_d2iz>
 801bbcc:	4606      	mov	r6, r0
 801bbce:	f7e4 fcb3 	bl	8000538 <__aeabi_i2d>
 801bbd2:	3630      	adds	r6, #48	; 0x30
 801bbd4:	4602      	mov	r2, r0
 801bbd6:	460b      	mov	r3, r1
 801bbd8:	4640      	mov	r0, r8
 801bbda:	4649      	mov	r1, r9
 801bbdc:	f7e4 fb5e 	bl	800029c <__aeabi_dsub>
 801bbe0:	f805 6b01 	strb.w	r6, [r5], #1
 801bbe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbe6:	429d      	cmp	r5, r3
 801bbe8:	4680      	mov	r8, r0
 801bbea:	4689      	mov	r9, r1
 801bbec:	f04f 0200 	mov.w	r2, #0
 801bbf0:	d124      	bne.n	801bc3c <_dtoa_r+0x60c>
 801bbf2:	4b1b      	ldr	r3, [pc, #108]	; (801bc60 <_dtoa_r+0x630>)
 801bbf4:	4650      	mov	r0, sl
 801bbf6:	4659      	mov	r1, fp
 801bbf8:	f7e4 fb52 	bl	80002a0 <__adddf3>
 801bbfc:	4602      	mov	r2, r0
 801bbfe:	460b      	mov	r3, r1
 801bc00:	4640      	mov	r0, r8
 801bc02:	4649      	mov	r1, r9
 801bc04:	f7e4 ff92 	bl	8000b2c <__aeabi_dcmpgt>
 801bc08:	2800      	cmp	r0, #0
 801bc0a:	d173      	bne.n	801bcf4 <_dtoa_r+0x6c4>
 801bc0c:	4652      	mov	r2, sl
 801bc0e:	465b      	mov	r3, fp
 801bc10:	4913      	ldr	r1, [pc, #76]	; (801bc60 <_dtoa_r+0x630>)
 801bc12:	2000      	movs	r0, #0
 801bc14:	f7e4 fb42 	bl	800029c <__aeabi_dsub>
 801bc18:	4602      	mov	r2, r0
 801bc1a:	460b      	mov	r3, r1
 801bc1c:	4640      	mov	r0, r8
 801bc1e:	4649      	mov	r1, r9
 801bc20:	f7e4 ff66 	bl	8000af0 <__aeabi_dcmplt>
 801bc24:	2800      	cmp	r0, #0
 801bc26:	f43f af35 	beq.w	801ba94 <_dtoa_r+0x464>
 801bc2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bc2c:	1e6b      	subs	r3, r5, #1
 801bc2e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bc34:	2b30      	cmp	r3, #48	; 0x30
 801bc36:	d0f8      	beq.n	801bc2a <_dtoa_r+0x5fa>
 801bc38:	9700      	str	r7, [sp, #0]
 801bc3a:	e049      	b.n	801bcd0 <_dtoa_r+0x6a0>
 801bc3c:	4b05      	ldr	r3, [pc, #20]	; (801bc54 <_dtoa_r+0x624>)
 801bc3e:	f7e4 fce5 	bl	800060c <__aeabi_dmul>
 801bc42:	4680      	mov	r8, r0
 801bc44:	4689      	mov	r9, r1
 801bc46:	e7bd      	b.n	801bbc4 <_dtoa_r+0x594>
 801bc48:	0801f6b8 	.word	0x0801f6b8
 801bc4c:	0801f690 	.word	0x0801f690
 801bc50:	3ff00000 	.word	0x3ff00000
 801bc54:	40240000 	.word	0x40240000
 801bc58:	401c0000 	.word	0x401c0000
 801bc5c:	40140000 	.word	0x40140000
 801bc60:	3fe00000 	.word	0x3fe00000
 801bc64:	9d01      	ldr	r5, [sp, #4]
 801bc66:	4656      	mov	r6, sl
 801bc68:	465f      	mov	r7, fp
 801bc6a:	4642      	mov	r2, r8
 801bc6c:	464b      	mov	r3, r9
 801bc6e:	4630      	mov	r0, r6
 801bc70:	4639      	mov	r1, r7
 801bc72:	f7e4 fdf5 	bl	8000860 <__aeabi_ddiv>
 801bc76:	f7e4 ff79 	bl	8000b6c <__aeabi_d2iz>
 801bc7a:	4682      	mov	sl, r0
 801bc7c:	f7e4 fc5c 	bl	8000538 <__aeabi_i2d>
 801bc80:	4642      	mov	r2, r8
 801bc82:	464b      	mov	r3, r9
 801bc84:	f7e4 fcc2 	bl	800060c <__aeabi_dmul>
 801bc88:	4602      	mov	r2, r0
 801bc8a:	460b      	mov	r3, r1
 801bc8c:	4630      	mov	r0, r6
 801bc8e:	4639      	mov	r1, r7
 801bc90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bc94:	f7e4 fb02 	bl	800029c <__aeabi_dsub>
 801bc98:	f805 6b01 	strb.w	r6, [r5], #1
 801bc9c:	9e01      	ldr	r6, [sp, #4]
 801bc9e:	9f03      	ldr	r7, [sp, #12]
 801bca0:	1bae      	subs	r6, r5, r6
 801bca2:	42b7      	cmp	r7, r6
 801bca4:	4602      	mov	r2, r0
 801bca6:	460b      	mov	r3, r1
 801bca8:	d135      	bne.n	801bd16 <_dtoa_r+0x6e6>
 801bcaa:	f7e4 faf9 	bl	80002a0 <__adddf3>
 801bcae:	4642      	mov	r2, r8
 801bcb0:	464b      	mov	r3, r9
 801bcb2:	4606      	mov	r6, r0
 801bcb4:	460f      	mov	r7, r1
 801bcb6:	f7e4 ff39 	bl	8000b2c <__aeabi_dcmpgt>
 801bcba:	b9d0      	cbnz	r0, 801bcf2 <_dtoa_r+0x6c2>
 801bcbc:	4642      	mov	r2, r8
 801bcbe:	464b      	mov	r3, r9
 801bcc0:	4630      	mov	r0, r6
 801bcc2:	4639      	mov	r1, r7
 801bcc4:	f7e4 ff0a 	bl	8000adc <__aeabi_dcmpeq>
 801bcc8:	b110      	cbz	r0, 801bcd0 <_dtoa_r+0x6a0>
 801bcca:	f01a 0f01 	tst.w	sl, #1
 801bcce:	d110      	bne.n	801bcf2 <_dtoa_r+0x6c2>
 801bcd0:	4620      	mov	r0, r4
 801bcd2:	ee18 1a10 	vmov	r1, s16
 801bcd6:	f000 fd19 	bl	801c70c <_Bfree>
 801bcda:	2300      	movs	r3, #0
 801bcdc:	9800      	ldr	r0, [sp, #0]
 801bcde:	702b      	strb	r3, [r5, #0]
 801bce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bce2:	3001      	adds	r0, #1
 801bce4:	6018      	str	r0, [r3, #0]
 801bce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	f43f acf1 	beq.w	801b6d0 <_dtoa_r+0xa0>
 801bcee:	601d      	str	r5, [r3, #0]
 801bcf0:	e4ee      	b.n	801b6d0 <_dtoa_r+0xa0>
 801bcf2:	9f00      	ldr	r7, [sp, #0]
 801bcf4:	462b      	mov	r3, r5
 801bcf6:	461d      	mov	r5, r3
 801bcf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bcfc:	2a39      	cmp	r2, #57	; 0x39
 801bcfe:	d106      	bne.n	801bd0e <_dtoa_r+0x6de>
 801bd00:	9a01      	ldr	r2, [sp, #4]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	d1f7      	bne.n	801bcf6 <_dtoa_r+0x6c6>
 801bd06:	9901      	ldr	r1, [sp, #4]
 801bd08:	2230      	movs	r2, #48	; 0x30
 801bd0a:	3701      	adds	r7, #1
 801bd0c:	700a      	strb	r2, [r1, #0]
 801bd0e:	781a      	ldrb	r2, [r3, #0]
 801bd10:	3201      	adds	r2, #1
 801bd12:	701a      	strb	r2, [r3, #0]
 801bd14:	e790      	b.n	801bc38 <_dtoa_r+0x608>
 801bd16:	4ba6      	ldr	r3, [pc, #664]	; (801bfb0 <_dtoa_r+0x980>)
 801bd18:	2200      	movs	r2, #0
 801bd1a:	f7e4 fc77 	bl	800060c <__aeabi_dmul>
 801bd1e:	2200      	movs	r2, #0
 801bd20:	2300      	movs	r3, #0
 801bd22:	4606      	mov	r6, r0
 801bd24:	460f      	mov	r7, r1
 801bd26:	f7e4 fed9 	bl	8000adc <__aeabi_dcmpeq>
 801bd2a:	2800      	cmp	r0, #0
 801bd2c:	d09d      	beq.n	801bc6a <_dtoa_r+0x63a>
 801bd2e:	e7cf      	b.n	801bcd0 <_dtoa_r+0x6a0>
 801bd30:	9a08      	ldr	r2, [sp, #32]
 801bd32:	2a00      	cmp	r2, #0
 801bd34:	f000 80d7 	beq.w	801bee6 <_dtoa_r+0x8b6>
 801bd38:	9a06      	ldr	r2, [sp, #24]
 801bd3a:	2a01      	cmp	r2, #1
 801bd3c:	f300 80ba 	bgt.w	801beb4 <_dtoa_r+0x884>
 801bd40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd42:	2a00      	cmp	r2, #0
 801bd44:	f000 80b2 	beq.w	801beac <_dtoa_r+0x87c>
 801bd48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bd4c:	9e07      	ldr	r6, [sp, #28]
 801bd4e:	9d04      	ldr	r5, [sp, #16]
 801bd50:	9a04      	ldr	r2, [sp, #16]
 801bd52:	441a      	add	r2, r3
 801bd54:	9204      	str	r2, [sp, #16]
 801bd56:	9a05      	ldr	r2, [sp, #20]
 801bd58:	2101      	movs	r1, #1
 801bd5a:	441a      	add	r2, r3
 801bd5c:	4620      	mov	r0, r4
 801bd5e:	9205      	str	r2, [sp, #20]
 801bd60:	f000 fd8c 	bl	801c87c <__i2b>
 801bd64:	4607      	mov	r7, r0
 801bd66:	2d00      	cmp	r5, #0
 801bd68:	dd0c      	ble.n	801bd84 <_dtoa_r+0x754>
 801bd6a:	9b05      	ldr	r3, [sp, #20]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	dd09      	ble.n	801bd84 <_dtoa_r+0x754>
 801bd70:	42ab      	cmp	r3, r5
 801bd72:	9a04      	ldr	r2, [sp, #16]
 801bd74:	bfa8      	it	ge
 801bd76:	462b      	movge	r3, r5
 801bd78:	1ad2      	subs	r2, r2, r3
 801bd7a:	9204      	str	r2, [sp, #16]
 801bd7c:	9a05      	ldr	r2, [sp, #20]
 801bd7e:	1aed      	subs	r5, r5, r3
 801bd80:	1ad3      	subs	r3, r2, r3
 801bd82:	9305      	str	r3, [sp, #20]
 801bd84:	9b07      	ldr	r3, [sp, #28]
 801bd86:	b31b      	cbz	r3, 801bdd0 <_dtoa_r+0x7a0>
 801bd88:	9b08      	ldr	r3, [sp, #32]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	f000 80af 	beq.w	801beee <_dtoa_r+0x8be>
 801bd90:	2e00      	cmp	r6, #0
 801bd92:	dd13      	ble.n	801bdbc <_dtoa_r+0x78c>
 801bd94:	4639      	mov	r1, r7
 801bd96:	4632      	mov	r2, r6
 801bd98:	4620      	mov	r0, r4
 801bd9a:	f000 fe2f 	bl	801c9fc <__pow5mult>
 801bd9e:	ee18 2a10 	vmov	r2, s16
 801bda2:	4601      	mov	r1, r0
 801bda4:	4607      	mov	r7, r0
 801bda6:	4620      	mov	r0, r4
 801bda8:	f000 fd7e 	bl	801c8a8 <__multiply>
 801bdac:	ee18 1a10 	vmov	r1, s16
 801bdb0:	4680      	mov	r8, r0
 801bdb2:	4620      	mov	r0, r4
 801bdb4:	f000 fcaa 	bl	801c70c <_Bfree>
 801bdb8:	ee08 8a10 	vmov	s16, r8
 801bdbc:	9b07      	ldr	r3, [sp, #28]
 801bdbe:	1b9a      	subs	r2, r3, r6
 801bdc0:	d006      	beq.n	801bdd0 <_dtoa_r+0x7a0>
 801bdc2:	ee18 1a10 	vmov	r1, s16
 801bdc6:	4620      	mov	r0, r4
 801bdc8:	f000 fe18 	bl	801c9fc <__pow5mult>
 801bdcc:	ee08 0a10 	vmov	s16, r0
 801bdd0:	2101      	movs	r1, #1
 801bdd2:	4620      	mov	r0, r4
 801bdd4:	f000 fd52 	bl	801c87c <__i2b>
 801bdd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	4606      	mov	r6, r0
 801bdde:	f340 8088 	ble.w	801bef2 <_dtoa_r+0x8c2>
 801bde2:	461a      	mov	r2, r3
 801bde4:	4601      	mov	r1, r0
 801bde6:	4620      	mov	r0, r4
 801bde8:	f000 fe08 	bl	801c9fc <__pow5mult>
 801bdec:	9b06      	ldr	r3, [sp, #24]
 801bdee:	2b01      	cmp	r3, #1
 801bdf0:	4606      	mov	r6, r0
 801bdf2:	f340 8081 	ble.w	801bef8 <_dtoa_r+0x8c8>
 801bdf6:	f04f 0800 	mov.w	r8, #0
 801bdfa:	6933      	ldr	r3, [r6, #16]
 801bdfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801be00:	6918      	ldr	r0, [r3, #16]
 801be02:	f000 fceb 	bl	801c7dc <__hi0bits>
 801be06:	f1c0 0020 	rsb	r0, r0, #32
 801be0a:	9b05      	ldr	r3, [sp, #20]
 801be0c:	4418      	add	r0, r3
 801be0e:	f010 001f 	ands.w	r0, r0, #31
 801be12:	f000 8092 	beq.w	801bf3a <_dtoa_r+0x90a>
 801be16:	f1c0 0320 	rsb	r3, r0, #32
 801be1a:	2b04      	cmp	r3, #4
 801be1c:	f340 808a 	ble.w	801bf34 <_dtoa_r+0x904>
 801be20:	f1c0 001c 	rsb	r0, r0, #28
 801be24:	9b04      	ldr	r3, [sp, #16]
 801be26:	4403      	add	r3, r0
 801be28:	9304      	str	r3, [sp, #16]
 801be2a:	9b05      	ldr	r3, [sp, #20]
 801be2c:	4403      	add	r3, r0
 801be2e:	4405      	add	r5, r0
 801be30:	9305      	str	r3, [sp, #20]
 801be32:	9b04      	ldr	r3, [sp, #16]
 801be34:	2b00      	cmp	r3, #0
 801be36:	dd07      	ble.n	801be48 <_dtoa_r+0x818>
 801be38:	ee18 1a10 	vmov	r1, s16
 801be3c:	461a      	mov	r2, r3
 801be3e:	4620      	mov	r0, r4
 801be40:	f000 fe36 	bl	801cab0 <__lshift>
 801be44:	ee08 0a10 	vmov	s16, r0
 801be48:	9b05      	ldr	r3, [sp, #20]
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	dd05      	ble.n	801be5a <_dtoa_r+0x82a>
 801be4e:	4631      	mov	r1, r6
 801be50:	461a      	mov	r2, r3
 801be52:	4620      	mov	r0, r4
 801be54:	f000 fe2c 	bl	801cab0 <__lshift>
 801be58:	4606      	mov	r6, r0
 801be5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d06e      	beq.n	801bf3e <_dtoa_r+0x90e>
 801be60:	ee18 0a10 	vmov	r0, s16
 801be64:	4631      	mov	r1, r6
 801be66:	f000 fe93 	bl	801cb90 <__mcmp>
 801be6a:	2800      	cmp	r0, #0
 801be6c:	da67      	bge.n	801bf3e <_dtoa_r+0x90e>
 801be6e:	9b00      	ldr	r3, [sp, #0]
 801be70:	3b01      	subs	r3, #1
 801be72:	ee18 1a10 	vmov	r1, s16
 801be76:	9300      	str	r3, [sp, #0]
 801be78:	220a      	movs	r2, #10
 801be7a:	2300      	movs	r3, #0
 801be7c:	4620      	mov	r0, r4
 801be7e:	f000 fc67 	bl	801c750 <__multadd>
 801be82:	9b08      	ldr	r3, [sp, #32]
 801be84:	ee08 0a10 	vmov	s16, r0
 801be88:	2b00      	cmp	r3, #0
 801be8a:	f000 81b1 	beq.w	801c1f0 <_dtoa_r+0xbc0>
 801be8e:	2300      	movs	r3, #0
 801be90:	4639      	mov	r1, r7
 801be92:	220a      	movs	r2, #10
 801be94:	4620      	mov	r0, r4
 801be96:	f000 fc5b 	bl	801c750 <__multadd>
 801be9a:	9b02      	ldr	r3, [sp, #8]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	4607      	mov	r7, r0
 801bea0:	f300 808e 	bgt.w	801bfc0 <_dtoa_r+0x990>
 801bea4:	9b06      	ldr	r3, [sp, #24]
 801bea6:	2b02      	cmp	r3, #2
 801bea8:	dc51      	bgt.n	801bf4e <_dtoa_r+0x91e>
 801beaa:	e089      	b.n	801bfc0 <_dtoa_r+0x990>
 801beac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801beae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801beb2:	e74b      	b.n	801bd4c <_dtoa_r+0x71c>
 801beb4:	9b03      	ldr	r3, [sp, #12]
 801beb6:	1e5e      	subs	r6, r3, #1
 801beb8:	9b07      	ldr	r3, [sp, #28]
 801beba:	42b3      	cmp	r3, r6
 801bebc:	bfbf      	itttt	lt
 801bebe:	9b07      	ldrlt	r3, [sp, #28]
 801bec0:	9607      	strlt	r6, [sp, #28]
 801bec2:	1af2      	sublt	r2, r6, r3
 801bec4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bec6:	bfb6      	itet	lt
 801bec8:	189b      	addlt	r3, r3, r2
 801beca:	1b9e      	subge	r6, r3, r6
 801becc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bece:	9b03      	ldr	r3, [sp, #12]
 801bed0:	bfb8      	it	lt
 801bed2:	2600      	movlt	r6, #0
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	bfb7      	itett	lt
 801bed8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bedc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bee0:	1a9d      	sublt	r5, r3, r2
 801bee2:	2300      	movlt	r3, #0
 801bee4:	e734      	b.n	801bd50 <_dtoa_r+0x720>
 801bee6:	9e07      	ldr	r6, [sp, #28]
 801bee8:	9d04      	ldr	r5, [sp, #16]
 801beea:	9f08      	ldr	r7, [sp, #32]
 801beec:	e73b      	b.n	801bd66 <_dtoa_r+0x736>
 801beee:	9a07      	ldr	r2, [sp, #28]
 801bef0:	e767      	b.n	801bdc2 <_dtoa_r+0x792>
 801bef2:	9b06      	ldr	r3, [sp, #24]
 801bef4:	2b01      	cmp	r3, #1
 801bef6:	dc18      	bgt.n	801bf2a <_dtoa_r+0x8fa>
 801bef8:	f1ba 0f00 	cmp.w	sl, #0
 801befc:	d115      	bne.n	801bf2a <_dtoa_r+0x8fa>
 801befe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bf02:	b993      	cbnz	r3, 801bf2a <_dtoa_r+0x8fa>
 801bf04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bf08:	0d1b      	lsrs	r3, r3, #20
 801bf0a:	051b      	lsls	r3, r3, #20
 801bf0c:	b183      	cbz	r3, 801bf30 <_dtoa_r+0x900>
 801bf0e:	9b04      	ldr	r3, [sp, #16]
 801bf10:	3301      	adds	r3, #1
 801bf12:	9304      	str	r3, [sp, #16]
 801bf14:	9b05      	ldr	r3, [sp, #20]
 801bf16:	3301      	adds	r3, #1
 801bf18:	9305      	str	r3, [sp, #20]
 801bf1a:	f04f 0801 	mov.w	r8, #1
 801bf1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	f47f af6a 	bne.w	801bdfa <_dtoa_r+0x7ca>
 801bf26:	2001      	movs	r0, #1
 801bf28:	e76f      	b.n	801be0a <_dtoa_r+0x7da>
 801bf2a:	f04f 0800 	mov.w	r8, #0
 801bf2e:	e7f6      	b.n	801bf1e <_dtoa_r+0x8ee>
 801bf30:	4698      	mov	r8, r3
 801bf32:	e7f4      	b.n	801bf1e <_dtoa_r+0x8ee>
 801bf34:	f43f af7d 	beq.w	801be32 <_dtoa_r+0x802>
 801bf38:	4618      	mov	r0, r3
 801bf3a:	301c      	adds	r0, #28
 801bf3c:	e772      	b.n	801be24 <_dtoa_r+0x7f4>
 801bf3e:	9b03      	ldr	r3, [sp, #12]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	dc37      	bgt.n	801bfb4 <_dtoa_r+0x984>
 801bf44:	9b06      	ldr	r3, [sp, #24]
 801bf46:	2b02      	cmp	r3, #2
 801bf48:	dd34      	ble.n	801bfb4 <_dtoa_r+0x984>
 801bf4a:	9b03      	ldr	r3, [sp, #12]
 801bf4c:	9302      	str	r3, [sp, #8]
 801bf4e:	9b02      	ldr	r3, [sp, #8]
 801bf50:	b96b      	cbnz	r3, 801bf6e <_dtoa_r+0x93e>
 801bf52:	4631      	mov	r1, r6
 801bf54:	2205      	movs	r2, #5
 801bf56:	4620      	mov	r0, r4
 801bf58:	f000 fbfa 	bl	801c750 <__multadd>
 801bf5c:	4601      	mov	r1, r0
 801bf5e:	4606      	mov	r6, r0
 801bf60:	ee18 0a10 	vmov	r0, s16
 801bf64:	f000 fe14 	bl	801cb90 <__mcmp>
 801bf68:	2800      	cmp	r0, #0
 801bf6a:	f73f adbb 	bgt.w	801bae4 <_dtoa_r+0x4b4>
 801bf6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf70:	9d01      	ldr	r5, [sp, #4]
 801bf72:	43db      	mvns	r3, r3
 801bf74:	9300      	str	r3, [sp, #0]
 801bf76:	f04f 0800 	mov.w	r8, #0
 801bf7a:	4631      	mov	r1, r6
 801bf7c:	4620      	mov	r0, r4
 801bf7e:	f000 fbc5 	bl	801c70c <_Bfree>
 801bf82:	2f00      	cmp	r7, #0
 801bf84:	f43f aea4 	beq.w	801bcd0 <_dtoa_r+0x6a0>
 801bf88:	f1b8 0f00 	cmp.w	r8, #0
 801bf8c:	d005      	beq.n	801bf9a <_dtoa_r+0x96a>
 801bf8e:	45b8      	cmp	r8, r7
 801bf90:	d003      	beq.n	801bf9a <_dtoa_r+0x96a>
 801bf92:	4641      	mov	r1, r8
 801bf94:	4620      	mov	r0, r4
 801bf96:	f000 fbb9 	bl	801c70c <_Bfree>
 801bf9a:	4639      	mov	r1, r7
 801bf9c:	4620      	mov	r0, r4
 801bf9e:	f000 fbb5 	bl	801c70c <_Bfree>
 801bfa2:	e695      	b.n	801bcd0 <_dtoa_r+0x6a0>
 801bfa4:	2600      	movs	r6, #0
 801bfa6:	4637      	mov	r7, r6
 801bfa8:	e7e1      	b.n	801bf6e <_dtoa_r+0x93e>
 801bfaa:	9700      	str	r7, [sp, #0]
 801bfac:	4637      	mov	r7, r6
 801bfae:	e599      	b.n	801bae4 <_dtoa_r+0x4b4>
 801bfb0:	40240000 	.word	0x40240000
 801bfb4:	9b08      	ldr	r3, [sp, #32]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	f000 80ca 	beq.w	801c150 <_dtoa_r+0xb20>
 801bfbc:	9b03      	ldr	r3, [sp, #12]
 801bfbe:	9302      	str	r3, [sp, #8]
 801bfc0:	2d00      	cmp	r5, #0
 801bfc2:	dd05      	ble.n	801bfd0 <_dtoa_r+0x9a0>
 801bfc4:	4639      	mov	r1, r7
 801bfc6:	462a      	mov	r2, r5
 801bfc8:	4620      	mov	r0, r4
 801bfca:	f000 fd71 	bl	801cab0 <__lshift>
 801bfce:	4607      	mov	r7, r0
 801bfd0:	f1b8 0f00 	cmp.w	r8, #0
 801bfd4:	d05b      	beq.n	801c08e <_dtoa_r+0xa5e>
 801bfd6:	6879      	ldr	r1, [r7, #4]
 801bfd8:	4620      	mov	r0, r4
 801bfda:	f000 fb57 	bl	801c68c <_Balloc>
 801bfde:	4605      	mov	r5, r0
 801bfe0:	b928      	cbnz	r0, 801bfee <_dtoa_r+0x9be>
 801bfe2:	4b87      	ldr	r3, [pc, #540]	; (801c200 <_dtoa_r+0xbd0>)
 801bfe4:	4602      	mov	r2, r0
 801bfe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801bfea:	f7ff bb3b 	b.w	801b664 <_dtoa_r+0x34>
 801bfee:	693a      	ldr	r2, [r7, #16]
 801bff0:	3202      	adds	r2, #2
 801bff2:	0092      	lsls	r2, r2, #2
 801bff4:	f107 010c 	add.w	r1, r7, #12
 801bff8:	300c      	adds	r0, #12
 801bffa:	f7fe fa6d 	bl	801a4d8 <memcpy>
 801bffe:	2201      	movs	r2, #1
 801c000:	4629      	mov	r1, r5
 801c002:	4620      	mov	r0, r4
 801c004:	f000 fd54 	bl	801cab0 <__lshift>
 801c008:	9b01      	ldr	r3, [sp, #4]
 801c00a:	f103 0901 	add.w	r9, r3, #1
 801c00e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c012:	4413      	add	r3, r2
 801c014:	9305      	str	r3, [sp, #20]
 801c016:	f00a 0301 	and.w	r3, sl, #1
 801c01a:	46b8      	mov	r8, r7
 801c01c:	9304      	str	r3, [sp, #16]
 801c01e:	4607      	mov	r7, r0
 801c020:	4631      	mov	r1, r6
 801c022:	ee18 0a10 	vmov	r0, s16
 801c026:	f7ff fa75 	bl	801b514 <quorem>
 801c02a:	4641      	mov	r1, r8
 801c02c:	9002      	str	r0, [sp, #8]
 801c02e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c032:	ee18 0a10 	vmov	r0, s16
 801c036:	f000 fdab 	bl	801cb90 <__mcmp>
 801c03a:	463a      	mov	r2, r7
 801c03c:	9003      	str	r0, [sp, #12]
 801c03e:	4631      	mov	r1, r6
 801c040:	4620      	mov	r0, r4
 801c042:	f000 fdc1 	bl	801cbc8 <__mdiff>
 801c046:	68c2      	ldr	r2, [r0, #12]
 801c048:	f109 3bff 	add.w	fp, r9, #4294967295
 801c04c:	4605      	mov	r5, r0
 801c04e:	bb02      	cbnz	r2, 801c092 <_dtoa_r+0xa62>
 801c050:	4601      	mov	r1, r0
 801c052:	ee18 0a10 	vmov	r0, s16
 801c056:	f000 fd9b 	bl	801cb90 <__mcmp>
 801c05a:	4602      	mov	r2, r0
 801c05c:	4629      	mov	r1, r5
 801c05e:	4620      	mov	r0, r4
 801c060:	9207      	str	r2, [sp, #28]
 801c062:	f000 fb53 	bl	801c70c <_Bfree>
 801c066:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c06a:	ea43 0102 	orr.w	r1, r3, r2
 801c06e:	9b04      	ldr	r3, [sp, #16]
 801c070:	430b      	orrs	r3, r1
 801c072:	464d      	mov	r5, r9
 801c074:	d10f      	bne.n	801c096 <_dtoa_r+0xa66>
 801c076:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c07a:	d02a      	beq.n	801c0d2 <_dtoa_r+0xaa2>
 801c07c:	9b03      	ldr	r3, [sp, #12]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	dd02      	ble.n	801c088 <_dtoa_r+0xa58>
 801c082:	9b02      	ldr	r3, [sp, #8]
 801c084:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c088:	f88b a000 	strb.w	sl, [fp]
 801c08c:	e775      	b.n	801bf7a <_dtoa_r+0x94a>
 801c08e:	4638      	mov	r0, r7
 801c090:	e7ba      	b.n	801c008 <_dtoa_r+0x9d8>
 801c092:	2201      	movs	r2, #1
 801c094:	e7e2      	b.n	801c05c <_dtoa_r+0xa2c>
 801c096:	9b03      	ldr	r3, [sp, #12]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	db04      	blt.n	801c0a6 <_dtoa_r+0xa76>
 801c09c:	9906      	ldr	r1, [sp, #24]
 801c09e:	430b      	orrs	r3, r1
 801c0a0:	9904      	ldr	r1, [sp, #16]
 801c0a2:	430b      	orrs	r3, r1
 801c0a4:	d122      	bne.n	801c0ec <_dtoa_r+0xabc>
 801c0a6:	2a00      	cmp	r2, #0
 801c0a8:	ddee      	ble.n	801c088 <_dtoa_r+0xa58>
 801c0aa:	ee18 1a10 	vmov	r1, s16
 801c0ae:	2201      	movs	r2, #1
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f000 fcfd 	bl	801cab0 <__lshift>
 801c0b6:	4631      	mov	r1, r6
 801c0b8:	ee08 0a10 	vmov	s16, r0
 801c0bc:	f000 fd68 	bl	801cb90 <__mcmp>
 801c0c0:	2800      	cmp	r0, #0
 801c0c2:	dc03      	bgt.n	801c0cc <_dtoa_r+0xa9c>
 801c0c4:	d1e0      	bne.n	801c088 <_dtoa_r+0xa58>
 801c0c6:	f01a 0f01 	tst.w	sl, #1
 801c0ca:	d0dd      	beq.n	801c088 <_dtoa_r+0xa58>
 801c0cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c0d0:	d1d7      	bne.n	801c082 <_dtoa_r+0xa52>
 801c0d2:	2339      	movs	r3, #57	; 0x39
 801c0d4:	f88b 3000 	strb.w	r3, [fp]
 801c0d8:	462b      	mov	r3, r5
 801c0da:	461d      	mov	r5, r3
 801c0dc:	3b01      	subs	r3, #1
 801c0de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c0e2:	2a39      	cmp	r2, #57	; 0x39
 801c0e4:	d071      	beq.n	801c1ca <_dtoa_r+0xb9a>
 801c0e6:	3201      	adds	r2, #1
 801c0e8:	701a      	strb	r2, [r3, #0]
 801c0ea:	e746      	b.n	801bf7a <_dtoa_r+0x94a>
 801c0ec:	2a00      	cmp	r2, #0
 801c0ee:	dd07      	ble.n	801c100 <_dtoa_r+0xad0>
 801c0f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c0f4:	d0ed      	beq.n	801c0d2 <_dtoa_r+0xaa2>
 801c0f6:	f10a 0301 	add.w	r3, sl, #1
 801c0fa:	f88b 3000 	strb.w	r3, [fp]
 801c0fe:	e73c      	b.n	801bf7a <_dtoa_r+0x94a>
 801c100:	9b05      	ldr	r3, [sp, #20]
 801c102:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c106:	4599      	cmp	r9, r3
 801c108:	d047      	beq.n	801c19a <_dtoa_r+0xb6a>
 801c10a:	ee18 1a10 	vmov	r1, s16
 801c10e:	2300      	movs	r3, #0
 801c110:	220a      	movs	r2, #10
 801c112:	4620      	mov	r0, r4
 801c114:	f000 fb1c 	bl	801c750 <__multadd>
 801c118:	45b8      	cmp	r8, r7
 801c11a:	ee08 0a10 	vmov	s16, r0
 801c11e:	f04f 0300 	mov.w	r3, #0
 801c122:	f04f 020a 	mov.w	r2, #10
 801c126:	4641      	mov	r1, r8
 801c128:	4620      	mov	r0, r4
 801c12a:	d106      	bne.n	801c13a <_dtoa_r+0xb0a>
 801c12c:	f000 fb10 	bl	801c750 <__multadd>
 801c130:	4680      	mov	r8, r0
 801c132:	4607      	mov	r7, r0
 801c134:	f109 0901 	add.w	r9, r9, #1
 801c138:	e772      	b.n	801c020 <_dtoa_r+0x9f0>
 801c13a:	f000 fb09 	bl	801c750 <__multadd>
 801c13e:	4639      	mov	r1, r7
 801c140:	4680      	mov	r8, r0
 801c142:	2300      	movs	r3, #0
 801c144:	220a      	movs	r2, #10
 801c146:	4620      	mov	r0, r4
 801c148:	f000 fb02 	bl	801c750 <__multadd>
 801c14c:	4607      	mov	r7, r0
 801c14e:	e7f1      	b.n	801c134 <_dtoa_r+0xb04>
 801c150:	9b03      	ldr	r3, [sp, #12]
 801c152:	9302      	str	r3, [sp, #8]
 801c154:	9d01      	ldr	r5, [sp, #4]
 801c156:	ee18 0a10 	vmov	r0, s16
 801c15a:	4631      	mov	r1, r6
 801c15c:	f7ff f9da 	bl	801b514 <quorem>
 801c160:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c164:	9b01      	ldr	r3, [sp, #4]
 801c166:	f805 ab01 	strb.w	sl, [r5], #1
 801c16a:	1aea      	subs	r2, r5, r3
 801c16c:	9b02      	ldr	r3, [sp, #8]
 801c16e:	4293      	cmp	r3, r2
 801c170:	dd09      	ble.n	801c186 <_dtoa_r+0xb56>
 801c172:	ee18 1a10 	vmov	r1, s16
 801c176:	2300      	movs	r3, #0
 801c178:	220a      	movs	r2, #10
 801c17a:	4620      	mov	r0, r4
 801c17c:	f000 fae8 	bl	801c750 <__multadd>
 801c180:	ee08 0a10 	vmov	s16, r0
 801c184:	e7e7      	b.n	801c156 <_dtoa_r+0xb26>
 801c186:	9b02      	ldr	r3, [sp, #8]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	bfc8      	it	gt
 801c18c:	461d      	movgt	r5, r3
 801c18e:	9b01      	ldr	r3, [sp, #4]
 801c190:	bfd8      	it	le
 801c192:	2501      	movle	r5, #1
 801c194:	441d      	add	r5, r3
 801c196:	f04f 0800 	mov.w	r8, #0
 801c19a:	ee18 1a10 	vmov	r1, s16
 801c19e:	2201      	movs	r2, #1
 801c1a0:	4620      	mov	r0, r4
 801c1a2:	f000 fc85 	bl	801cab0 <__lshift>
 801c1a6:	4631      	mov	r1, r6
 801c1a8:	ee08 0a10 	vmov	s16, r0
 801c1ac:	f000 fcf0 	bl	801cb90 <__mcmp>
 801c1b0:	2800      	cmp	r0, #0
 801c1b2:	dc91      	bgt.n	801c0d8 <_dtoa_r+0xaa8>
 801c1b4:	d102      	bne.n	801c1bc <_dtoa_r+0xb8c>
 801c1b6:	f01a 0f01 	tst.w	sl, #1
 801c1ba:	d18d      	bne.n	801c0d8 <_dtoa_r+0xaa8>
 801c1bc:	462b      	mov	r3, r5
 801c1be:	461d      	mov	r5, r3
 801c1c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c1c4:	2a30      	cmp	r2, #48	; 0x30
 801c1c6:	d0fa      	beq.n	801c1be <_dtoa_r+0xb8e>
 801c1c8:	e6d7      	b.n	801bf7a <_dtoa_r+0x94a>
 801c1ca:	9a01      	ldr	r2, [sp, #4]
 801c1cc:	429a      	cmp	r2, r3
 801c1ce:	d184      	bne.n	801c0da <_dtoa_r+0xaaa>
 801c1d0:	9b00      	ldr	r3, [sp, #0]
 801c1d2:	3301      	adds	r3, #1
 801c1d4:	9300      	str	r3, [sp, #0]
 801c1d6:	2331      	movs	r3, #49	; 0x31
 801c1d8:	7013      	strb	r3, [r2, #0]
 801c1da:	e6ce      	b.n	801bf7a <_dtoa_r+0x94a>
 801c1dc:	4b09      	ldr	r3, [pc, #36]	; (801c204 <_dtoa_r+0xbd4>)
 801c1de:	f7ff ba95 	b.w	801b70c <_dtoa_r+0xdc>
 801c1e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	f47f aa6e 	bne.w	801b6c6 <_dtoa_r+0x96>
 801c1ea:	4b07      	ldr	r3, [pc, #28]	; (801c208 <_dtoa_r+0xbd8>)
 801c1ec:	f7ff ba8e 	b.w	801b70c <_dtoa_r+0xdc>
 801c1f0:	9b02      	ldr	r3, [sp, #8]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	dcae      	bgt.n	801c154 <_dtoa_r+0xb24>
 801c1f6:	9b06      	ldr	r3, [sp, #24]
 801c1f8:	2b02      	cmp	r3, #2
 801c1fa:	f73f aea8 	bgt.w	801bf4e <_dtoa_r+0x91e>
 801c1fe:	e7a9      	b.n	801c154 <_dtoa_r+0xb24>
 801c200:	0801f5b5 	.word	0x0801f5b5
 801c204:	0801f411 	.word	0x0801f411
 801c208:	0801f536 	.word	0x0801f536

0801c20c <__sflush_r>:
 801c20c:	898a      	ldrh	r2, [r1, #12]
 801c20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c212:	4605      	mov	r5, r0
 801c214:	0710      	lsls	r0, r2, #28
 801c216:	460c      	mov	r4, r1
 801c218:	d458      	bmi.n	801c2cc <__sflush_r+0xc0>
 801c21a:	684b      	ldr	r3, [r1, #4]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	dc05      	bgt.n	801c22c <__sflush_r+0x20>
 801c220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c222:	2b00      	cmp	r3, #0
 801c224:	dc02      	bgt.n	801c22c <__sflush_r+0x20>
 801c226:	2000      	movs	r0, #0
 801c228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c22c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c22e:	2e00      	cmp	r6, #0
 801c230:	d0f9      	beq.n	801c226 <__sflush_r+0x1a>
 801c232:	2300      	movs	r3, #0
 801c234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c238:	682f      	ldr	r7, [r5, #0]
 801c23a:	602b      	str	r3, [r5, #0]
 801c23c:	d032      	beq.n	801c2a4 <__sflush_r+0x98>
 801c23e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c240:	89a3      	ldrh	r3, [r4, #12]
 801c242:	075a      	lsls	r2, r3, #29
 801c244:	d505      	bpl.n	801c252 <__sflush_r+0x46>
 801c246:	6863      	ldr	r3, [r4, #4]
 801c248:	1ac0      	subs	r0, r0, r3
 801c24a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c24c:	b10b      	cbz	r3, 801c252 <__sflush_r+0x46>
 801c24e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c250:	1ac0      	subs	r0, r0, r3
 801c252:	2300      	movs	r3, #0
 801c254:	4602      	mov	r2, r0
 801c256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c258:	6a21      	ldr	r1, [r4, #32]
 801c25a:	4628      	mov	r0, r5
 801c25c:	47b0      	blx	r6
 801c25e:	1c43      	adds	r3, r0, #1
 801c260:	89a3      	ldrh	r3, [r4, #12]
 801c262:	d106      	bne.n	801c272 <__sflush_r+0x66>
 801c264:	6829      	ldr	r1, [r5, #0]
 801c266:	291d      	cmp	r1, #29
 801c268:	d82c      	bhi.n	801c2c4 <__sflush_r+0xb8>
 801c26a:	4a2a      	ldr	r2, [pc, #168]	; (801c314 <__sflush_r+0x108>)
 801c26c:	40ca      	lsrs	r2, r1
 801c26e:	07d6      	lsls	r6, r2, #31
 801c270:	d528      	bpl.n	801c2c4 <__sflush_r+0xb8>
 801c272:	2200      	movs	r2, #0
 801c274:	6062      	str	r2, [r4, #4]
 801c276:	04d9      	lsls	r1, r3, #19
 801c278:	6922      	ldr	r2, [r4, #16]
 801c27a:	6022      	str	r2, [r4, #0]
 801c27c:	d504      	bpl.n	801c288 <__sflush_r+0x7c>
 801c27e:	1c42      	adds	r2, r0, #1
 801c280:	d101      	bne.n	801c286 <__sflush_r+0x7a>
 801c282:	682b      	ldr	r3, [r5, #0]
 801c284:	b903      	cbnz	r3, 801c288 <__sflush_r+0x7c>
 801c286:	6560      	str	r0, [r4, #84]	; 0x54
 801c288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c28a:	602f      	str	r7, [r5, #0]
 801c28c:	2900      	cmp	r1, #0
 801c28e:	d0ca      	beq.n	801c226 <__sflush_r+0x1a>
 801c290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c294:	4299      	cmp	r1, r3
 801c296:	d002      	beq.n	801c29e <__sflush_r+0x92>
 801c298:	4628      	mov	r0, r5
 801c29a:	f7fe f963 	bl	801a564 <_free_r>
 801c29e:	2000      	movs	r0, #0
 801c2a0:	6360      	str	r0, [r4, #52]	; 0x34
 801c2a2:	e7c1      	b.n	801c228 <__sflush_r+0x1c>
 801c2a4:	6a21      	ldr	r1, [r4, #32]
 801c2a6:	2301      	movs	r3, #1
 801c2a8:	4628      	mov	r0, r5
 801c2aa:	47b0      	blx	r6
 801c2ac:	1c41      	adds	r1, r0, #1
 801c2ae:	d1c7      	bne.n	801c240 <__sflush_r+0x34>
 801c2b0:	682b      	ldr	r3, [r5, #0]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d0c4      	beq.n	801c240 <__sflush_r+0x34>
 801c2b6:	2b1d      	cmp	r3, #29
 801c2b8:	d001      	beq.n	801c2be <__sflush_r+0xb2>
 801c2ba:	2b16      	cmp	r3, #22
 801c2bc:	d101      	bne.n	801c2c2 <__sflush_r+0xb6>
 801c2be:	602f      	str	r7, [r5, #0]
 801c2c0:	e7b1      	b.n	801c226 <__sflush_r+0x1a>
 801c2c2:	89a3      	ldrh	r3, [r4, #12]
 801c2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2c8:	81a3      	strh	r3, [r4, #12]
 801c2ca:	e7ad      	b.n	801c228 <__sflush_r+0x1c>
 801c2cc:	690f      	ldr	r7, [r1, #16]
 801c2ce:	2f00      	cmp	r7, #0
 801c2d0:	d0a9      	beq.n	801c226 <__sflush_r+0x1a>
 801c2d2:	0793      	lsls	r3, r2, #30
 801c2d4:	680e      	ldr	r6, [r1, #0]
 801c2d6:	bf08      	it	eq
 801c2d8:	694b      	ldreq	r3, [r1, #20]
 801c2da:	600f      	str	r7, [r1, #0]
 801c2dc:	bf18      	it	ne
 801c2de:	2300      	movne	r3, #0
 801c2e0:	eba6 0807 	sub.w	r8, r6, r7
 801c2e4:	608b      	str	r3, [r1, #8]
 801c2e6:	f1b8 0f00 	cmp.w	r8, #0
 801c2ea:	dd9c      	ble.n	801c226 <__sflush_r+0x1a>
 801c2ec:	6a21      	ldr	r1, [r4, #32]
 801c2ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c2f0:	4643      	mov	r3, r8
 801c2f2:	463a      	mov	r2, r7
 801c2f4:	4628      	mov	r0, r5
 801c2f6:	47b0      	blx	r6
 801c2f8:	2800      	cmp	r0, #0
 801c2fa:	dc06      	bgt.n	801c30a <__sflush_r+0xfe>
 801c2fc:	89a3      	ldrh	r3, [r4, #12]
 801c2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c302:	81a3      	strh	r3, [r4, #12]
 801c304:	f04f 30ff 	mov.w	r0, #4294967295
 801c308:	e78e      	b.n	801c228 <__sflush_r+0x1c>
 801c30a:	4407      	add	r7, r0
 801c30c:	eba8 0800 	sub.w	r8, r8, r0
 801c310:	e7e9      	b.n	801c2e6 <__sflush_r+0xda>
 801c312:	bf00      	nop
 801c314:	20400001 	.word	0x20400001

0801c318 <_fflush_r>:
 801c318:	b538      	push	{r3, r4, r5, lr}
 801c31a:	690b      	ldr	r3, [r1, #16]
 801c31c:	4605      	mov	r5, r0
 801c31e:	460c      	mov	r4, r1
 801c320:	b913      	cbnz	r3, 801c328 <_fflush_r+0x10>
 801c322:	2500      	movs	r5, #0
 801c324:	4628      	mov	r0, r5
 801c326:	bd38      	pop	{r3, r4, r5, pc}
 801c328:	b118      	cbz	r0, 801c332 <_fflush_r+0x1a>
 801c32a:	6983      	ldr	r3, [r0, #24]
 801c32c:	b90b      	cbnz	r3, 801c332 <_fflush_r+0x1a>
 801c32e:	f000 f887 	bl	801c440 <__sinit>
 801c332:	4b14      	ldr	r3, [pc, #80]	; (801c384 <_fflush_r+0x6c>)
 801c334:	429c      	cmp	r4, r3
 801c336:	d11b      	bne.n	801c370 <_fflush_r+0x58>
 801c338:	686c      	ldr	r4, [r5, #4]
 801c33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d0ef      	beq.n	801c322 <_fflush_r+0xa>
 801c342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c344:	07d0      	lsls	r0, r2, #31
 801c346:	d404      	bmi.n	801c352 <_fflush_r+0x3a>
 801c348:	0599      	lsls	r1, r3, #22
 801c34a:	d402      	bmi.n	801c352 <_fflush_r+0x3a>
 801c34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c34e:	f7fe f8b0 	bl	801a4b2 <__retarget_lock_acquire_recursive>
 801c352:	4628      	mov	r0, r5
 801c354:	4621      	mov	r1, r4
 801c356:	f7ff ff59 	bl	801c20c <__sflush_r>
 801c35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c35c:	07da      	lsls	r2, r3, #31
 801c35e:	4605      	mov	r5, r0
 801c360:	d4e0      	bmi.n	801c324 <_fflush_r+0xc>
 801c362:	89a3      	ldrh	r3, [r4, #12]
 801c364:	059b      	lsls	r3, r3, #22
 801c366:	d4dd      	bmi.n	801c324 <_fflush_r+0xc>
 801c368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c36a:	f7fe f8a3 	bl	801a4b4 <__retarget_lock_release_recursive>
 801c36e:	e7d9      	b.n	801c324 <_fflush_r+0xc>
 801c370:	4b05      	ldr	r3, [pc, #20]	; (801c388 <_fflush_r+0x70>)
 801c372:	429c      	cmp	r4, r3
 801c374:	d101      	bne.n	801c37a <_fflush_r+0x62>
 801c376:	68ac      	ldr	r4, [r5, #8]
 801c378:	e7df      	b.n	801c33a <_fflush_r+0x22>
 801c37a:	4b04      	ldr	r3, [pc, #16]	; (801c38c <_fflush_r+0x74>)
 801c37c:	429c      	cmp	r4, r3
 801c37e:	bf08      	it	eq
 801c380:	68ec      	ldreq	r4, [r5, #12]
 801c382:	e7da      	b.n	801c33a <_fflush_r+0x22>
 801c384:	0801f5e8 	.word	0x0801f5e8
 801c388:	0801f608 	.word	0x0801f608
 801c38c:	0801f5c8 	.word	0x0801f5c8

0801c390 <std>:
 801c390:	2300      	movs	r3, #0
 801c392:	b510      	push	{r4, lr}
 801c394:	4604      	mov	r4, r0
 801c396:	e9c0 3300 	strd	r3, r3, [r0]
 801c39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c39e:	6083      	str	r3, [r0, #8]
 801c3a0:	8181      	strh	r1, [r0, #12]
 801c3a2:	6643      	str	r3, [r0, #100]	; 0x64
 801c3a4:	81c2      	strh	r2, [r0, #14]
 801c3a6:	6183      	str	r3, [r0, #24]
 801c3a8:	4619      	mov	r1, r3
 801c3aa:	2208      	movs	r2, #8
 801c3ac:	305c      	adds	r0, #92	; 0x5c
 801c3ae:	f7fe f8bb 	bl	801a528 <memset>
 801c3b2:	4b05      	ldr	r3, [pc, #20]	; (801c3c8 <std+0x38>)
 801c3b4:	6263      	str	r3, [r4, #36]	; 0x24
 801c3b6:	4b05      	ldr	r3, [pc, #20]	; (801c3cc <std+0x3c>)
 801c3b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801c3ba:	4b05      	ldr	r3, [pc, #20]	; (801c3d0 <std+0x40>)
 801c3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c3be:	4b05      	ldr	r3, [pc, #20]	; (801c3d4 <std+0x44>)
 801c3c0:	6224      	str	r4, [r4, #32]
 801c3c2:	6323      	str	r3, [r4, #48]	; 0x30
 801c3c4:	bd10      	pop	{r4, pc}
 801c3c6:	bf00      	nop
 801c3c8:	0801d0a9 	.word	0x0801d0a9
 801c3cc:	0801d0cb 	.word	0x0801d0cb
 801c3d0:	0801d103 	.word	0x0801d103
 801c3d4:	0801d127 	.word	0x0801d127

0801c3d8 <_cleanup_r>:
 801c3d8:	4901      	ldr	r1, [pc, #4]	; (801c3e0 <_cleanup_r+0x8>)
 801c3da:	f000 b8af 	b.w	801c53c <_fwalk_reent>
 801c3de:	bf00      	nop
 801c3e0:	0801c319 	.word	0x0801c319

0801c3e4 <__sfmoreglue>:
 801c3e4:	b570      	push	{r4, r5, r6, lr}
 801c3e6:	2268      	movs	r2, #104	; 0x68
 801c3e8:	1e4d      	subs	r5, r1, #1
 801c3ea:	4355      	muls	r5, r2
 801c3ec:	460e      	mov	r6, r1
 801c3ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c3f2:	f7fe f923 	bl	801a63c <_malloc_r>
 801c3f6:	4604      	mov	r4, r0
 801c3f8:	b140      	cbz	r0, 801c40c <__sfmoreglue+0x28>
 801c3fa:	2100      	movs	r1, #0
 801c3fc:	e9c0 1600 	strd	r1, r6, [r0]
 801c400:	300c      	adds	r0, #12
 801c402:	60a0      	str	r0, [r4, #8]
 801c404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c408:	f7fe f88e 	bl	801a528 <memset>
 801c40c:	4620      	mov	r0, r4
 801c40e:	bd70      	pop	{r4, r5, r6, pc}

0801c410 <__sfp_lock_acquire>:
 801c410:	4801      	ldr	r0, [pc, #4]	; (801c418 <__sfp_lock_acquire+0x8>)
 801c412:	f7fe b84e 	b.w	801a4b2 <__retarget_lock_acquire_recursive>
 801c416:	bf00      	nop
 801c418:	20004c8d 	.word	0x20004c8d

0801c41c <__sfp_lock_release>:
 801c41c:	4801      	ldr	r0, [pc, #4]	; (801c424 <__sfp_lock_release+0x8>)
 801c41e:	f7fe b849 	b.w	801a4b4 <__retarget_lock_release_recursive>
 801c422:	bf00      	nop
 801c424:	20004c8d 	.word	0x20004c8d

0801c428 <__sinit_lock_acquire>:
 801c428:	4801      	ldr	r0, [pc, #4]	; (801c430 <__sinit_lock_acquire+0x8>)
 801c42a:	f7fe b842 	b.w	801a4b2 <__retarget_lock_acquire_recursive>
 801c42e:	bf00      	nop
 801c430:	20004c8e 	.word	0x20004c8e

0801c434 <__sinit_lock_release>:
 801c434:	4801      	ldr	r0, [pc, #4]	; (801c43c <__sinit_lock_release+0x8>)
 801c436:	f7fe b83d 	b.w	801a4b4 <__retarget_lock_release_recursive>
 801c43a:	bf00      	nop
 801c43c:	20004c8e 	.word	0x20004c8e

0801c440 <__sinit>:
 801c440:	b510      	push	{r4, lr}
 801c442:	4604      	mov	r4, r0
 801c444:	f7ff fff0 	bl	801c428 <__sinit_lock_acquire>
 801c448:	69a3      	ldr	r3, [r4, #24]
 801c44a:	b11b      	cbz	r3, 801c454 <__sinit+0x14>
 801c44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c450:	f7ff bff0 	b.w	801c434 <__sinit_lock_release>
 801c454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c458:	6523      	str	r3, [r4, #80]	; 0x50
 801c45a:	4b13      	ldr	r3, [pc, #76]	; (801c4a8 <__sinit+0x68>)
 801c45c:	4a13      	ldr	r2, [pc, #76]	; (801c4ac <__sinit+0x6c>)
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	62a2      	str	r2, [r4, #40]	; 0x28
 801c462:	42a3      	cmp	r3, r4
 801c464:	bf04      	itt	eq
 801c466:	2301      	moveq	r3, #1
 801c468:	61a3      	streq	r3, [r4, #24]
 801c46a:	4620      	mov	r0, r4
 801c46c:	f000 f820 	bl	801c4b0 <__sfp>
 801c470:	6060      	str	r0, [r4, #4]
 801c472:	4620      	mov	r0, r4
 801c474:	f000 f81c 	bl	801c4b0 <__sfp>
 801c478:	60a0      	str	r0, [r4, #8]
 801c47a:	4620      	mov	r0, r4
 801c47c:	f000 f818 	bl	801c4b0 <__sfp>
 801c480:	2200      	movs	r2, #0
 801c482:	60e0      	str	r0, [r4, #12]
 801c484:	2104      	movs	r1, #4
 801c486:	6860      	ldr	r0, [r4, #4]
 801c488:	f7ff ff82 	bl	801c390 <std>
 801c48c:	68a0      	ldr	r0, [r4, #8]
 801c48e:	2201      	movs	r2, #1
 801c490:	2109      	movs	r1, #9
 801c492:	f7ff ff7d 	bl	801c390 <std>
 801c496:	68e0      	ldr	r0, [r4, #12]
 801c498:	2202      	movs	r2, #2
 801c49a:	2112      	movs	r1, #18
 801c49c:	f7ff ff78 	bl	801c390 <std>
 801c4a0:	2301      	movs	r3, #1
 801c4a2:	61a3      	str	r3, [r4, #24]
 801c4a4:	e7d2      	b.n	801c44c <__sinit+0xc>
 801c4a6:	bf00      	nop
 801c4a8:	0801f3ec 	.word	0x0801f3ec
 801c4ac:	0801c3d9 	.word	0x0801c3d9

0801c4b0 <__sfp>:
 801c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4b2:	4607      	mov	r7, r0
 801c4b4:	f7ff ffac 	bl	801c410 <__sfp_lock_acquire>
 801c4b8:	4b1e      	ldr	r3, [pc, #120]	; (801c534 <__sfp+0x84>)
 801c4ba:	681e      	ldr	r6, [r3, #0]
 801c4bc:	69b3      	ldr	r3, [r6, #24]
 801c4be:	b913      	cbnz	r3, 801c4c6 <__sfp+0x16>
 801c4c0:	4630      	mov	r0, r6
 801c4c2:	f7ff ffbd 	bl	801c440 <__sinit>
 801c4c6:	3648      	adds	r6, #72	; 0x48
 801c4c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c4cc:	3b01      	subs	r3, #1
 801c4ce:	d503      	bpl.n	801c4d8 <__sfp+0x28>
 801c4d0:	6833      	ldr	r3, [r6, #0]
 801c4d2:	b30b      	cbz	r3, 801c518 <__sfp+0x68>
 801c4d4:	6836      	ldr	r6, [r6, #0]
 801c4d6:	e7f7      	b.n	801c4c8 <__sfp+0x18>
 801c4d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c4dc:	b9d5      	cbnz	r5, 801c514 <__sfp+0x64>
 801c4de:	4b16      	ldr	r3, [pc, #88]	; (801c538 <__sfp+0x88>)
 801c4e0:	60e3      	str	r3, [r4, #12]
 801c4e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c4e6:	6665      	str	r5, [r4, #100]	; 0x64
 801c4e8:	f7fd ffe2 	bl	801a4b0 <__retarget_lock_init_recursive>
 801c4ec:	f7ff ff96 	bl	801c41c <__sfp_lock_release>
 801c4f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c4f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c4f8:	6025      	str	r5, [r4, #0]
 801c4fa:	61a5      	str	r5, [r4, #24]
 801c4fc:	2208      	movs	r2, #8
 801c4fe:	4629      	mov	r1, r5
 801c500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c504:	f7fe f810 	bl	801a528 <memset>
 801c508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c50c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c510:	4620      	mov	r0, r4
 801c512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c514:	3468      	adds	r4, #104	; 0x68
 801c516:	e7d9      	b.n	801c4cc <__sfp+0x1c>
 801c518:	2104      	movs	r1, #4
 801c51a:	4638      	mov	r0, r7
 801c51c:	f7ff ff62 	bl	801c3e4 <__sfmoreglue>
 801c520:	4604      	mov	r4, r0
 801c522:	6030      	str	r0, [r6, #0]
 801c524:	2800      	cmp	r0, #0
 801c526:	d1d5      	bne.n	801c4d4 <__sfp+0x24>
 801c528:	f7ff ff78 	bl	801c41c <__sfp_lock_release>
 801c52c:	230c      	movs	r3, #12
 801c52e:	603b      	str	r3, [r7, #0]
 801c530:	e7ee      	b.n	801c510 <__sfp+0x60>
 801c532:	bf00      	nop
 801c534:	0801f3ec 	.word	0x0801f3ec
 801c538:	ffff0001 	.word	0xffff0001

0801c53c <_fwalk_reent>:
 801c53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c540:	4606      	mov	r6, r0
 801c542:	4688      	mov	r8, r1
 801c544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c548:	2700      	movs	r7, #0
 801c54a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c54e:	f1b9 0901 	subs.w	r9, r9, #1
 801c552:	d505      	bpl.n	801c560 <_fwalk_reent+0x24>
 801c554:	6824      	ldr	r4, [r4, #0]
 801c556:	2c00      	cmp	r4, #0
 801c558:	d1f7      	bne.n	801c54a <_fwalk_reent+0xe>
 801c55a:	4638      	mov	r0, r7
 801c55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c560:	89ab      	ldrh	r3, [r5, #12]
 801c562:	2b01      	cmp	r3, #1
 801c564:	d907      	bls.n	801c576 <_fwalk_reent+0x3a>
 801c566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c56a:	3301      	adds	r3, #1
 801c56c:	d003      	beq.n	801c576 <_fwalk_reent+0x3a>
 801c56e:	4629      	mov	r1, r5
 801c570:	4630      	mov	r0, r6
 801c572:	47c0      	blx	r8
 801c574:	4307      	orrs	r7, r0
 801c576:	3568      	adds	r5, #104	; 0x68
 801c578:	e7e9      	b.n	801c54e <_fwalk_reent+0x12>
	...

0801c57c <_localeconv_r>:
 801c57c:	4800      	ldr	r0, [pc, #0]	; (801c580 <_localeconv_r+0x4>)
 801c57e:	4770      	bx	lr
 801c580:	20002a1c 	.word	0x20002a1c

0801c584 <__swhatbuf_r>:
 801c584:	b570      	push	{r4, r5, r6, lr}
 801c586:	460e      	mov	r6, r1
 801c588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c58c:	2900      	cmp	r1, #0
 801c58e:	b096      	sub	sp, #88	; 0x58
 801c590:	4614      	mov	r4, r2
 801c592:	461d      	mov	r5, r3
 801c594:	da08      	bge.n	801c5a8 <__swhatbuf_r+0x24>
 801c596:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c59a:	2200      	movs	r2, #0
 801c59c:	602a      	str	r2, [r5, #0]
 801c59e:	061a      	lsls	r2, r3, #24
 801c5a0:	d410      	bmi.n	801c5c4 <__swhatbuf_r+0x40>
 801c5a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c5a6:	e00e      	b.n	801c5c6 <__swhatbuf_r+0x42>
 801c5a8:	466a      	mov	r2, sp
 801c5aa:	f000 fdef 	bl	801d18c <_fstat_r>
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	dbf1      	blt.n	801c596 <__swhatbuf_r+0x12>
 801c5b2:	9a01      	ldr	r2, [sp, #4]
 801c5b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c5b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c5bc:	425a      	negs	r2, r3
 801c5be:	415a      	adcs	r2, r3
 801c5c0:	602a      	str	r2, [r5, #0]
 801c5c2:	e7ee      	b.n	801c5a2 <__swhatbuf_r+0x1e>
 801c5c4:	2340      	movs	r3, #64	; 0x40
 801c5c6:	2000      	movs	r0, #0
 801c5c8:	6023      	str	r3, [r4, #0]
 801c5ca:	b016      	add	sp, #88	; 0x58
 801c5cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c5d0 <__smakebuf_r>:
 801c5d0:	898b      	ldrh	r3, [r1, #12]
 801c5d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c5d4:	079d      	lsls	r5, r3, #30
 801c5d6:	4606      	mov	r6, r0
 801c5d8:	460c      	mov	r4, r1
 801c5da:	d507      	bpl.n	801c5ec <__smakebuf_r+0x1c>
 801c5dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c5e0:	6023      	str	r3, [r4, #0]
 801c5e2:	6123      	str	r3, [r4, #16]
 801c5e4:	2301      	movs	r3, #1
 801c5e6:	6163      	str	r3, [r4, #20]
 801c5e8:	b002      	add	sp, #8
 801c5ea:	bd70      	pop	{r4, r5, r6, pc}
 801c5ec:	ab01      	add	r3, sp, #4
 801c5ee:	466a      	mov	r2, sp
 801c5f0:	f7ff ffc8 	bl	801c584 <__swhatbuf_r>
 801c5f4:	9900      	ldr	r1, [sp, #0]
 801c5f6:	4605      	mov	r5, r0
 801c5f8:	4630      	mov	r0, r6
 801c5fa:	f7fe f81f 	bl	801a63c <_malloc_r>
 801c5fe:	b948      	cbnz	r0, 801c614 <__smakebuf_r+0x44>
 801c600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c604:	059a      	lsls	r2, r3, #22
 801c606:	d4ef      	bmi.n	801c5e8 <__smakebuf_r+0x18>
 801c608:	f023 0303 	bic.w	r3, r3, #3
 801c60c:	f043 0302 	orr.w	r3, r3, #2
 801c610:	81a3      	strh	r3, [r4, #12]
 801c612:	e7e3      	b.n	801c5dc <__smakebuf_r+0xc>
 801c614:	4b0d      	ldr	r3, [pc, #52]	; (801c64c <__smakebuf_r+0x7c>)
 801c616:	62b3      	str	r3, [r6, #40]	; 0x28
 801c618:	89a3      	ldrh	r3, [r4, #12]
 801c61a:	6020      	str	r0, [r4, #0]
 801c61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c620:	81a3      	strh	r3, [r4, #12]
 801c622:	9b00      	ldr	r3, [sp, #0]
 801c624:	6163      	str	r3, [r4, #20]
 801c626:	9b01      	ldr	r3, [sp, #4]
 801c628:	6120      	str	r0, [r4, #16]
 801c62a:	b15b      	cbz	r3, 801c644 <__smakebuf_r+0x74>
 801c62c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c630:	4630      	mov	r0, r6
 801c632:	f000 fdbd 	bl	801d1b0 <_isatty_r>
 801c636:	b128      	cbz	r0, 801c644 <__smakebuf_r+0x74>
 801c638:	89a3      	ldrh	r3, [r4, #12]
 801c63a:	f023 0303 	bic.w	r3, r3, #3
 801c63e:	f043 0301 	orr.w	r3, r3, #1
 801c642:	81a3      	strh	r3, [r4, #12]
 801c644:	89a0      	ldrh	r0, [r4, #12]
 801c646:	4305      	orrs	r5, r0
 801c648:	81a5      	strh	r5, [r4, #12]
 801c64a:	e7cd      	b.n	801c5e8 <__smakebuf_r+0x18>
 801c64c:	0801c3d9 	.word	0x0801c3d9

0801c650 <__ascii_mbtowc>:
 801c650:	b082      	sub	sp, #8
 801c652:	b901      	cbnz	r1, 801c656 <__ascii_mbtowc+0x6>
 801c654:	a901      	add	r1, sp, #4
 801c656:	b142      	cbz	r2, 801c66a <__ascii_mbtowc+0x1a>
 801c658:	b14b      	cbz	r3, 801c66e <__ascii_mbtowc+0x1e>
 801c65a:	7813      	ldrb	r3, [r2, #0]
 801c65c:	600b      	str	r3, [r1, #0]
 801c65e:	7812      	ldrb	r2, [r2, #0]
 801c660:	1e10      	subs	r0, r2, #0
 801c662:	bf18      	it	ne
 801c664:	2001      	movne	r0, #1
 801c666:	b002      	add	sp, #8
 801c668:	4770      	bx	lr
 801c66a:	4610      	mov	r0, r2
 801c66c:	e7fb      	b.n	801c666 <__ascii_mbtowc+0x16>
 801c66e:	f06f 0001 	mvn.w	r0, #1
 801c672:	e7f8      	b.n	801c666 <__ascii_mbtowc+0x16>

0801c674 <__malloc_lock>:
 801c674:	4801      	ldr	r0, [pc, #4]	; (801c67c <__malloc_lock+0x8>)
 801c676:	f7fd bf1c 	b.w	801a4b2 <__retarget_lock_acquire_recursive>
 801c67a:	bf00      	nop
 801c67c:	20004c8c 	.word	0x20004c8c

0801c680 <__malloc_unlock>:
 801c680:	4801      	ldr	r0, [pc, #4]	; (801c688 <__malloc_unlock+0x8>)
 801c682:	f7fd bf17 	b.w	801a4b4 <__retarget_lock_release_recursive>
 801c686:	bf00      	nop
 801c688:	20004c8c 	.word	0x20004c8c

0801c68c <_Balloc>:
 801c68c:	b570      	push	{r4, r5, r6, lr}
 801c68e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c690:	4604      	mov	r4, r0
 801c692:	460d      	mov	r5, r1
 801c694:	b976      	cbnz	r6, 801c6b4 <_Balloc+0x28>
 801c696:	2010      	movs	r0, #16
 801c698:	f7fd ff0e 	bl	801a4b8 <malloc>
 801c69c:	4602      	mov	r2, r0
 801c69e:	6260      	str	r0, [r4, #36]	; 0x24
 801c6a0:	b920      	cbnz	r0, 801c6ac <_Balloc+0x20>
 801c6a2:	4b18      	ldr	r3, [pc, #96]	; (801c704 <_Balloc+0x78>)
 801c6a4:	4818      	ldr	r0, [pc, #96]	; (801c708 <_Balloc+0x7c>)
 801c6a6:	2166      	movs	r1, #102	; 0x66
 801c6a8:	f7fd fea0 	bl	801a3ec <__assert_func>
 801c6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c6b0:	6006      	str	r6, [r0, #0]
 801c6b2:	60c6      	str	r6, [r0, #12]
 801c6b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c6b6:	68f3      	ldr	r3, [r6, #12]
 801c6b8:	b183      	cbz	r3, 801c6dc <_Balloc+0x50>
 801c6ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c6bc:	68db      	ldr	r3, [r3, #12]
 801c6be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c6c2:	b9b8      	cbnz	r0, 801c6f4 <_Balloc+0x68>
 801c6c4:	2101      	movs	r1, #1
 801c6c6:	fa01 f605 	lsl.w	r6, r1, r5
 801c6ca:	1d72      	adds	r2, r6, #5
 801c6cc:	0092      	lsls	r2, r2, #2
 801c6ce:	4620      	mov	r0, r4
 801c6d0:	f7fd ff32 	bl	801a538 <_calloc_r>
 801c6d4:	b160      	cbz	r0, 801c6f0 <_Balloc+0x64>
 801c6d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c6da:	e00e      	b.n	801c6fa <_Balloc+0x6e>
 801c6dc:	2221      	movs	r2, #33	; 0x21
 801c6de:	2104      	movs	r1, #4
 801c6e0:	4620      	mov	r0, r4
 801c6e2:	f7fd ff29 	bl	801a538 <_calloc_r>
 801c6e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c6e8:	60f0      	str	r0, [r6, #12]
 801c6ea:	68db      	ldr	r3, [r3, #12]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d1e4      	bne.n	801c6ba <_Balloc+0x2e>
 801c6f0:	2000      	movs	r0, #0
 801c6f2:	bd70      	pop	{r4, r5, r6, pc}
 801c6f4:	6802      	ldr	r2, [r0, #0]
 801c6f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c700:	e7f7      	b.n	801c6f2 <_Balloc+0x66>
 801c702:	bf00      	nop
 801c704:	0801f543 	.word	0x0801f543
 801c708:	0801f632 	.word	0x0801f632

0801c70c <_Bfree>:
 801c70c:	b570      	push	{r4, r5, r6, lr}
 801c70e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c710:	4605      	mov	r5, r0
 801c712:	460c      	mov	r4, r1
 801c714:	b976      	cbnz	r6, 801c734 <_Bfree+0x28>
 801c716:	2010      	movs	r0, #16
 801c718:	f7fd fece 	bl	801a4b8 <malloc>
 801c71c:	4602      	mov	r2, r0
 801c71e:	6268      	str	r0, [r5, #36]	; 0x24
 801c720:	b920      	cbnz	r0, 801c72c <_Bfree+0x20>
 801c722:	4b09      	ldr	r3, [pc, #36]	; (801c748 <_Bfree+0x3c>)
 801c724:	4809      	ldr	r0, [pc, #36]	; (801c74c <_Bfree+0x40>)
 801c726:	218a      	movs	r1, #138	; 0x8a
 801c728:	f7fd fe60 	bl	801a3ec <__assert_func>
 801c72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c730:	6006      	str	r6, [r0, #0]
 801c732:	60c6      	str	r6, [r0, #12]
 801c734:	b13c      	cbz	r4, 801c746 <_Bfree+0x3a>
 801c736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c738:	6862      	ldr	r2, [r4, #4]
 801c73a:	68db      	ldr	r3, [r3, #12]
 801c73c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c740:	6021      	str	r1, [r4, #0]
 801c742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c746:	bd70      	pop	{r4, r5, r6, pc}
 801c748:	0801f543 	.word	0x0801f543
 801c74c:	0801f632 	.word	0x0801f632

0801c750 <__multadd>:
 801c750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c754:	690d      	ldr	r5, [r1, #16]
 801c756:	4607      	mov	r7, r0
 801c758:	460c      	mov	r4, r1
 801c75a:	461e      	mov	r6, r3
 801c75c:	f101 0c14 	add.w	ip, r1, #20
 801c760:	2000      	movs	r0, #0
 801c762:	f8dc 3000 	ldr.w	r3, [ip]
 801c766:	b299      	uxth	r1, r3
 801c768:	fb02 6101 	mla	r1, r2, r1, r6
 801c76c:	0c1e      	lsrs	r6, r3, #16
 801c76e:	0c0b      	lsrs	r3, r1, #16
 801c770:	fb02 3306 	mla	r3, r2, r6, r3
 801c774:	b289      	uxth	r1, r1
 801c776:	3001      	adds	r0, #1
 801c778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c77c:	4285      	cmp	r5, r0
 801c77e:	f84c 1b04 	str.w	r1, [ip], #4
 801c782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c786:	dcec      	bgt.n	801c762 <__multadd+0x12>
 801c788:	b30e      	cbz	r6, 801c7ce <__multadd+0x7e>
 801c78a:	68a3      	ldr	r3, [r4, #8]
 801c78c:	42ab      	cmp	r3, r5
 801c78e:	dc19      	bgt.n	801c7c4 <__multadd+0x74>
 801c790:	6861      	ldr	r1, [r4, #4]
 801c792:	4638      	mov	r0, r7
 801c794:	3101      	adds	r1, #1
 801c796:	f7ff ff79 	bl	801c68c <_Balloc>
 801c79a:	4680      	mov	r8, r0
 801c79c:	b928      	cbnz	r0, 801c7aa <__multadd+0x5a>
 801c79e:	4602      	mov	r2, r0
 801c7a0:	4b0c      	ldr	r3, [pc, #48]	; (801c7d4 <__multadd+0x84>)
 801c7a2:	480d      	ldr	r0, [pc, #52]	; (801c7d8 <__multadd+0x88>)
 801c7a4:	21b5      	movs	r1, #181	; 0xb5
 801c7a6:	f7fd fe21 	bl	801a3ec <__assert_func>
 801c7aa:	6922      	ldr	r2, [r4, #16]
 801c7ac:	3202      	adds	r2, #2
 801c7ae:	f104 010c 	add.w	r1, r4, #12
 801c7b2:	0092      	lsls	r2, r2, #2
 801c7b4:	300c      	adds	r0, #12
 801c7b6:	f7fd fe8f 	bl	801a4d8 <memcpy>
 801c7ba:	4621      	mov	r1, r4
 801c7bc:	4638      	mov	r0, r7
 801c7be:	f7ff ffa5 	bl	801c70c <_Bfree>
 801c7c2:	4644      	mov	r4, r8
 801c7c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c7c8:	3501      	adds	r5, #1
 801c7ca:	615e      	str	r6, [r3, #20]
 801c7cc:	6125      	str	r5, [r4, #16]
 801c7ce:	4620      	mov	r0, r4
 801c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7d4:	0801f5b5 	.word	0x0801f5b5
 801c7d8:	0801f632 	.word	0x0801f632

0801c7dc <__hi0bits>:
 801c7dc:	0c03      	lsrs	r3, r0, #16
 801c7de:	041b      	lsls	r3, r3, #16
 801c7e0:	b9d3      	cbnz	r3, 801c818 <__hi0bits+0x3c>
 801c7e2:	0400      	lsls	r0, r0, #16
 801c7e4:	2310      	movs	r3, #16
 801c7e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c7ea:	bf04      	itt	eq
 801c7ec:	0200      	lsleq	r0, r0, #8
 801c7ee:	3308      	addeq	r3, #8
 801c7f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c7f4:	bf04      	itt	eq
 801c7f6:	0100      	lsleq	r0, r0, #4
 801c7f8:	3304      	addeq	r3, #4
 801c7fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c7fe:	bf04      	itt	eq
 801c800:	0080      	lsleq	r0, r0, #2
 801c802:	3302      	addeq	r3, #2
 801c804:	2800      	cmp	r0, #0
 801c806:	db05      	blt.n	801c814 <__hi0bits+0x38>
 801c808:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c80c:	f103 0301 	add.w	r3, r3, #1
 801c810:	bf08      	it	eq
 801c812:	2320      	moveq	r3, #32
 801c814:	4618      	mov	r0, r3
 801c816:	4770      	bx	lr
 801c818:	2300      	movs	r3, #0
 801c81a:	e7e4      	b.n	801c7e6 <__hi0bits+0xa>

0801c81c <__lo0bits>:
 801c81c:	6803      	ldr	r3, [r0, #0]
 801c81e:	f013 0207 	ands.w	r2, r3, #7
 801c822:	4601      	mov	r1, r0
 801c824:	d00b      	beq.n	801c83e <__lo0bits+0x22>
 801c826:	07da      	lsls	r2, r3, #31
 801c828:	d423      	bmi.n	801c872 <__lo0bits+0x56>
 801c82a:	0798      	lsls	r0, r3, #30
 801c82c:	bf49      	itett	mi
 801c82e:	085b      	lsrmi	r3, r3, #1
 801c830:	089b      	lsrpl	r3, r3, #2
 801c832:	2001      	movmi	r0, #1
 801c834:	600b      	strmi	r3, [r1, #0]
 801c836:	bf5c      	itt	pl
 801c838:	600b      	strpl	r3, [r1, #0]
 801c83a:	2002      	movpl	r0, #2
 801c83c:	4770      	bx	lr
 801c83e:	b298      	uxth	r0, r3
 801c840:	b9a8      	cbnz	r0, 801c86e <__lo0bits+0x52>
 801c842:	0c1b      	lsrs	r3, r3, #16
 801c844:	2010      	movs	r0, #16
 801c846:	b2da      	uxtb	r2, r3
 801c848:	b90a      	cbnz	r2, 801c84e <__lo0bits+0x32>
 801c84a:	3008      	adds	r0, #8
 801c84c:	0a1b      	lsrs	r3, r3, #8
 801c84e:	071a      	lsls	r2, r3, #28
 801c850:	bf04      	itt	eq
 801c852:	091b      	lsreq	r3, r3, #4
 801c854:	3004      	addeq	r0, #4
 801c856:	079a      	lsls	r2, r3, #30
 801c858:	bf04      	itt	eq
 801c85a:	089b      	lsreq	r3, r3, #2
 801c85c:	3002      	addeq	r0, #2
 801c85e:	07da      	lsls	r2, r3, #31
 801c860:	d403      	bmi.n	801c86a <__lo0bits+0x4e>
 801c862:	085b      	lsrs	r3, r3, #1
 801c864:	f100 0001 	add.w	r0, r0, #1
 801c868:	d005      	beq.n	801c876 <__lo0bits+0x5a>
 801c86a:	600b      	str	r3, [r1, #0]
 801c86c:	4770      	bx	lr
 801c86e:	4610      	mov	r0, r2
 801c870:	e7e9      	b.n	801c846 <__lo0bits+0x2a>
 801c872:	2000      	movs	r0, #0
 801c874:	4770      	bx	lr
 801c876:	2020      	movs	r0, #32
 801c878:	4770      	bx	lr
	...

0801c87c <__i2b>:
 801c87c:	b510      	push	{r4, lr}
 801c87e:	460c      	mov	r4, r1
 801c880:	2101      	movs	r1, #1
 801c882:	f7ff ff03 	bl	801c68c <_Balloc>
 801c886:	4602      	mov	r2, r0
 801c888:	b928      	cbnz	r0, 801c896 <__i2b+0x1a>
 801c88a:	4b05      	ldr	r3, [pc, #20]	; (801c8a0 <__i2b+0x24>)
 801c88c:	4805      	ldr	r0, [pc, #20]	; (801c8a4 <__i2b+0x28>)
 801c88e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c892:	f7fd fdab 	bl	801a3ec <__assert_func>
 801c896:	2301      	movs	r3, #1
 801c898:	6144      	str	r4, [r0, #20]
 801c89a:	6103      	str	r3, [r0, #16]
 801c89c:	bd10      	pop	{r4, pc}
 801c89e:	bf00      	nop
 801c8a0:	0801f5b5 	.word	0x0801f5b5
 801c8a4:	0801f632 	.word	0x0801f632

0801c8a8 <__multiply>:
 801c8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8ac:	4691      	mov	r9, r2
 801c8ae:	690a      	ldr	r2, [r1, #16]
 801c8b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c8b4:	429a      	cmp	r2, r3
 801c8b6:	bfb8      	it	lt
 801c8b8:	460b      	movlt	r3, r1
 801c8ba:	460c      	mov	r4, r1
 801c8bc:	bfbc      	itt	lt
 801c8be:	464c      	movlt	r4, r9
 801c8c0:	4699      	movlt	r9, r3
 801c8c2:	6927      	ldr	r7, [r4, #16]
 801c8c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c8c8:	68a3      	ldr	r3, [r4, #8]
 801c8ca:	6861      	ldr	r1, [r4, #4]
 801c8cc:	eb07 060a 	add.w	r6, r7, sl
 801c8d0:	42b3      	cmp	r3, r6
 801c8d2:	b085      	sub	sp, #20
 801c8d4:	bfb8      	it	lt
 801c8d6:	3101      	addlt	r1, #1
 801c8d8:	f7ff fed8 	bl	801c68c <_Balloc>
 801c8dc:	b930      	cbnz	r0, 801c8ec <__multiply+0x44>
 801c8de:	4602      	mov	r2, r0
 801c8e0:	4b44      	ldr	r3, [pc, #272]	; (801c9f4 <__multiply+0x14c>)
 801c8e2:	4845      	ldr	r0, [pc, #276]	; (801c9f8 <__multiply+0x150>)
 801c8e4:	f240 115d 	movw	r1, #349	; 0x15d
 801c8e8:	f7fd fd80 	bl	801a3ec <__assert_func>
 801c8ec:	f100 0514 	add.w	r5, r0, #20
 801c8f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c8f4:	462b      	mov	r3, r5
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	4543      	cmp	r3, r8
 801c8fa:	d321      	bcc.n	801c940 <__multiply+0x98>
 801c8fc:	f104 0314 	add.w	r3, r4, #20
 801c900:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c904:	f109 0314 	add.w	r3, r9, #20
 801c908:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c90c:	9202      	str	r2, [sp, #8]
 801c90e:	1b3a      	subs	r2, r7, r4
 801c910:	3a15      	subs	r2, #21
 801c912:	f022 0203 	bic.w	r2, r2, #3
 801c916:	3204      	adds	r2, #4
 801c918:	f104 0115 	add.w	r1, r4, #21
 801c91c:	428f      	cmp	r7, r1
 801c91e:	bf38      	it	cc
 801c920:	2204      	movcc	r2, #4
 801c922:	9201      	str	r2, [sp, #4]
 801c924:	9a02      	ldr	r2, [sp, #8]
 801c926:	9303      	str	r3, [sp, #12]
 801c928:	429a      	cmp	r2, r3
 801c92a:	d80c      	bhi.n	801c946 <__multiply+0x9e>
 801c92c:	2e00      	cmp	r6, #0
 801c92e:	dd03      	ble.n	801c938 <__multiply+0x90>
 801c930:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c934:	2b00      	cmp	r3, #0
 801c936:	d05a      	beq.n	801c9ee <__multiply+0x146>
 801c938:	6106      	str	r6, [r0, #16]
 801c93a:	b005      	add	sp, #20
 801c93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c940:	f843 2b04 	str.w	r2, [r3], #4
 801c944:	e7d8      	b.n	801c8f8 <__multiply+0x50>
 801c946:	f8b3 a000 	ldrh.w	sl, [r3]
 801c94a:	f1ba 0f00 	cmp.w	sl, #0
 801c94e:	d024      	beq.n	801c99a <__multiply+0xf2>
 801c950:	f104 0e14 	add.w	lr, r4, #20
 801c954:	46a9      	mov	r9, r5
 801c956:	f04f 0c00 	mov.w	ip, #0
 801c95a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c95e:	f8d9 1000 	ldr.w	r1, [r9]
 801c962:	fa1f fb82 	uxth.w	fp, r2
 801c966:	b289      	uxth	r1, r1
 801c968:	fb0a 110b 	mla	r1, sl, fp, r1
 801c96c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c970:	f8d9 2000 	ldr.w	r2, [r9]
 801c974:	4461      	add	r1, ip
 801c976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c97a:	fb0a c20b 	mla	r2, sl, fp, ip
 801c97e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c982:	b289      	uxth	r1, r1
 801c984:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c988:	4577      	cmp	r7, lr
 801c98a:	f849 1b04 	str.w	r1, [r9], #4
 801c98e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c992:	d8e2      	bhi.n	801c95a <__multiply+0xb2>
 801c994:	9a01      	ldr	r2, [sp, #4]
 801c996:	f845 c002 	str.w	ip, [r5, r2]
 801c99a:	9a03      	ldr	r2, [sp, #12]
 801c99c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c9a0:	3304      	adds	r3, #4
 801c9a2:	f1b9 0f00 	cmp.w	r9, #0
 801c9a6:	d020      	beq.n	801c9ea <__multiply+0x142>
 801c9a8:	6829      	ldr	r1, [r5, #0]
 801c9aa:	f104 0c14 	add.w	ip, r4, #20
 801c9ae:	46ae      	mov	lr, r5
 801c9b0:	f04f 0a00 	mov.w	sl, #0
 801c9b4:	f8bc b000 	ldrh.w	fp, [ip]
 801c9b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c9bc:	fb09 220b 	mla	r2, r9, fp, r2
 801c9c0:	4492      	add	sl, r2
 801c9c2:	b289      	uxth	r1, r1
 801c9c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c9c8:	f84e 1b04 	str.w	r1, [lr], #4
 801c9cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c9d0:	f8be 1000 	ldrh.w	r1, [lr]
 801c9d4:	0c12      	lsrs	r2, r2, #16
 801c9d6:	fb09 1102 	mla	r1, r9, r2, r1
 801c9da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c9de:	4567      	cmp	r7, ip
 801c9e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c9e4:	d8e6      	bhi.n	801c9b4 <__multiply+0x10c>
 801c9e6:	9a01      	ldr	r2, [sp, #4]
 801c9e8:	50a9      	str	r1, [r5, r2]
 801c9ea:	3504      	adds	r5, #4
 801c9ec:	e79a      	b.n	801c924 <__multiply+0x7c>
 801c9ee:	3e01      	subs	r6, #1
 801c9f0:	e79c      	b.n	801c92c <__multiply+0x84>
 801c9f2:	bf00      	nop
 801c9f4:	0801f5b5 	.word	0x0801f5b5
 801c9f8:	0801f632 	.word	0x0801f632

0801c9fc <__pow5mult>:
 801c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca00:	4615      	mov	r5, r2
 801ca02:	f012 0203 	ands.w	r2, r2, #3
 801ca06:	4606      	mov	r6, r0
 801ca08:	460f      	mov	r7, r1
 801ca0a:	d007      	beq.n	801ca1c <__pow5mult+0x20>
 801ca0c:	4c25      	ldr	r4, [pc, #148]	; (801caa4 <__pow5mult+0xa8>)
 801ca0e:	3a01      	subs	r2, #1
 801ca10:	2300      	movs	r3, #0
 801ca12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ca16:	f7ff fe9b 	bl	801c750 <__multadd>
 801ca1a:	4607      	mov	r7, r0
 801ca1c:	10ad      	asrs	r5, r5, #2
 801ca1e:	d03d      	beq.n	801ca9c <__pow5mult+0xa0>
 801ca20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ca22:	b97c      	cbnz	r4, 801ca44 <__pow5mult+0x48>
 801ca24:	2010      	movs	r0, #16
 801ca26:	f7fd fd47 	bl	801a4b8 <malloc>
 801ca2a:	4602      	mov	r2, r0
 801ca2c:	6270      	str	r0, [r6, #36]	; 0x24
 801ca2e:	b928      	cbnz	r0, 801ca3c <__pow5mult+0x40>
 801ca30:	4b1d      	ldr	r3, [pc, #116]	; (801caa8 <__pow5mult+0xac>)
 801ca32:	481e      	ldr	r0, [pc, #120]	; (801caac <__pow5mult+0xb0>)
 801ca34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ca38:	f7fd fcd8 	bl	801a3ec <__assert_func>
 801ca3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ca40:	6004      	str	r4, [r0, #0]
 801ca42:	60c4      	str	r4, [r0, #12]
 801ca44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ca48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ca4c:	b94c      	cbnz	r4, 801ca62 <__pow5mult+0x66>
 801ca4e:	f240 2171 	movw	r1, #625	; 0x271
 801ca52:	4630      	mov	r0, r6
 801ca54:	f7ff ff12 	bl	801c87c <__i2b>
 801ca58:	2300      	movs	r3, #0
 801ca5a:	f8c8 0008 	str.w	r0, [r8, #8]
 801ca5e:	4604      	mov	r4, r0
 801ca60:	6003      	str	r3, [r0, #0]
 801ca62:	f04f 0900 	mov.w	r9, #0
 801ca66:	07eb      	lsls	r3, r5, #31
 801ca68:	d50a      	bpl.n	801ca80 <__pow5mult+0x84>
 801ca6a:	4639      	mov	r1, r7
 801ca6c:	4622      	mov	r2, r4
 801ca6e:	4630      	mov	r0, r6
 801ca70:	f7ff ff1a 	bl	801c8a8 <__multiply>
 801ca74:	4639      	mov	r1, r7
 801ca76:	4680      	mov	r8, r0
 801ca78:	4630      	mov	r0, r6
 801ca7a:	f7ff fe47 	bl	801c70c <_Bfree>
 801ca7e:	4647      	mov	r7, r8
 801ca80:	106d      	asrs	r5, r5, #1
 801ca82:	d00b      	beq.n	801ca9c <__pow5mult+0xa0>
 801ca84:	6820      	ldr	r0, [r4, #0]
 801ca86:	b938      	cbnz	r0, 801ca98 <__pow5mult+0x9c>
 801ca88:	4622      	mov	r2, r4
 801ca8a:	4621      	mov	r1, r4
 801ca8c:	4630      	mov	r0, r6
 801ca8e:	f7ff ff0b 	bl	801c8a8 <__multiply>
 801ca92:	6020      	str	r0, [r4, #0]
 801ca94:	f8c0 9000 	str.w	r9, [r0]
 801ca98:	4604      	mov	r4, r0
 801ca9a:	e7e4      	b.n	801ca66 <__pow5mult+0x6a>
 801ca9c:	4638      	mov	r0, r7
 801ca9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801caa2:	bf00      	nop
 801caa4:	0801f780 	.word	0x0801f780
 801caa8:	0801f543 	.word	0x0801f543
 801caac:	0801f632 	.word	0x0801f632

0801cab0 <__lshift>:
 801cab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cab4:	460c      	mov	r4, r1
 801cab6:	6849      	ldr	r1, [r1, #4]
 801cab8:	6923      	ldr	r3, [r4, #16]
 801caba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cabe:	68a3      	ldr	r3, [r4, #8]
 801cac0:	4607      	mov	r7, r0
 801cac2:	4691      	mov	r9, r2
 801cac4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cac8:	f108 0601 	add.w	r6, r8, #1
 801cacc:	42b3      	cmp	r3, r6
 801cace:	db0b      	blt.n	801cae8 <__lshift+0x38>
 801cad0:	4638      	mov	r0, r7
 801cad2:	f7ff fddb 	bl	801c68c <_Balloc>
 801cad6:	4605      	mov	r5, r0
 801cad8:	b948      	cbnz	r0, 801caee <__lshift+0x3e>
 801cada:	4602      	mov	r2, r0
 801cadc:	4b2a      	ldr	r3, [pc, #168]	; (801cb88 <__lshift+0xd8>)
 801cade:	482b      	ldr	r0, [pc, #172]	; (801cb8c <__lshift+0xdc>)
 801cae0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cae4:	f7fd fc82 	bl	801a3ec <__assert_func>
 801cae8:	3101      	adds	r1, #1
 801caea:	005b      	lsls	r3, r3, #1
 801caec:	e7ee      	b.n	801cacc <__lshift+0x1c>
 801caee:	2300      	movs	r3, #0
 801caf0:	f100 0114 	add.w	r1, r0, #20
 801caf4:	f100 0210 	add.w	r2, r0, #16
 801caf8:	4618      	mov	r0, r3
 801cafa:	4553      	cmp	r3, sl
 801cafc:	db37      	blt.n	801cb6e <__lshift+0xbe>
 801cafe:	6920      	ldr	r0, [r4, #16]
 801cb00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cb04:	f104 0314 	add.w	r3, r4, #20
 801cb08:	f019 091f 	ands.w	r9, r9, #31
 801cb0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cb10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cb14:	d02f      	beq.n	801cb76 <__lshift+0xc6>
 801cb16:	f1c9 0e20 	rsb	lr, r9, #32
 801cb1a:	468a      	mov	sl, r1
 801cb1c:	f04f 0c00 	mov.w	ip, #0
 801cb20:	681a      	ldr	r2, [r3, #0]
 801cb22:	fa02 f209 	lsl.w	r2, r2, r9
 801cb26:	ea42 020c 	orr.w	r2, r2, ip
 801cb2a:	f84a 2b04 	str.w	r2, [sl], #4
 801cb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb32:	4298      	cmp	r0, r3
 801cb34:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cb38:	d8f2      	bhi.n	801cb20 <__lshift+0x70>
 801cb3a:	1b03      	subs	r3, r0, r4
 801cb3c:	3b15      	subs	r3, #21
 801cb3e:	f023 0303 	bic.w	r3, r3, #3
 801cb42:	3304      	adds	r3, #4
 801cb44:	f104 0215 	add.w	r2, r4, #21
 801cb48:	4290      	cmp	r0, r2
 801cb4a:	bf38      	it	cc
 801cb4c:	2304      	movcc	r3, #4
 801cb4e:	f841 c003 	str.w	ip, [r1, r3]
 801cb52:	f1bc 0f00 	cmp.w	ip, #0
 801cb56:	d001      	beq.n	801cb5c <__lshift+0xac>
 801cb58:	f108 0602 	add.w	r6, r8, #2
 801cb5c:	3e01      	subs	r6, #1
 801cb5e:	4638      	mov	r0, r7
 801cb60:	612e      	str	r6, [r5, #16]
 801cb62:	4621      	mov	r1, r4
 801cb64:	f7ff fdd2 	bl	801c70c <_Bfree>
 801cb68:	4628      	mov	r0, r5
 801cb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb6e:	f842 0f04 	str.w	r0, [r2, #4]!
 801cb72:	3301      	adds	r3, #1
 801cb74:	e7c1      	b.n	801cafa <__lshift+0x4a>
 801cb76:	3904      	subs	r1, #4
 801cb78:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb7c:	f841 2f04 	str.w	r2, [r1, #4]!
 801cb80:	4298      	cmp	r0, r3
 801cb82:	d8f9      	bhi.n	801cb78 <__lshift+0xc8>
 801cb84:	e7ea      	b.n	801cb5c <__lshift+0xac>
 801cb86:	bf00      	nop
 801cb88:	0801f5b5 	.word	0x0801f5b5
 801cb8c:	0801f632 	.word	0x0801f632

0801cb90 <__mcmp>:
 801cb90:	b530      	push	{r4, r5, lr}
 801cb92:	6902      	ldr	r2, [r0, #16]
 801cb94:	690c      	ldr	r4, [r1, #16]
 801cb96:	1b12      	subs	r2, r2, r4
 801cb98:	d10e      	bne.n	801cbb8 <__mcmp+0x28>
 801cb9a:	f100 0314 	add.w	r3, r0, #20
 801cb9e:	3114      	adds	r1, #20
 801cba0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cba4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cba8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cbac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cbb0:	42a5      	cmp	r5, r4
 801cbb2:	d003      	beq.n	801cbbc <__mcmp+0x2c>
 801cbb4:	d305      	bcc.n	801cbc2 <__mcmp+0x32>
 801cbb6:	2201      	movs	r2, #1
 801cbb8:	4610      	mov	r0, r2
 801cbba:	bd30      	pop	{r4, r5, pc}
 801cbbc:	4283      	cmp	r3, r0
 801cbbe:	d3f3      	bcc.n	801cba8 <__mcmp+0x18>
 801cbc0:	e7fa      	b.n	801cbb8 <__mcmp+0x28>
 801cbc2:	f04f 32ff 	mov.w	r2, #4294967295
 801cbc6:	e7f7      	b.n	801cbb8 <__mcmp+0x28>

0801cbc8 <__mdiff>:
 801cbc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbcc:	460c      	mov	r4, r1
 801cbce:	4606      	mov	r6, r0
 801cbd0:	4611      	mov	r1, r2
 801cbd2:	4620      	mov	r0, r4
 801cbd4:	4690      	mov	r8, r2
 801cbd6:	f7ff ffdb 	bl	801cb90 <__mcmp>
 801cbda:	1e05      	subs	r5, r0, #0
 801cbdc:	d110      	bne.n	801cc00 <__mdiff+0x38>
 801cbde:	4629      	mov	r1, r5
 801cbe0:	4630      	mov	r0, r6
 801cbe2:	f7ff fd53 	bl	801c68c <_Balloc>
 801cbe6:	b930      	cbnz	r0, 801cbf6 <__mdiff+0x2e>
 801cbe8:	4b3a      	ldr	r3, [pc, #232]	; (801ccd4 <__mdiff+0x10c>)
 801cbea:	4602      	mov	r2, r0
 801cbec:	f240 2132 	movw	r1, #562	; 0x232
 801cbf0:	4839      	ldr	r0, [pc, #228]	; (801ccd8 <__mdiff+0x110>)
 801cbf2:	f7fd fbfb 	bl	801a3ec <__assert_func>
 801cbf6:	2301      	movs	r3, #1
 801cbf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cbfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc00:	bfa4      	itt	ge
 801cc02:	4643      	movge	r3, r8
 801cc04:	46a0      	movge	r8, r4
 801cc06:	4630      	mov	r0, r6
 801cc08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cc0c:	bfa6      	itte	ge
 801cc0e:	461c      	movge	r4, r3
 801cc10:	2500      	movge	r5, #0
 801cc12:	2501      	movlt	r5, #1
 801cc14:	f7ff fd3a 	bl	801c68c <_Balloc>
 801cc18:	b920      	cbnz	r0, 801cc24 <__mdiff+0x5c>
 801cc1a:	4b2e      	ldr	r3, [pc, #184]	; (801ccd4 <__mdiff+0x10c>)
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cc22:	e7e5      	b.n	801cbf0 <__mdiff+0x28>
 801cc24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cc28:	6926      	ldr	r6, [r4, #16]
 801cc2a:	60c5      	str	r5, [r0, #12]
 801cc2c:	f104 0914 	add.w	r9, r4, #20
 801cc30:	f108 0514 	add.w	r5, r8, #20
 801cc34:	f100 0e14 	add.w	lr, r0, #20
 801cc38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cc3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cc40:	f108 0210 	add.w	r2, r8, #16
 801cc44:	46f2      	mov	sl, lr
 801cc46:	2100      	movs	r1, #0
 801cc48:	f859 3b04 	ldr.w	r3, [r9], #4
 801cc4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cc50:	fa1f f883 	uxth.w	r8, r3
 801cc54:	fa11 f18b 	uxtah	r1, r1, fp
 801cc58:	0c1b      	lsrs	r3, r3, #16
 801cc5a:	eba1 0808 	sub.w	r8, r1, r8
 801cc5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cc62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cc66:	fa1f f888 	uxth.w	r8, r8
 801cc6a:	1419      	asrs	r1, r3, #16
 801cc6c:	454e      	cmp	r6, r9
 801cc6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cc72:	f84a 3b04 	str.w	r3, [sl], #4
 801cc76:	d8e7      	bhi.n	801cc48 <__mdiff+0x80>
 801cc78:	1b33      	subs	r3, r6, r4
 801cc7a:	3b15      	subs	r3, #21
 801cc7c:	f023 0303 	bic.w	r3, r3, #3
 801cc80:	3304      	adds	r3, #4
 801cc82:	3415      	adds	r4, #21
 801cc84:	42a6      	cmp	r6, r4
 801cc86:	bf38      	it	cc
 801cc88:	2304      	movcc	r3, #4
 801cc8a:	441d      	add	r5, r3
 801cc8c:	4473      	add	r3, lr
 801cc8e:	469e      	mov	lr, r3
 801cc90:	462e      	mov	r6, r5
 801cc92:	4566      	cmp	r6, ip
 801cc94:	d30e      	bcc.n	801ccb4 <__mdiff+0xec>
 801cc96:	f10c 0203 	add.w	r2, ip, #3
 801cc9a:	1b52      	subs	r2, r2, r5
 801cc9c:	f022 0203 	bic.w	r2, r2, #3
 801cca0:	3d03      	subs	r5, #3
 801cca2:	45ac      	cmp	ip, r5
 801cca4:	bf38      	it	cc
 801cca6:	2200      	movcc	r2, #0
 801cca8:	441a      	add	r2, r3
 801ccaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ccae:	b17b      	cbz	r3, 801ccd0 <__mdiff+0x108>
 801ccb0:	6107      	str	r7, [r0, #16]
 801ccb2:	e7a3      	b.n	801cbfc <__mdiff+0x34>
 801ccb4:	f856 8b04 	ldr.w	r8, [r6], #4
 801ccb8:	fa11 f288 	uxtah	r2, r1, r8
 801ccbc:	1414      	asrs	r4, r2, #16
 801ccbe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ccc2:	b292      	uxth	r2, r2
 801ccc4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ccc8:	f84e 2b04 	str.w	r2, [lr], #4
 801cccc:	1421      	asrs	r1, r4, #16
 801ccce:	e7e0      	b.n	801cc92 <__mdiff+0xca>
 801ccd0:	3f01      	subs	r7, #1
 801ccd2:	e7ea      	b.n	801ccaa <__mdiff+0xe2>
 801ccd4:	0801f5b5 	.word	0x0801f5b5
 801ccd8:	0801f632 	.word	0x0801f632

0801ccdc <__d2b>:
 801ccdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cce0:	4689      	mov	r9, r1
 801cce2:	2101      	movs	r1, #1
 801cce4:	ec57 6b10 	vmov	r6, r7, d0
 801cce8:	4690      	mov	r8, r2
 801ccea:	f7ff fccf 	bl	801c68c <_Balloc>
 801ccee:	4604      	mov	r4, r0
 801ccf0:	b930      	cbnz	r0, 801cd00 <__d2b+0x24>
 801ccf2:	4602      	mov	r2, r0
 801ccf4:	4b25      	ldr	r3, [pc, #148]	; (801cd8c <__d2b+0xb0>)
 801ccf6:	4826      	ldr	r0, [pc, #152]	; (801cd90 <__d2b+0xb4>)
 801ccf8:	f240 310a 	movw	r1, #778	; 0x30a
 801ccfc:	f7fd fb76 	bl	801a3ec <__assert_func>
 801cd00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cd04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cd08:	bb35      	cbnz	r5, 801cd58 <__d2b+0x7c>
 801cd0a:	2e00      	cmp	r6, #0
 801cd0c:	9301      	str	r3, [sp, #4]
 801cd0e:	d028      	beq.n	801cd62 <__d2b+0x86>
 801cd10:	4668      	mov	r0, sp
 801cd12:	9600      	str	r6, [sp, #0]
 801cd14:	f7ff fd82 	bl	801c81c <__lo0bits>
 801cd18:	9900      	ldr	r1, [sp, #0]
 801cd1a:	b300      	cbz	r0, 801cd5e <__d2b+0x82>
 801cd1c:	9a01      	ldr	r2, [sp, #4]
 801cd1e:	f1c0 0320 	rsb	r3, r0, #32
 801cd22:	fa02 f303 	lsl.w	r3, r2, r3
 801cd26:	430b      	orrs	r3, r1
 801cd28:	40c2      	lsrs	r2, r0
 801cd2a:	6163      	str	r3, [r4, #20]
 801cd2c:	9201      	str	r2, [sp, #4]
 801cd2e:	9b01      	ldr	r3, [sp, #4]
 801cd30:	61a3      	str	r3, [r4, #24]
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	bf14      	ite	ne
 801cd36:	2202      	movne	r2, #2
 801cd38:	2201      	moveq	r2, #1
 801cd3a:	6122      	str	r2, [r4, #16]
 801cd3c:	b1d5      	cbz	r5, 801cd74 <__d2b+0x98>
 801cd3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cd42:	4405      	add	r5, r0
 801cd44:	f8c9 5000 	str.w	r5, [r9]
 801cd48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cd4c:	f8c8 0000 	str.w	r0, [r8]
 801cd50:	4620      	mov	r0, r4
 801cd52:	b003      	add	sp, #12
 801cd54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cd5c:	e7d5      	b.n	801cd0a <__d2b+0x2e>
 801cd5e:	6161      	str	r1, [r4, #20]
 801cd60:	e7e5      	b.n	801cd2e <__d2b+0x52>
 801cd62:	a801      	add	r0, sp, #4
 801cd64:	f7ff fd5a 	bl	801c81c <__lo0bits>
 801cd68:	9b01      	ldr	r3, [sp, #4]
 801cd6a:	6163      	str	r3, [r4, #20]
 801cd6c:	2201      	movs	r2, #1
 801cd6e:	6122      	str	r2, [r4, #16]
 801cd70:	3020      	adds	r0, #32
 801cd72:	e7e3      	b.n	801cd3c <__d2b+0x60>
 801cd74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cd78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cd7c:	f8c9 0000 	str.w	r0, [r9]
 801cd80:	6918      	ldr	r0, [r3, #16]
 801cd82:	f7ff fd2b 	bl	801c7dc <__hi0bits>
 801cd86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cd8a:	e7df      	b.n	801cd4c <__d2b+0x70>
 801cd8c:	0801f5b5 	.word	0x0801f5b5
 801cd90:	0801f632 	.word	0x0801f632

0801cd94 <_realloc_r>:
 801cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd98:	4680      	mov	r8, r0
 801cd9a:	4614      	mov	r4, r2
 801cd9c:	460e      	mov	r6, r1
 801cd9e:	b921      	cbnz	r1, 801cdaa <_realloc_r+0x16>
 801cda0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cda4:	4611      	mov	r1, r2
 801cda6:	f7fd bc49 	b.w	801a63c <_malloc_r>
 801cdaa:	b92a      	cbnz	r2, 801cdb8 <_realloc_r+0x24>
 801cdac:	f7fd fbda 	bl	801a564 <_free_r>
 801cdb0:	4625      	mov	r5, r4
 801cdb2:	4628      	mov	r0, r5
 801cdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdb8:	f000 fa1c 	bl	801d1f4 <_malloc_usable_size_r>
 801cdbc:	4284      	cmp	r4, r0
 801cdbe:	4607      	mov	r7, r0
 801cdc0:	d802      	bhi.n	801cdc8 <_realloc_r+0x34>
 801cdc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cdc6:	d812      	bhi.n	801cdee <_realloc_r+0x5a>
 801cdc8:	4621      	mov	r1, r4
 801cdca:	4640      	mov	r0, r8
 801cdcc:	f7fd fc36 	bl	801a63c <_malloc_r>
 801cdd0:	4605      	mov	r5, r0
 801cdd2:	2800      	cmp	r0, #0
 801cdd4:	d0ed      	beq.n	801cdb2 <_realloc_r+0x1e>
 801cdd6:	42bc      	cmp	r4, r7
 801cdd8:	4622      	mov	r2, r4
 801cdda:	4631      	mov	r1, r6
 801cddc:	bf28      	it	cs
 801cdde:	463a      	movcs	r2, r7
 801cde0:	f7fd fb7a 	bl	801a4d8 <memcpy>
 801cde4:	4631      	mov	r1, r6
 801cde6:	4640      	mov	r0, r8
 801cde8:	f7fd fbbc 	bl	801a564 <_free_r>
 801cdec:	e7e1      	b.n	801cdb2 <_realloc_r+0x1e>
 801cdee:	4635      	mov	r5, r6
 801cdf0:	e7df      	b.n	801cdb2 <_realloc_r+0x1e>

0801cdf2 <__ssputs_r>:
 801cdf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdf6:	688e      	ldr	r6, [r1, #8]
 801cdf8:	429e      	cmp	r6, r3
 801cdfa:	4682      	mov	sl, r0
 801cdfc:	460c      	mov	r4, r1
 801cdfe:	4690      	mov	r8, r2
 801ce00:	461f      	mov	r7, r3
 801ce02:	d838      	bhi.n	801ce76 <__ssputs_r+0x84>
 801ce04:	898a      	ldrh	r2, [r1, #12]
 801ce06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ce0a:	d032      	beq.n	801ce72 <__ssputs_r+0x80>
 801ce0c:	6825      	ldr	r5, [r4, #0]
 801ce0e:	6909      	ldr	r1, [r1, #16]
 801ce10:	eba5 0901 	sub.w	r9, r5, r1
 801ce14:	6965      	ldr	r5, [r4, #20]
 801ce16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ce1e:	3301      	adds	r3, #1
 801ce20:	444b      	add	r3, r9
 801ce22:	106d      	asrs	r5, r5, #1
 801ce24:	429d      	cmp	r5, r3
 801ce26:	bf38      	it	cc
 801ce28:	461d      	movcc	r5, r3
 801ce2a:	0553      	lsls	r3, r2, #21
 801ce2c:	d531      	bpl.n	801ce92 <__ssputs_r+0xa0>
 801ce2e:	4629      	mov	r1, r5
 801ce30:	f7fd fc04 	bl	801a63c <_malloc_r>
 801ce34:	4606      	mov	r6, r0
 801ce36:	b950      	cbnz	r0, 801ce4e <__ssputs_r+0x5c>
 801ce38:	230c      	movs	r3, #12
 801ce3a:	f8ca 3000 	str.w	r3, [sl]
 801ce3e:	89a3      	ldrh	r3, [r4, #12]
 801ce40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce44:	81a3      	strh	r3, [r4, #12]
 801ce46:	f04f 30ff 	mov.w	r0, #4294967295
 801ce4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce4e:	6921      	ldr	r1, [r4, #16]
 801ce50:	464a      	mov	r2, r9
 801ce52:	f7fd fb41 	bl	801a4d8 <memcpy>
 801ce56:	89a3      	ldrh	r3, [r4, #12]
 801ce58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ce5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce60:	81a3      	strh	r3, [r4, #12]
 801ce62:	6126      	str	r6, [r4, #16]
 801ce64:	6165      	str	r5, [r4, #20]
 801ce66:	444e      	add	r6, r9
 801ce68:	eba5 0509 	sub.w	r5, r5, r9
 801ce6c:	6026      	str	r6, [r4, #0]
 801ce6e:	60a5      	str	r5, [r4, #8]
 801ce70:	463e      	mov	r6, r7
 801ce72:	42be      	cmp	r6, r7
 801ce74:	d900      	bls.n	801ce78 <__ssputs_r+0x86>
 801ce76:	463e      	mov	r6, r7
 801ce78:	6820      	ldr	r0, [r4, #0]
 801ce7a:	4632      	mov	r2, r6
 801ce7c:	4641      	mov	r1, r8
 801ce7e:	f7fd fb39 	bl	801a4f4 <memmove>
 801ce82:	68a3      	ldr	r3, [r4, #8]
 801ce84:	1b9b      	subs	r3, r3, r6
 801ce86:	60a3      	str	r3, [r4, #8]
 801ce88:	6823      	ldr	r3, [r4, #0]
 801ce8a:	4433      	add	r3, r6
 801ce8c:	6023      	str	r3, [r4, #0]
 801ce8e:	2000      	movs	r0, #0
 801ce90:	e7db      	b.n	801ce4a <__ssputs_r+0x58>
 801ce92:	462a      	mov	r2, r5
 801ce94:	f7ff ff7e 	bl	801cd94 <_realloc_r>
 801ce98:	4606      	mov	r6, r0
 801ce9a:	2800      	cmp	r0, #0
 801ce9c:	d1e1      	bne.n	801ce62 <__ssputs_r+0x70>
 801ce9e:	6921      	ldr	r1, [r4, #16]
 801cea0:	4650      	mov	r0, sl
 801cea2:	f7fd fb5f 	bl	801a564 <_free_r>
 801cea6:	e7c7      	b.n	801ce38 <__ssputs_r+0x46>

0801cea8 <_svfiprintf_r>:
 801cea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceac:	4698      	mov	r8, r3
 801ceae:	898b      	ldrh	r3, [r1, #12]
 801ceb0:	061b      	lsls	r3, r3, #24
 801ceb2:	b09d      	sub	sp, #116	; 0x74
 801ceb4:	4607      	mov	r7, r0
 801ceb6:	460d      	mov	r5, r1
 801ceb8:	4614      	mov	r4, r2
 801ceba:	d50e      	bpl.n	801ceda <_svfiprintf_r+0x32>
 801cebc:	690b      	ldr	r3, [r1, #16]
 801cebe:	b963      	cbnz	r3, 801ceda <_svfiprintf_r+0x32>
 801cec0:	2140      	movs	r1, #64	; 0x40
 801cec2:	f7fd fbbb 	bl	801a63c <_malloc_r>
 801cec6:	6028      	str	r0, [r5, #0]
 801cec8:	6128      	str	r0, [r5, #16]
 801ceca:	b920      	cbnz	r0, 801ced6 <_svfiprintf_r+0x2e>
 801cecc:	230c      	movs	r3, #12
 801cece:	603b      	str	r3, [r7, #0]
 801ced0:	f04f 30ff 	mov.w	r0, #4294967295
 801ced4:	e0d1      	b.n	801d07a <_svfiprintf_r+0x1d2>
 801ced6:	2340      	movs	r3, #64	; 0x40
 801ced8:	616b      	str	r3, [r5, #20]
 801ceda:	2300      	movs	r3, #0
 801cedc:	9309      	str	r3, [sp, #36]	; 0x24
 801cede:	2320      	movs	r3, #32
 801cee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cee4:	f8cd 800c 	str.w	r8, [sp, #12]
 801cee8:	2330      	movs	r3, #48	; 0x30
 801ceea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d094 <_svfiprintf_r+0x1ec>
 801ceee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cef2:	f04f 0901 	mov.w	r9, #1
 801cef6:	4623      	mov	r3, r4
 801cef8:	469a      	mov	sl, r3
 801cefa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cefe:	b10a      	cbz	r2, 801cf04 <_svfiprintf_r+0x5c>
 801cf00:	2a25      	cmp	r2, #37	; 0x25
 801cf02:	d1f9      	bne.n	801cef8 <_svfiprintf_r+0x50>
 801cf04:	ebba 0b04 	subs.w	fp, sl, r4
 801cf08:	d00b      	beq.n	801cf22 <_svfiprintf_r+0x7a>
 801cf0a:	465b      	mov	r3, fp
 801cf0c:	4622      	mov	r2, r4
 801cf0e:	4629      	mov	r1, r5
 801cf10:	4638      	mov	r0, r7
 801cf12:	f7ff ff6e 	bl	801cdf2 <__ssputs_r>
 801cf16:	3001      	adds	r0, #1
 801cf18:	f000 80aa 	beq.w	801d070 <_svfiprintf_r+0x1c8>
 801cf1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cf1e:	445a      	add	r2, fp
 801cf20:	9209      	str	r2, [sp, #36]	; 0x24
 801cf22:	f89a 3000 	ldrb.w	r3, [sl]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	f000 80a2 	beq.w	801d070 <_svfiprintf_r+0x1c8>
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	f04f 32ff 	mov.w	r2, #4294967295
 801cf32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cf36:	f10a 0a01 	add.w	sl, sl, #1
 801cf3a:	9304      	str	r3, [sp, #16]
 801cf3c:	9307      	str	r3, [sp, #28]
 801cf3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cf42:	931a      	str	r3, [sp, #104]	; 0x68
 801cf44:	4654      	mov	r4, sl
 801cf46:	2205      	movs	r2, #5
 801cf48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf4c:	4851      	ldr	r0, [pc, #324]	; (801d094 <_svfiprintf_r+0x1ec>)
 801cf4e:	f7e3 f93f 	bl	80001d0 <memchr>
 801cf52:	9a04      	ldr	r2, [sp, #16]
 801cf54:	b9d8      	cbnz	r0, 801cf8e <_svfiprintf_r+0xe6>
 801cf56:	06d0      	lsls	r0, r2, #27
 801cf58:	bf44      	itt	mi
 801cf5a:	2320      	movmi	r3, #32
 801cf5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf60:	0711      	lsls	r1, r2, #28
 801cf62:	bf44      	itt	mi
 801cf64:	232b      	movmi	r3, #43	; 0x2b
 801cf66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf6a:	f89a 3000 	ldrb.w	r3, [sl]
 801cf6e:	2b2a      	cmp	r3, #42	; 0x2a
 801cf70:	d015      	beq.n	801cf9e <_svfiprintf_r+0xf6>
 801cf72:	9a07      	ldr	r2, [sp, #28]
 801cf74:	4654      	mov	r4, sl
 801cf76:	2000      	movs	r0, #0
 801cf78:	f04f 0c0a 	mov.w	ip, #10
 801cf7c:	4621      	mov	r1, r4
 801cf7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf82:	3b30      	subs	r3, #48	; 0x30
 801cf84:	2b09      	cmp	r3, #9
 801cf86:	d94e      	bls.n	801d026 <_svfiprintf_r+0x17e>
 801cf88:	b1b0      	cbz	r0, 801cfb8 <_svfiprintf_r+0x110>
 801cf8a:	9207      	str	r2, [sp, #28]
 801cf8c:	e014      	b.n	801cfb8 <_svfiprintf_r+0x110>
 801cf8e:	eba0 0308 	sub.w	r3, r0, r8
 801cf92:	fa09 f303 	lsl.w	r3, r9, r3
 801cf96:	4313      	orrs	r3, r2
 801cf98:	9304      	str	r3, [sp, #16]
 801cf9a:	46a2      	mov	sl, r4
 801cf9c:	e7d2      	b.n	801cf44 <_svfiprintf_r+0x9c>
 801cf9e:	9b03      	ldr	r3, [sp, #12]
 801cfa0:	1d19      	adds	r1, r3, #4
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	9103      	str	r1, [sp, #12]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	bfbb      	ittet	lt
 801cfaa:	425b      	neglt	r3, r3
 801cfac:	f042 0202 	orrlt.w	r2, r2, #2
 801cfb0:	9307      	strge	r3, [sp, #28]
 801cfb2:	9307      	strlt	r3, [sp, #28]
 801cfb4:	bfb8      	it	lt
 801cfb6:	9204      	strlt	r2, [sp, #16]
 801cfb8:	7823      	ldrb	r3, [r4, #0]
 801cfba:	2b2e      	cmp	r3, #46	; 0x2e
 801cfbc:	d10c      	bne.n	801cfd8 <_svfiprintf_r+0x130>
 801cfbe:	7863      	ldrb	r3, [r4, #1]
 801cfc0:	2b2a      	cmp	r3, #42	; 0x2a
 801cfc2:	d135      	bne.n	801d030 <_svfiprintf_r+0x188>
 801cfc4:	9b03      	ldr	r3, [sp, #12]
 801cfc6:	1d1a      	adds	r2, r3, #4
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	9203      	str	r2, [sp, #12]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	bfb8      	it	lt
 801cfd0:	f04f 33ff 	movlt.w	r3, #4294967295
 801cfd4:	3402      	adds	r4, #2
 801cfd6:	9305      	str	r3, [sp, #20]
 801cfd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d0a4 <_svfiprintf_r+0x1fc>
 801cfdc:	7821      	ldrb	r1, [r4, #0]
 801cfde:	2203      	movs	r2, #3
 801cfe0:	4650      	mov	r0, sl
 801cfe2:	f7e3 f8f5 	bl	80001d0 <memchr>
 801cfe6:	b140      	cbz	r0, 801cffa <_svfiprintf_r+0x152>
 801cfe8:	2340      	movs	r3, #64	; 0x40
 801cfea:	eba0 000a 	sub.w	r0, r0, sl
 801cfee:	fa03 f000 	lsl.w	r0, r3, r0
 801cff2:	9b04      	ldr	r3, [sp, #16]
 801cff4:	4303      	orrs	r3, r0
 801cff6:	3401      	adds	r4, #1
 801cff8:	9304      	str	r3, [sp, #16]
 801cffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cffe:	4826      	ldr	r0, [pc, #152]	; (801d098 <_svfiprintf_r+0x1f0>)
 801d000:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d004:	2206      	movs	r2, #6
 801d006:	f7e3 f8e3 	bl	80001d0 <memchr>
 801d00a:	2800      	cmp	r0, #0
 801d00c:	d038      	beq.n	801d080 <_svfiprintf_r+0x1d8>
 801d00e:	4b23      	ldr	r3, [pc, #140]	; (801d09c <_svfiprintf_r+0x1f4>)
 801d010:	bb1b      	cbnz	r3, 801d05a <_svfiprintf_r+0x1b2>
 801d012:	9b03      	ldr	r3, [sp, #12]
 801d014:	3307      	adds	r3, #7
 801d016:	f023 0307 	bic.w	r3, r3, #7
 801d01a:	3308      	adds	r3, #8
 801d01c:	9303      	str	r3, [sp, #12]
 801d01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d020:	4433      	add	r3, r6
 801d022:	9309      	str	r3, [sp, #36]	; 0x24
 801d024:	e767      	b.n	801cef6 <_svfiprintf_r+0x4e>
 801d026:	fb0c 3202 	mla	r2, ip, r2, r3
 801d02a:	460c      	mov	r4, r1
 801d02c:	2001      	movs	r0, #1
 801d02e:	e7a5      	b.n	801cf7c <_svfiprintf_r+0xd4>
 801d030:	2300      	movs	r3, #0
 801d032:	3401      	adds	r4, #1
 801d034:	9305      	str	r3, [sp, #20]
 801d036:	4619      	mov	r1, r3
 801d038:	f04f 0c0a 	mov.w	ip, #10
 801d03c:	4620      	mov	r0, r4
 801d03e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d042:	3a30      	subs	r2, #48	; 0x30
 801d044:	2a09      	cmp	r2, #9
 801d046:	d903      	bls.n	801d050 <_svfiprintf_r+0x1a8>
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d0c5      	beq.n	801cfd8 <_svfiprintf_r+0x130>
 801d04c:	9105      	str	r1, [sp, #20]
 801d04e:	e7c3      	b.n	801cfd8 <_svfiprintf_r+0x130>
 801d050:	fb0c 2101 	mla	r1, ip, r1, r2
 801d054:	4604      	mov	r4, r0
 801d056:	2301      	movs	r3, #1
 801d058:	e7f0      	b.n	801d03c <_svfiprintf_r+0x194>
 801d05a:	ab03      	add	r3, sp, #12
 801d05c:	9300      	str	r3, [sp, #0]
 801d05e:	462a      	mov	r2, r5
 801d060:	4b0f      	ldr	r3, [pc, #60]	; (801d0a0 <_svfiprintf_r+0x1f8>)
 801d062:	a904      	add	r1, sp, #16
 801d064:	4638      	mov	r0, r7
 801d066:	f7fd fd57 	bl	801ab18 <_printf_float>
 801d06a:	1c42      	adds	r2, r0, #1
 801d06c:	4606      	mov	r6, r0
 801d06e:	d1d6      	bne.n	801d01e <_svfiprintf_r+0x176>
 801d070:	89ab      	ldrh	r3, [r5, #12]
 801d072:	065b      	lsls	r3, r3, #25
 801d074:	f53f af2c 	bmi.w	801ced0 <_svfiprintf_r+0x28>
 801d078:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d07a:	b01d      	add	sp, #116	; 0x74
 801d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d080:	ab03      	add	r3, sp, #12
 801d082:	9300      	str	r3, [sp, #0]
 801d084:	462a      	mov	r2, r5
 801d086:	4b06      	ldr	r3, [pc, #24]	; (801d0a0 <_svfiprintf_r+0x1f8>)
 801d088:	a904      	add	r1, sp, #16
 801d08a:	4638      	mov	r0, r7
 801d08c:	f7fd ffe8 	bl	801b060 <_printf_i>
 801d090:	e7eb      	b.n	801d06a <_svfiprintf_r+0x1c2>
 801d092:	bf00      	nop
 801d094:	0801f3f0 	.word	0x0801f3f0
 801d098:	0801f3fa 	.word	0x0801f3fa
 801d09c:	0801ab19 	.word	0x0801ab19
 801d0a0:	0801cdf3 	.word	0x0801cdf3
 801d0a4:	0801f3f6 	.word	0x0801f3f6

0801d0a8 <__sread>:
 801d0a8:	b510      	push	{r4, lr}
 801d0aa:	460c      	mov	r4, r1
 801d0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0b0:	f000 f8a8 	bl	801d204 <_read_r>
 801d0b4:	2800      	cmp	r0, #0
 801d0b6:	bfab      	itete	ge
 801d0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d0ba:	89a3      	ldrhlt	r3, [r4, #12]
 801d0bc:	181b      	addge	r3, r3, r0
 801d0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d0c2:	bfac      	ite	ge
 801d0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801d0c6:	81a3      	strhlt	r3, [r4, #12]
 801d0c8:	bd10      	pop	{r4, pc}

0801d0ca <__swrite>:
 801d0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0ce:	461f      	mov	r7, r3
 801d0d0:	898b      	ldrh	r3, [r1, #12]
 801d0d2:	05db      	lsls	r3, r3, #23
 801d0d4:	4605      	mov	r5, r0
 801d0d6:	460c      	mov	r4, r1
 801d0d8:	4616      	mov	r6, r2
 801d0da:	d505      	bpl.n	801d0e8 <__swrite+0x1e>
 801d0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0e0:	2302      	movs	r3, #2
 801d0e2:	2200      	movs	r2, #0
 801d0e4:	f000 f874 	bl	801d1d0 <_lseek_r>
 801d0e8:	89a3      	ldrh	r3, [r4, #12]
 801d0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d0f2:	81a3      	strh	r3, [r4, #12]
 801d0f4:	4632      	mov	r2, r6
 801d0f6:	463b      	mov	r3, r7
 801d0f8:	4628      	mov	r0, r5
 801d0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d0fe:	f000 b823 	b.w	801d148 <_write_r>

0801d102 <__sseek>:
 801d102:	b510      	push	{r4, lr}
 801d104:	460c      	mov	r4, r1
 801d106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d10a:	f000 f861 	bl	801d1d0 <_lseek_r>
 801d10e:	1c43      	adds	r3, r0, #1
 801d110:	89a3      	ldrh	r3, [r4, #12]
 801d112:	bf15      	itete	ne
 801d114:	6560      	strne	r0, [r4, #84]	; 0x54
 801d116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d11e:	81a3      	strheq	r3, [r4, #12]
 801d120:	bf18      	it	ne
 801d122:	81a3      	strhne	r3, [r4, #12]
 801d124:	bd10      	pop	{r4, pc}

0801d126 <__sclose>:
 801d126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d12a:	f000 b81f 	b.w	801d16c <_close_r>

0801d12e <__ascii_wctomb>:
 801d12e:	b149      	cbz	r1, 801d144 <__ascii_wctomb+0x16>
 801d130:	2aff      	cmp	r2, #255	; 0xff
 801d132:	bf85      	ittet	hi
 801d134:	238a      	movhi	r3, #138	; 0x8a
 801d136:	6003      	strhi	r3, [r0, #0]
 801d138:	700a      	strbls	r2, [r1, #0]
 801d13a:	f04f 30ff 	movhi.w	r0, #4294967295
 801d13e:	bf98      	it	ls
 801d140:	2001      	movls	r0, #1
 801d142:	4770      	bx	lr
 801d144:	4608      	mov	r0, r1
 801d146:	4770      	bx	lr

0801d148 <_write_r>:
 801d148:	b538      	push	{r3, r4, r5, lr}
 801d14a:	4d07      	ldr	r5, [pc, #28]	; (801d168 <_write_r+0x20>)
 801d14c:	4604      	mov	r4, r0
 801d14e:	4608      	mov	r0, r1
 801d150:	4611      	mov	r1, r2
 801d152:	2200      	movs	r2, #0
 801d154:	602a      	str	r2, [r5, #0]
 801d156:	461a      	mov	r2, r3
 801d158:	f7e8 f89f 	bl	800529a <_write>
 801d15c:	1c43      	adds	r3, r0, #1
 801d15e:	d102      	bne.n	801d166 <_write_r+0x1e>
 801d160:	682b      	ldr	r3, [r5, #0]
 801d162:	b103      	cbz	r3, 801d166 <_write_r+0x1e>
 801d164:	6023      	str	r3, [r4, #0]
 801d166:	bd38      	pop	{r3, r4, r5, pc}
 801d168:	20004c98 	.word	0x20004c98

0801d16c <_close_r>:
 801d16c:	b538      	push	{r3, r4, r5, lr}
 801d16e:	4d06      	ldr	r5, [pc, #24]	; (801d188 <_close_r+0x1c>)
 801d170:	2300      	movs	r3, #0
 801d172:	4604      	mov	r4, r0
 801d174:	4608      	mov	r0, r1
 801d176:	602b      	str	r3, [r5, #0]
 801d178:	f7e8 f8ab 	bl	80052d2 <_close>
 801d17c:	1c43      	adds	r3, r0, #1
 801d17e:	d102      	bne.n	801d186 <_close_r+0x1a>
 801d180:	682b      	ldr	r3, [r5, #0]
 801d182:	b103      	cbz	r3, 801d186 <_close_r+0x1a>
 801d184:	6023      	str	r3, [r4, #0]
 801d186:	bd38      	pop	{r3, r4, r5, pc}
 801d188:	20004c98 	.word	0x20004c98

0801d18c <_fstat_r>:
 801d18c:	b538      	push	{r3, r4, r5, lr}
 801d18e:	4d07      	ldr	r5, [pc, #28]	; (801d1ac <_fstat_r+0x20>)
 801d190:	2300      	movs	r3, #0
 801d192:	4604      	mov	r4, r0
 801d194:	4608      	mov	r0, r1
 801d196:	4611      	mov	r1, r2
 801d198:	602b      	str	r3, [r5, #0]
 801d19a:	f7e8 f8a6 	bl	80052ea <_fstat>
 801d19e:	1c43      	adds	r3, r0, #1
 801d1a0:	d102      	bne.n	801d1a8 <_fstat_r+0x1c>
 801d1a2:	682b      	ldr	r3, [r5, #0]
 801d1a4:	b103      	cbz	r3, 801d1a8 <_fstat_r+0x1c>
 801d1a6:	6023      	str	r3, [r4, #0]
 801d1a8:	bd38      	pop	{r3, r4, r5, pc}
 801d1aa:	bf00      	nop
 801d1ac:	20004c98 	.word	0x20004c98

0801d1b0 <_isatty_r>:
 801d1b0:	b538      	push	{r3, r4, r5, lr}
 801d1b2:	4d06      	ldr	r5, [pc, #24]	; (801d1cc <_isatty_r+0x1c>)
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	4604      	mov	r4, r0
 801d1b8:	4608      	mov	r0, r1
 801d1ba:	602b      	str	r3, [r5, #0]
 801d1bc:	f7e8 f8a5 	bl	800530a <_isatty>
 801d1c0:	1c43      	adds	r3, r0, #1
 801d1c2:	d102      	bne.n	801d1ca <_isatty_r+0x1a>
 801d1c4:	682b      	ldr	r3, [r5, #0]
 801d1c6:	b103      	cbz	r3, 801d1ca <_isatty_r+0x1a>
 801d1c8:	6023      	str	r3, [r4, #0]
 801d1ca:	bd38      	pop	{r3, r4, r5, pc}
 801d1cc:	20004c98 	.word	0x20004c98

0801d1d0 <_lseek_r>:
 801d1d0:	b538      	push	{r3, r4, r5, lr}
 801d1d2:	4d07      	ldr	r5, [pc, #28]	; (801d1f0 <_lseek_r+0x20>)
 801d1d4:	4604      	mov	r4, r0
 801d1d6:	4608      	mov	r0, r1
 801d1d8:	4611      	mov	r1, r2
 801d1da:	2200      	movs	r2, #0
 801d1dc:	602a      	str	r2, [r5, #0]
 801d1de:	461a      	mov	r2, r3
 801d1e0:	f7e8 f89e 	bl	8005320 <_lseek>
 801d1e4:	1c43      	adds	r3, r0, #1
 801d1e6:	d102      	bne.n	801d1ee <_lseek_r+0x1e>
 801d1e8:	682b      	ldr	r3, [r5, #0]
 801d1ea:	b103      	cbz	r3, 801d1ee <_lseek_r+0x1e>
 801d1ec:	6023      	str	r3, [r4, #0]
 801d1ee:	bd38      	pop	{r3, r4, r5, pc}
 801d1f0:	20004c98 	.word	0x20004c98

0801d1f4 <_malloc_usable_size_r>:
 801d1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d1f8:	1f18      	subs	r0, r3, #4
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	bfbc      	itt	lt
 801d1fe:	580b      	ldrlt	r3, [r1, r0]
 801d200:	18c0      	addlt	r0, r0, r3
 801d202:	4770      	bx	lr

0801d204 <_read_r>:
 801d204:	b538      	push	{r3, r4, r5, lr}
 801d206:	4d07      	ldr	r5, [pc, #28]	; (801d224 <_read_r+0x20>)
 801d208:	4604      	mov	r4, r0
 801d20a:	4608      	mov	r0, r1
 801d20c:	4611      	mov	r1, r2
 801d20e:	2200      	movs	r2, #0
 801d210:	602a      	str	r2, [r5, #0]
 801d212:	461a      	mov	r2, r3
 801d214:	f7e8 f824 	bl	8005260 <_read>
 801d218:	1c43      	adds	r3, r0, #1
 801d21a:	d102      	bne.n	801d222 <_read_r+0x1e>
 801d21c:	682b      	ldr	r3, [r5, #0]
 801d21e:	b103      	cbz	r3, 801d222 <_read_r+0x1e>
 801d220:	6023      	str	r3, [r4, #0]
 801d222:	bd38      	pop	{r3, r4, r5, pc}
 801d224:	20004c98 	.word	0x20004c98

0801d228 <_init>:
 801d228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d22a:	bf00      	nop
 801d22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d22e:	bc08      	pop	{r3}
 801d230:	469e      	mov	lr, r3
 801d232:	4770      	bx	lr

0801d234 <_fini>:
 801d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d236:	bf00      	nop
 801d238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d23a:	bc08      	pop	{r3}
 801d23c:	469e      	mov	lr, r3
 801d23e:	4770      	bx	lr
